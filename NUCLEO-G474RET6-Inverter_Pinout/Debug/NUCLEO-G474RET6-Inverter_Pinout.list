
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b224  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  0800b404  0800b404  0001b404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b78c  0800b78c  00020128  2**0
                  CONTENTS
  4 .ARM          00000008  0800b78c  0800b78c  0001b78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b794  0800b794  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b794  0800b794  0001b794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b798  0800b798  0001b798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  0800b79c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  20000128  0800b8c4  00020128  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006b4  0800b8c4  000206b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cdf2  00000000  00000000  0002019b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c2c  00000000  00000000  0003cf8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001698  00000000  00000000  00040bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001167  00000000  00000000  00042258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a934  00000000  00000000  000433bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cc4e  00000000  00000000  0006dcf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114766  00000000  00000000  0008a941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b8c  00000000  00000000  0019f0a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ac  00000000  00000000  001a5c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000128 	.word	0x20000128
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b3ec 	.word	0x0800b3ec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000012c 	.word	0x2000012c
 800021c:	0800b3ec 	.word	0x0800b3ec

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b970 	b.w	8000dc4 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9e08      	ldr	r6, [sp, #32]
 8000b02:	460d      	mov	r5, r1
 8000b04:	4604      	mov	r4, r0
 8000b06:	460f      	mov	r7, r1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d14a      	bne.n	8000ba2 <__udivmoddi4+0xa6>
 8000b0c:	428a      	cmp	r2, r1
 8000b0e:	4694      	mov	ip, r2
 8000b10:	d965      	bls.n	8000bde <__udivmoddi4+0xe2>
 8000b12:	fab2 f382 	clz	r3, r2
 8000b16:	b143      	cbz	r3, 8000b2a <__udivmoddi4+0x2e>
 8000b18:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b1c:	f1c3 0220 	rsb	r2, r3, #32
 8000b20:	409f      	lsls	r7, r3
 8000b22:	fa20 f202 	lsr.w	r2, r0, r2
 8000b26:	4317      	orrs	r7, r2
 8000b28:	409c      	lsls	r4, r3
 8000b2a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b2e:	fa1f f58c 	uxth.w	r5, ip
 8000b32:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b36:	0c22      	lsrs	r2, r4, #16
 8000b38:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b3c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b40:	fb01 f005 	mul.w	r0, r1, r5
 8000b44:	4290      	cmp	r0, r2
 8000b46:	d90a      	bls.n	8000b5e <__udivmoddi4+0x62>
 8000b48:	eb1c 0202 	adds.w	r2, ip, r2
 8000b4c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b50:	f080 811c 	bcs.w	8000d8c <__udivmoddi4+0x290>
 8000b54:	4290      	cmp	r0, r2
 8000b56:	f240 8119 	bls.w	8000d8c <__udivmoddi4+0x290>
 8000b5a:	3902      	subs	r1, #2
 8000b5c:	4462      	add	r2, ip
 8000b5e:	1a12      	subs	r2, r2, r0
 8000b60:	b2a4      	uxth	r4, r4
 8000b62:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b66:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b6a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b6e:	fb00 f505 	mul.w	r5, r0, r5
 8000b72:	42a5      	cmp	r5, r4
 8000b74:	d90a      	bls.n	8000b8c <__udivmoddi4+0x90>
 8000b76:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b7e:	f080 8107 	bcs.w	8000d90 <__udivmoddi4+0x294>
 8000b82:	42a5      	cmp	r5, r4
 8000b84:	f240 8104 	bls.w	8000d90 <__udivmoddi4+0x294>
 8000b88:	4464      	add	r4, ip
 8000b8a:	3802      	subs	r0, #2
 8000b8c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b90:	1b64      	subs	r4, r4, r5
 8000b92:	2100      	movs	r1, #0
 8000b94:	b11e      	cbz	r6, 8000b9e <__udivmoddi4+0xa2>
 8000b96:	40dc      	lsrs	r4, r3
 8000b98:	2300      	movs	r3, #0
 8000b9a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0xbc>
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	f000 80ed 	beq.w	8000d86 <__udivmoddi4+0x28a>
 8000bac:	2100      	movs	r1, #0
 8000bae:	e9c6 0500 	strd	r0, r5, [r6]
 8000bb2:	4608      	mov	r0, r1
 8000bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb8:	fab3 f183 	clz	r1, r3
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	d149      	bne.n	8000c54 <__udivmoddi4+0x158>
 8000bc0:	42ab      	cmp	r3, r5
 8000bc2:	d302      	bcc.n	8000bca <__udivmoddi4+0xce>
 8000bc4:	4282      	cmp	r2, r0
 8000bc6:	f200 80f8 	bhi.w	8000dba <__udivmoddi4+0x2be>
 8000bca:	1a84      	subs	r4, r0, r2
 8000bcc:	eb65 0203 	sbc.w	r2, r5, r3
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d0e2      	beq.n	8000b9e <__udivmoddi4+0xa2>
 8000bd8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bdc:	e7df      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000bde:	b902      	cbnz	r2, 8000be2 <__udivmoddi4+0xe6>
 8000be0:	deff      	udf	#255	; 0xff
 8000be2:	fab2 f382 	clz	r3, r2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8090 	bne.w	8000d0c <__udivmoddi4+0x210>
 8000bec:	1a8a      	subs	r2, r1, r2
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f fe8c 	uxth.w	lr, ip
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bfc:	fb07 2015 	mls	r0, r7, r5, r2
 8000c00:	0c22      	lsrs	r2, r4, #16
 8000c02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c06:	fb0e f005 	mul.w	r0, lr, r5
 8000c0a:	4290      	cmp	r0, r2
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x124>
 8000c0e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c12:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x122>
 8000c18:	4290      	cmp	r0, r2
 8000c1a:	f200 80cb 	bhi.w	8000db4 <__udivmoddi4+0x2b8>
 8000c1e:	4645      	mov	r5, r8
 8000c20:	1a12      	subs	r2, r2, r0
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c28:	fb07 2210 	mls	r2, r7, r0, r2
 8000c2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c30:	fb0e fe00 	mul.w	lr, lr, r0
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x14e>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x14c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f200 80bb 	bhi.w	8000dbe <__udivmoddi4+0x2c2>
 8000c48:	4610      	mov	r0, r2
 8000c4a:	eba4 040e 	sub.w	r4, r4, lr
 8000c4e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c52:	e79f      	b.n	8000b94 <__udivmoddi4+0x98>
 8000c54:	f1c1 0720 	rsb	r7, r1, #32
 8000c58:	408b      	lsls	r3, r1
 8000c5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c62:	fa05 f401 	lsl.w	r4, r5, r1
 8000c66:	fa20 f307 	lsr.w	r3, r0, r7
 8000c6a:	40fd      	lsrs	r5, r7
 8000c6c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c70:	4323      	orrs	r3, r4
 8000c72:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c76:	fa1f fe8c 	uxth.w	lr, ip
 8000c7a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c7e:	0c1c      	lsrs	r4, r3, #16
 8000c80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c84:	fb08 f50e 	mul.w	r5, r8, lr
 8000c88:	42a5      	cmp	r5, r4
 8000c8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c8e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c92:	d90b      	bls.n	8000cac <__udivmoddi4+0x1b0>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c9c:	f080 8088 	bcs.w	8000db0 <__udivmoddi4+0x2b4>
 8000ca0:	42a5      	cmp	r5, r4
 8000ca2:	f240 8085 	bls.w	8000db0 <__udivmoddi4+0x2b4>
 8000ca6:	f1a8 0802 	sub.w	r8, r8, #2
 8000caa:	4464      	add	r4, ip
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	b29d      	uxth	r5, r3
 8000cb0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cb4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cb8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cbc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x1da>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ccc:	d26c      	bcs.n	8000da8 <__udivmoddi4+0x2ac>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	d96a      	bls.n	8000da8 <__udivmoddi4+0x2ac>
 8000cd2:	3b02      	subs	r3, #2
 8000cd4:	4464      	add	r4, ip
 8000cd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cda:	fba3 9502 	umull	r9, r5, r3, r2
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	42ac      	cmp	r4, r5
 8000ce4:	46c8      	mov	r8, r9
 8000ce6:	46ae      	mov	lr, r5
 8000ce8:	d356      	bcc.n	8000d98 <__udivmoddi4+0x29c>
 8000cea:	d053      	beq.n	8000d94 <__udivmoddi4+0x298>
 8000cec:	b156      	cbz	r6, 8000d04 <__udivmoddi4+0x208>
 8000cee:	ebb0 0208 	subs.w	r2, r0, r8
 8000cf2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cf6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cfa:	40ca      	lsrs	r2, r1
 8000cfc:	40cc      	lsrs	r4, r1
 8000cfe:	4317      	orrs	r7, r2
 8000d00:	e9c6 7400 	strd	r7, r4, [r6]
 8000d04:	4618      	mov	r0, r3
 8000d06:	2100      	movs	r1, #0
 8000d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0c:	f1c3 0120 	rsb	r1, r3, #32
 8000d10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d14:	fa20 f201 	lsr.w	r2, r0, r1
 8000d18:	fa25 f101 	lsr.w	r1, r5, r1
 8000d1c:	409d      	lsls	r5, r3
 8000d1e:	432a      	orrs	r2, r5
 8000d20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d24:	fa1f fe8c 	uxth.w	lr, ip
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d30:	0c11      	lsrs	r1, r2, #16
 8000d32:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d36:	fb00 f50e 	mul.w	r5, r0, lr
 8000d3a:	428d      	cmp	r5, r1
 8000d3c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x258>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d4a:	d22f      	bcs.n	8000dac <__udivmoddi4+0x2b0>
 8000d4c:	428d      	cmp	r5, r1
 8000d4e:	d92d      	bls.n	8000dac <__udivmoddi4+0x2b0>
 8000d50:	3802      	subs	r0, #2
 8000d52:	4461      	add	r1, ip
 8000d54:	1b49      	subs	r1, r1, r5
 8000d56:	b292      	uxth	r2, r2
 8000d58:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d5c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d64:	fb05 f10e 	mul.w	r1, r5, lr
 8000d68:	4291      	cmp	r1, r2
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x282>
 8000d6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d70:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d74:	d216      	bcs.n	8000da4 <__udivmoddi4+0x2a8>
 8000d76:	4291      	cmp	r1, r2
 8000d78:	d914      	bls.n	8000da4 <__udivmoddi4+0x2a8>
 8000d7a:	3d02      	subs	r5, #2
 8000d7c:	4462      	add	r2, ip
 8000d7e:	1a52      	subs	r2, r2, r1
 8000d80:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d84:	e738      	b.n	8000bf8 <__udivmoddi4+0xfc>
 8000d86:	4631      	mov	r1, r6
 8000d88:	4630      	mov	r0, r6
 8000d8a:	e708      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000d8c:	4639      	mov	r1, r7
 8000d8e:	e6e6      	b.n	8000b5e <__udivmoddi4+0x62>
 8000d90:	4610      	mov	r0, r2
 8000d92:	e6fb      	b.n	8000b8c <__udivmoddi4+0x90>
 8000d94:	4548      	cmp	r0, r9
 8000d96:	d2a9      	bcs.n	8000cec <__udivmoddi4+0x1f0>
 8000d98:	ebb9 0802 	subs.w	r8, r9, r2
 8000d9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000da0:	3b01      	subs	r3, #1
 8000da2:	e7a3      	b.n	8000cec <__udivmoddi4+0x1f0>
 8000da4:	4645      	mov	r5, r8
 8000da6:	e7ea      	b.n	8000d7e <__udivmoddi4+0x282>
 8000da8:	462b      	mov	r3, r5
 8000daa:	e794      	b.n	8000cd6 <__udivmoddi4+0x1da>
 8000dac:	4640      	mov	r0, r8
 8000dae:	e7d1      	b.n	8000d54 <__udivmoddi4+0x258>
 8000db0:	46d0      	mov	r8, sl
 8000db2:	e77b      	b.n	8000cac <__udivmoddi4+0x1b0>
 8000db4:	3d02      	subs	r5, #2
 8000db6:	4462      	add	r2, ip
 8000db8:	e732      	b.n	8000c20 <__udivmoddi4+0x124>
 8000dba:	4608      	mov	r0, r1
 8000dbc:	e70a      	b.n	8000bd4 <__udivmoddi4+0xd8>
 8000dbe:	4464      	add	r4, ip
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	e742      	b.n	8000c4a <__udivmoddi4+0x14e>

08000dc4 <__aeabi_idiv0>:
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08c      	sub	sp, #48	; 0x30
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2220      	movs	r2, #32
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f009 fa4e 	bl	800a282 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000de6:	4b33      	ldr	r3, [pc, #204]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000de8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000dee:	4b31      	ldr	r3, [pc, #196]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000df0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000df4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000df6:	4b2f      	ldr	r3, [pc, #188]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dfc:	4b2d      	ldr	r3, [pc, #180]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e02:	4b2c      	ldr	r3, [pc, #176]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e08:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e0e:	4b29      	ldr	r3, [pc, #164]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e10:	2204      	movs	r2, #4
 8000e12:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e14:	4b27      	ldr	r3, [pc, #156]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e1a:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000e20:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e26:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000e2e:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e30:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000e34:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e36:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e3c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e46:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e54:	4817      	ldr	r0, [pc, #92]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e56:	f001 fe8f 	bl	8002b78 <HAL_ADC_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000e60:	f000 fb72 	bl	8001548 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4811      	ldr	r0, [pc, #68]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e70:	f003 f924 	bl	80040bc <HAL_ADCEx_MultiModeConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000e7a:	f000 fb65 	bl	8001548 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_ADC1_Init+0xf0>)
 8000e80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e82:	2306      	movs	r3, #6
 8000e84:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000e86:	2307      	movs	r3, #7
 8000e88:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e8a:	237f      	movs	r3, #127	; 0x7f
 8000e8c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e8e:	2304      	movs	r3, #4
 8000e90:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4806      	ldr	r0, [pc, #24]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e9c:	f002 fb80 	bl	80035a0 <HAL_ADC_ConfigChannel>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000ea6:	f000 fb4f 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	3730      	adds	r7, #48	; 0x30
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000144 	.word	0x20000144
 8000eb8:	08600004 	.word	0x08600004

08000ebc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	2220      	movs	r2, #32
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f009 f9da 	bl	800a282 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ece:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000ed0:	4a2b      	ldr	r2, [pc, #172]	; (8000f80 <MX_ADC2_Init+0xc4>)
 8000ed2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000ed4:	4b29      	ldr	r3, [pc, #164]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000ed6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000eda:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000edc:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee2:	4b26      	ldr	r3, [pc, #152]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000ee8:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eee:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef4:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000ef6:	2204      	movs	r2, #4
 8000ef8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000efa:	4b20      	ldr	r3, [pc, #128]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f00:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000f06:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f36:	4811      	ldr	r0, [pc, #68]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000f38:	f001 fe1e 	bl	8002b78 <HAL_ADC_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000f42:	f000 fb01 	bl	8001548 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <MX_ADC2_Init+0xc8>)
 8000f48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f4a:	2306      	movs	r3, #6
 8000f4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f52:	237f      	movs	r3, #127	; 0x7f
 8000f54:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f56:	2304      	movs	r3, #4
 8000f58:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	4619      	mov	r1, r3
 8000f62:	4806      	ldr	r0, [pc, #24]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000f64:	f002 fb1c 	bl	80035a0 <HAL_ADC_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000f6e:	f000 faeb 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	3720      	adds	r7, #32
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200001b0 	.word	0x200001b0
 8000f80:	50000100 	.word	0x50000100
 8000f84:	19200040 	.word	0x19200040

08000f88 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b0a4      	sub	sp, #144	; 0x90
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fa4:	2254      	movs	r2, #84	; 0x54
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f009 f96a 	bl	800a282 <memset>
  if(adcHandle->Instance==ADC1)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fb6:	f040 80a8 	bne.w	800110a <HAL_ADC_MspInit+0x182>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000fc0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000fc4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f004 fd68 	bl	8005aa0 <HAL_RCCEx_PeriphCLKConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000fd6:	f000 fab7 	bl	8001548 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fda:	4b81      	ldr	r3, [pc, #516]	; (80011e0 <HAL_ADC_MspInit+0x258>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	4a7f      	ldr	r2, [pc, #508]	; (80011e0 <HAL_ADC_MspInit+0x258>)
 8000fe2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fe4:	4b7e      	ldr	r3, [pc, #504]	; (80011e0 <HAL_ADC_MspInit+0x258>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d10b      	bne.n	8001004 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000fec:	4b7d      	ldr	r3, [pc, #500]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8000fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff0:	4a7c      	ldr	r2, [pc, #496]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8000ff2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ff6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff8:	4b7a      	ldr	r3, [pc, #488]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8000ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001004:	4b77      	ldr	r3, [pc, #476]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8001006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001008:	4a76      	ldr	r2, [pc, #472]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 800100a:	f043 0304 	orr.w	r3, r3, #4
 800100e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001010:	4b74      	ldr	r3, [pc, #464]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8001012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	623b      	str	r3, [r7, #32]
 800101a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101c:	4b71      	ldr	r3, [pc, #452]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001020:	4a70      	ldr	r2, [pc, #448]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001028:	4b6e      	ldr	r3, [pc, #440]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	61fb      	str	r3, [r7, #28]
 8001032:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001034:	4b6b      	ldr	r3, [pc, #428]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001038:	4a6a      	ldr	r2, [pc, #424]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 800103a:	f043 0302 	orr.w	r3, r3, #2
 800103e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001040:	4b68      	ldr	r3, [pc, #416]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8001042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	61bb      	str	r3, [r7, #24]
 800104a:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800104c:	2304      	movs	r3, #4
 800104e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001050:	2303      	movs	r3, #3
 8001052:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001060:	4619      	mov	r1, r3
 8001062:	4861      	ldr	r0, [pc, #388]	; (80011e8 <HAL_ADC_MspInit+0x260>)
 8001064:	f003 fd44 	bl	8004af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8001068:	2302      	movs	r3, #2
 800106a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106c:	2303      	movs	r3, #3
 800106e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800107c:	4619      	mov	r1, r3
 800107e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001082:	f003 fd35 	bl	8004af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001086:	2303      	movs	r3, #3
 8001088:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108a:	2303      	movs	r3, #3
 800108c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001096:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800109a:	4619      	mov	r1, r3
 800109c:	4853      	ldr	r0, [pc, #332]	; (80011ec <HAL_ADC_MspInit+0x264>)
 800109e:	f003 fd27 	bl	8004af0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80010a2:	4b53      	ldr	r3, [pc, #332]	; (80011f0 <HAL_ADC_MspInit+0x268>)
 80010a4:	4a53      	ldr	r2, [pc, #332]	; (80011f4 <HAL_ADC_MspInit+0x26c>)
 80010a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80010a8:	4b51      	ldr	r3, [pc, #324]	; (80011f0 <HAL_ADC_MspInit+0x268>)
 80010aa:	2205      	movs	r2, #5
 80010ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ae:	4b50      	ldr	r3, [pc, #320]	; (80011f0 <HAL_ADC_MspInit+0x268>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010b4:	4b4e      	ldr	r3, [pc, #312]	; (80011f0 <HAL_ADC_MspInit+0x268>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010ba:	4b4d      	ldr	r3, [pc, #308]	; (80011f0 <HAL_ADC_MspInit+0x268>)
 80010bc:	2280      	movs	r2, #128	; 0x80
 80010be:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010c0:	4b4b      	ldr	r3, [pc, #300]	; (80011f0 <HAL_ADC_MspInit+0x268>)
 80010c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010c6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010c8:	4b49      	ldr	r3, [pc, #292]	; (80011f0 <HAL_ADC_MspInit+0x268>)
 80010ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010d0:	4b47      	ldr	r3, [pc, #284]	; (80011f0 <HAL_ADC_MspInit+0x268>)
 80010d2:	2220      	movs	r2, #32
 80010d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010d6:	4b46      	ldr	r3, [pc, #280]	; (80011f0 <HAL_ADC_MspInit+0x268>)
 80010d8:	2200      	movs	r2, #0
 80010da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010dc:	4844      	ldr	r0, [pc, #272]	; (80011f0 <HAL_ADC_MspInit+0x268>)
 80010de:	f003 f9d5 	bl	800448c <HAL_DMA_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 80010e8:	f000 fa2e 	bl	8001548 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a40      	ldr	r2, [pc, #256]	; (80011f0 <HAL_ADC_MspInit+0x268>)
 80010f0:	655a      	str	r2, [r3, #84]	; 0x54
 80010f2:	4a3f      	ldr	r2, [pc, #252]	; (80011f0 <HAL_ADC_MspInit+0x268>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	2012      	movs	r0, #18
 80010fe:	f003 f99d 	bl	800443c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001102:	2012      	movs	r0, #18
 8001104:	f003 f9b4 	bl	8004470 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001108:	e066      	b.n	80011d8 <HAL_ADC_MspInit+0x250>
  else if(adcHandle->Instance==ADC2)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a3a      	ldr	r2, [pc, #232]	; (80011f8 <HAL_ADC_MspInit+0x270>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d161      	bne.n	80011d8 <HAL_ADC_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001114:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800111a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800111e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001120:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001124:	4618      	mov	r0, r3
 8001126:	f004 fcbb 	bl	8005aa0 <HAL_RCCEx_PeriphCLKConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <HAL_ADC_MspInit+0x1ac>
      Error_Handler();
 8001130:	f000 fa0a 	bl	8001548 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001134:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <HAL_ADC_MspInit+0x258>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	4a29      	ldr	r2, [pc, #164]	; (80011e0 <HAL_ADC_MspInit+0x258>)
 800113c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800113e:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <HAL_ADC_MspInit+0x258>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d10b      	bne.n	800115e <HAL_ADC_MspInit+0x1d6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001146:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	4a26      	ldr	r2, [pc, #152]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 800114c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001152:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800115e:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	4a20      	ldr	r2, [pc, #128]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116a:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	4a1a      	ldr	r2, [pc, #104]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800118e:	230b      	movs	r3, #11
 8001190:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001192:	2303      	movs	r3, #3
 8001194:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011a2:	4619      	mov	r1, r3
 80011a4:	4810      	ldr	r0, [pc, #64]	; (80011e8 <HAL_ADC_MspInit+0x260>)
 80011a6:	f003 fca3 	bl	8004af0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 80011aa:	2301      	movs	r3, #1
 80011ac:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ae:	2303      	movs	r3, #3
 80011b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011be:	4619      	mov	r1, r3
 80011c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c4:	f003 fc94 	bl	8004af0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2100      	movs	r1, #0
 80011cc:	2012      	movs	r0, #18
 80011ce:	f003 f935 	bl	800443c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011d2:	2012      	movs	r0, #18
 80011d4:	f003 f94c 	bl	8004470 <HAL_NVIC_EnableIRQ>
}
 80011d8:	bf00      	nop
 80011da:	3790      	adds	r7, #144	; 0x90
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	2000027c 	.word	0x2000027c
 80011e4:	40021000 	.word	0x40021000
 80011e8:	48000800 	.word	0x48000800
 80011ec:	48000400 	.word	0x48000400
 80011f0:	2000021c 	.word	0x2000021c
 80011f4:	40020008 	.word	0x40020008
 80011f8:	50000100 	.word	0x50000100

080011fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <MX_DMA_Init+0x50>)
 8001204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001206:	4a11      	ldr	r2, [pc, #68]	; (800124c <MX_DMA_Init+0x50>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6493      	str	r3, [r2, #72]	; 0x48
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <MX_DMA_Init+0x50>)
 8001210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_DMA_Init+0x50>)
 800121c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800121e:	4a0b      	ldr	r2, [pc, #44]	; (800124c <MX_DMA_Init+0x50>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6493      	str	r3, [r2, #72]	; 0x48
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_DMA_Init+0x50>)
 8001228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	200b      	movs	r0, #11
 8001238:	f003 f900 	bl	800443c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800123c:	200b      	movs	r0, #11
 800123e:	f003 f917 	bl	8004470 <HAL_NVIC_EnableIRQ>

}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000

08001250 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	4b3f      	ldr	r3, [pc, #252]	; (8001364 <MX_GPIO_Init+0x114>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	4a3e      	ldr	r2, [pc, #248]	; (8001364 <MX_GPIO_Init+0x114>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001272:	4b3c      	ldr	r3, [pc, #240]	; (8001364 <MX_GPIO_Init+0x114>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800127e:	4b39      	ldr	r3, [pc, #228]	; (8001364 <MX_GPIO_Init+0x114>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4a38      	ldr	r2, [pc, #224]	; (8001364 <MX_GPIO_Init+0x114>)
 8001284:	f043 0320 	orr.w	r3, r3, #32
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4b36      	ldr	r3, [pc, #216]	; (8001364 <MX_GPIO_Init+0x114>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0320 	and.w	r3, r3, #32
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b33      	ldr	r3, [pc, #204]	; (8001364 <MX_GPIO_Init+0x114>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	4a32      	ldr	r2, [pc, #200]	; (8001364 <MX_GPIO_Init+0x114>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a2:	4b30      	ldr	r3, [pc, #192]	; (8001364 <MX_GPIO_Init+0x114>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <MX_GPIO_Init+0x114>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	4a2c      	ldr	r2, [pc, #176]	; (8001364 <MX_GPIO_Init+0x114>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ba:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <MX_GPIO_Init+0x114>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c6:	4b27      	ldr	r3, [pc, #156]	; (8001364 <MX_GPIO_Init+0x114>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	4a26      	ldr	r2, [pc, #152]	; (8001364 <MX_GPIO_Init+0x114>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d2:	4b24      	ldr	r3, [pc, #144]	; (8001364 <MX_GPIO_Init+0x114>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2120      	movs	r1, #32
 80012e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e6:	f003 fd85 	bl	8004df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2104      	movs	r1, #4
 80012ee:	481e      	ldr	r0, [pc, #120]	; (8001368 <MX_GPIO_Init+0x118>)
 80012f0:	f003 fd80 	bl	8004df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 80012f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4818      	ldr	r0, [pc, #96]	; (800136c <MX_GPIO_Init+0x11c>)
 800130c:	f003 fbf0 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8001310:	2320      	movs	r3, #32
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132a:	f003 fbe1 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 800132e:	2304      	movs	r3, #4
 8001330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4808      	ldr	r0, [pc, #32]	; (8001368 <MX_GPIO_Init+0x118>)
 8001346:	f003 fbd3 	bl	8004af0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2100      	movs	r1, #0
 800134e:	2028      	movs	r0, #40	; 0x28
 8001350:	f003 f874 	bl	800443c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001354:	2028      	movs	r0, #40	; 0x28
 8001356:	f003 f88b 	bl	8004470 <HAL_NVIC_EnableIRQ>

}
 800135a:	bf00      	nop
 800135c:	3728      	adds	r7, #40	; 0x28
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40021000 	.word	0x40021000
 8001368:	48000c00 	.word	0x48000c00
 800136c:	48000800 	.word	0x48000800

08001370 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	//		flag=1;
	//	}
	//Interupt Mode
	//	adc_vall = HAL_ADC_GetValue(&hadc1);
	//	HAL_ADC_Start_IT(&hadc1);
	adc_vall= (buffer[0]-1351)/40.95;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_ADC_ConvCpltCallback+0x50>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f2a3 5347 	subw	r3, r3, #1351	; 0x547
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f8f7 	bl	8000574 <__aeabi_ui2d>
 8001386:	a30c      	add	r3, pc, #48	; (adr r3, 80013b8 <HAL_ADC_ConvCpltCallback+0x48>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	f7ff fa96 	bl	80008bc <__aeabi_ddiv>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fb78 	bl	8000a8c <__aeabi_d2uiz>
 800139c:	4603      	mov	r3, r0
 800139e:	b29a      	uxth	r2, r3
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <HAL_ADC_ConvCpltCallback+0x54>)
 80013a2:	801a      	strh	r2, [r3, #0]
	flag = 1;
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_ADC_ConvCpltCallback+0x58>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	f3af 8000 	nop.w
 80013b8:	9999999a 	.word	0x9999999a
 80013bc:	40447999 	.word	0x40447999
 80013c0:	20000280 	.word	0x20000280
 80013c4:	20000286 	.word	0x20000286
 80013c8:	20000284 	.word	0x20000284

080013cc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	int nb_loop = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013d6:	f001 f932 	bl	800263e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013da:	f000 f859 	bl	8001490 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013de:	f7ff ff37 	bl	8001250 <MX_GPIO_Init>
	MX_DMA_Init();
 80013e2:	f7ff ff0b 	bl	80011fc <MX_DMA_Init>
	MX_ADC2_Init();
 80013e6:	f7ff fd69 	bl	8000ebc <MX_ADC2_Init>
	MX_ADC1_Init();
 80013ea:	f7ff fced 	bl	8000dc8 <MX_ADC1_Init>
	MX_TIM1_Init();
 80013ee:	f000 fa97 	bl	8001920 <MX_TIM1_Init>
	MX_TIM3_Init();
 80013f2:	f000 fb65 	bl	8001ac0 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 80013f6:	f000 fcab 	bl	8001d50 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 80013fa:	f000 fcf5 	bl	8001de8 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	//	HAL_ADC_Start_IT(&hadc1);
	//if(HAL_OK =! HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED)){
	//Error_Handler();

	if(HAL_OK != HAL_ADC_Start_DMA(&hadc1, buffer, ADC_BUF_SIZE)){
 80013fe:	2201      	movs	r2, #1
 8001400:	491b      	ldr	r1, [pc, #108]	; (8001470 <main+0xa4>)
 8001402:	481c      	ldr	r0, [pc, #112]	; (8001474 <main+0xa8>)
 8001404:	f001 fd7a 	bl	8002efc <HAL_ADC_Start_DMA>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <main+0x46>
		Error_Handler();
 800140e:	f000 f89b 	bl	8001548 <Error_Handler>
	}

	codeur_start();
 8001412:	f000 fddd 	bl	8001fd0 <codeur_start>

	/*pwm_start();
	set_pwm_alpha(70);*/


	Shell_Init();
 8001416:	f000 fecb 	bl	80021b0 <Shell_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 800141a:	f000 ff09 	bl	8002230 <Shell_Loop>
		if(flag){
 800141e:	4b16      	ldr	r3, [pc, #88]	; (8001478 <main+0xac>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f9      	beq.n	800141a <main+0x4e>
			nb_loop = (nb_loop + 1)%20000;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3301      	adds	r3, #1
 800142a:	4a14      	ldr	r2, [pc, #80]	; (800147c <main+0xb0>)
 800142c:	fb82 1203 	smull	r1, r2, r2, r3
 8001430:	1351      	asrs	r1, r2, #13
 8001432:	17da      	asrs	r2, r3, #31
 8001434:	1a8a      	subs	r2, r1, r2
 8001436:	f644 6120 	movw	r1, #20000	; 0x4e20
 800143a:	fb01 f202 	mul.w	r2, r1, r2
 800143e:	1a9b      	subs	r3, r3, r2
 8001440:	607b      	str	r3, [r7, #4]
			if(nb_loop == 0){
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10f      	bne.n	8001468 <main+0x9c>
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Valeur : %4d \r\n", adc_vall);
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <main+0xb4>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <main+0xb8>)
 800144e:	2140      	movs	r1, #64	; 0x40
 8001450:	480d      	ldr	r0, [pc, #52]	; (8001488 <main+0xbc>)
 8001452:	f008 fe9f 	bl	800a194 <sniprintf>
 8001456:	6038      	str	r0, [r7, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	b29a      	uxth	r2, r3
 800145c:	f04f 33ff 	mov.w	r3, #4294967295
 8001460:	4909      	ldr	r1, [pc, #36]	; (8001488 <main+0xbc>)
 8001462:	480a      	ldr	r0, [pc, #40]	; (800148c <main+0xc0>)
 8001464:	f006 fd30 	bl	8007ec8 <HAL_UART_Transmit>
			}
			flag = 0;
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <main+0xac>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
		Shell_Loop();
 800146e:	e7d4      	b.n	800141a <main+0x4e>
 8001470:	20000280 	.word	0x20000280
 8001474:	20000144 	.word	0x20000144
 8001478:	20000284 	.word	0x20000284
 800147c:	68db8bad 	.word	0x68db8bad
 8001480:	20000286 	.word	0x20000286
 8001484:	0800b404 	.word	0x0800b404
 8001488:	200004ac 	.word	0x200004ac
 800148c:	20000370 	.word	0x20000370

08001490 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b094      	sub	sp, #80	; 0x50
 8001494:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001496:	f107 0318 	add.w	r3, r7, #24
 800149a:	2238      	movs	r2, #56	; 0x38
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f008 feef 	bl	800a282 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f003 fcda 	bl	8004e6c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014b8:	2301      	movs	r3, #1
 80014ba:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014c0:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c2:	2302      	movs	r3, #2
 80014c4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014c6:	2303      	movs	r3, #3
 80014c8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80014ca:	2306      	movs	r3, #6
 80014cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80014ce:	2355      	movs	r3, #85	; 0x55
 80014d0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014d2:	2302      	movs	r3, #2
 80014d4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014d6:	2302      	movs	r3, #2
 80014d8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014da:	2302      	movs	r3, #2
 80014dc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014de:	f107 0318 	add.w	r3, r7, #24
 80014e2:	4618      	mov	r0, r3
 80014e4:	f003 fd76 	bl	8004fd4 <HAL_RCC_OscConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <SystemClock_Config+0x62>
	{
		Error_Handler();
 80014ee:	f000 f82b 	bl	8001548 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f2:	230f      	movs	r3, #15
 80014f4:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f6:	2303      	movs	r3, #3
 80014f8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2104      	movs	r1, #4
 800150a:	4618      	mov	r0, r3
 800150c:	f004 f87a 	bl	8005604 <HAL_RCC_ClockConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8001516:	f000 f817 	bl	8001548 <Error_Handler>
	}
}
 800151a:	bf00      	nop
 800151c:	3750      	adds	r7, #80	; 0x50
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d101      	bne.n	800153a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001536:	f001 f89b 	bl	8002670 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40001000 	.word	0x40001000

08001548 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800154c:	b672      	cpsid	i
}
 800154e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001550:	e7fe      	b.n	8001550 <Error_Handler+0x8>
	...

08001554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <HAL_MspInit+0x44>)
 800155c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155e:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <HAL_MspInit+0x44>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6613      	str	r3, [r2, #96]	; 0x60
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <HAL_MspInit+0x44>)
 8001568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_MspInit+0x44>)
 8001574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001576:	4a08      	ldr	r2, [pc, #32]	; (8001598 <HAL_MspInit+0x44>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157c:	6593      	str	r3, [r2, #88]	; 0x58
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_MspInit+0x44>)
 8001580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800158a:	f003 fd13 	bl	8004fb4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000

0800159c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08c      	sub	sp, #48	; 0x30
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015ac:	4b2c      	ldr	r3, [pc, #176]	; (8001660 <HAL_InitTick+0xc4>)
 80015ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b0:	4a2b      	ldr	r2, [pc, #172]	; (8001660 <HAL_InitTick+0xc4>)
 80015b2:	f043 0310 	orr.w	r3, r3, #16
 80015b6:	6593      	str	r3, [r2, #88]	; 0x58
 80015b8:	4b29      	ldr	r3, [pc, #164]	; (8001660 <HAL_InitTick+0xc4>)
 80015ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015bc:	f003 0310 	and.w	r3, r3, #16
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015c4:	f107 020c 	add.w	r2, r7, #12
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	4611      	mov	r1, r2
 80015ce:	4618      	mov	r0, r3
 80015d0:	f004 f9ee 	bl	80059b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015d4:	f004 f9c0 	bl	8005958 <HAL_RCC_GetPCLK1Freq>
 80015d8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015dc:	4a21      	ldr	r2, [pc, #132]	; (8001664 <HAL_InitTick+0xc8>)
 80015de:	fba2 2303 	umull	r2, r3, r2, r3
 80015e2:	0c9b      	lsrs	r3, r3, #18
 80015e4:	3b01      	subs	r3, #1
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015e8:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <HAL_InitTick+0xcc>)
 80015ea:	4a20      	ldr	r2, [pc, #128]	; (800166c <HAL_InitTick+0xd0>)
 80015ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015ee:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <HAL_InitTick+0xcc>)
 80015f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015f4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015f6:	4a1c      	ldr	r2, [pc, #112]	; (8001668 <HAL_InitTick+0xcc>)
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <HAL_InitTick+0xcc>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001602:	4b19      	ldr	r3, [pc, #100]	; (8001668 <HAL_InitTick+0xcc>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001608:	4817      	ldr	r0, [pc, #92]	; (8001668 <HAL_InitTick+0xcc>)
 800160a:	f004 fc97 	bl	8005f3c <HAL_TIM_Base_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001614:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001618:	2b00      	cmp	r3, #0
 800161a:	d11b      	bne.n	8001654 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800161c:	4812      	ldr	r0, [pc, #72]	; (8001668 <HAL_InitTick+0xcc>)
 800161e:	f004 fce5 	bl	8005fec <HAL_TIM_Base_Start_IT>
 8001622:	4603      	mov	r3, r0
 8001624:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001628:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800162c:	2b00      	cmp	r3, #0
 800162e:	d111      	bne.n	8001654 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001630:	2036      	movs	r0, #54	; 0x36
 8001632:	f002 ff1d 	bl	8004470 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d808      	bhi.n	800164e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	2036      	movs	r0, #54	; 0x36
 8001642:	f002 fefb 	bl	800443c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001646:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <HAL_InitTick+0xd4>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	e002      	b.n	8001654 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001654:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001658:	4618      	mov	r0, r3
 800165a:	3730      	adds	r7, #48	; 0x30
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40021000 	.word	0x40021000
 8001664:	431bde83 	.word	0x431bde83
 8001668:	20000288 	.word	0x20000288
 800166c:	40001000 	.word	0x40001000
 8001670:	200000c4 	.word	0x200000c4

08001674 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001678:	e7fe      	b.n	8001678 <NMI_Handler+0x4>

0800167a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 800167e:	e7fe      	b.n	800167e <HardFault_Handler+0x4>

08001680 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8001684:	e7fe      	b.n	8001684 <MemManage_Handler+0x4>

08001686 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 800168a:	e7fe      	b.n	800168a <BusFault_Handler+0x4>

0800168c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8001690:	e7fe      	b.n	8001690 <UsageFault_Handler+0x4>

08001692 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */
	idx++;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <SysTick_Handler+0x20>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	4a05      	ldr	r2, [pc, #20]	; (80016dc <SysTick_Handler+0x20>)
 80016c8:	6013      	str	r3, [r2, #0]
	if(idx==500){
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <SysTick_Handler+0x20>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016d2:	d101      	bne.n	80016d8 <SysTick_Handler+0x1c>
		calc_speed();
 80016d4:	f000 fca0 	bl	8002018 <calc_speed>
	/* USER CODE END SysTick_IRQn 0 */

	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	2000049c 	.word	0x2000049c

080016e0 <DMA1_Channel1_IRQHandler>:

/**
 * @brief This function handles DMA1 channel1 global interrupt.
 */
void DMA1_Channel1_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

	/* USER CODE END DMA1_Channel1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc1);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <DMA1_Channel1_IRQHandler+0x10>)
 80016e6:	f003 f8b4 	bl	8004852 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	/* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	2000021c 	.word	0x2000021c

080016f4 <ADC1_2_IRQHandler>:

/**
 * @brief This function handles ADC1 and ADC2 global interrupt.
 */
void ADC1_2_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN ADC1_2_IRQn 0 */

	/* USER CODE END ADC1_2_IRQn 0 */
	HAL_ADC_IRQHandler(&hadc1);
 80016f8:	4803      	ldr	r0, [pc, #12]	; (8001708 <ADC1_2_IRQHandler+0x14>)
 80016fa:	f001 fcd3 	bl	80030a4 <HAL_ADC_IRQHandler>
	HAL_ADC_IRQHandler(&hadc2);
 80016fe:	4803      	ldr	r0, [pc, #12]	; (800170c <ADC1_2_IRQHandler+0x18>)
 8001700:	f001 fcd0 	bl	80030a4 <HAL_ADC_IRQHandler>
	/* USER CODE BEGIN ADC1_2_IRQn 1 */

	/* USER CODE END ADC1_2_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000144 	.word	0x20000144
 800170c:	200001b0 	.word	0x200001b0

08001710 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <TIM3_IRQHandler+0x10>)
 8001716:	f005 f845 	bl	80067a4 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000324 	.word	0x20000324

08001724 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
 */
void USART2_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <USART2_IRQHandler+0x10>)
 800172a:	f006 fcb9 	bl	80080a0 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000370 	.word	0x20000370

08001738 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
 */
void USART3_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */

	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <USART3_IRQHandler+0x10>)
 800173e:	f006 fcaf 	bl	80080a0 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */

	/* USER CODE END USART3_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000400 	.word	0x20000400

0800174c <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001750:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001754:	f003 fb66 	bl	8004e24 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <TIM6_DAC_IRQHandler+0x10>)
 8001762:	f005 f81f 	bl	80067a4 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000288 	.word	0x20000288

08001770 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return 1;
 8001774:	2301      	movs	r3, #1
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <_kill>:

int _kill(int pid, int sig)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800178a:	f008 fe25 	bl	800a3d8 <__errno>
 800178e:	4603      	mov	r3, r0
 8001790:	2216      	movs	r2, #22
 8001792:	601a      	str	r2, [r3, #0]
  return -1;
 8001794:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <_exit>:

void _exit (int status)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017a8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ffe7 	bl	8001780 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017b2:	e7fe      	b.n	80017b2 <_exit+0x12>

080017b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	e00a      	b.n	80017dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017c6:	f3af 8000 	nop.w
 80017ca:	4601      	mov	r1, r0
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	60ba      	str	r2, [r7, #8]
 80017d2:	b2ca      	uxtb	r2, r1
 80017d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	3301      	adds	r3, #1
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	dbf0      	blt.n	80017c6 <_read+0x12>
  }

  return len;
 80017e4:	687b      	ldr	r3, [r7, #4]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b086      	sub	sp, #24
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	60f8      	str	r0, [r7, #12]
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	e009      	b.n	8001814 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	60ba      	str	r2, [r7, #8]
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3301      	adds	r3, #1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	429a      	cmp	r2, r3
 800181a:	dbf1      	blt.n	8001800 <_write+0x12>
  }
  return len;
 800181c:	687b      	ldr	r3, [r7, #4]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_close>:

int _close(int file)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800184e:	605a      	str	r2, [r3, #4]
  return 0;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <_isatty>:

int _isatty(int file)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001898:	4a14      	ldr	r2, [pc, #80]	; (80018ec <_sbrk+0x5c>)
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <_sbrk+0x60>)
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a4:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <_sbrk+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d102      	bne.n	80018b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <_sbrk+0x64>)
 80018ae:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <_sbrk+0x68>)
 80018b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d207      	bcs.n	80018d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c0:	f008 fd8a 	bl	800a3d8 <__errno>
 80018c4:	4603      	mov	r3, r0
 80018c6:	220c      	movs	r2, #12
 80018c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295
 80018ce:	e009      	b.n	80018e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018d6:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <_sbrk+0x64>)
 80018e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018e2:	68fb      	ldr	r3, [r7, #12]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20020000 	.word	0x20020000
 80018f0:	00000400 	.word	0x00000400
 80018f4:	200002d4 	.word	0x200002d4
 80018f8:	200006b8 	.word	0x200006b8

080018fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <SystemInit+0x20>)
 8001902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001906:	4a05      	ldr	r2, [pc, #20]	; (800191c <SystemInit+0x20>)
 8001908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800190c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b09c      	sub	sp, #112	; 0x70
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001926:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001934:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001940:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
 8001950:	615a      	str	r2, [r3, #20]
 8001952:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	2234      	movs	r2, #52	; 0x34
 8001958:	2100      	movs	r1, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f008 fc91 	bl	800a282 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001960:	4b55      	ldr	r3, [pc, #340]	; (8001ab8 <MX_TIM1_Init+0x198>)
 8001962:	4a56      	ldr	r2, [pc, #344]	; (8001abc <MX_TIM1_Init+0x19c>)
 8001964:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 8001966:	4b54      	ldr	r3, [pc, #336]	; (8001ab8 <MX_TIM1_Init+0x198>)
 8001968:	2208      	movs	r2, #8
 800196a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800196c:	4b52      	ldr	r3, [pc, #328]	; (8001ab8 <MX_TIM1_Init+0x198>)
 800196e:	2220      	movs	r2, #32
 8001970:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8001972:	4b51      	ldr	r3, [pc, #324]	; (8001ab8 <MX_TIM1_Init+0x198>)
 8001974:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001978:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800197a:	4b4f      	ldr	r3, [pc, #316]	; (8001ab8 <MX_TIM1_Init+0x198>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001980:	4b4d      	ldr	r3, [pc, #308]	; (8001ab8 <MX_TIM1_Init+0x198>)
 8001982:	2200      	movs	r2, #0
 8001984:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001986:	4b4c      	ldr	r3, [pc, #304]	; (8001ab8 <MX_TIM1_Init+0x198>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800198c:	484a      	ldr	r0, [pc, #296]	; (8001ab8 <MX_TIM1_Init+0x198>)
 800198e:	f004 fad5 	bl	8005f3c <HAL_TIM_Base_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001998:	f7ff fdd6 	bl	8001548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800199c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019a6:	4619      	mov	r1, r3
 80019a8:	4843      	ldr	r0, [pc, #268]	; (8001ab8 <MX_TIM1_Init+0x198>)
 80019aa:	f005 f98f 	bl	8006ccc <HAL_TIM_ConfigClockSource>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80019b4:	f7ff fdc8 	bl	8001548 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019b8:	483f      	ldr	r0, [pc, #252]	; (8001ab8 <MX_TIM1_Init+0x198>)
 80019ba:	f004 fb8f 	bl	80060dc <HAL_TIM_PWM_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80019c4:	f7ff fdc0 	bl	8001548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019c8:	2320      	movs	r3, #32
 80019ca:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80019cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019d0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019da:	4619      	mov	r1, r3
 80019dc:	4836      	ldr	r0, [pc, #216]	; (8001ab8 <MX_TIM1_Init+0x198>)
 80019de:	f006 f85d 	bl	8007a9c <HAL_TIMEx_MasterConfigSynchronization>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80019e8:	f7ff fdae 	bl	8001548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ec:	2360      	movs	r3, #96	; 0x60
 80019ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 512;
 80019f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f6:	2300      	movs	r3, #0
 80019f8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019fa:	2300      	movs	r3, #0
 80019fc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a02:	2300      	movs	r3, #0
 8001a04:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a0e:	2200      	movs	r2, #0
 8001a10:	4619      	mov	r1, r3
 8001a12:	4829      	ldr	r0, [pc, #164]	; (8001ab8 <MX_TIM1_Init+0x198>)
 8001a14:	f005 f846 	bl	8006aa4 <HAL_TIM_PWM_ConfigChannel>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8001a1e:	f7ff fd93 	bl	8001548 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a26:	2204      	movs	r2, #4
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4823      	ldr	r0, [pc, #140]	; (8001ab8 <MX_TIM1_Init+0x198>)
 8001a2c:	f005 f83a 	bl	8006aa4 <HAL_TIM_PWM_ConfigChannel>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 8001a36:	f7ff fd87 	bl	8001548 <Error_Handler>
  }
  sConfigOC.Pulse = 85;
 8001a3a:	2355      	movs	r3, #85	; 0x55
 8001a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a42:	2208      	movs	r2, #8
 8001a44:	4619      	mov	r1, r3
 8001a46:	481c      	ldr	r0, [pc, #112]	; (8001ab8 <MX_TIM1_Init+0x198>)
 8001a48:	f005 f82c 	bl	8006aa4 <HAL_TIM_PWM_ConfigChannel>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8001a52:	f7ff fd79 	bl	8001548 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8001a56:	4818      	ldr	r0, [pc, #96]	; (8001ab8 <MX_TIM1_Init+0x198>)
 8001a58:	f006 f968 	bl	8007d2c <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 30;
 8001a68:	231e      	movs	r3, #30
 8001a6a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	4619      	mov	r1, r3
 8001a98:	4807      	ldr	r0, [pc, #28]	; (8001ab8 <MX_TIM1_Init+0x198>)
 8001a9a:	f006 f895 	bl	8007bc8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8001aa4:	f7ff fd50 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001aa8:	4803      	ldr	r0, [pc, #12]	; (8001ab8 <MX_TIM1_Init+0x198>)
 8001aaa:	f000 f8e9 	bl	8001c80 <HAL_TIM_MspPostInit>

}
 8001aae:	bf00      	nop
 8001ab0:	3770      	adds	r7, #112	; 0x70
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200002d8 	.word	0x200002d8
 8001abc:	40012c00 	.word	0x40012c00

08001ac0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08c      	sub	sp, #48	; 0x30
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2224      	movs	r2, #36	; 0x24
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f008 fbd7 	bl	800a282 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ade:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <MX_TIM3_Init+0xa4>)
 8001ae0:	4a21      	ldr	r2, [pc, #132]	; (8001b68 <MX_TIM3_Init+0xa8>)
 8001ae2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ae4:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <MX_TIM3_Init+0xa4>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aea:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <MX_TIM3_Init+0xa4>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001af0:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <MX_TIM3_Init+0xa4>)
 8001af2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001af6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af8:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <MX_TIM3_Init+0xa4>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afe:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <MX_TIM3_Init+0xa4>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b04:	2303      	movs	r3, #3
 8001b06:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b20:	2300      	movs	r3, #0
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	480d      	ldr	r0, [pc, #52]	; (8001b64 <MX_TIM3_Init+0xa4>)
 8001b30:	f004 fce4 	bl	80064fc <HAL_TIM_Encoder_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001b3a:	f7ff fd05 	bl	8001548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b46:	463b      	mov	r3, r7
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4806      	ldr	r0, [pc, #24]	; (8001b64 <MX_TIM3_Init+0xa4>)
 8001b4c:	f005 ffa6 	bl	8007a9c <HAL_TIMEx_MasterConfigSynchronization>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001b56:	f7ff fcf7 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b5a:	bf00      	nop
 8001b5c:	3730      	adds	r7, #48	; 0x30
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000324 	.word	0x20000324
 8001b68:	40000400 	.word	0x40000400

08001b6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <HAL_TIM_Base_MspInit+0x38>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d10b      	bne.n	8001b96 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <HAL_TIM_Base_MspInit+0x3c>)
 8001b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b82:	4a09      	ldr	r2, [pc, #36]	; (8001ba8 <HAL_TIM_Base_MspInit+0x3c>)
 8001b84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b88:	6613      	str	r3, [r2, #96]	; 0x60
 8001b8a:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <HAL_TIM_Base_MspInit+0x3c>)
 8001b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40012c00 	.word	0x40012c00
 8001ba8:	40021000 	.word	0x40021000

08001bac <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a2a      	ldr	r2, [pc, #168]	; (8001c74 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d14d      	bne.n	8001c6a <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bce:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd2:	4a29      	ldr	r2, [pc, #164]	; (8001c78 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	6593      	str	r3, [r2, #88]	; 0x58
 8001bda:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bea:	4a23      	ldr	r2, [pc, #140]	; (8001c78 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf2:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c02:	4a1d      	ldr	r2, [pc, #116]	; (8001c78 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001c04:	f043 0304 	orr.w	r3, r3, #4
 8001c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001c16:	2350      	movs	r3, #80	; 0x50
 8001c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c26:	2302      	movs	r3, #2
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c34:	f002 ff5c 	bl	8004af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	4809      	ldr	r0, [pc, #36]	; (8001c7c <HAL_TIM_Encoder_MspInit+0xd0>)
 8001c56:	f002 ff4b 	bl	8004af0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	201d      	movs	r0, #29
 8001c60:	f002 fbec 	bl	800443c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c64:	201d      	movs	r0, #29
 8001c66:	f002 fc03 	bl	8004470 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	3728      	adds	r7, #40	; 0x28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40000400 	.word	0x40000400
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	48000800 	.word	0x48000800

08001c80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a29      	ldr	r2, [pc, #164]	; (8001d44 <HAL_TIM_MspPostInit+0xc4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d14b      	bne.n	8001d3a <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca2:	4b29      	ldr	r3, [pc, #164]	; (8001d48 <HAL_TIM_MspPostInit+0xc8>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	4a28      	ldr	r2, [pc, #160]	; (8001d48 <HAL_TIM_MspPostInit+0xc8>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cae:	4b26      	ldr	r3, [pc, #152]	; (8001d48 <HAL_TIM_MspPostInit+0xc8>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <HAL_TIM_MspPostInit+0xc8>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	4a22      	ldr	r2, [pc, #136]	; (8001d48 <HAL_TIM_MspPostInit+0xc8>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc6:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <HAL_TIM_MspPostInit+0xc8>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001cd2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ce4:	2306      	movs	r3, #6
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	4619      	mov	r1, r3
 8001cee:	4817      	ldr	r0, [pc, #92]	; (8001d4c <HAL_TIM_MspPostInit+0xcc>)
 8001cf0:	f002 fefe 	bl	8004af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001cf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001d06:	2304      	movs	r3, #4
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001d0a:	f107 0314 	add.w	r3, r7, #20
 8001d0e:	4619      	mov	r1, r3
 8001d10:	480e      	ldr	r0, [pc, #56]	; (8001d4c <HAL_TIM_MspPostInit+0xcc>)
 8001d12:	f002 feed 	bl	8004af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001d16:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d24:	2300      	movs	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d28:	2306      	movs	r3, #6
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	4619      	mov	r1, r3
 8001d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d36:	f002 fedb 	bl	8004af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d3a:	bf00      	nop
 8001d3c:	3728      	adds	r7, #40	; 0x28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40012c00 	.word	0x40012c00
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	48000400 	.word	0x48000400

08001d50 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d54:	4b22      	ldr	r3, [pc, #136]	; (8001de0 <MX_USART2_UART_Init+0x90>)
 8001d56:	4a23      	ldr	r2, [pc, #140]	; (8001de4 <MX_USART2_UART_Init+0x94>)
 8001d58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d5a:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <MX_USART2_UART_Init+0x90>)
 8001d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d62:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <MX_USART2_UART_Init+0x90>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <MX_USART2_UART_Init+0x90>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <MX_USART2_UART_Init+0x90>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d74:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <MX_USART2_UART_Init+0x90>)
 8001d76:	220c      	movs	r2, #12
 8001d78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d7a:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <MX_USART2_UART_Init+0x90>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d80:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <MX_USART2_UART_Init+0x90>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d86:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <MX_USART2_UART_Init+0x90>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d8c:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <MX_USART2_UART_Init+0x90>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d92:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <MX_USART2_UART_Init+0x90>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d98:	4811      	ldr	r0, [pc, #68]	; (8001de0 <MX_USART2_UART_Init+0x90>)
 8001d9a:	f006 f845 	bl	8007e28 <HAL_UART_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001da4:	f7ff fbd0 	bl	8001548 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001da8:	2100      	movs	r1, #0
 8001daa:	480d      	ldr	r0, [pc, #52]	; (8001de0 <MX_USART2_UART_Init+0x90>)
 8001dac:	f007 ffe7 	bl	8009d7e <HAL_UARTEx_SetTxFifoThreshold>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001db6:	f7ff fbc7 	bl	8001548 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4808      	ldr	r0, [pc, #32]	; (8001de0 <MX_USART2_UART_Init+0x90>)
 8001dbe:	f008 f81c 	bl	8009dfa <HAL_UARTEx_SetRxFifoThreshold>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001dc8:	f7ff fbbe 	bl	8001548 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001dcc:	4804      	ldr	r0, [pc, #16]	; (8001de0 <MX_USART2_UART_Init+0x90>)
 8001dce:	f007 ff9d 	bl	8009d0c <HAL_UARTEx_DisableFifoMode>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001dd8:	f7ff fbb6 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000370 	.word	0x20000370
 8001de4:	40004400 	.word	0x40004400

08001de8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001dec:	4b22      	ldr	r3, [pc, #136]	; (8001e78 <MX_USART3_UART_Init+0x90>)
 8001dee:	4a23      	ldr	r2, [pc, #140]	; (8001e7c <MX_USART3_UART_Init+0x94>)
 8001df0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001df2:	4b21      	ldr	r3, [pc, #132]	; (8001e78 <MX_USART3_UART_Init+0x90>)
 8001df4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001df8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfa:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <MX_USART3_UART_Init+0x90>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e00:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <MX_USART3_UART_Init+0x90>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e06:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <MX_USART3_UART_Init+0x90>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e0c:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <MX_USART3_UART_Init+0x90>)
 8001e0e:	220c      	movs	r2, #12
 8001e10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e12:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <MX_USART3_UART_Init+0x90>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e18:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <MX_USART3_UART_Init+0x90>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <MX_USART3_UART_Init+0x90>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e24:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <MX_USART3_UART_Init+0x90>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e2a:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <MX_USART3_UART_Init+0x90>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e30:	4811      	ldr	r0, [pc, #68]	; (8001e78 <MX_USART3_UART_Init+0x90>)
 8001e32:	f005 fff9 	bl	8007e28 <HAL_UART_Init>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001e3c:	f7ff fb84 	bl	8001548 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e40:	2100      	movs	r1, #0
 8001e42:	480d      	ldr	r0, [pc, #52]	; (8001e78 <MX_USART3_UART_Init+0x90>)
 8001e44:	f007 ff9b 	bl	8009d7e <HAL_UARTEx_SetTxFifoThreshold>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001e4e:	f7ff fb7b 	bl	8001548 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e52:	2100      	movs	r1, #0
 8001e54:	4808      	ldr	r0, [pc, #32]	; (8001e78 <MX_USART3_UART_Init+0x90>)
 8001e56:	f007 ffd0 	bl	8009dfa <HAL_UARTEx_SetRxFifoThreshold>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001e60:	f7ff fb72 	bl	8001548 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001e64:	4804      	ldr	r0, [pc, #16]	; (8001e78 <MX_USART3_UART_Init+0x90>)
 8001e66:	f007 ff51 	bl	8009d0c <HAL_UARTEx_DisableFifoMode>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001e70:	f7ff fb6a 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000400 	.word	0x20000400
 8001e7c:	40004800 	.word	0x40004800

08001e80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b0a0      	sub	sp, #128	; 0x80
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e98:	f107 0318 	add.w	r3, r7, #24
 8001e9c:	2254      	movs	r2, #84	; 0x54
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f008 f9ee 	bl	800a282 <memset>
  if(uartHandle->Instance==USART2)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a45      	ldr	r2, [pc, #276]	; (8001fc0 <HAL_UART_MspInit+0x140>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d13f      	bne.n	8001f30 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb8:	f107 0318 	add.w	r3, r7, #24
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f003 fdef 	bl	8005aa0 <HAL_RCCEx_PeriphCLKConfig>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ec8:	f7ff fb3e 	bl	8001548 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ecc:	4b3d      	ldr	r3, [pc, #244]	; (8001fc4 <HAL_UART_MspInit+0x144>)
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	4a3c      	ldr	r2, [pc, #240]	; (8001fc4 <HAL_UART_MspInit+0x144>)
 8001ed2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed8:	4b3a      	ldr	r3, [pc, #232]	; (8001fc4 <HAL_UART_MspInit+0x144>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee4:	4b37      	ldr	r3, [pc, #220]	; (8001fc4 <HAL_UART_MspInit+0x144>)
 8001ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee8:	4a36      	ldr	r2, [pc, #216]	; (8001fc4 <HAL_UART_MspInit+0x144>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef0:	4b34      	ldr	r3, [pc, #208]	; (8001fc4 <HAL_UART_MspInit+0x144>)
 8001ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001efc:	230c      	movs	r3, #12
 8001efe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f0c:	2307      	movs	r3, #7
 8001f0e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f10:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f14:	4619      	mov	r1, r3
 8001f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f1a:	f002 fde9 	bl	8004af0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2100      	movs	r1, #0
 8001f22:	2026      	movs	r0, #38	; 0x26
 8001f24:	f002 fa8a 	bl	800443c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f28:	2026      	movs	r0, #38	; 0x26
 8001f2a:	f002 faa1 	bl	8004470 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f2e:	e043      	b.n	8001fb8 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a24      	ldr	r2, [pc, #144]	; (8001fc8 <HAL_UART_MspInit+0x148>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d13e      	bne.n	8001fb8 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f42:	f107 0318 	add.w	r3, r7, #24
 8001f46:	4618      	mov	r0, r3
 8001f48:	f003 fdaa 	bl	8005aa0 <HAL_RCCEx_PeriphCLKConfig>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001f52:	f7ff faf9 	bl	8001548 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f56:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_UART_MspInit+0x144>)
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	4a1a      	ldr	r2, [pc, #104]	; (8001fc4 <HAL_UART_MspInit+0x144>)
 8001f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f60:	6593      	str	r3, [r2, #88]	; 0x58
 8001f62:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <HAL_UART_MspInit+0x144>)
 8001f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <HAL_UART_MspInit+0x144>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f72:	4a14      	ldr	r2, [pc, #80]	; (8001fc4 <HAL_UART_MspInit+0x144>)
 8001f74:	f043 0304 	orr.w	r3, r3, #4
 8001f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_UART_MspInit+0x144>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f94:	2300      	movs	r3, #0
 8001f96:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f98:	2307      	movs	r3, #7
 8001f9a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	480a      	ldr	r0, [pc, #40]	; (8001fcc <HAL_UART_MspInit+0x14c>)
 8001fa4:	f002 fda4 	bl	8004af0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2100      	movs	r1, #0
 8001fac:	2027      	movs	r0, #39	; 0x27
 8001fae:	f002 fa45 	bl	800443c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001fb2:	2027      	movs	r0, #39	; 0x27
 8001fb4:	f002 fa5c 	bl	8004470 <HAL_NVIC_EnableIRQ>
}
 8001fb8:	bf00      	nop
 8001fba:	3780      	adds	r7, #128	; 0x80
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40004400 	.word	0x40004400
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40004800 	.word	0x40004800
 8001fcc:	48000800 	.word	0x48000800

08001fd0 <codeur_start>:
 * Cette fonction démarre le compteur d'encodeur sur le Timer 3 en mode interruption. L'encodeur est
 * configuré pour surveiller les deux canaux(TIM_CHANNEL_ALL).
 *
 * @note Vous devez appeler cette fonction pour activer l'acquisition des impulsions de l'encodeur.
 */
void codeur_start(void){
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_ALL);
 8001fd4:	213c      	movs	r1, #60	; 0x3c
 8001fd6:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <codeur_start+0x10>)
 8001fd8:	f004 fb36 	bl	8006648 <HAL_TIM_Encoder_Start_IT>
}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000324 	.word	0x20000324

08001fe4 <HAL_TIM_IC_CaptureCallback>:
 *
 * @param htim Un pointeur vers la structure TIM_HandleTypeDef associée à l'interruption.
 *
 * @note Cette fonction est destinée à être utilisée en tant que rappel (callback) pour gérer la capture d'interruption du Timer.
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(&htim3); //valeur du compteur absolue
 8001fec:	4b07      	ldr	r3, [pc, #28]	; (800200c <HAL_TIM_IC_CaptureCallback+0x28>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	4a07      	ldr	r2, [pc, #28]	; (8002010 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8001ff4:	6013      	str	r3, [r2, #0]
	pos = (int16_t)counter; //valeur du compteur avec les valeurs négatives
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	b21a      	sxth	r2, r3
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_TIM_IC_CaptureCallback+0x30>)
 8001ffe:	801a      	strh	r2, [r3, #0]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	20000324 	.word	0x20000324
 8002010:	20000490 	.word	0x20000490
 8002014:	20000494 	.word	0x20000494

08002018 <calc_speed>:
 * La vitesse est exprimée en fronts par seconde (front/s) et est stockée dans la variable 'vitesse'.
 * Après le calcul, la variable 'old_pos' est mise à jour avec la valeur actuelle de 'pos', et 'idx' est réinitialisé à 0.
 *
 * @note Cette fonction doit être appelée toutes les 500ms à l'aide de systick pour mettre à jour la vitesse en temps réel.
 */
void calc_speed(){
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
	vitesse=(pos-old_pos)*1000/dt; //vitesse en front/s
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <calc_speed+0x44>)
 800201e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002022:	461a      	mov	r2, r3
 8002024:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <calc_speed+0x48>)
 8002026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002030:	fb03 f202 	mul.w	r2, r3, r2
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <calc_speed+0x4c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	fb92 f3f3 	sdiv	r3, r2, r3
 800203c:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <calc_speed+0x50>)
 800203e:	6013      	str	r3, [r2, #0]
	old_pos=pos;
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <calc_speed+0x44>)
 8002042:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <calc_speed+0x48>)
 8002048:	801a      	strh	r2, [r3, #0]
	idx =0;
 800204a:	4b08      	ldr	r3, [pc, #32]	; (800206c <calc_speed+0x54>)
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000494 	.word	0x20000494
 8002060:	20000496 	.word	0x20000496
 8002064:	20000004 	.word	0x20000004
 8002068:	20000498 	.word	0x20000498
 800206c:	2000049c 	.word	0x2000049c

08002070 <pwm_start>:
 * Cette fonction démarre le PWM sur les canaux 1 et 2 du Timer 1.
 * Elle active la sortie PWM et la sortie complémentaire PWM (PWMN) sur ces canaux.
 *
 * @note Cette fonction doit être appelée après avoir configuré les paramètres PWM appropriés.
 */
void pwm_start(void){
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002074:	2100      	movs	r1, #0
 8002076:	480a      	ldr	r0, [pc, #40]	; (80020a0 <pwm_start+0x30>)
 8002078:	f004 f892 	bl	80061a0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800207c:	2100      	movs	r1, #0
 800207e:	4808      	ldr	r0, [pc, #32]	; (80020a0 <pwm_start+0x30>)
 8002080:	f005 fbec 	bl	800785c <HAL_TIMEx_PWMN_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002084:	2104      	movs	r1, #4
 8002086:	4806      	ldr	r0, [pc, #24]	; (80020a0 <pwm_start+0x30>)
 8002088:	f004 f88a 	bl	80061a0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800208c:	2104      	movs	r1, #4
 800208e:	4804      	ldr	r0, [pc, #16]	; (80020a0 <pwm_start+0x30>)
 8002090:	f005 fbe4 	bl	800785c <HAL_TIMEx_PWMN_Start>

	aTemp=50;
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <pwm_start+0x34>)
 8002096:	2232      	movs	r2, #50	; 0x32
 8002098:	601a      	str	r2, [r3, #0]

}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200002d8 	.word	0x200002d8
 80020a4:	200004a0 	.word	0x200004a0

080020a8 <pwm_stop>:
 * Cette fonction arrete le PWM sur les canaux 1 et 2 du Timer 1.
 * Elle désactive la sortie PWM et la sortie complémentaire PWM (PWMN) sur ces canaux.
 *
 */

void pwm_stop(void){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
	set_pwm_alpha(50);
 80020ac:	2032      	movs	r0, #50	; 0x32
 80020ae:	f000 f815 	bl	80020dc <set_pwm_alpha>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80020b2:	2100      	movs	r1, #0
 80020b4:	4808      	ldr	r0, [pc, #32]	; (80020d8 <pwm_stop+0x30>)
 80020b6:	f004 f985 	bl	80063c4 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80020ba:	2100      	movs	r1, #0
 80020bc:	4806      	ldr	r0, [pc, #24]	; (80020d8 <pwm_stop+0x30>)
 80020be:	f005 fc8f 	bl	80079e0 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80020c2:	2104      	movs	r1, #4
 80020c4:	4804      	ldr	r0, [pc, #16]	; (80020d8 <pwm_stop+0x30>)
 80020c6:	f004 f97d 	bl	80063c4 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80020ca:	2104      	movs	r1, #4
 80020cc:	4802      	ldr	r0, [pc, #8]	; (80020d8 <pwm_stop+0x30>)
 80020ce:	f005 fc87 	bl	80079e0 <HAL_TIMEx_PWMN_Stop>
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	200002d8 	.word	0x200002d8

080020dc <set_pwm_alpha>:
 *
 * @param alpha La valeur du paramètre alpha en pourcentage (entre 0 et 100).
 *
 * @note Assurez-vous que le Timer 1 est configuré correctement pour le fonctionnement PWM avant d'appeler cette fonction.
 */
void set_pwm_alpha(int alpha){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	int a1;
	int a2;
	int aTransi=aTemp;
 80020e4:	4b2f      	ldr	r3, [pc, #188]	; (80021a4 <set_pwm_alpha+0xc8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	617b      	str	r3, [r7, #20]

	if (alpha > aTransi){
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	dd26      	ble.n	8002140 <set_pwm_alpha+0x64>
		while(aTransi != alpha){
 80020f2:	e021      	b.n	8002138 <set_pwm_alpha+0x5c>

			aTransi++;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	3301      	adds	r3, #1
 80020f8:	617b      	str	r3, [r7, #20]
			a1=alpha_MAX*aTransi/PWM_MAX;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	029b      	lsls	r3, r3, #10
 80020fe:	4a2a      	ldr	r2, [pc, #168]	; (80021a8 <set_pwm_alpha+0xcc>)
 8002100:	fb82 1203 	smull	r1, r2, r2, r3
 8002104:	1152      	asrs	r2, r2, #5
 8002106:	17db      	asrs	r3, r3, #31
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	613b      	str	r3, [r7, #16]
			a2=alpha_MAX*(PWM_MAX-aTransi)/PWM_MAX;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8002112:	029b      	lsls	r3, r3, #10
 8002114:	4a24      	ldr	r2, [pc, #144]	; (80021a8 <set_pwm_alpha+0xcc>)
 8002116:	fb82 1203 	smull	r1, r2, r2, r3
 800211a:	1152      	asrs	r2, r2, #5
 800211c:	17db      	asrs	r3, r3, #31
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,a1);
 8002122:	4b22      	ldr	r3, [pc, #136]	; (80021ac <set_pwm_alpha+0xd0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,a2);
 800212a:	4b20      	ldr	r3, [pc, #128]	; (80021ac <set_pwm_alpha+0xd0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(50);
 8002132:	2032      	movs	r0, #50	; 0x32
 8002134:	f000 faba 	bl	80026ac <HAL_Delay>
		while(aTransi != alpha){
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	429a      	cmp	r2, r3
 800213e:	d1d9      	bne.n	80020f4 <set_pwm_alpha+0x18>
		}
	}

	if (alpha < aTransi){
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	429a      	cmp	r2, r3
 8002146:	da26      	bge.n	8002196 <set_pwm_alpha+0xba>
		while(aTransi != alpha){
 8002148:	e021      	b.n	800218e <set_pwm_alpha+0xb2>

			aTransi--;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	3b01      	subs	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
			a1=alpha_MAX*aTransi/PWM_MAX;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	029b      	lsls	r3, r3, #10
 8002154:	4a14      	ldr	r2, [pc, #80]	; (80021a8 <set_pwm_alpha+0xcc>)
 8002156:	fb82 1203 	smull	r1, r2, r2, r3
 800215a:	1152      	asrs	r2, r2, #5
 800215c:	17db      	asrs	r3, r3, #31
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	613b      	str	r3, [r7, #16]
			a2=alpha_MAX*(PWM_MAX-aTransi)/PWM_MAX;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8002168:	029b      	lsls	r3, r3, #10
 800216a:	4a0f      	ldr	r2, [pc, #60]	; (80021a8 <set_pwm_alpha+0xcc>)
 800216c:	fb82 1203 	smull	r1, r2, r2, r3
 8002170:	1152      	asrs	r2, r2, #5
 8002172:	17db      	asrs	r3, r3, #31
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,a1);
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <set_pwm_alpha+0xd0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,a2);
 8002180:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <set_pwm_alpha+0xd0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(50);
 8002188:	2032      	movs	r0, #50	; 0x32
 800218a:	f000 fa8f 	bl	80026ac <HAL_Delay>
		while(aTransi != alpha){
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	429a      	cmp	r2, r3
 8002194:	d1d9      	bne.n	800214a <set_pwm_alpha+0x6e>
		}
	}
	aTemp = alpha;
 8002196:	4a03      	ldr	r2, [pc, #12]	; (80021a4 <set_pwm_alpha+0xc8>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6013      	str	r3, [r2, #0]

}
 800219c:	bf00      	nop
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	200004a0 	.word	0x200004a0
 80021a8:	51eb851f 	.word	0x51eb851f
 80021ac:	200002d8 	.word	0x200002d8

080021b0 <Shell_Init>:
/**
 * @brief Fonction d'initialisation du Shell
 * @note Affiche un message d'accueil lors du lançement du programme
 */

void Shell_Init(void){
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 80021b4:	2224      	movs	r2, #36	; 0x24
 80021b6:	2100      	movs	r1, #0
 80021b8:	4816      	ldr	r0, [pc, #88]	; (8002214 <Shell_Init+0x64>)
 80021ba:	f008 f862 	bl	800a282 <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 80021be:	2240      	movs	r2, #64	; 0x40
 80021c0:	2100      	movs	r1, #0
 80021c2:	4815      	ldr	r0, [pc, #84]	; (8002218 <Shell_Init+0x68>)
 80021c4:	f008 f85d 	bl	800a282 <memset>
 80021c8:	4b14      	ldr	r3, [pc, #80]	; (800221c <Shell_Init+0x6c>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 80021ce:	2240      	movs	r2, #64	; 0x40
 80021d0:	2100      	movs	r1, #0
 80021d2:	4813      	ldr	r0, [pc, #76]	; (8002220 <Shell_Init+0x70>)
 80021d4:	f008 f855 	bl	800a282 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80021d8:	2201      	movs	r2, #1
 80021da:	4910      	ldr	r1, [pc, #64]	; (800221c <Shell_Init+0x6c>)
 80021dc:	4811      	ldr	r0, [pc, #68]	; (8002224 <Shell_Init+0x74>)
 80021de:	f005 ff09 	bl	8007ff4 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 80021e2:	4811      	ldr	r0, [pc, #68]	; (8002228 <Shell_Init+0x78>)
 80021e4:	f7fe f826 	bl	8000234 <strlen>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	f04f 33ff 	mov.w	r3, #4294967295
 80021f0:	490d      	ldr	r1, [pc, #52]	; (8002228 <Shell_Init+0x78>)
 80021f2:	480c      	ldr	r0, [pc, #48]	; (8002224 <Shell_Init+0x74>)
 80021f4:	f005 fe68 	bl	8007ec8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 80021f8:	480c      	ldr	r0, [pc, #48]	; (800222c <Shell_Init+0x7c>)
 80021fa:	f7fe f81b 	bl	8000234 <strlen>
 80021fe:	4603      	mov	r3, r0
 8002200:	b29a      	uxth	r2, r3
 8002202:	f04f 33ff 	mov.w	r3, #4294967295
 8002206:	4909      	ldr	r1, [pc, #36]	; (800222c <Shell_Init+0x7c>)
 8002208:	4806      	ldr	r0, [pc, #24]	; (8002224 <Shell_Init+0x74>)
 800220a:	f005 fe5d 	bl	8007ec8 <HAL_UART_Transmit>
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000530 	.word	0x20000530
 8002218:	200004ec 	.word	0x200004ec
 800221c:	200004a8 	.word	0x200004a8
 8002220:	200004ac 	.word	0x200004ac
 8002224:	20000370 	.word	0x20000370
 8002228:	20000024 	.word	0x20000024
 800222c:	20000008 	.word	0x20000008

08002230 <Shell_Loop>:

/**
 * @brief Cette fonction tourne en boucle afin de recevoir et d'exécuter les commandes du Shell
 */
void Shell_Loop(void){
 8002230:	b580      	push	{r7, lr}
 8002232:	b08a      	sub	sp, #40	; 0x28
 8002234:	af00      	add	r7, sp, #0
	if(uartRxReceived){ //Condition verifiée lors de la réception d'un nouveau caractère UART
 8002236:	4b9b      	ldr	r3, [pc, #620]	; (80024a4 <Shell_Loop+0x274>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d05b      	beq.n	80022f6 <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 800223e:	4b9a      	ldr	r3, [pc, #616]	; (80024a8 <Shell_Loop+0x278>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b08      	cmp	r3, #8
 8002244:	d034      	beq.n	80022b0 <Shell_Loop+0x80>
 8002246:	2b0d      	cmp	r3, #13
 8002248:	d142      	bne.n	80022d0 <Shell_Loop+0xa0>
		case ASCII_CR: //Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800224a:	f04f 33ff 	mov.w	r3, #4294967295
 800224e:	2203      	movs	r2, #3
 8002250:	4996      	ldr	r1, [pc, #600]	; (80024ac <Shell_Loop+0x27c>)
 8002252:	4897      	ldr	r0, [pc, #604]	; (80024b0 <Shell_Loop+0x280>)
 8002254:	f005 fe38 	bl	8007ec8 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8002258:	4b96      	ldr	r3, [pc, #600]	; (80024b4 <Shell_Loop+0x284>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a96      	ldr	r2, [pc, #600]	; (80024b8 <Shell_Loop+0x288>)
 800225e:	2100      	movs	r1, #0
 8002260:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 8002262:	4b96      	ldr	r3, [pc, #600]	; (80024bc <Shell_Loop+0x28c>)
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8002268:	4995      	ldr	r1, [pc, #596]	; (80024c0 <Shell_Loop+0x290>)
 800226a:	4893      	ldr	r0, [pc, #588]	; (80024b8 <Shell_Loop+0x288>)
 800226c:	f008 f812 	bl	800a294 <strtok>
 8002270:	4603      	mov	r3, r0
 8002272:	4a94      	ldr	r2, [pc, #592]	; (80024c4 <Shell_Loop+0x294>)
 8002274:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8002276:	e010      	b.n	800229a <Shell_Loop+0x6a>
				argv[argc++] = token;
 8002278:	4b90      	ldr	r3, [pc, #576]	; (80024bc <Shell_Loop+0x28c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	498f      	ldr	r1, [pc, #572]	; (80024bc <Shell_Loop+0x28c>)
 8002280:	600a      	str	r2, [r1, #0]
 8002282:	4a90      	ldr	r2, [pc, #576]	; (80024c4 <Shell_Loop+0x294>)
 8002284:	6812      	ldr	r2, [r2, #0]
 8002286:	4990      	ldr	r1, [pc, #576]	; (80024c8 <Shell_Loop+0x298>)
 8002288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 800228c:	498c      	ldr	r1, [pc, #560]	; (80024c0 <Shell_Loop+0x290>)
 800228e:	2000      	movs	r0, #0
 8002290:	f008 f800 	bl	800a294 <strtok>
 8002294:	4603      	mov	r3, r0
 8002296:	4a8b      	ldr	r2, [pc, #556]	; (80024c4 <Shell_Loop+0x294>)
 8002298:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800229a:	4b8a      	ldr	r3, [pc, #552]	; (80024c4 <Shell_Loop+0x294>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1ea      	bne.n	8002278 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 80022a2:	4b84      	ldr	r3, [pc, #528]	; (80024b4 <Shell_Loop+0x284>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 80022a8:	4b88      	ldr	r3, [pc, #544]	; (80024cc <Shell_Loop+0x29c>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
			break;
 80022ae:	e01f      	b.n	80022f0 <Shell_Loop+0xc0>
		case ASCII_BACK: //Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 80022b0:	4b80      	ldr	r3, [pc, #512]	; (80024b4 <Shell_Loop+0x284>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	1e5a      	subs	r2, r3, #1
 80022b6:	497f      	ldr	r1, [pc, #508]	; (80024b4 <Shell_Loop+0x284>)
 80022b8:	600a      	str	r2, [r1, #0]
 80022ba:	4a7f      	ldr	r2, [pc, #508]	; (80024b8 <Shell_Loop+0x288>)
 80022bc:	2100      	movs	r1, #0
 80022be:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 80022c0:	f04f 33ff 	mov.w	r3, #4294967295
 80022c4:	2204      	movs	r2, #4
 80022c6:	4982      	ldr	r1, [pc, #520]	; (80024d0 <Shell_Loop+0x2a0>)
 80022c8:	4879      	ldr	r0, [pc, #484]	; (80024b0 <Shell_Loop+0x280>)
 80022ca:	f005 fdfd 	bl	8007ec8 <HAL_UART_Transmit>
			break;
 80022ce:	e00f      	b.n	80022f0 <Shell_Loop+0xc0>

		default: //Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80022d0:	4b78      	ldr	r3, [pc, #480]	; (80024b4 <Shell_Loop+0x284>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	4977      	ldr	r1, [pc, #476]	; (80024b4 <Shell_Loop+0x284>)
 80022d8:	600a      	str	r2, [r1, #0]
 80022da:	4a73      	ldr	r2, [pc, #460]	; (80024a8 <Shell_Loop+0x278>)
 80022dc:	7811      	ldrb	r1, [r2, #0]
 80022de:	4a76      	ldr	r2, [pc, #472]	; (80024b8 <Shell_Loop+0x288>)
 80022e0:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80022e2:	f04f 33ff 	mov.w	r3, #4294967295
 80022e6:	2201      	movs	r2, #1
 80022e8:	496f      	ldr	r1, [pc, #444]	; (80024a8 <Shell_Loop+0x278>)
 80022ea:	4871      	ldr	r0, [pc, #452]	; (80024b0 <Shell_Loop+0x280>)
 80022ec:	f005 fdec 	bl	8007ec8 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 80022f0:	4b6c      	ldr	r3, [pc, #432]	; (80024a4 <Shell_Loop+0x274>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){ //Condition vérifiant la validitée d'une commande
 80022f6:	4b75      	ldr	r3, [pc, #468]	; (80024cc <Shell_Loop+0x29c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 8147 	beq.w	800258e <Shell_Loop+0x35e>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 8002300:	4b71      	ldr	r3, [pc, #452]	; (80024c8 <Shell_Loop+0x298>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4973      	ldr	r1, [pc, #460]	; (80024d4 <Shell_Loop+0x2a4>)
 8002306:	4618      	mov	r0, r3
 8002308:	f7fd ff8a 	bl	8000220 <strcmp>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d107      	bne.n	8002322 <Shell_Loop+0xf2>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 8002312:	f04f 33ff 	mov.w	r3, #4294967295
 8002316:	221a      	movs	r2, #26
 8002318:	496f      	ldr	r1, [pc, #444]	; (80024d8 <Shell_Loop+0x2a8>)
 800231a:	4865      	ldr	r0, [pc, #404]	; (80024b0 <Shell_Loop+0x280>)
 800231c:	f005 fdd4 	bl	8007ec8 <HAL_UART_Transmit>
 8002320:	e12b      	b.n	800257a <Shell_Loop+0x34a>
		}
		else if(strcmp(argv[0],"help")==0){//Fonction help renvoyant la notice des fonctions spécifiées
 8002322:	4b69      	ldr	r3, [pc, #420]	; (80024c8 <Shell_Loop+0x298>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	496d      	ldr	r1, [pc, #436]	; (80024dc <Shell_Loop+0x2ac>)
 8002328:	4618      	mov	r0, r3
 800232a:	f7fd ff79 	bl	8000220 <strcmp>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d126      	bne.n	8002382 <Shell_Loop+0x152>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 8002334:	4a6a      	ldr	r2, [pc, #424]	; (80024e0 <Shell_Loop+0x2b0>)
 8002336:	2140      	movs	r1, #64	; 0x40
 8002338:	486a      	ldr	r0, [pc, #424]	; (80024e4 <Shell_Loop+0x2b4>)
 800233a:	f007 ff2b 	bl	800a194 <sniprintf>
 800233e:	60b8      	str	r0, [r7, #8]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	b29a      	uxth	r2, r3
 8002344:	f04f 33ff 	mov.w	r3, #4294967295
 8002348:	4966      	ldr	r1, [pc, #408]	; (80024e4 <Shell_Loop+0x2b4>)
 800234a:	4859      	ldr	r0, [pc, #356]	; (80024b0 <Shell_Loop+0x280>)
 800234c:	f005 fdbc 	bl	8007ec8 <HAL_UART_Transmit>
			if(strcmp(argv[1],"speed")==0){
 8002350:	4b5d      	ldr	r3, [pc, #372]	; (80024c8 <Shell_Loop+0x298>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	4964      	ldr	r1, [pc, #400]	; (80024e8 <Shell_Loop+0x2b8>)
 8002356:	4618      	mov	r0, r3
 8002358:	f7fd ff62 	bl	8000220 <strcmp>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	f040 810b 	bne.w	800257a <Shell_Loop+0x34a>
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Prend en argument un rapport cyclique entre 0 et 100\r\n");
 8002364:	4a61      	ldr	r2, [pc, #388]	; (80024ec <Shell_Loop+0x2bc>)
 8002366:	2140      	movs	r1, #64	; 0x40
 8002368:	485e      	ldr	r0, [pc, #376]	; (80024e4 <Shell_Loop+0x2b4>)
 800236a:	f007 ff13 	bl	800a194 <sniprintf>
 800236e:	6078      	str	r0, [r7, #4]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	b29a      	uxth	r2, r3
 8002374:	f04f 33ff 	mov.w	r3, #4294967295
 8002378:	495a      	ldr	r1, [pc, #360]	; (80024e4 <Shell_Loop+0x2b4>)
 800237a:	484d      	ldr	r0, [pc, #308]	; (80024b0 <Shell_Loop+0x280>)
 800237c:	f005 fda4 	bl	8007ec8 <HAL_UART_Transmit>
 8002380:	e0fb      	b.n	800257a <Shell_Loop+0x34a>
			}
		}
		else if(strcmp(argv[0],"speed")==0){//Fonction permettant de choisir le sens de rotation et la vitesse du moteur
 8002382:	4b51      	ldr	r3, [pc, #324]	; (80024c8 <Shell_Loop+0x298>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4958      	ldr	r1, [pc, #352]	; (80024e8 <Shell_Loop+0x2b8>)
 8002388:	4618      	mov	r0, r3
 800238a:	f7fd ff49 	bl	8000220 <strcmp>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d154      	bne.n	800243e <Shell_Loop+0x20e>
			if(atoi(argv[1])>=0){//La valeur de vitesse reçue étant une chaine de caractères ASCII, atoi permet de la convertir en entier
 8002394:	4b4c      	ldr	r3, [pc, #304]	; (80024c8 <Shell_Loop+0x298>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4618      	mov	r0, r3
 800239a:	f007 fdbb 	bl	8009f14 <atoi>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	db37      	blt.n	8002414 <Shell_Loop+0x1e4>
				if(atoi(argv[1])<=100){
 80023a4:	4b48      	ldr	r3, [pc, #288]	; (80024c8 <Shell_Loop+0x298>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f007 fdb3 	bl	8009f14 <atoi>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b64      	cmp	r3, #100	; 0x64
 80023b2:	dc1d      	bgt.n	80023f0 <Shell_Loop+0x1c0>
					set_pwm_alpha(atoi(argv[1]));//Appelle à la fonction permettant de changer le rapport cyclique
 80023b4:	4b44      	ldr	r3, [pc, #272]	; (80024c8 <Shell_Loop+0x298>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f007 fdab 	bl	8009f14 <atoi>
 80023be:	4603      	mov	r3, r0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fe8b 	bl	80020dc <set_pwm_alpha>
					int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Nouveau alpha = %d\r\n",atoi(argv[1]));
 80023c6:	4b40      	ldr	r3, [pc, #256]	; (80024c8 <Shell_Loop+0x298>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f007 fda2 	bl	8009f14 <atoi>
 80023d0:	4603      	mov	r3, r0
 80023d2:	4a47      	ldr	r2, [pc, #284]	; (80024f0 <Shell_Loop+0x2c0>)
 80023d4:	2140      	movs	r1, #64	; 0x40
 80023d6:	4843      	ldr	r0, [pc, #268]	; (80024e4 <Shell_Loop+0x2b4>)
 80023d8:	f007 fedc 	bl	800a194 <sniprintf>
 80023dc:	60f8      	str	r0, [r7, #12]
					HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	f04f 33ff 	mov.w	r3, #4294967295
 80023e6:	493f      	ldr	r1, [pc, #252]	; (80024e4 <Shell_Loop+0x2b4>)
 80023e8:	4831      	ldr	r0, [pc, #196]	; (80024b0 <Shell_Loop+0x280>)
 80023ea:	f005 fd6d 	bl	8007ec8 <HAL_UART_Transmit>
 80023ee:	e0c4      	b.n	800257a <Shell_Loop+0x34a>
				}
				else{//Sécuritée permettant de ne pas avoir un rapport cyclique supérieur à 100
					set_pwm_alpha(100);
 80023f0:	2064      	movs	r0, #100	; 0x64
 80023f2:	f7ff fe73 	bl	80020dc <set_pwm_alpha>
					int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Nouveau alpha = 100\r\n");
 80023f6:	4a3f      	ldr	r2, [pc, #252]	; (80024f4 <Shell_Loop+0x2c4>)
 80023f8:	2140      	movs	r1, #64	; 0x40
 80023fa:	483a      	ldr	r0, [pc, #232]	; (80024e4 <Shell_Loop+0x2b4>)
 80023fc:	f007 feca 	bl	800a194 <sniprintf>
 8002400:	6138      	str	r0, [r7, #16]
					HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	b29a      	uxth	r2, r3
 8002406:	f04f 33ff 	mov.w	r3, #4294967295
 800240a:	4936      	ldr	r1, [pc, #216]	; (80024e4 <Shell_Loop+0x2b4>)
 800240c:	4828      	ldr	r0, [pc, #160]	; (80024b0 <Shell_Loop+0x280>)
 800240e:	f005 fd5b 	bl	8007ec8 <HAL_UART_Transmit>
 8002412:	e0b2      	b.n	800257a <Shell_Loop+0x34a>
				}
			}
			else{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Erreur alpha doit être compris entre 0 et 100\r\n",atoi(argv[1]));
 8002414:	4b2c      	ldr	r3, [pc, #176]	; (80024c8 <Shell_Loop+0x298>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	4618      	mov	r0, r3
 800241a:	f007 fd7b 	bl	8009f14 <atoi>
 800241e:	4603      	mov	r3, r0
 8002420:	4a35      	ldr	r2, [pc, #212]	; (80024f8 <Shell_Loop+0x2c8>)
 8002422:	2140      	movs	r1, #64	; 0x40
 8002424:	482f      	ldr	r0, [pc, #188]	; (80024e4 <Shell_Loop+0x2b4>)
 8002426:	f007 feb5 	bl	800a194 <sniprintf>
 800242a:	6178      	str	r0, [r7, #20]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	b29a      	uxth	r2, r3
 8002430:	f04f 33ff 	mov.w	r3, #4294967295
 8002434:	492b      	ldr	r1, [pc, #172]	; (80024e4 <Shell_Loop+0x2b4>)
 8002436:	481e      	ldr	r0, [pc, #120]	; (80024b0 <Shell_Loop+0x280>)
 8002438:	f005 fd46 	bl	8007ec8 <HAL_UART_Transmit>
 800243c:	e09d      	b.n	800257a <Shell_Loop+0x34a>
			}
		}

		else if(strcmp(argv[0],"start")==0){//Fonction permettant d'allumer les PWM
 800243e:	4b22      	ldr	r3, [pc, #136]	; (80024c8 <Shell_Loop+0x298>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	492e      	ldr	r1, [pc, #184]	; (80024fc <Shell_Loop+0x2cc>)
 8002444:	4618      	mov	r0, r3
 8002446:	f7fd feeb 	bl	8000220 <strcmp>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d15d      	bne.n	800250c <Shell_Loop+0x2dc>
			if(motorStart == 0){
 8002450:	4b2b      	ldr	r3, [pc, #172]	; (8002500 <Shell_Loop+0x2d0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d116      	bne.n	8002486 <Shell_Loop+0x256>
				pwm_start();
 8002458:	f7ff fe0a 	bl	8002070 <pwm_start>
				set_pwm_alpha(50);
 800245c:	2032      	movs	r0, #50	; 0x32
 800245e:	f7ff fe3d 	bl	80020dc <set_pwm_alpha>
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Motor start\r\nalpha = 50\r\n");
 8002462:	4a28      	ldr	r2, [pc, #160]	; (8002504 <Shell_Loop+0x2d4>)
 8002464:	2140      	movs	r1, #64	; 0x40
 8002466:	481f      	ldr	r0, [pc, #124]	; (80024e4 <Shell_Loop+0x2b4>)
 8002468:	f007 fe94 	bl	800a194 <sniprintf>
 800246c:	61b8      	str	r0, [r7, #24]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	b29a      	uxth	r2, r3
 8002472:	f04f 33ff 	mov.w	r3, #4294967295
 8002476:	491b      	ldr	r1, [pc, #108]	; (80024e4 <Shell_Loop+0x2b4>)
 8002478:	480d      	ldr	r0, [pc, #52]	; (80024b0 <Shell_Loop+0x280>)
 800247a:	f005 fd25 	bl	8007ec8 <HAL_UART_Transmit>
				motorStart =1;
 800247e:	4b20      	ldr	r3, [pc, #128]	; (8002500 <Shell_Loop+0x2d0>)
 8002480:	2201      	movs	r2, #1
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	e079      	b.n	800257a <Shell_Loop+0x34a>
			}
			else{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Motor is already on\r\n");
 8002486:	4a20      	ldr	r2, [pc, #128]	; (8002508 <Shell_Loop+0x2d8>)
 8002488:	2140      	movs	r1, #64	; 0x40
 800248a:	4816      	ldr	r0, [pc, #88]	; (80024e4 <Shell_Loop+0x2b4>)
 800248c:	f007 fe82 	bl	800a194 <sniprintf>
 8002490:	61f8      	str	r0, [r7, #28]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	b29a      	uxth	r2, r3
 8002496:	f04f 33ff 	mov.w	r3, #4294967295
 800249a:	4912      	ldr	r1, [pc, #72]	; (80024e4 <Shell_Loop+0x2b4>)
 800249c:	4804      	ldr	r0, [pc, #16]	; (80024b0 <Shell_Loop+0x280>)
 800249e:	f005 fd13 	bl	8007ec8 <HAL_UART_Transmit>
 80024a2:	e06a      	b.n	800257a <Shell_Loop+0x34a>
 80024a4:	200004a4 	.word	0x200004a4
 80024a8:	200004a8 	.word	0x200004a8
 80024ac:	2000008c 	.word	0x2000008c
 80024b0:	20000370 	.word	0x20000370
 80024b4:	2000052c 	.word	0x2000052c
 80024b8:	200004ec 	.word	0x200004ec
 80024bc:	20000554 	.word	0x20000554
 80024c0:	0800b414 	.word	0x0800b414
 80024c4:	20000558 	.word	0x20000558
 80024c8:	20000530 	.word	0x20000530
 80024cc:	2000055c 	.word	0x2000055c
 80024d0:	20000090 	.word	0x20000090
 80024d4:	0800b418 	.word	0x0800b418
 80024d8:	200000a8 	.word	0x200000a8
 80024dc:	0800b428 	.word	0x0800b428
 80024e0:	0800b430 	.word	0x0800b430
 80024e4:	200004ac 	.word	0x200004ac
 80024e8:	0800b458 	.word	0x0800b458
 80024ec:	0800b460 	.word	0x0800b460
 80024f0:	0800b498 	.word	0x0800b498
 80024f4:	0800b4b0 	.word	0x0800b4b0
 80024f8:	0800b4c8 	.word	0x0800b4c8
 80024fc:	0800b4fc 	.word	0x0800b4fc
 8002500:	20000560 	.word	0x20000560
 8002504:	0800b504 	.word	0x0800b504
 8002508:	0800b520 	.word	0x0800b520
			}
		}

		else if(strcmp(argv[0],"stop")==0){//Fonction permettant d'éteindre les PWM
 800250c:	4b22      	ldr	r3, [pc, #136]	; (8002598 <Shell_Loop+0x368>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4922      	ldr	r1, [pc, #136]	; (800259c <Shell_Loop+0x36c>)
 8002512:	4618      	mov	r0, r3
 8002514:	f7fd fe84 	bl	8000220 <strcmp>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d126      	bne.n	800256c <Shell_Loop+0x33c>
					if(motorStart == 1){
 800251e:	4b20      	ldr	r3, [pc, #128]	; (80025a0 <Shell_Loop+0x370>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d113      	bne.n	800254e <Shell_Loop+0x31e>
						pwm_stop();
 8002526:	f7ff fdbf 	bl	80020a8 <pwm_stop>
						int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Motor stop\r\n");
 800252a:	4a1e      	ldr	r2, [pc, #120]	; (80025a4 <Shell_Loop+0x374>)
 800252c:	2140      	movs	r1, #64	; 0x40
 800252e:	481e      	ldr	r0, [pc, #120]	; (80025a8 <Shell_Loop+0x378>)
 8002530:	f007 fe30 	bl	800a194 <sniprintf>
 8002534:	6238      	str	r0, [r7, #32]
						HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	b29a      	uxth	r2, r3
 800253a:	f04f 33ff 	mov.w	r3, #4294967295
 800253e:	491a      	ldr	r1, [pc, #104]	; (80025a8 <Shell_Loop+0x378>)
 8002540:	481a      	ldr	r0, [pc, #104]	; (80025ac <Shell_Loop+0x37c>)
 8002542:	f005 fcc1 	bl	8007ec8 <HAL_UART_Transmit>
						motorStart =0;
 8002546:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <Shell_Loop+0x370>)
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	e015      	b.n	800257a <Shell_Loop+0x34a>
					}
					else{
						int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Motor is already off\r\n");
 800254e:	4a18      	ldr	r2, [pc, #96]	; (80025b0 <Shell_Loop+0x380>)
 8002550:	2140      	movs	r1, #64	; 0x40
 8002552:	4815      	ldr	r0, [pc, #84]	; (80025a8 <Shell_Loop+0x378>)
 8002554:	f007 fe1e 	bl	800a194 <sniprintf>
 8002558:	6278      	str	r0, [r7, #36]	; 0x24
						HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	b29a      	uxth	r2, r3
 800255e:	f04f 33ff 	mov.w	r3, #4294967295
 8002562:	4911      	ldr	r1, [pc, #68]	; (80025a8 <Shell_Loop+0x378>)
 8002564:	4811      	ldr	r0, [pc, #68]	; (80025ac <Shell_Loop+0x37c>)
 8002566:	f005 fcaf 	bl	8007ec8 <HAL_UART_Transmit>
 800256a:	e006      	b.n	800257a <Shell_Loop+0x34a>
					}
				}

		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800256c:	f04f 33ff 	mov.w	r3, #4294967295
 8002570:	2214      	movs	r2, #20
 8002572:	4910      	ldr	r1, [pc, #64]	; (80025b4 <Shell_Loop+0x384>)
 8002574:	480d      	ldr	r0, [pc, #52]	; (80025ac <Shell_Loop+0x37c>)
 8002576:	f005 fca7 	bl	8007ec8 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
 800257e:	221c      	movs	r2, #28
 8002580:	490d      	ldr	r1, [pc, #52]	; (80025b8 <Shell_Loop+0x388>)
 8002582:	480a      	ldr	r0, [pc, #40]	; (80025ac <Shell_Loop+0x37c>)
 8002584:	f005 fca0 	bl	8007ec8 <HAL_UART_Transmit>
		newCmdReady = 0;
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <Shell_Loop+0x38c>)
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
	}
}
 800258e:	bf00      	nop
 8002590:	3728      	adds	r7, #40	; 0x28
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000530 	.word	0x20000530
 800259c:	0800b538 	.word	0x0800b538
 80025a0:	20000560 	.word	0x20000560
 80025a4:	0800b540 	.word	0x0800b540
 80025a8:	200004ac 	.word	0x200004ac
 80025ac:	20000370 	.word	0x20000370
 80025b0:	0800b550 	.word	0x0800b550
 80025b4:	20000094 	.word	0x20000094
 80025b8:	20000008 	.word	0x20000008
 80025bc:	2000055c 	.word	0x2000055c

080025c0 <HAL_UART_RxCpltCallback>:

/**
 * @brief Fonction Callback appelée lors de la réception d'un nouveau caractère
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_UART_RxCpltCallback+0x20>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80025ce:	2201      	movs	r2, #1
 80025d0:	4904      	ldr	r1, [pc, #16]	; (80025e4 <HAL_UART_RxCpltCallback+0x24>)
 80025d2:	4805      	ldr	r0, [pc, #20]	; (80025e8 <HAL_UART_RxCpltCallback+0x28>)
 80025d4:	f005 fd0e 	bl	8007ff4 <HAL_UART_Receive_IT>
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	200004a4 	.word	0x200004a4
 80025e4:	200004a8 	.word	0x200004a8
 80025e8:	20000370 	.word	0x20000370

080025ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025ec:	480d      	ldr	r0, [pc, #52]	; (8002624 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025f0:	480d      	ldr	r0, [pc, #52]	; (8002628 <LoopForever+0x6>)
  ldr r1, =_edata
 80025f2:	490e      	ldr	r1, [pc, #56]	; (800262c <LoopForever+0xa>)
  ldr r2, =_sidata
 80025f4:	4a0e      	ldr	r2, [pc, #56]	; (8002630 <LoopForever+0xe>)
  movs r3, #0
 80025f6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80025f8:	e002      	b.n	8002600 <LoopCopyDataInit>

080025fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025fe:	3304      	adds	r3, #4

08002600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002604:	d3f9      	bcc.n	80025fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002606:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002608:	4c0b      	ldr	r4, [pc, #44]	; (8002638 <LoopForever+0x16>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800260c:	e001      	b.n	8002612 <LoopFillZerobss>

0800260e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800260e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002610:	3204      	adds	r2, #4

08002612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002614:	d3fb      	bcc.n	800260e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002616:	f7ff f971 	bl	80018fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800261a:	f007 fee3 	bl	800a3e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800261e:	f7fe fed5 	bl	80013cc <main>

08002622 <LoopForever>:

LoopForever:
    b LoopForever
 8002622:	e7fe      	b.n	8002622 <LoopForever>
  ldr   r0, =_estack
 8002624:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800262c:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8002630:	0800b79c 	.word	0x0800b79c
  ldr r2, =_sbss
 8002634:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8002638:	200006b4 	.word	0x200006b4

0800263c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800263c:	e7fe      	b.n	800263c <ADC3_IRQHandler>

0800263e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002648:	2003      	movs	r0, #3
 800264a:	f001 feec 	bl	8004426 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800264e:	200f      	movs	r0, #15
 8002650:	f7fe ffa4 	bl	800159c <HAL_InitTick>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	71fb      	strb	r3, [r7, #7]
 800265e:	e001      	b.n	8002664 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002660:	f7fe ff78 	bl	8001554 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002664:	79fb      	ldrb	r3, [r7, #7]

}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002674:	4b05      	ldr	r3, [pc, #20]	; (800268c <HAL_IncTick+0x1c>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <HAL_IncTick+0x20>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4413      	add	r3, r2
 800267e:	4a03      	ldr	r2, [pc, #12]	; (800268c <HAL_IncTick+0x1c>)
 8002680:	6013      	str	r3, [r2, #0]
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	20000564 	.word	0x20000564
 8002690:	200000c8 	.word	0x200000c8

08002694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return uwTick;
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <HAL_GetTick+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000564 	.word	0x20000564

080026ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026b4:	f7ff ffee 	bl	8002694 <HAL_GetTick>
 80026b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c4:	d004      	beq.n	80026d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_Delay+0x40>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	4413      	add	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026d0:	bf00      	nop
 80026d2:	f7ff ffdf 	bl	8002694 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d8f7      	bhi.n	80026d2 <HAL_Delay+0x26>
  {
  }
}
 80026e2:	bf00      	nop
 80026e4:	bf00      	nop
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	200000c8 	.word	0x200000c8

080026f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	609a      	str	r2, [r3, #8]
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	609a      	str	r2, [r3, #8]
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
 8002764:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	3360      	adds	r3, #96	; 0x60
 800276a:	461a      	mov	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <LL_ADC_SetOffset+0x44>)
 800277a:	4013      	ands	r3, r2
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	4313      	orrs	r3, r2
 8002788:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002790:	bf00      	nop
 8002792:	371c      	adds	r7, #28
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	03fff000 	.word	0x03fff000

080027a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3360      	adds	r3, #96	; 0x60
 80027ae:	461a      	mov	r2, r3
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	3360      	adds	r3, #96	; 0x60
 80027dc:	461a      	mov	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	431a      	orrs	r2, r3
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80027f6:	bf00      	nop
 80027f8:	371c      	adds	r7, #28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002802:	b480      	push	{r7}
 8002804:	b087      	sub	sp, #28
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	3360      	adds	r3, #96	; 0x60
 8002812:	461a      	mov	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	431a      	orrs	r2, r3
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800282c:	bf00      	nop
 800282e:	371c      	adds	r7, #28
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	3360      	adds	r3, #96	; 0x60
 8002848:	461a      	mov	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	431a      	orrs	r2, r3
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002862:	bf00      	nop
 8002864:	371c      	adds	r7, #28
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	615a      	str	r2, [r3, #20]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b087      	sub	sp, #28
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	3330      	adds	r3, #48	; 0x30
 80028ca:	461a      	mov	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	0a1b      	lsrs	r3, r3, #8
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	4413      	add	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	f003 031f 	and.w	r3, r3, #31
 80028e4:	211f      	movs	r1, #31
 80028e6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	401a      	ands	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	0e9b      	lsrs	r3, r3, #26
 80028f2:	f003 011f 	and.w	r1, r3, #31
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002900:	431a      	orrs	r2, r3
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002906:	bf00      	nop
 8002908:	371c      	adds	r7, #28
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002938:	b480      	push	{r7}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	3314      	adds	r3, #20
 8002948:	461a      	mov	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	0e5b      	lsrs	r3, r3, #25
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	4413      	add	r3, r2
 8002956:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	0d1b      	lsrs	r3, r3, #20
 8002960:	f003 031f 	and.w	r3, r3, #31
 8002964:	2107      	movs	r1, #7
 8002966:	fa01 f303 	lsl.w	r3, r1, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	401a      	ands	r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	0d1b      	lsrs	r3, r3, #20
 8002972:	f003 031f 	and.w	r3, r3, #31
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	fa01 f303 	lsl.w	r3, r1, r3
 800297c:	431a      	orrs	r2, r3
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002982:	bf00      	nop
 8002984:	371c      	adds	r7, #28
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a0f      	ldr	r2, [pc, #60]	; (80029dc <LL_ADC_SetChannelSingleDiff+0x4c>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d10a      	bne.n	80029ba <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b0:	431a      	orrs	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80029b8:	e00a      	b.n	80029d0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c6:	43db      	mvns	r3, r3
 80029c8:	401a      	ands	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80029d0:	bf00      	nop
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	407f0000 	.word	0x407f0000

080029e0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 031f 	and.w	r3, r3, #31
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002a28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6093      	str	r3, [r2, #8]
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a50:	d101      	bne.n	8002a56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002aa0:	d101      	bne.n	8002aa6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ac4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ac8:	f043 0201 	orr.w	r2, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <LL_ADC_IsEnabled+0x18>
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <LL_ADC_IsEnabled+0x1a>
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b12:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b16:	f043 0204 	orr.w	r2, r3, #4
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d101      	bne.n	8002b42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d101      	bne.n	8002b68 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b78:	b590      	push	{r4, r7, lr}
 8002b7a:	b089      	sub	sp, #36	; 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e1af      	b.n	8002ef2 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d109      	bne.n	8002bb4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7fe f9f1 	bl	8000f88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ff3f 	bl	8002a3c <LL_ADC_IsDeepPowerDownEnabled>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d004      	beq.n	8002bce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ff25 	bl	8002a18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff ff5a 	bl	8002a8c <LL_ADC_IsInternalRegulatorEnabled>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d115      	bne.n	8002c0a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff ff3e 	bl	8002a64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002be8:	4b9f      	ldr	r3, [pc, #636]	; (8002e68 <HAL_ADC_Init+0x2f0>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	099b      	lsrs	r3, r3, #6
 8002bee:	4a9f      	ldr	r2, [pc, #636]	; (8002e6c <HAL_ADC_Init+0x2f4>)
 8002bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf4:	099b      	lsrs	r3, r3, #6
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002bfc:	e002      	b.n	8002c04 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f9      	bne.n	8002bfe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff ff3c 	bl	8002a8c <LL_ADC_IsInternalRegulatorEnabled>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10d      	bne.n	8002c36 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1e:	f043 0210 	orr.w	r2, r3, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c2a:	f043 0201 	orr.w	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff ff75 	bl	8002b2a <LL_ADC_REG_IsConversionOngoing>
 8002c40:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f040 8148 	bne.w	8002ee0 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f040 8144 	bne.w	8002ee0 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c60:	f043 0202 	orr.w	r2, r3, #2
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ff35 	bl	8002adc <LL_ADC_IsEnabled>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d141      	bne.n	8002cfc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c80:	d004      	beq.n	8002c8c <HAL_ADC_Init+0x114>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a7a      	ldr	r2, [pc, #488]	; (8002e70 <HAL_ADC_Init+0x2f8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d10f      	bne.n	8002cac <HAL_ADC_Init+0x134>
 8002c8c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c90:	f7ff ff24 	bl	8002adc <LL_ADC_IsEnabled>
 8002c94:	4604      	mov	r4, r0
 8002c96:	4876      	ldr	r0, [pc, #472]	; (8002e70 <HAL_ADC_Init+0x2f8>)
 8002c98:	f7ff ff20 	bl	8002adc <LL_ADC_IsEnabled>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4323      	orrs	r3, r4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	bf0c      	ite	eq
 8002ca4:	2301      	moveq	r3, #1
 8002ca6:	2300      	movne	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	e012      	b.n	8002cd2 <HAL_ADC_Init+0x15a>
 8002cac:	4871      	ldr	r0, [pc, #452]	; (8002e74 <HAL_ADC_Init+0x2fc>)
 8002cae:	f7ff ff15 	bl	8002adc <LL_ADC_IsEnabled>
 8002cb2:	4604      	mov	r4, r0
 8002cb4:	4870      	ldr	r0, [pc, #448]	; (8002e78 <HAL_ADC_Init+0x300>)
 8002cb6:	f7ff ff11 	bl	8002adc <LL_ADC_IsEnabled>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	431c      	orrs	r4, r3
 8002cbe:	486f      	ldr	r0, [pc, #444]	; (8002e7c <HAL_ADC_Init+0x304>)
 8002cc0:	f7ff ff0c 	bl	8002adc <LL_ADC_IsEnabled>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	4323      	orrs	r3, r4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	bf0c      	ite	eq
 8002ccc:	2301      	moveq	r3, #1
 8002cce:	2300      	movne	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d012      	beq.n	8002cfc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cde:	d004      	beq.n	8002cea <HAL_ADC_Init+0x172>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a62      	ldr	r2, [pc, #392]	; (8002e70 <HAL_ADC_Init+0x2f8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d101      	bne.n	8002cee <HAL_ADC_Init+0x176>
 8002cea:	4a65      	ldr	r2, [pc, #404]	; (8002e80 <HAL_ADC_Init+0x308>)
 8002cec:	e000      	b.n	8002cf0 <HAL_ADC_Init+0x178>
 8002cee:	4a65      	ldr	r2, [pc, #404]	; (8002e84 <HAL_ADC_Init+0x30c>)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	f7ff fcfa 	bl	80026f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	7f5b      	ldrb	r3, [r3, #29]
 8002d00:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d06:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002d0c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002d12:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d1a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d106      	bne.n	8002d38 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	045b      	lsls	r3, r3, #17
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d009      	beq.n	8002d54 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	4b4b      	ldr	r3, [pc, #300]	; (8002e88 <HAL_ADC_Init+0x310>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	69b9      	ldr	r1, [r7, #24]
 8002d64:	430b      	orrs	r3, r1
 8002d66:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fed1 	bl	8002b2a <LL_ADC_REG_IsConversionOngoing>
 8002d88:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff fede 	bl	8002b50 <LL_ADC_INJ_IsConversionOngoing>
 8002d94:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d17f      	bne.n	8002e9c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d17c      	bne.n	8002e9c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002da6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dae:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dbe:	f023 0302 	bic.w	r3, r3, #2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	69b9      	ldr	r1, [r7, #24]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d017      	beq.n	8002e04 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002de2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002dec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002df0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6911      	ldr	r1, [r2, #16]
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002e02:	e013      	b.n	8002e2c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e12:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e28:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d12a      	bne.n	8002e8c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e40:	f023 0304 	bic.w	r3, r3, #4
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e4c:	4311      	orrs	r1, r2
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002e52:	4311      	orrs	r1, r2
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f042 0201 	orr.w	r2, r2, #1
 8002e64:	611a      	str	r2, [r3, #16]
 8002e66:	e019      	b.n	8002e9c <HAL_ADC_Init+0x324>
 8002e68:	20000000 	.word	0x20000000
 8002e6c:	053e2d63 	.word	0x053e2d63
 8002e70:	50000100 	.word	0x50000100
 8002e74:	50000400 	.word	0x50000400
 8002e78:	50000500 	.word	0x50000500
 8002e7c:	50000600 	.word	0x50000600
 8002e80:	50000300 	.word	0x50000300
 8002e84:	50000700 	.word	0x50000700
 8002e88:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691a      	ldr	r2, [r3, #16]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d10c      	bne.n	8002ebe <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	f023 010f 	bic.w	r1, r3, #15
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	1e5a      	subs	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
 8002ebc:	e007      	b.n	8002ece <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 020f 	bic.w	r2, r2, #15
 8002ecc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed2:	f023 0303 	bic.w	r3, r3, #3
 8002ed6:	f043 0201 	orr.w	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ede:	e007      	b.n	8002ef0 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee4:	f043 0210 	orr.w	r2, r3, #16
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ef0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3724      	adds	r7, #36	; 0x24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd90      	pop	{r4, r7, pc}
 8002efa:	bf00      	nop

08002efc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f10:	d004      	beq.n	8002f1c <HAL_ADC_Start_DMA+0x20>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a5a      	ldr	r2, [pc, #360]	; (8003080 <HAL_ADC_Start_DMA+0x184>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d101      	bne.n	8002f20 <HAL_ADC_Start_DMA+0x24>
 8002f1c:	4b59      	ldr	r3, [pc, #356]	; (8003084 <HAL_ADC_Start_DMA+0x188>)
 8002f1e:	e000      	b.n	8002f22 <HAL_ADC_Start_DMA+0x26>
 8002f20:	4b59      	ldr	r3, [pc, #356]	; (8003088 <HAL_ADC_Start_DMA+0x18c>)
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff fd5c 	bl	80029e0 <LL_ADC_GetMultimode>
 8002f28:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff fdfb 	bl	8002b2a <LL_ADC_REG_IsConversionOngoing>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f040 809b 	bne.w	8003072 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_ADC_Start_DMA+0x4e>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e096      	b.n	8003078 <HAL_ADC_Start_DMA+0x17c>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a4d      	ldr	r2, [pc, #308]	; (800308c <HAL_ADC_Start_DMA+0x190>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d008      	beq.n	8002f6e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d005      	beq.n	8002f6e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	2b05      	cmp	r3, #5
 8002f66:	d002      	beq.n	8002f6e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2b09      	cmp	r3, #9
 8002f6c:	d17a      	bne.n	8003064 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 ff56 	bl	8003e20 <ADC_Enable>
 8002f74:	4603      	mov	r3, r0
 8002f76:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d16d      	bne.n	800305a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f82:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a3a      	ldr	r2, [pc, #232]	; (8003080 <HAL_ADC_Start_DMA+0x184>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d009      	beq.n	8002fb0 <HAL_ADC_Start_DMA+0xb4>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a3b      	ldr	r2, [pc, #236]	; (8003090 <HAL_ADC_Start_DMA+0x194>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d002      	beq.n	8002fac <HAL_ADC_Start_DMA+0xb0>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	e003      	b.n	8002fb4 <HAL_ADC_Start_DMA+0xb8>
 8002fac:	4b39      	ldr	r3, [pc, #228]	; (8003094 <HAL_ADC_Start_DMA+0x198>)
 8002fae:	e001      	b.n	8002fb4 <HAL_ADC_Start_DMA+0xb8>
 8002fb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d002      	beq.n	8002fc2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d105      	bne.n	8002fce <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d006      	beq.n	8002fe8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fde:	f023 0206 	bic.w	r2, r3, #6
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	661a      	str	r2, [r3, #96]	; 0x60
 8002fe6:	e002      	b.n	8002fee <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff2:	4a29      	ldr	r2, [pc, #164]	; (8003098 <HAL_ADC_Start_DMA+0x19c>)
 8002ff4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffa:	4a28      	ldr	r2, [pc, #160]	; (800309c <HAL_ADC_Start_DMA+0x1a0>)
 8002ffc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003002:	4a27      	ldr	r2, [pc, #156]	; (80030a0 <HAL_ADC_Start_DMA+0x1a4>)
 8003004:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	221c      	movs	r2, #28
 800300c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0210 	orr.w	r2, r2, #16
 8003024:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0201 	orr.w	r2, r2, #1
 8003034:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3340      	adds	r3, #64	; 0x40
 8003040:	4619      	mov	r1, r3
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f001 fac9 	bl	80045dc <HAL_DMA_Start_IT>
 800304a:	4603      	mov	r3, r0
 800304c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fd55 	bl	8002b02 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003058:	e00d      	b.n	8003076 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003062:	e008      	b.n	8003076 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003070:	e001      	b.n	8003076 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003072:	2302      	movs	r3, #2
 8003074:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003076:	7dfb      	ldrb	r3, [r7, #23]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	50000100 	.word	0x50000100
 8003084:	50000300 	.word	0x50000300
 8003088:	50000700 	.word	0x50000700
 800308c:	50000600 	.word	0x50000600
 8003090:	50000500 	.word	0x50000500
 8003094:	50000400 	.word	0x50000400
 8003098:	08003ee5 	.word	0x08003ee5
 800309c:	08003fbd 	.word	0x08003fbd
 80030a0:	08003fd9 	.word	0x08003fd9

080030a4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08a      	sub	sp, #40	; 0x28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80030ac:	2300      	movs	r3, #0
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030c8:	d004      	beq.n	80030d4 <HAL_ADC_IRQHandler+0x30>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a8e      	ldr	r2, [pc, #568]	; (8003308 <HAL_ADC_IRQHandler+0x264>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d101      	bne.n	80030d8 <HAL_ADC_IRQHandler+0x34>
 80030d4:	4b8d      	ldr	r3, [pc, #564]	; (800330c <HAL_ADC_IRQHandler+0x268>)
 80030d6:	e000      	b.n	80030da <HAL_ADC_IRQHandler+0x36>
 80030d8:	4b8d      	ldr	r3, [pc, #564]	; (8003310 <HAL_ADC_IRQHandler+0x26c>)
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fc80 	bl	80029e0 <LL_ADC_GetMultimode>
 80030e0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d017      	beq.n	800311c <HAL_ADC_IRQHandler+0x78>
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d012      	beq.n	800311c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d105      	bne.n	800310e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003106:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 ffca 	bl	80040a8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2202      	movs	r2, #2
 800311a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b00      	cmp	r3, #0
 8003124:	d004      	beq.n	8003130 <HAL_ADC_IRQHandler+0x8c>
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10b      	bne.n	8003148 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 8094 	beq.w	8003264 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 808e 	beq.w	8003264 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	2b00      	cmp	r3, #0
 8003152:	d105      	bne.n	8003160 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003158:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff fb95 	bl	8002894 <LL_ADC_REG_IsTriggerSourceSWStart>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d072      	beq.n	8003256 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a64      	ldr	r2, [pc, #400]	; (8003308 <HAL_ADC_IRQHandler+0x264>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d009      	beq.n	800318e <HAL_ADC_IRQHandler+0xea>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a65      	ldr	r2, [pc, #404]	; (8003314 <HAL_ADC_IRQHandler+0x270>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d002      	beq.n	800318a <HAL_ADC_IRQHandler+0xe6>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	e003      	b.n	8003192 <HAL_ADC_IRQHandler+0xee>
 800318a:	4b63      	ldr	r3, [pc, #396]	; (8003318 <HAL_ADC_IRQHandler+0x274>)
 800318c:	e001      	b.n	8003192 <HAL_ADC_IRQHandler+0xee>
 800318e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6812      	ldr	r2, [r2, #0]
 8003196:	4293      	cmp	r3, r2
 8003198:	d008      	beq.n	80031ac <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	2b05      	cmp	r3, #5
 80031a4:	d002      	beq.n	80031ac <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2b09      	cmp	r3, #9
 80031aa:	d104      	bne.n	80031b6 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	623b      	str	r3, [r7, #32]
 80031b4:	e014      	b.n	80031e0 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a53      	ldr	r2, [pc, #332]	; (8003308 <HAL_ADC_IRQHandler+0x264>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d009      	beq.n	80031d4 <HAL_ADC_IRQHandler+0x130>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a53      	ldr	r2, [pc, #332]	; (8003314 <HAL_ADC_IRQHandler+0x270>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d002      	beq.n	80031d0 <HAL_ADC_IRQHandler+0x12c>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	e003      	b.n	80031d8 <HAL_ADC_IRQHandler+0x134>
 80031d0:	4b51      	ldr	r3, [pc, #324]	; (8003318 <HAL_ADC_IRQHandler+0x274>)
 80031d2:	e001      	b.n	80031d8 <HAL_ADC_IRQHandler+0x134>
 80031d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031d8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d135      	bne.n	8003256 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d12e      	bne.n	8003256 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff fc94 	bl	8002b2a <LL_ADC_REG_IsConversionOngoing>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d11a      	bne.n	800323e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 020c 	bic.w	r2, r2, #12
 8003216:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d112      	bne.n	8003256 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003234:	f043 0201 	orr.w	r2, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	65da      	str	r2, [r3, #92]	; 0x5c
 800323c:	e00b      	b.n	8003256 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003242:	f043 0210 	orr.w	r2, r3, #16
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800324e:	f043 0201 	orr.w	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fe f88a 	bl	8001370 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	220c      	movs	r2, #12
 8003262:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b00      	cmp	r3, #0
 800326c:	d004      	beq.n	8003278 <HAL_ADC_IRQHandler+0x1d4>
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10b      	bne.n	8003290 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 80b3 	beq.w	80033ea <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 80ad 	beq.w	80033ea <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	2b00      	cmp	r3, #0
 800329a:	d105      	bne.n	80032a8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff fb30 	bl	8002912 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80032b2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff faeb 	bl	8002894 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032be:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a10      	ldr	r2, [pc, #64]	; (8003308 <HAL_ADC_IRQHandler+0x264>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d009      	beq.n	80032de <HAL_ADC_IRQHandler+0x23a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a11      	ldr	r2, [pc, #68]	; (8003314 <HAL_ADC_IRQHandler+0x270>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d002      	beq.n	80032da <HAL_ADC_IRQHandler+0x236>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	e003      	b.n	80032e2 <HAL_ADC_IRQHandler+0x23e>
 80032da:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <HAL_ADC_IRQHandler+0x274>)
 80032dc:	e001      	b.n	80032e2 <HAL_ADC_IRQHandler+0x23e>
 80032de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d008      	beq.n	80032fc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2b06      	cmp	r3, #6
 80032f4:	d002      	beq.n	80032fc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2b07      	cmp	r3, #7
 80032fa:	d10f      	bne.n	800331c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	623b      	str	r3, [r7, #32]
 8003304:	e01f      	b.n	8003346 <HAL_ADC_IRQHandler+0x2a2>
 8003306:	bf00      	nop
 8003308:	50000100 	.word	0x50000100
 800330c:	50000300 	.word	0x50000300
 8003310:	50000700 	.word	0x50000700
 8003314:	50000500 	.word	0x50000500
 8003318:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a8b      	ldr	r2, [pc, #556]	; (8003550 <HAL_ADC_IRQHandler+0x4ac>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d009      	beq.n	800333a <HAL_ADC_IRQHandler+0x296>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a8a      	ldr	r2, [pc, #552]	; (8003554 <HAL_ADC_IRQHandler+0x4b0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d002      	beq.n	8003336 <HAL_ADC_IRQHandler+0x292>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	e003      	b.n	800333e <HAL_ADC_IRQHandler+0x29a>
 8003336:	4b88      	ldr	r3, [pc, #544]	; (8003558 <HAL_ADC_IRQHandler+0x4b4>)
 8003338:	e001      	b.n	800333e <HAL_ADC_IRQHandler+0x29a>
 800333a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800333e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d047      	beq.n	80033dc <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d007      	beq.n	8003366 <HAL_ADC_IRQHandler+0x2c2>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d03f      	beq.n	80033dc <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003362:	2b00      	cmp	r3, #0
 8003364:	d13a      	bne.n	80033dc <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003370:	2b40      	cmp	r3, #64	; 0x40
 8003372:	d133      	bne.n	80033dc <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d12e      	bne.n	80033dc <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fbe4 	bl	8002b50 <LL_ADC_INJ_IsConversionOngoing>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d11a      	bne.n	80033c4 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800339c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d112      	bne.n	80033dc <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ba:	f043 0201 	orr.w	r2, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80033c2:	e00b      	b.n	80033dc <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	f043 0210 	orr.w	r2, r3, #16
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d4:	f043 0201 	orr.w	r2, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 fe3b 	bl	8004058 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2260      	movs	r2, #96	; 0x60
 80033e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d011      	beq.n	8003418 <HAL_ADC_IRQHandler+0x374>
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00c      	beq.n	8003418 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003402:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f8b4 	bl	8003578 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2280      	movs	r2, #128	; 0x80
 8003416:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341e:	2b00      	cmp	r3, #0
 8003420:	d012      	beq.n	8003448 <HAL_ADC_IRQHandler+0x3a4>
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00d      	beq.n	8003448 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003430:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fe21 	bl	8004080 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003446:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800344e:	2b00      	cmp	r3, #0
 8003450:	d012      	beq.n	8003478 <HAL_ADC_IRQHandler+0x3d4>
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00d      	beq.n	8003478 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003460:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fe13 	bl	8004094 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003476:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	d043      	beq.n	800350a <HAL_ADC_IRQHandler+0x466>
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b00      	cmp	r3, #0
 800348a:	d03e      	beq.n	800350a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003490:	2b00      	cmp	r3, #0
 8003492:	d102      	bne.n	800349a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003494:	2301      	movs	r3, #1
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
 8003498:	e021      	b.n	80034de <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d015      	beq.n	80034cc <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034a8:	d004      	beq.n	80034b4 <HAL_ADC_IRQHandler+0x410>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a28      	ldr	r2, [pc, #160]	; (8003550 <HAL_ADC_IRQHandler+0x4ac>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d101      	bne.n	80034b8 <HAL_ADC_IRQHandler+0x414>
 80034b4:	4b29      	ldr	r3, [pc, #164]	; (800355c <HAL_ADC_IRQHandler+0x4b8>)
 80034b6:	e000      	b.n	80034ba <HAL_ADC_IRQHandler+0x416>
 80034b8:	4b29      	ldr	r3, [pc, #164]	; (8003560 <HAL_ADC_IRQHandler+0x4bc>)
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff fa9e 	bl	80029fc <LL_ADC_GetMultiDMATransfer>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00b      	beq.n	80034de <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80034c6:	2301      	movs	r3, #1
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ca:	e008      	b.n	80034de <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80034da:	2301      	movs	r3, #1
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d10e      	bne.n	8003502 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f4:	f043 0202 	orr.w	r2, r3, #2
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f845 	bl	800358c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2210      	movs	r2, #16
 8003508:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003510:	2b00      	cmp	r3, #0
 8003512:	d018      	beq.n	8003546 <HAL_ADC_IRQHandler+0x4a2>
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800351a:	2b00      	cmp	r3, #0
 800351c:	d013      	beq.n	8003546 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003522:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800352e:	f043 0208 	orr.w	r2, r3, #8
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800353e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fd93 	bl	800406c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003546:	bf00      	nop
 8003548:	3728      	adds	r7, #40	; 0x28
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	50000100 	.word	0x50000100
 8003554:	50000500 	.word	0x50000500
 8003558:	50000400 	.word	0x50000400
 800355c:	50000300 	.word	0x50000300
 8003560:	50000700 	.word	0x50000700

08003564 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b0b6      	sub	sp, #216	; 0xd8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d102      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x24>
 80035be:	2302      	movs	r3, #2
 80035c0:	f000 bc13 	b.w	8003dea <HAL_ADC_ConfigChannel+0x84a>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff faaa 	bl	8002b2a <LL_ADC_REG_IsConversionOngoing>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f040 83f3 	bne.w	8003dc4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	6859      	ldr	r1, [r3, #4]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	f7ff f965 	bl	80028ba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff fa98 	bl	8002b2a <LL_ADC_REG_IsConversionOngoing>
 80035fa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff faa4 	bl	8002b50 <LL_ADC_INJ_IsConversionOngoing>
 8003608:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800360c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003610:	2b00      	cmp	r3, #0
 8003612:	f040 81d9 	bne.w	80039c8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003616:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800361a:	2b00      	cmp	r3, #0
 800361c:	f040 81d4 	bne.w	80039c8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003628:	d10f      	bne.n	800364a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2200      	movs	r2, #0
 8003634:	4619      	mov	r1, r3
 8003636:	f7ff f97f 	bl	8002938 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff f913 	bl	800286e <LL_ADC_SetSamplingTimeCommonConfig>
 8003648:	e00e      	b.n	8003668 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	6819      	ldr	r1, [r3, #0]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	461a      	mov	r2, r3
 8003658:	f7ff f96e 	bl	8002938 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2100      	movs	r1, #0
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff f903 	bl	800286e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	695a      	ldr	r2, [r3, #20]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	08db      	lsrs	r3, r3, #3
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	2b04      	cmp	r3, #4
 8003688:	d022      	beq.n	80036d0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6818      	ldr	r0, [r3, #0]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	6919      	ldr	r1, [r3, #16]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800369a:	f7ff f85d 	bl	8002758 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	6919      	ldr	r1, [r3, #16]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	461a      	mov	r2, r3
 80036ac:	f7ff f8a9 	bl	8002802 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6818      	ldr	r0, [r3, #0]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	6919      	ldr	r1, [r3, #16]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	7f1b      	ldrb	r3, [r3, #28]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d102      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x126>
 80036c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036c4:	e000      	b.n	80036c8 <HAL_ADC_ConfigChannel+0x128>
 80036c6:	2300      	movs	r3, #0
 80036c8:	461a      	mov	r2, r3
 80036ca:	f7ff f8b5 	bl	8002838 <LL_ADC_SetOffsetSaturation>
 80036ce:	e17b      	b.n	80039c8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff f862 	bl	80027a0 <LL_ADC_GetOffsetChannel>
 80036dc:	4603      	mov	r3, r0
 80036de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10a      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x15c>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2100      	movs	r1, #0
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff f857 	bl	80027a0 <LL_ADC_GetOffsetChannel>
 80036f2:	4603      	mov	r3, r0
 80036f4:	0e9b      	lsrs	r3, r3, #26
 80036f6:	f003 021f 	and.w	r2, r3, #31
 80036fa:	e01e      	b.n	800373a <HAL_ADC_ConfigChannel+0x19a>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2100      	movs	r1, #0
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff f84c 	bl	80027a0 <LL_ADC_GetOffsetChannel>
 8003708:	4603      	mov	r3, r0
 800370a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003712:	fa93 f3a3 	rbit	r3, r3
 8003716:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800371a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800371e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003722:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800372a:	2320      	movs	r3, #32
 800372c:	e004      	b.n	8003738 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800372e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003732:	fab3 f383 	clz	r3, r3
 8003736:	b2db      	uxtb	r3, r3
 8003738:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003742:	2b00      	cmp	r3, #0
 8003744:	d105      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x1b2>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	0e9b      	lsrs	r3, r3, #26
 800374c:	f003 031f 	and.w	r3, r3, #31
 8003750:	e018      	b.n	8003784 <HAL_ADC_ConfigChannel+0x1e4>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800375e:	fa93 f3a3 	rbit	r3, r3
 8003762:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800376a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800376e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003776:	2320      	movs	r3, #32
 8003778:	e004      	b.n	8003784 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800377a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800377e:	fab3 f383 	clz	r3, r3
 8003782:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003784:	429a      	cmp	r2, r3
 8003786:	d106      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2200      	movs	r2, #0
 800378e:	2100      	movs	r1, #0
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff f81b 	bl	80027cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2101      	movs	r1, #1
 800379c:	4618      	mov	r0, r3
 800379e:	f7fe ffff 	bl	80027a0 <LL_ADC_GetOffsetChannel>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10a      	bne.n	80037c2 <HAL_ADC_ConfigChannel+0x222>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2101      	movs	r1, #1
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fe fff4 	bl	80027a0 <LL_ADC_GetOffsetChannel>
 80037b8:	4603      	mov	r3, r0
 80037ba:	0e9b      	lsrs	r3, r3, #26
 80037bc:	f003 021f 	and.w	r2, r3, #31
 80037c0:	e01e      	b.n	8003800 <HAL_ADC_ConfigChannel+0x260>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2101      	movs	r1, #1
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fe ffe9 	bl	80027a0 <LL_ADC_GetOffsetChannel>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80037d8:	fa93 f3a3 	rbit	r3, r3
 80037dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80037e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80037e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80037f0:	2320      	movs	r3, #32
 80037f2:	e004      	b.n	80037fe <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80037f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037f8:	fab3 f383 	clz	r3, r3
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003808:	2b00      	cmp	r3, #0
 800380a:	d105      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x278>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	0e9b      	lsrs	r3, r3, #26
 8003812:	f003 031f 	and.w	r3, r3, #31
 8003816:	e018      	b.n	800384a <HAL_ADC_ConfigChannel+0x2aa>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003820:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003824:	fa93 f3a3 	rbit	r3, r3
 8003828:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800382c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003830:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003834:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800383c:	2320      	movs	r3, #32
 800383e:	e004      	b.n	800384a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003840:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003844:	fab3 f383 	clz	r3, r3
 8003848:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800384a:	429a      	cmp	r2, r3
 800384c:	d106      	bne.n	800385c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2200      	movs	r2, #0
 8003854:	2101      	movs	r1, #1
 8003856:	4618      	mov	r0, r3
 8003858:	f7fe ffb8 	bl	80027cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2102      	movs	r1, #2
 8003862:	4618      	mov	r0, r3
 8003864:	f7fe ff9c 	bl	80027a0 <LL_ADC_GetOffsetChannel>
 8003868:	4603      	mov	r3, r0
 800386a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10a      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x2e8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2102      	movs	r1, #2
 8003878:	4618      	mov	r0, r3
 800387a:	f7fe ff91 	bl	80027a0 <LL_ADC_GetOffsetChannel>
 800387e:	4603      	mov	r3, r0
 8003880:	0e9b      	lsrs	r3, r3, #26
 8003882:	f003 021f 	and.w	r2, r3, #31
 8003886:	e01e      	b.n	80038c6 <HAL_ADC_ConfigChannel+0x326>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2102      	movs	r1, #2
 800388e:	4618      	mov	r0, r3
 8003890:	f7fe ff86 	bl	80027a0 <LL_ADC_GetOffsetChannel>
 8003894:	4603      	mov	r3, r0
 8003896:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800389e:	fa93 f3a3 	rbit	r3, r3
 80038a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80038a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80038ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80038b6:	2320      	movs	r3, #32
 80038b8:	e004      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80038ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038be:	fab3 f383 	clz	r3, r3
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d105      	bne.n	80038de <HAL_ADC_ConfigChannel+0x33e>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	0e9b      	lsrs	r3, r3, #26
 80038d8:	f003 031f 	and.w	r3, r3, #31
 80038dc:	e016      	b.n	800390c <HAL_ADC_ConfigChannel+0x36c>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80038f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80038f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80038fe:	2320      	movs	r3, #32
 8003900:	e004      	b.n	800390c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003902:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003906:	fab3 f383 	clz	r3, r3
 800390a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800390c:	429a      	cmp	r2, r3
 800390e:	d106      	bne.n	800391e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2200      	movs	r2, #0
 8003916:	2102      	movs	r1, #2
 8003918:	4618      	mov	r0, r3
 800391a:	f7fe ff57 	bl	80027cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2103      	movs	r1, #3
 8003924:	4618      	mov	r0, r3
 8003926:	f7fe ff3b 	bl	80027a0 <LL_ADC_GetOffsetChannel>
 800392a:	4603      	mov	r3, r0
 800392c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10a      	bne.n	800394a <HAL_ADC_ConfigChannel+0x3aa>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2103      	movs	r1, #3
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe ff30 	bl	80027a0 <LL_ADC_GetOffsetChannel>
 8003940:	4603      	mov	r3, r0
 8003942:	0e9b      	lsrs	r3, r3, #26
 8003944:	f003 021f 	and.w	r2, r3, #31
 8003948:	e017      	b.n	800397a <HAL_ADC_ConfigChannel+0x3da>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2103      	movs	r1, #3
 8003950:	4618      	mov	r0, r3
 8003952:	f7fe ff25 	bl	80027a0 <LL_ADC_GetOffsetChannel>
 8003956:	4603      	mov	r3, r0
 8003958:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800395c:	fa93 f3a3 	rbit	r3, r3
 8003960:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003962:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003964:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003966:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800396c:	2320      	movs	r3, #32
 800396e:	e003      	b.n	8003978 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003972:	fab3 f383 	clz	r3, r3
 8003976:	b2db      	uxtb	r3, r3
 8003978:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003982:	2b00      	cmp	r3, #0
 8003984:	d105      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x3f2>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	0e9b      	lsrs	r3, r3, #26
 800398c:	f003 031f 	and.w	r3, r3, #31
 8003990:	e011      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x416>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003998:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800399a:	fa93 f3a3 	rbit	r3, r3
 800399e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80039a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80039a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80039aa:	2320      	movs	r3, #32
 80039ac:	e003      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80039ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b0:	fab3 f383 	clz	r3, r3
 80039b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d106      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2200      	movs	r2, #0
 80039c0:	2103      	movs	r1, #3
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe ff02 	bl	80027cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff f885 	bl	8002adc <LL_ADC_IsEnabled>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f040 813d 	bne.w	8003c54 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	6819      	ldr	r1, [r3, #0]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	461a      	mov	r2, r3
 80039e8:	f7fe ffd2 	bl	8002990 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	4aa2      	ldr	r2, [pc, #648]	; (8003c7c <HAL_ADC_ConfigChannel+0x6dc>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	f040 812e 	bne.w	8003c54 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10b      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0x480>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	0e9b      	lsrs	r3, r3, #26
 8003a0e:	3301      	adds	r3, #1
 8003a10:	f003 031f 	and.w	r3, r3, #31
 8003a14:	2b09      	cmp	r3, #9
 8003a16:	bf94      	ite	ls
 8003a18:	2301      	movls	r3, #1
 8003a1a:	2300      	movhi	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	e019      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x4b4>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a28:	fa93 f3a3 	rbit	r3, r3
 8003a2c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003a2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a30:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003a32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003a38:	2320      	movs	r3, #32
 8003a3a:	e003      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003a3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a3e:	fab3 f383 	clz	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	3301      	adds	r3, #1
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	2b09      	cmp	r3, #9
 8003a4c:	bf94      	ite	ls
 8003a4e:	2301      	movls	r3, #1
 8003a50:	2300      	movhi	r3, #0
 8003a52:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d079      	beq.n	8003b4c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d107      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x4d4>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	0e9b      	lsrs	r3, r3, #26
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	069b      	lsls	r3, r3, #26
 8003a6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a72:	e015      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x500>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a7c:	fa93 f3a3 	rbit	r3, r3
 8003a80:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a84:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003a8c:	2320      	movs	r3, #32
 8003a8e:	e003      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a92:	fab3 f383 	clz	r3, r3
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	3301      	adds	r3, #1
 8003a9a:	069b      	lsls	r3, r3, #26
 8003a9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d109      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x520>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	0e9b      	lsrs	r3, r3, #26
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	2101      	movs	r1, #1
 8003aba:	fa01 f303 	lsl.w	r3, r1, r3
 8003abe:	e017      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x550>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ac8:	fa93 f3a3 	rbit	r3, r3
 8003acc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003ad8:	2320      	movs	r3, #32
 8003ada:	e003      	b.n	8003ae4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ade:	fab3 f383 	clz	r3, r3
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	f003 031f 	and.w	r3, r3, #31
 8003aea:	2101      	movs	r1, #1
 8003aec:	fa01 f303 	lsl.w	r3, r1, r3
 8003af0:	ea42 0103 	orr.w	r1, r2, r3
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10a      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0x576>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	0e9b      	lsrs	r3, r3, #26
 8003b06:	3301      	adds	r3, #1
 8003b08:	f003 021f 	and.w	r2, r3, #31
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	4413      	add	r3, r2
 8003b12:	051b      	lsls	r3, r3, #20
 8003b14:	e018      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x5a8>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1e:	fa93 f3a3 	rbit	r3, r3
 8003b22:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b26:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003b2e:	2320      	movs	r3, #32
 8003b30:	e003      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b34:	fab3 f383 	clz	r3, r3
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	f003 021f 	and.w	r2, r3, #31
 8003b40:	4613      	mov	r3, r2
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	4413      	add	r3, r2
 8003b46:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	e07e      	b.n	8003c4a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d107      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x5c8>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	0e9b      	lsrs	r3, r3, #26
 8003b5e:	3301      	adds	r3, #1
 8003b60:	069b      	lsls	r3, r3, #26
 8003b62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b66:	e015      	b.n	8003b94 <HAL_ADC_ConfigChannel+0x5f4>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b70:	fa93 f3a3 	rbit	r3, r3
 8003b74:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b78:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003b80:	2320      	movs	r3, #32
 8003b82:	e003      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	fab3 f383 	clz	r3, r3
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	069b      	lsls	r3, r3, #26
 8003b90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d109      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x614>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	0e9b      	lsrs	r3, r3, #26
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	f003 031f 	and.w	r3, r3, #31
 8003bac:	2101      	movs	r1, #1
 8003bae:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb2:	e017      	b.n	8003be4 <HAL_ADC_ConfigChannel+0x644>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	fa93 f3a3 	rbit	r3, r3
 8003bc0:	61fb      	str	r3, [r7, #28]
  return result;
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003bcc:	2320      	movs	r3, #32
 8003bce:	e003      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	fab3 f383 	clz	r3, r3
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	3301      	adds	r3, #1
 8003bda:	f003 031f 	and.w	r3, r3, #31
 8003bde:	2101      	movs	r1, #1
 8003be0:	fa01 f303 	lsl.w	r3, r1, r3
 8003be4:	ea42 0103 	orr.w	r1, r2, r3
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10d      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x670>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	0e9b      	lsrs	r3, r3, #26
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	f003 021f 	and.w	r2, r3, #31
 8003c00:	4613      	mov	r3, r2
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	4413      	add	r3, r2
 8003c06:	3b1e      	subs	r3, #30
 8003c08:	051b      	lsls	r3, r3, #20
 8003c0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c0e:	e01b      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x6a8>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	fa93 f3a3 	rbit	r3, r3
 8003c1c:	613b      	str	r3, [r7, #16]
  return result;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003c28:	2320      	movs	r3, #32
 8003c2a:	e003      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	fab3 f383 	clz	r3, r3
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	3301      	adds	r3, #1
 8003c36:	f003 021f 	and.w	r2, r3, #31
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	4413      	add	r3, r2
 8003c40:	3b1e      	subs	r3, #30
 8003c42:	051b      	lsls	r3, r3, #20
 8003c44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	6892      	ldr	r2, [r2, #8]
 8003c4e:	4619      	mov	r1, r3
 8003c50:	f7fe fe72 	bl	8002938 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <HAL_ADC_ConfigChannel+0x6e0>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 80be 	beq.w	8003dde <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c6a:	d004      	beq.n	8003c76 <HAL_ADC_ConfigChannel+0x6d6>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a04      	ldr	r2, [pc, #16]	; (8003c84 <HAL_ADC_ConfigChannel+0x6e4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d10a      	bne.n	8003c8c <HAL_ADC_ConfigChannel+0x6ec>
 8003c76:	4b04      	ldr	r3, [pc, #16]	; (8003c88 <HAL_ADC_ConfigChannel+0x6e8>)
 8003c78:	e009      	b.n	8003c8e <HAL_ADC_ConfigChannel+0x6ee>
 8003c7a:	bf00      	nop
 8003c7c:	407f0000 	.word	0x407f0000
 8003c80:	80080000 	.word	0x80080000
 8003c84:	50000100 	.word	0x50000100
 8003c88:	50000300 	.word	0x50000300
 8003c8c:	4b59      	ldr	r3, [pc, #356]	; (8003df4 <HAL_ADC_ConfigChannel+0x854>)
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe fd54 	bl	800273c <LL_ADC_GetCommonPathInternalCh>
 8003c94:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a56      	ldr	r2, [pc, #344]	; (8003df8 <HAL_ADC_ConfigChannel+0x858>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d004      	beq.n	8003cac <HAL_ADC_ConfigChannel+0x70c>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a55      	ldr	r2, [pc, #340]	; (8003dfc <HAL_ADC_ConfigChannel+0x85c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d13a      	bne.n	8003d22 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003cac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d134      	bne.n	8003d22 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cc0:	d005      	beq.n	8003cce <HAL_ADC_ConfigChannel+0x72e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a4e      	ldr	r2, [pc, #312]	; (8003e00 <HAL_ADC_ConfigChannel+0x860>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	f040 8085 	bne.w	8003dd8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cd6:	d004      	beq.n	8003ce2 <HAL_ADC_ConfigChannel+0x742>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a49      	ldr	r2, [pc, #292]	; (8003e04 <HAL_ADC_ConfigChannel+0x864>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d101      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x746>
 8003ce2:	4a49      	ldr	r2, [pc, #292]	; (8003e08 <HAL_ADC_ConfigChannel+0x868>)
 8003ce4:	e000      	b.n	8003ce8 <HAL_ADC_ConfigChannel+0x748>
 8003ce6:	4a43      	ldr	r2, [pc, #268]	; (8003df4 <HAL_ADC_ConfigChannel+0x854>)
 8003ce8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	f7fe fd0f 	bl	8002716 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cf8:	4b44      	ldr	r3, [pc, #272]	; (8003e0c <HAL_ADC_ConfigChannel+0x86c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	099b      	lsrs	r3, r3, #6
 8003cfe:	4a44      	ldr	r2, [pc, #272]	; (8003e10 <HAL_ADC_ConfigChannel+0x870>)
 8003d00:	fba2 2303 	umull	r2, r3, r2, r3
 8003d04:	099b      	lsrs	r3, r3, #6
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	4613      	mov	r3, r2
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d12:	e002      	b.n	8003d1a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f9      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d20:	e05a      	b.n	8003dd8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a3b      	ldr	r2, [pc, #236]	; (8003e14 <HAL_ADC_ConfigChannel+0x874>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d125      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x7d8>
 8003d2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d11f      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a31      	ldr	r2, [pc, #196]	; (8003e04 <HAL_ADC_ConfigChannel+0x864>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d104      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x7ac>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a34      	ldr	r2, [pc, #208]	; (8003e18 <HAL_ADC_ConfigChannel+0x878>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d047      	beq.n	8003ddc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d54:	d004      	beq.n	8003d60 <HAL_ADC_ConfigChannel+0x7c0>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a2a      	ldr	r2, [pc, #168]	; (8003e04 <HAL_ADC_ConfigChannel+0x864>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d101      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x7c4>
 8003d60:	4a29      	ldr	r2, [pc, #164]	; (8003e08 <HAL_ADC_ConfigChannel+0x868>)
 8003d62:	e000      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x7c6>
 8003d64:	4a23      	ldr	r2, [pc, #140]	; (8003df4 <HAL_ADC_ConfigChannel+0x854>)
 8003d66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4610      	mov	r0, r2
 8003d72:	f7fe fcd0 	bl	8002716 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d76:	e031      	b.n	8003ddc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a27      	ldr	r2, [pc, #156]	; (8003e1c <HAL_ADC_ConfigChannel+0x87c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d12d      	bne.n	8003dde <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d127      	bne.n	8003dde <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a1c      	ldr	r2, [pc, #112]	; (8003e04 <HAL_ADC_ConfigChannel+0x864>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d022      	beq.n	8003dde <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003da0:	d004      	beq.n	8003dac <HAL_ADC_ConfigChannel+0x80c>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a17      	ldr	r2, [pc, #92]	; (8003e04 <HAL_ADC_ConfigChannel+0x864>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d101      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x810>
 8003dac:	4a16      	ldr	r2, [pc, #88]	; (8003e08 <HAL_ADC_ConfigChannel+0x868>)
 8003dae:	e000      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x812>
 8003db0:	4a10      	ldr	r2, [pc, #64]	; (8003df4 <HAL_ADC_ConfigChannel+0x854>)
 8003db2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003db6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	f7fe fcaa 	bl	8002716 <LL_ADC_SetCommonPathInternalCh>
 8003dc2:	e00c      	b.n	8003dde <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc8:	f043 0220 	orr.w	r2, r3, #32
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003dd6:	e002      	b.n	8003dde <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dd8:	bf00      	nop
 8003dda:	e000      	b.n	8003dde <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ddc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003de6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	37d8      	adds	r7, #216	; 0xd8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	50000700 	.word	0x50000700
 8003df8:	c3210000 	.word	0xc3210000
 8003dfc:	90c00010 	.word	0x90c00010
 8003e00:	50000600 	.word	0x50000600
 8003e04:	50000100 	.word	0x50000100
 8003e08:	50000300 	.word	0x50000300
 8003e0c:	20000000 	.word	0x20000000
 8003e10:	053e2d63 	.word	0x053e2d63
 8003e14:	c7520000 	.word	0xc7520000
 8003e18:	50000500 	.word	0x50000500
 8003e1c:	cb840000 	.word	0xcb840000

08003e20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fe fe55 	bl	8002adc <LL_ADC_IsEnabled>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d14d      	bne.n	8003ed4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	4b28      	ldr	r3, [pc, #160]	; (8003ee0 <ADC_Enable+0xc0>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00d      	beq.n	8003e62 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4a:	f043 0210 	orr.w	r2, r3, #16
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e56:	f043 0201 	orr.w	r2, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e039      	b.n	8003ed6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fe fe24 	bl	8002ab4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003e6c:	f7fe fc12 	bl	8002694 <HAL_GetTick>
 8003e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e72:	e028      	b.n	8003ec6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fe fe2f 	bl	8002adc <LL_ADC_IsEnabled>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d104      	bne.n	8003e8e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fe fe13 	bl	8002ab4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e8e:	f7fe fc01 	bl	8002694 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d914      	bls.n	8003ec6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d00d      	beq.n	8003ec6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eae:	f043 0210 	orr.w	r2, r3, #16
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eba:	f043 0201 	orr.w	r2, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e007      	b.n	8003ed6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d1cf      	bne.n	8003e74 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	8000003f 	.word	0x8000003f

08003ee4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d14b      	bne.n	8003f96 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f02:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d021      	beq.n	8003f5c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7fe fcb9 	bl	8002894 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d032      	beq.n	8003f8e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d12b      	bne.n	8003f8e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d11f      	bne.n	8003f8e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f52:	f043 0201 	orr.w	r2, r3, #1
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f5a:	e018      	b.n	8003f8e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d111      	bne.n	8003f8e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d105      	bne.n	8003f8e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f86:	f043 0201 	orr.w	r2, r3, #1
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f7fd f9ee 	bl	8001370 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f94:	e00e      	b.n	8003fb4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9a:	f003 0310 	and.w	r3, r3, #16
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f7ff faf2 	bl	800358c <HAL_ADC_ErrorCallback>
}
 8003fa8:	e004      	b.n	8003fb4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	4798      	blx	r3
}
 8003fb4:	bf00      	nop
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f7ff faca 	bl	8003564 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fd0:	bf00      	nop
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff6:	f043 0204 	orr.w	r2, r3, #4
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f7ff fac4 	bl	800358c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004004:	bf00      	nop
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <LL_ADC_IsEnabled>:
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <LL_ADC_IsEnabled+0x18>
 8004020:	2301      	movs	r3, #1
 8004022:	e000      	b.n	8004026 <LL_ADC_IsEnabled+0x1a>
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <LL_ADC_REG_IsConversionOngoing>:
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	2b04      	cmp	r3, #4
 8004044:	d101      	bne.n	800404a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80040bc:	b590      	push	{r4, r7, lr}
 80040be:	b0a1      	sub	sp, #132	; 0x84
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80040d6:	2302      	movs	r3, #2
 80040d8:	e0e7      	b.n	80042aa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80040e2:	2300      	movs	r3, #0
 80040e4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80040e6:	2300      	movs	r3, #0
 80040e8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040f2:	d102      	bne.n	80040fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80040f4:	4b6f      	ldr	r3, [pc, #444]	; (80042b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040f6:	60bb      	str	r3, [r7, #8]
 80040f8:	e009      	b.n	800410e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a6e      	ldr	r2, [pc, #440]	; (80042b8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d102      	bne.n	800410a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004104:	4b6d      	ldr	r3, [pc, #436]	; (80042bc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004106:	60bb      	str	r3, [r7, #8]
 8004108:	e001      	b.n	800410e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800410a:	2300      	movs	r3, #0
 800410c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10b      	bne.n	800412c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004118:	f043 0220 	orr.w	r2, r3, #32
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0be      	b.n	80042aa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff ff7f 	bl	8004032 <LL_ADC_REG_IsConversionOngoing>
 8004134:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff ff79 	bl	8004032 <LL_ADC_REG_IsConversionOngoing>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	f040 80a0 	bne.w	8004288 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800414a:	2b00      	cmp	r3, #0
 800414c:	f040 809c 	bne.w	8004288 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004158:	d004      	beq.n	8004164 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a55      	ldr	r2, [pc, #340]	; (80042b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d101      	bne.n	8004168 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004164:	4b56      	ldr	r3, [pc, #344]	; (80042c0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004166:	e000      	b.n	800416a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004168:	4b56      	ldr	r3, [pc, #344]	; (80042c4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800416a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d04b      	beq.n	800420c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	6859      	ldr	r1, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004186:	035b      	lsls	r3, r3, #13
 8004188:	430b      	orrs	r3, r1
 800418a:	431a      	orrs	r2, r3
 800418c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800418e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004198:	d004      	beq.n	80041a4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a45      	ldr	r2, [pc, #276]	; (80042b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d10f      	bne.n	80041c4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80041a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80041a8:	f7ff ff30 	bl	800400c <LL_ADC_IsEnabled>
 80041ac:	4604      	mov	r4, r0
 80041ae:	4841      	ldr	r0, [pc, #260]	; (80042b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80041b0:	f7ff ff2c 	bl	800400c <LL_ADC_IsEnabled>
 80041b4:	4603      	mov	r3, r0
 80041b6:	4323      	orrs	r3, r4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	bf0c      	ite	eq
 80041bc:	2301      	moveq	r3, #1
 80041be:	2300      	movne	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	e012      	b.n	80041ea <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80041c4:	483c      	ldr	r0, [pc, #240]	; (80042b8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80041c6:	f7ff ff21 	bl	800400c <LL_ADC_IsEnabled>
 80041ca:	4604      	mov	r4, r0
 80041cc:	483b      	ldr	r0, [pc, #236]	; (80042bc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80041ce:	f7ff ff1d 	bl	800400c <LL_ADC_IsEnabled>
 80041d2:	4603      	mov	r3, r0
 80041d4:	431c      	orrs	r4, r3
 80041d6:	483c      	ldr	r0, [pc, #240]	; (80042c8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80041d8:	f7ff ff18 	bl	800400c <LL_ADC_IsEnabled>
 80041dc:	4603      	mov	r3, r0
 80041de:	4323      	orrs	r3, r4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	bf0c      	ite	eq
 80041e4:	2301      	moveq	r3, #1
 80041e6:	2300      	movne	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d056      	beq.n	800429c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80041ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80041f6:	f023 030f 	bic.w	r3, r3, #15
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	6811      	ldr	r1, [r2, #0]
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	6892      	ldr	r2, [r2, #8]
 8004202:	430a      	orrs	r2, r1
 8004204:	431a      	orrs	r2, r3
 8004206:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004208:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800420a:	e047      	b.n	800429c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800420c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004214:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004216:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004220:	d004      	beq.n	800422c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a23      	ldr	r2, [pc, #140]	; (80042b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d10f      	bne.n	800424c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800422c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004230:	f7ff feec 	bl	800400c <LL_ADC_IsEnabled>
 8004234:	4604      	mov	r4, r0
 8004236:	481f      	ldr	r0, [pc, #124]	; (80042b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004238:	f7ff fee8 	bl	800400c <LL_ADC_IsEnabled>
 800423c:	4603      	mov	r3, r0
 800423e:	4323      	orrs	r3, r4
 8004240:	2b00      	cmp	r3, #0
 8004242:	bf0c      	ite	eq
 8004244:	2301      	moveq	r3, #1
 8004246:	2300      	movne	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	e012      	b.n	8004272 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800424c:	481a      	ldr	r0, [pc, #104]	; (80042b8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800424e:	f7ff fedd 	bl	800400c <LL_ADC_IsEnabled>
 8004252:	4604      	mov	r4, r0
 8004254:	4819      	ldr	r0, [pc, #100]	; (80042bc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004256:	f7ff fed9 	bl	800400c <LL_ADC_IsEnabled>
 800425a:	4603      	mov	r3, r0
 800425c:	431c      	orrs	r4, r3
 800425e:	481a      	ldr	r0, [pc, #104]	; (80042c8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004260:	f7ff fed4 	bl	800400c <LL_ADC_IsEnabled>
 8004264:	4603      	mov	r3, r0
 8004266:	4323      	orrs	r3, r4
 8004268:	2b00      	cmp	r3, #0
 800426a:	bf0c      	ite	eq
 800426c:	2301      	moveq	r3, #1
 800426e:	2300      	movne	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d012      	beq.n	800429c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800427e:	f023 030f 	bic.w	r3, r3, #15
 8004282:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004284:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004286:	e009      	b.n	800429c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428c:	f043 0220 	orr.w	r2, r3, #32
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800429a:	e000      	b.n	800429e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800429c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80042a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3784      	adds	r7, #132	; 0x84
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd90      	pop	{r4, r7, pc}
 80042b2:	bf00      	nop
 80042b4:	50000100 	.word	0x50000100
 80042b8:	50000400 	.word	0x50000400
 80042bc:	50000500 	.word	0x50000500
 80042c0:	50000300 	.word	0x50000300
 80042c4:	50000700 	.word	0x50000700
 80042c8:	50000600 	.word	0x50000600

080042cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042dc:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <__NVIC_SetPriorityGrouping+0x44>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042e8:	4013      	ands	r3, r2
 80042ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042fe:	4a04      	ldr	r2, [pc, #16]	; (8004310 <__NVIC_SetPriorityGrouping+0x44>)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	60d3      	str	r3, [r2, #12]
}
 8004304:	bf00      	nop
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	e000ed00 	.word	0xe000ed00

08004314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004318:	4b04      	ldr	r3, [pc, #16]	; (800432c <__NVIC_GetPriorityGrouping+0x18>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	0a1b      	lsrs	r3, r3, #8
 800431e:	f003 0307 	and.w	r3, r3, #7
}
 8004322:	4618      	mov	r0, r3
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	e000ed00 	.word	0xe000ed00

08004330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	4603      	mov	r3, r0
 8004338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800433a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433e:	2b00      	cmp	r3, #0
 8004340:	db0b      	blt.n	800435a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	f003 021f 	and.w	r2, r3, #31
 8004348:	4907      	ldr	r1, [pc, #28]	; (8004368 <__NVIC_EnableIRQ+0x38>)
 800434a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434e:	095b      	lsrs	r3, r3, #5
 8004350:	2001      	movs	r0, #1
 8004352:	fa00 f202 	lsl.w	r2, r0, r2
 8004356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	e000e100 	.word	0xe000e100

0800436c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	6039      	str	r1, [r7, #0]
 8004376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437c:	2b00      	cmp	r3, #0
 800437e:	db0a      	blt.n	8004396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	b2da      	uxtb	r2, r3
 8004384:	490c      	ldr	r1, [pc, #48]	; (80043b8 <__NVIC_SetPriority+0x4c>)
 8004386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438a:	0112      	lsls	r2, r2, #4
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	440b      	add	r3, r1
 8004390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004394:	e00a      	b.n	80043ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	b2da      	uxtb	r2, r3
 800439a:	4908      	ldr	r1, [pc, #32]	; (80043bc <__NVIC_SetPriority+0x50>)
 800439c:	79fb      	ldrb	r3, [r7, #7]
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	3b04      	subs	r3, #4
 80043a4:	0112      	lsls	r2, r2, #4
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	440b      	add	r3, r1
 80043aa:	761a      	strb	r2, [r3, #24]
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	e000e100 	.word	0xe000e100
 80043bc:	e000ed00 	.word	0xe000ed00

080043c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b089      	sub	sp, #36	; 0x24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	f1c3 0307 	rsb	r3, r3, #7
 80043da:	2b04      	cmp	r3, #4
 80043dc:	bf28      	it	cs
 80043de:	2304      	movcs	r3, #4
 80043e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	3304      	adds	r3, #4
 80043e6:	2b06      	cmp	r3, #6
 80043e8:	d902      	bls.n	80043f0 <NVIC_EncodePriority+0x30>
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	3b03      	subs	r3, #3
 80043ee:	e000      	b.n	80043f2 <NVIC_EncodePriority+0x32>
 80043f0:	2300      	movs	r3, #0
 80043f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f4:	f04f 32ff 	mov.w	r2, #4294967295
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	fa02 f303 	lsl.w	r3, r2, r3
 80043fe:	43da      	mvns	r2, r3
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	401a      	ands	r2, r3
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004408:	f04f 31ff 	mov.w	r1, #4294967295
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	fa01 f303 	lsl.w	r3, r1, r3
 8004412:	43d9      	mvns	r1, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004418:	4313      	orrs	r3, r2
         );
}
 800441a:	4618      	mov	r0, r3
 800441c:	3724      	adds	r7, #36	; 0x24
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b082      	sub	sp, #8
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7ff ff4c 	bl	80042cc <__NVIC_SetPriorityGrouping>
}
 8004434:	bf00      	nop
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	4603      	mov	r3, r0
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
 8004448:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800444a:	f7ff ff63 	bl	8004314 <__NVIC_GetPriorityGrouping>
 800444e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	68b9      	ldr	r1, [r7, #8]
 8004454:	6978      	ldr	r0, [r7, #20]
 8004456:	f7ff ffb3 	bl	80043c0 <NVIC_EncodePriority>
 800445a:	4602      	mov	r2, r0
 800445c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004460:	4611      	mov	r1, r2
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff ff82 	bl	800436c <__NVIC_SetPriority>
}
 8004468:	bf00      	nop
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800447a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff ff56 	bl	8004330 <__NVIC_EnableIRQ>
}
 8004484:	bf00      	nop
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e08d      	b.n	80045ba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	4b47      	ldr	r3, [pc, #284]	; (80045c4 <HAL_DMA_Init+0x138>)
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d80f      	bhi.n	80044ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	461a      	mov	r2, r3
 80044b0:	4b45      	ldr	r3, [pc, #276]	; (80045c8 <HAL_DMA_Init+0x13c>)
 80044b2:	4413      	add	r3, r2
 80044b4:	4a45      	ldr	r2, [pc, #276]	; (80045cc <HAL_DMA_Init+0x140>)
 80044b6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ba:	091b      	lsrs	r3, r3, #4
 80044bc:	009a      	lsls	r2, r3, #2
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a42      	ldr	r2, [pc, #264]	; (80045d0 <HAL_DMA_Init+0x144>)
 80044c6:	641a      	str	r2, [r3, #64]	; 0x40
 80044c8:	e00e      	b.n	80044e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	4b40      	ldr	r3, [pc, #256]	; (80045d4 <HAL_DMA_Init+0x148>)
 80044d2:	4413      	add	r3, r2
 80044d4:	4a3d      	ldr	r2, [pc, #244]	; (80045cc <HAL_DMA_Init+0x140>)
 80044d6:	fba2 2303 	umull	r2, r3, r2, r3
 80044da:	091b      	lsrs	r3, r3, #4
 80044dc:	009a      	lsls	r2, r3, #2
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a3c      	ldr	r2, [pc, #240]	; (80045d8 <HAL_DMA_Init+0x14c>)
 80044e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80044fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004502:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800450c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004518:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004524:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fa76 	bl	8004a2c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004548:	d102      	bne.n	8004550 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004564:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d010      	beq.n	8004590 <HAL_DMA_Init+0x104>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b04      	cmp	r3, #4
 8004574:	d80c      	bhi.n	8004590 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fa96 	bl	8004aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800458c:	605a      	str	r2, [r3, #4]
 800458e:	e008      	b.n	80045a2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40020407 	.word	0x40020407
 80045c8:	bffdfff8 	.word	0xbffdfff8
 80045cc:	cccccccd 	.word	0xcccccccd
 80045d0:	40020000 	.word	0x40020000
 80045d4:	bffdfbf8 	.word	0xbffdfbf8
 80045d8:	40020400 	.word	0x40020400

080045dc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
 80045e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_DMA_Start_IT+0x20>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e066      	b.n	80046ca <HAL_DMA_Start_IT+0xee>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b01      	cmp	r3, #1
 800460e:	d155      	bne.n	80046bc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0201 	bic.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 f9bb 	bl	80049b0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	2b00      	cmp	r3, #0
 8004640:	d008      	beq.n	8004654 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f042 020e 	orr.w	r2, r2, #14
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	e00f      	b.n	8004674 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0204 	bic.w	r2, r2, #4
 8004662:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 020a 	orr.w	r2, r2, #10
 8004672:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d007      	beq.n	8004692 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800468c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004690:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004696:	2b00      	cmp	r3, #0
 8004698:	d007      	beq.n	80046aa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f042 0201 	orr.w	r2, r2, #1
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	e005      	b.n	80046c8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80046c4:	2302      	movs	r3, #2
 80046c6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80046c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b085      	sub	sp, #20
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d005      	beq.n	80046f6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2204      	movs	r2, #4
 80046ee:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	73fb      	strb	r3, [r7, #15]
 80046f4:	e037      	b.n	8004766 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 020e 	bic.w	r2, r2, #14
 8004704:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004710:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004714:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0201 	bic.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472a:	f003 021f 	and.w	r2, r3, #31
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	2101      	movs	r1, #1
 8004734:	fa01 f202 	lsl.w	r2, r1, r2
 8004738:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004742:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00c      	beq.n	8004766 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004756:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800475a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004764:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004776:	7bfb      	ldrb	r3, [r7, #15]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d00d      	beq.n	80047b8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2204      	movs	r2, #4
 80047a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	73fb      	strb	r3, [r7, #15]
 80047b6:	e047      	b.n	8004848 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 020e 	bic.w	r2, r2, #14
 80047c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0201 	bic.w	r2, r2, #1
 80047d6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ec:	f003 021f 	and.w	r2, r3, #31
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	2101      	movs	r1, #1
 80047f6:	fa01 f202 	lsl.w	r2, r1, r2
 80047fa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004804:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00c      	beq.n	8004828 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004818:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800481c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004826:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	4798      	blx	r3
    }
  }
  return status;
 8004848:	7bfb      	ldrb	r3, [r7, #15]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b084      	sub	sp, #16
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	f003 031f 	and.w	r3, r3, #31
 8004872:	2204      	movs	r2, #4
 8004874:	409a      	lsls	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4013      	ands	r3, r2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d026      	beq.n	80048cc <HAL_DMA_IRQHandler+0x7a>
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d021      	beq.n	80048cc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b00      	cmp	r3, #0
 8004894:	d107      	bne.n	80048a6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0204 	bic.w	r2, r2, #4
 80048a4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048aa:	f003 021f 	and.w	r2, r3, #31
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	2104      	movs	r1, #4
 80048b4:	fa01 f202 	lsl.w	r2, r1, r2
 80048b8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d071      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80048ca:	e06c      	b.n	80049a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d0:	f003 031f 	and.w	r3, r3, #31
 80048d4:	2202      	movs	r2, #2
 80048d6:	409a      	lsls	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4013      	ands	r3, r2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d02e      	beq.n	800493e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d029      	beq.n	800493e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10b      	bne.n	8004910 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 020a 	bic.w	r2, r2, #10
 8004906:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004914:	f003 021f 	and.w	r2, r3, #31
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491c:	2102      	movs	r1, #2
 800491e:	fa01 f202 	lsl.w	r2, r1, r2
 8004922:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	2b00      	cmp	r3, #0
 8004932:	d038      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800493c:	e033      	b.n	80049a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004942:	f003 031f 	and.w	r3, r3, #31
 8004946:	2208      	movs	r2, #8
 8004948:	409a      	lsls	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4013      	ands	r3, r2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d02a      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b00      	cmp	r3, #0
 800495a:	d025      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 020e 	bic.w	r2, r2, #14
 800496a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004970:	f003 021f 	and.w	r2, r3, #31
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004978:	2101      	movs	r1, #1
 800497a:	fa01 f202 	lsl.w	r2, r1, r2
 800497e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499a:	2b00      	cmp	r3, #0
 800499c:	d004      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80049a6:	bf00      	nop
 80049a8:	bf00      	nop
}
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80049c6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d004      	beq.n	80049da <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80049d8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049de:	f003 021f 	and.w	r2, r3, #31
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	2101      	movs	r1, #1
 80049e8:	fa01 f202 	lsl.w	r2, r1, r2
 80049ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2b10      	cmp	r3, #16
 80049fc:	d108      	bne.n	8004a10 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a0e:	e007      	b.n	8004a20 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	60da      	str	r2, [r3, #12]
}
 8004a20:	bf00      	nop
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	4b16      	ldr	r3, [pc, #88]	; (8004a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d802      	bhi.n	8004a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004a40:	4b15      	ldr	r3, [pc, #84]	; (8004a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	e001      	b.n	8004a4a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004a46:	4b15      	ldr	r3, [pc, #84]	; (8004a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004a48:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	3b08      	subs	r3, #8
 8004a56:	4a12      	ldr	r2, [pc, #72]	; (8004aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	091b      	lsrs	r3, r3, #4
 8004a5e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a64:	089b      	lsrs	r3, r3, #2
 8004a66:	009a      	lsls	r2, r3, #2
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a0b      	ldr	r2, [pc, #44]	; (8004aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004a76:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f003 031f 	and.w	r3, r3, #31
 8004a7e:	2201      	movs	r2, #1
 8004a80:	409a      	lsls	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a86:	bf00      	nop
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	40020407 	.word	0x40020407
 8004a98:	40020800 	.word	0x40020800
 8004a9c:	40020820 	.word	0x40020820
 8004aa0:	cccccccd 	.word	0xcccccccd
 8004aa4:	40020880 	.word	0x40020880

08004aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004abc:	4413      	add	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a08      	ldr	r2, [pc, #32]	; (8004aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004aca:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	f003 031f 	and.w	r3, r3, #31
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	409a      	lsls	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004adc:	bf00      	nop
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	1000823f 	.word	0x1000823f
 8004aec:	40020940 	.word	0x40020940

08004af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004afe:	e15a      	b.n	8004db6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	2101      	movs	r1, #1
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 814c 	beq.w	8004db0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 0303 	and.w	r3, r3, #3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d005      	beq.n	8004b30 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d130      	bne.n	8004b92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	43db      	mvns	r3, r3
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4013      	ands	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b66:	2201      	movs	r2, #1
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	4013      	ands	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	091b      	lsrs	r3, r3, #4
 8004b7c:	f003 0201 	and.w	r2, r3, #1
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d017      	beq.n	8004bce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	2203      	movs	r2, #3
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d123      	bne.n	8004c22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	08da      	lsrs	r2, r3, #3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3208      	adds	r2, #8
 8004be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004be6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	220f      	movs	r2, #15
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	08da      	lsrs	r2, r3, #3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3208      	adds	r2, #8
 8004c1c:	6939      	ldr	r1, [r7, #16]
 8004c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	2203      	movs	r2, #3
 8004c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c32:	43db      	mvns	r3, r3
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4013      	ands	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f003 0203 	and.w	r2, r3, #3
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 80a6 	beq.w	8004db0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c64:	4b5b      	ldr	r3, [pc, #364]	; (8004dd4 <HAL_GPIO_Init+0x2e4>)
 8004c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c68:	4a5a      	ldr	r2, [pc, #360]	; (8004dd4 <HAL_GPIO_Init+0x2e4>)
 8004c6a:	f043 0301 	orr.w	r3, r3, #1
 8004c6e:	6613      	str	r3, [r2, #96]	; 0x60
 8004c70:	4b58      	ldr	r3, [pc, #352]	; (8004dd4 <HAL_GPIO_Init+0x2e4>)
 8004c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c7c:	4a56      	ldr	r2, [pc, #344]	; (8004dd8 <HAL_GPIO_Init+0x2e8>)
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	089b      	lsrs	r3, r3, #2
 8004c82:	3302      	adds	r3, #2
 8004c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f003 0303 	and.w	r3, r3, #3
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	220f      	movs	r2, #15
 8004c94:	fa02 f303 	lsl.w	r3, r2, r3
 8004c98:	43db      	mvns	r3, r3
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004ca6:	d01f      	beq.n	8004ce8 <HAL_GPIO_Init+0x1f8>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a4c      	ldr	r2, [pc, #304]	; (8004ddc <HAL_GPIO_Init+0x2ec>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d019      	beq.n	8004ce4 <HAL_GPIO_Init+0x1f4>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a4b      	ldr	r2, [pc, #300]	; (8004de0 <HAL_GPIO_Init+0x2f0>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d013      	beq.n	8004ce0 <HAL_GPIO_Init+0x1f0>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a4a      	ldr	r2, [pc, #296]	; (8004de4 <HAL_GPIO_Init+0x2f4>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00d      	beq.n	8004cdc <HAL_GPIO_Init+0x1ec>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a49      	ldr	r2, [pc, #292]	; (8004de8 <HAL_GPIO_Init+0x2f8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d007      	beq.n	8004cd8 <HAL_GPIO_Init+0x1e8>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a48      	ldr	r2, [pc, #288]	; (8004dec <HAL_GPIO_Init+0x2fc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d101      	bne.n	8004cd4 <HAL_GPIO_Init+0x1e4>
 8004cd0:	2305      	movs	r3, #5
 8004cd2:	e00a      	b.n	8004cea <HAL_GPIO_Init+0x1fa>
 8004cd4:	2306      	movs	r3, #6
 8004cd6:	e008      	b.n	8004cea <HAL_GPIO_Init+0x1fa>
 8004cd8:	2304      	movs	r3, #4
 8004cda:	e006      	b.n	8004cea <HAL_GPIO_Init+0x1fa>
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e004      	b.n	8004cea <HAL_GPIO_Init+0x1fa>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	e002      	b.n	8004cea <HAL_GPIO_Init+0x1fa>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <HAL_GPIO_Init+0x1fa>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	f002 0203 	and.w	r2, r2, #3
 8004cf0:	0092      	lsls	r2, r2, #2
 8004cf2:	4093      	lsls	r3, r2
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cfa:	4937      	ldr	r1, [pc, #220]	; (8004dd8 <HAL_GPIO_Init+0x2e8>)
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	089b      	lsrs	r3, r3, #2
 8004d00:	3302      	adds	r3, #2
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d08:	4b39      	ldr	r3, [pc, #228]	; (8004df0 <HAL_GPIO_Init+0x300>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	43db      	mvns	r3, r3
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4013      	ands	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d2c:	4a30      	ldr	r2, [pc, #192]	; (8004df0 <HAL_GPIO_Init+0x300>)
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004d32:	4b2f      	ldr	r3, [pc, #188]	; (8004df0 <HAL_GPIO_Init+0x300>)
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	43db      	mvns	r3, r3
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d56:	4a26      	ldr	r2, [pc, #152]	; (8004df0 <HAL_GPIO_Init+0x300>)
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004d5c:	4b24      	ldr	r3, [pc, #144]	; (8004df0 <HAL_GPIO_Init+0x300>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	43db      	mvns	r3, r3
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d80:	4a1b      	ldr	r2, [pc, #108]	; (8004df0 <HAL_GPIO_Init+0x300>)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d86:	4b1a      	ldr	r3, [pc, #104]	; (8004df0 <HAL_GPIO_Init+0x300>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	43db      	mvns	r3, r3
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4013      	ands	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004daa:	4a11      	ldr	r2, [pc, #68]	; (8004df0 <HAL_GPIO_Init+0x300>)
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	3301      	adds	r3, #1
 8004db4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f47f ae9d 	bne.w	8004b00 <HAL_GPIO_Init+0x10>
  }
}
 8004dc6:	bf00      	nop
 8004dc8:	bf00      	nop
 8004dca:	371c      	adds	r7, #28
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	40010000 	.word	0x40010000
 8004ddc:	48000400 	.word	0x48000400
 8004de0:	48000800 	.word	0x48000800
 8004de4:	48000c00 	.word	0x48000c00
 8004de8:	48001000 	.word	0x48001000
 8004dec:	48001400 	.word	0x48001400
 8004df0:	40010400 	.word	0x40010400

08004df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	807b      	strh	r3, [r7, #2]
 8004e00:	4613      	mov	r3, r2
 8004e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e04:	787b      	ldrb	r3, [r7, #1]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e0a:	887a      	ldrh	r2, [r7, #2]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e10:	e002      	b.n	8004e18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e12:	887a      	ldrh	r2, [r7, #2]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e2e:	4b08      	ldr	r3, [pc, #32]	; (8004e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e30:	695a      	ldr	r2, [r3, #20]
 8004e32:	88fb      	ldrh	r3, [r7, #6]
 8004e34:	4013      	ands	r3, r2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d006      	beq.n	8004e48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e3a:	4a05      	ldr	r2, [pc, #20]	; (8004e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e3c:	88fb      	ldrh	r3, [r7, #6]
 8004e3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e40:	88fb      	ldrh	r3, [r7, #6]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 f806 	bl	8004e54 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e48:	bf00      	nop
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	40010400 	.word	0x40010400

08004e54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
	...

08004e6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d141      	bne.n	8004efe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e7a:	4b4b      	ldr	r3, [pc, #300]	; (8004fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e86:	d131      	bne.n	8004eec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e88:	4b47      	ldr	r3, [pc, #284]	; (8004fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e8e:	4a46      	ldr	r2, [pc, #280]	; (8004fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e98:	4b43      	ldr	r3, [pc, #268]	; (8004fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ea0:	4a41      	ldr	r2, [pc, #260]	; (8004fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ea6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ea8:	4b40      	ldr	r3, [pc, #256]	; (8004fac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2232      	movs	r2, #50	; 0x32
 8004eae:	fb02 f303 	mul.w	r3, r2, r3
 8004eb2:	4a3f      	ldr	r2, [pc, #252]	; (8004fb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb8:	0c9b      	lsrs	r3, r3, #18
 8004eba:	3301      	adds	r3, #1
 8004ebc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ebe:	e002      	b.n	8004ec6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ec6:	4b38      	ldr	r3, [pc, #224]	; (8004fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed2:	d102      	bne.n	8004eda <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1f2      	bne.n	8004ec0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004eda:	4b33      	ldr	r3, [pc, #204]	; (8004fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee6:	d158      	bne.n	8004f9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e057      	b.n	8004f9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004eec:	4b2e      	ldr	r3, [pc, #184]	; (8004fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ef2:	4a2d      	ldr	r2, [pc, #180]	; (8004fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ef8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004efc:	e04d      	b.n	8004f9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f04:	d141      	bne.n	8004f8a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f06:	4b28      	ldr	r3, [pc, #160]	; (8004fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f12:	d131      	bne.n	8004f78 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f14:	4b24      	ldr	r3, [pc, #144]	; (8004fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f1a:	4a23      	ldr	r2, [pc, #140]	; (8004fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f24:	4b20      	ldr	r3, [pc, #128]	; (8004fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f2c:	4a1e      	ldr	r2, [pc, #120]	; (8004fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f34:	4b1d      	ldr	r3, [pc, #116]	; (8004fac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2232      	movs	r2, #50	; 0x32
 8004f3a:	fb02 f303 	mul.w	r3, r2, r3
 8004f3e:	4a1c      	ldr	r2, [pc, #112]	; (8004fb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f40:	fba2 2303 	umull	r2, r3, r2, r3
 8004f44:	0c9b      	lsrs	r3, r3, #18
 8004f46:	3301      	adds	r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f4a:	e002      	b.n	8004f52 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f52:	4b15      	ldr	r3, [pc, #84]	; (8004fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f5e:	d102      	bne.n	8004f66 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f2      	bne.n	8004f4c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f66:	4b10      	ldr	r3, [pc, #64]	; (8004fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f72:	d112      	bne.n	8004f9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e011      	b.n	8004f9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f78:	4b0b      	ldr	r3, [pc, #44]	; (8004fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f7e:	4a0a      	ldr	r2, [pc, #40]	; (8004fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004f88:	e007      	b.n	8004f9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f8a:	4b07      	ldr	r3, [pc, #28]	; (8004fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f92:	4a05      	ldr	r2, [pc, #20]	; (8004fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f98:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	40007000 	.word	0x40007000
 8004fac:	20000000 	.word	0x20000000
 8004fb0:	431bde83 	.word	0x431bde83

08004fb4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004fb8:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	4a04      	ldr	r2, [pc, #16]	; (8004fd0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004fbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fc2:	6093      	str	r3, [r2, #8]
}
 8004fc4:	bf00      	nop
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	40007000 	.word	0x40007000

08004fd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e306      	b.n	80055f4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d075      	beq.n	80050de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ff2:	4b97      	ldr	r3, [pc, #604]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 030c 	and.w	r3, r3, #12
 8004ffa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ffc:	4b94      	ldr	r3, [pc, #592]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f003 0303 	and.w	r3, r3, #3
 8005004:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	2b0c      	cmp	r3, #12
 800500a:	d102      	bne.n	8005012 <HAL_RCC_OscConfig+0x3e>
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	2b03      	cmp	r3, #3
 8005010:	d002      	beq.n	8005018 <HAL_RCC_OscConfig+0x44>
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	2b08      	cmp	r3, #8
 8005016:	d10b      	bne.n	8005030 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005018:	4b8d      	ldr	r3, [pc, #564]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d05b      	beq.n	80050dc <HAL_RCC_OscConfig+0x108>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d157      	bne.n	80050dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e2e1      	b.n	80055f4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005038:	d106      	bne.n	8005048 <HAL_RCC_OscConfig+0x74>
 800503a:	4b85      	ldr	r3, [pc, #532]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a84      	ldr	r2, [pc, #528]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 8005040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	e01d      	b.n	8005084 <HAL_RCC_OscConfig+0xb0>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005050:	d10c      	bne.n	800506c <HAL_RCC_OscConfig+0x98>
 8005052:	4b7f      	ldr	r3, [pc, #508]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a7e      	ldr	r2, [pc, #504]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 8005058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	4b7c      	ldr	r3, [pc, #496]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a7b      	ldr	r2, [pc, #492]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 8005064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	e00b      	b.n	8005084 <HAL_RCC_OscConfig+0xb0>
 800506c:	4b78      	ldr	r3, [pc, #480]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a77      	ldr	r2, [pc, #476]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 8005072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005076:	6013      	str	r3, [r2, #0]
 8005078:	4b75      	ldr	r3, [pc, #468]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a74      	ldr	r2, [pc, #464]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 800507e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d013      	beq.n	80050b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508c:	f7fd fb02 	bl	8002694 <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005094:	f7fd fafe 	bl	8002694 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b64      	cmp	r3, #100	; 0x64
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e2a6      	b.n	80055f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050a6:	4b6a      	ldr	r3, [pc, #424]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0f0      	beq.n	8005094 <HAL_RCC_OscConfig+0xc0>
 80050b2:	e014      	b.n	80050de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b4:	f7fd faee 	bl	8002694 <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050bc:	f7fd faea 	bl	8002694 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b64      	cmp	r3, #100	; 0x64
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e292      	b.n	80055f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050ce:	4b60      	ldr	r3, [pc, #384]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1f0      	bne.n	80050bc <HAL_RCC_OscConfig+0xe8>
 80050da:	e000      	b.n	80050de <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d075      	beq.n	80051d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ea:	4b59      	ldr	r3, [pc, #356]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 030c 	and.w	r3, r3, #12
 80050f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050f4:	4b56      	ldr	r3, [pc, #344]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f003 0303 	and.w	r3, r3, #3
 80050fc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	2b0c      	cmp	r3, #12
 8005102:	d102      	bne.n	800510a <HAL_RCC_OscConfig+0x136>
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	2b02      	cmp	r3, #2
 8005108:	d002      	beq.n	8005110 <HAL_RCC_OscConfig+0x13c>
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	2b04      	cmp	r3, #4
 800510e:	d11f      	bne.n	8005150 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005110:	4b4f      	ldr	r3, [pc, #316]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005118:	2b00      	cmp	r3, #0
 800511a:	d005      	beq.n	8005128 <HAL_RCC_OscConfig+0x154>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e265      	b.n	80055f4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005128:	4b49      	ldr	r3, [pc, #292]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	061b      	lsls	r3, r3, #24
 8005136:	4946      	ldr	r1, [pc, #280]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 8005138:	4313      	orrs	r3, r2
 800513a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800513c:	4b45      	ldr	r3, [pc, #276]	; (8005254 <HAL_RCC_OscConfig+0x280>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	f7fc fa2b 	bl	800159c <HAL_InitTick>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d043      	beq.n	80051d4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e251      	b.n	80055f4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d023      	beq.n	80051a0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005158:	4b3d      	ldr	r3, [pc, #244]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a3c      	ldr	r2, [pc, #240]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 800515e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005164:	f7fd fa96 	bl	8002694 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800516c:	f7fd fa92 	bl	8002694 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e23a      	b.n	80055f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800517e:	4b34      	ldr	r3, [pc, #208]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0f0      	beq.n	800516c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800518a:	4b31      	ldr	r3, [pc, #196]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	061b      	lsls	r3, r3, #24
 8005198:	492d      	ldr	r1, [pc, #180]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 800519a:	4313      	orrs	r3, r2
 800519c:	604b      	str	r3, [r1, #4]
 800519e:	e01a      	b.n	80051d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051a0:	4b2b      	ldr	r3, [pc, #172]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a2a      	ldr	r2, [pc, #168]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 80051a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ac:	f7fd fa72 	bl	8002694 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051b4:	f7fd fa6e 	bl	8002694 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e216      	b.n	80055f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051c6:	4b22      	ldr	r3, [pc, #136]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f0      	bne.n	80051b4 <HAL_RCC_OscConfig+0x1e0>
 80051d2:	e000      	b.n	80051d6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0308 	and.w	r3, r3, #8
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d041      	beq.n	8005266 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d01c      	beq.n	8005224 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ea:	4b19      	ldr	r3, [pc, #100]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 80051ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051f0:	4a17      	ldr	r2, [pc, #92]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 80051f2:	f043 0301 	orr.w	r3, r3, #1
 80051f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051fa:	f7fd fa4b 	bl	8002694 <HAL_GetTick>
 80051fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005200:	e008      	b.n	8005214 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005202:	f7fd fa47 	bl	8002694 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d901      	bls.n	8005214 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e1ef      	b.n	80055f4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005214:	4b0e      	ldr	r3, [pc, #56]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 8005216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0ef      	beq.n	8005202 <HAL_RCC_OscConfig+0x22e>
 8005222:	e020      	b.n	8005266 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005224:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 8005226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800522a:	4a09      	ldr	r2, [pc, #36]	; (8005250 <HAL_RCC_OscConfig+0x27c>)
 800522c:	f023 0301 	bic.w	r3, r3, #1
 8005230:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005234:	f7fd fa2e 	bl	8002694 <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800523a:	e00d      	b.n	8005258 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800523c:	f7fd fa2a 	bl	8002694 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d906      	bls.n	8005258 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e1d2      	b.n	80055f4 <HAL_RCC_OscConfig+0x620>
 800524e:	bf00      	nop
 8005250:	40021000 	.word	0x40021000
 8005254:	200000c4 	.word	0x200000c4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005258:	4b8c      	ldr	r3, [pc, #560]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 800525a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1ea      	bne.n	800523c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 80a6 	beq.w	80053c0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005274:	2300      	movs	r3, #0
 8005276:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005278:	4b84      	ldr	r3, [pc, #528]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 800527a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800527c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_RCC_OscConfig+0x2b4>
 8005284:	2301      	movs	r3, #1
 8005286:	e000      	b.n	800528a <HAL_RCC_OscConfig+0x2b6>
 8005288:	2300      	movs	r3, #0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00d      	beq.n	80052aa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800528e:	4b7f      	ldr	r3, [pc, #508]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 8005290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005292:	4a7e      	ldr	r2, [pc, #504]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 8005294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005298:	6593      	str	r3, [r2, #88]	; 0x58
 800529a:	4b7c      	ldr	r3, [pc, #496]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 800529c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80052a6:	2301      	movs	r3, #1
 80052a8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052aa:	4b79      	ldr	r3, [pc, #484]	; (8005490 <HAL_RCC_OscConfig+0x4bc>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d118      	bne.n	80052e8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052b6:	4b76      	ldr	r3, [pc, #472]	; (8005490 <HAL_RCC_OscConfig+0x4bc>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a75      	ldr	r2, [pc, #468]	; (8005490 <HAL_RCC_OscConfig+0x4bc>)
 80052bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052c2:	f7fd f9e7 	bl	8002694 <HAL_GetTick>
 80052c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052c8:	e008      	b.n	80052dc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ca:	f7fd f9e3 	bl	8002694 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d901      	bls.n	80052dc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e18b      	b.n	80055f4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052dc:	4b6c      	ldr	r3, [pc, #432]	; (8005490 <HAL_RCC_OscConfig+0x4bc>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0f0      	beq.n	80052ca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d108      	bne.n	8005302 <HAL_RCC_OscConfig+0x32e>
 80052f0:	4b66      	ldr	r3, [pc, #408]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 80052f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f6:	4a65      	ldr	r2, [pc, #404]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 80052f8:	f043 0301 	orr.w	r3, r3, #1
 80052fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005300:	e024      	b.n	800534c <HAL_RCC_OscConfig+0x378>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	2b05      	cmp	r3, #5
 8005308:	d110      	bne.n	800532c <HAL_RCC_OscConfig+0x358>
 800530a:	4b60      	ldr	r3, [pc, #384]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 800530c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005310:	4a5e      	ldr	r2, [pc, #376]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 8005312:	f043 0304 	orr.w	r3, r3, #4
 8005316:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800531a:	4b5c      	ldr	r3, [pc, #368]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 800531c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005320:	4a5a      	ldr	r2, [pc, #360]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 8005322:	f043 0301 	orr.w	r3, r3, #1
 8005326:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800532a:	e00f      	b.n	800534c <HAL_RCC_OscConfig+0x378>
 800532c:	4b57      	ldr	r3, [pc, #348]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 800532e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005332:	4a56      	ldr	r2, [pc, #344]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 8005334:	f023 0301 	bic.w	r3, r3, #1
 8005338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800533c:	4b53      	ldr	r3, [pc, #332]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 800533e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005342:	4a52      	ldr	r2, [pc, #328]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 8005344:	f023 0304 	bic.w	r3, r3, #4
 8005348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d016      	beq.n	8005382 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005354:	f7fd f99e 	bl	8002694 <HAL_GetTick>
 8005358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800535a:	e00a      	b.n	8005372 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800535c:	f7fd f99a 	bl	8002694 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	f241 3288 	movw	r2, #5000	; 0x1388
 800536a:	4293      	cmp	r3, r2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e140      	b.n	80055f4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005372:	4b46      	ldr	r3, [pc, #280]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 8005374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d0ed      	beq.n	800535c <HAL_RCC_OscConfig+0x388>
 8005380:	e015      	b.n	80053ae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005382:	f7fd f987 	bl	8002694 <HAL_GetTick>
 8005386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005388:	e00a      	b.n	80053a0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800538a:	f7fd f983 	bl	8002694 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	f241 3288 	movw	r2, #5000	; 0x1388
 8005398:	4293      	cmp	r3, r2
 800539a:	d901      	bls.n	80053a0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e129      	b.n	80055f4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053a0:	4b3a      	ldr	r3, [pc, #232]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 80053a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1ed      	bne.n	800538a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053ae:	7ffb      	ldrb	r3, [r7, #31]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d105      	bne.n	80053c0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053b4:	4b35      	ldr	r3, [pc, #212]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 80053b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b8:	4a34      	ldr	r2, [pc, #208]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 80053ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0320 	and.w	r3, r3, #32
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d03c      	beq.n	8005446 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d01c      	beq.n	800540e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053d4:	4b2d      	ldr	r3, [pc, #180]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 80053d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053da:	4a2c      	ldr	r2, [pc, #176]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 80053dc:	f043 0301 	orr.w	r3, r3, #1
 80053e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e4:	f7fd f956 	bl	8002694 <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053ec:	f7fd f952 	bl	8002694 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e0fa      	b.n	80055f4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053fe:	4b23      	ldr	r3, [pc, #140]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 8005400:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0ef      	beq.n	80053ec <HAL_RCC_OscConfig+0x418>
 800540c:	e01b      	b.n	8005446 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800540e:	4b1f      	ldr	r3, [pc, #124]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 8005410:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005414:	4a1d      	ldr	r2, [pc, #116]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 8005416:	f023 0301 	bic.w	r3, r3, #1
 800541a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800541e:	f7fd f939 	bl	8002694 <HAL_GetTick>
 8005422:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005424:	e008      	b.n	8005438 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005426:	f7fd f935 	bl	8002694 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d901      	bls.n	8005438 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e0dd      	b.n	80055f4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005438:	4b14      	ldr	r3, [pc, #80]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 800543a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1ef      	bne.n	8005426 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 80d1 	beq.w	80055f2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005450:	4b0e      	ldr	r3, [pc, #56]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f003 030c 	and.w	r3, r3, #12
 8005458:	2b0c      	cmp	r3, #12
 800545a:	f000 808b 	beq.w	8005574 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	2b02      	cmp	r3, #2
 8005464:	d15e      	bne.n	8005524 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005466:	4b09      	ldr	r3, [pc, #36]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a08      	ldr	r2, [pc, #32]	; (800548c <HAL_RCC_OscConfig+0x4b8>)
 800546c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005472:	f7fd f90f 	bl	8002694 <HAL_GetTick>
 8005476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005478:	e00c      	b.n	8005494 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800547a:	f7fd f90b 	bl	8002694 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d905      	bls.n	8005494 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e0b3      	b.n	80055f4 <HAL_RCC_OscConfig+0x620>
 800548c:	40021000 	.word	0x40021000
 8005490:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005494:	4b59      	ldr	r3, [pc, #356]	; (80055fc <HAL_RCC_OscConfig+0x628>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1ec      	bne.n	800547a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054a0:	4b56      	ldr	r3, [pc, #344]	; (80055fc <HAL_RCC_OscConfig+0x628>)
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	4b56      	ldr	r3, [pc, #344]	; (8005600 <HAL_RCC_OscConfig+0x62c>)
 80054a6:	4013      	ands	r3, r2
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6a11      	ldr	r1, [r2, #32]
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054b0:	3a01      	subs	r2, #1
 80054b2:	0112      	lsls	r2, r2, #4
 80054b4:	4311      	orrs	r1, r2
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80054ba:	0212      	lsls	r2, r2, #8
 80054bc:	4311      	orrs	r1, r2
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054c2:	0852      	lsrs	r2, r2, #1
 80054c4:	3a01      	subs	r2, #1
 80054c6:	0552      	lsls	r2, r2, #21
 80054c8:	4311      	orrs	r1, r2
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054ce:	0852      	lsrs	r2, r2, #1
 80054d0:	3a01      	subs	r2, #1
 80054d2:	0652      	lsls	r2, r2, #25
 80054d4:	4311      	orrs	r1, r2
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054da:	06d2      	lsls	r2, r2, #27
 80054dc:	430a      	orrs	r2, r1
 80054de:	4947      	ldr	r1, [pc, #284]	; (80055fc <HAL_RCC_OscConfig+0x628>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054e4:	4b45      	ldr	r3, [pc, #276]	; (80055fc <HAL_RCC_OscConfig+0x628>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a44      	ldr	r2, [pc, #272]	; (80055fc <HAL_RCC_OscConfig+0x628>)
 80054ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054ee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054f0:	4b42      	ldr	r3, [pc, #264]	; (80055fc <HAL_RCC_OscConfig+0x628>)
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	4a41      	ldr	r2, [pc, #260]	; (80055fc <HAL_RCC_OscConfig+0x628>)
 80054f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fc:	f7fd f8ca 	bl	8002694 <HAL_GetTick>
 8005500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005504:	f7fd f8c6 	bl	8002694 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e06e      	b.n	80055f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005516:	4b39      	ldr	r3, [pc, #228]	; (80055fc <HAL_RCC_OscConfig+0x628>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0f0      	beq.n	8005504 <HAL_RCC_OscConfig+0x530>
 8005522:	e066      	b.n	80055f2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005524:	4b35      	ldr	r3, [pc, #212]	; (80055fc <HAL_RCC_OscConfig+0x628>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a34      	ldr	r2, [pc, #208]	; (80055fc <HAL_RCC_OscConfig+0x628>)
 800552a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800552e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005530:	4b32      	ldr	r3, [pc, #200]	; (80055fc <HAL_RCC_OscConfig+0x628>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	4a31      	ldr	r2, [pc, #196]	; (80055fc <HAL_RCC_OscConfig+0x628>)
 8005536:	f023 0303 	bic.w	r3, r3, #3
 800553a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800553c:	4b2f      	ldr	r3, [pc, #188]	; (80055fc <HAL_RCC_OscConfig+0x628>)
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	4a2e      	ldr	r2, [pc, #184]	; (80055fc <HAL_RCC_OscConfig+0x628>)
 8005542:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800554a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554c:	f7fd f8a2 	bl	8002694 <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005554:	f7fd f89e 	bl	8002694 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e046      	b.n	80055f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005566:	4b25      	ldr	r3, [pc, #148]	; (80055fc <HAL_RCC_OscConfig+0x628>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1f0      	bne.n	8005554 <HAL_RCC_OscConfig+0x580>
 8005572:	e03e      	b.n	80055f2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e039      	b.n	80055f4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005580:	4b1e      	ldr	r3, [pc, #120]	; (80055fc <HAL_RCC_OscConfig+0x628>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f003 0203 	and.w	r2, r3, #3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	429a      	cmp	r2, r3
 8005592:	d12c      	bne.n	80055ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	3b01      	subs	r3, #1
 80055a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d123      	bne.n	80055ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d11b      	bne.n	80055ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d113      	bne.n	80055ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d0:	085b      	lsrs	r3, r3, #1
 80055d2:	3b01      	subs	r3, #1
 80055d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d109      	bne.n	80055ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e4:	085b      	lsrs	r3, r3, #1
 80055e6:	3b01      	subs	r3, #1
 80055e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d001      	beq.n	80055f2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3720      	adds	r7, #32
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	40021000 	.word	0x40021000
 8005600:	019f800c 	.word	0x019f800c

08005604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800560e:	2300      	movs	r3, #0
 8005610:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e11e      	b.n	800585a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800561c:	4b91      	ldr	r3, [pc, #580]	; (8005864 <HAL_RCC_ClockConfig+0x260>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 030f 	and.w	r3, r3, #15
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d910      	bls.n	800564c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800562a:	4b8e      	ldr	r3, [pc, #568]	; (8005864 <HAL_RCC_ClockConfig+0x260>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f023 020f 	bic.w	r2, r3, #15
 8005632:	498c      	ldr	r1, [pc, #560]	; (8005864 <HAL_RCC_ClockConfig+0x260>)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	4313      	orrs	r3, r2
 8005638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800563a:	4b8a      	ldr	r3, [pc, #552]	; (8005864 <HAL_RCC_ClockConfig+0x260>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	429a      	cmp	r2, r3
 8005646:	d001      	beq.n	800564c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e106      	b.n	800585a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d073      	beq.n	8005740 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	2b03      	cmp	r3, #3
 800565e:	d129      	bne.n	80056b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005660:	4b81      	ldr	r3, [pc, #516]	; (8005868 <HAL_RCC_ClockConfig+0x264>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d101      	bne.n	8005670 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e0f4      	b.n	800585a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005670:	f000 f9d0 	bl	8005a14 <RCC_GetSysClockFreqFromPLLSource>
 8005674:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	4a7c      	ldr	r2, [pc, #496]	; (800586c <HAL_RCC_ClockConfig+0x268>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d93f      	bls.n	80056fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800567e:	4b7a      	ldr	r3, [pc, #488]	; (8005868 <HAL_RCC_ClockConfig+0x264>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d009      	beq.n	800569e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005692:	2b00      	cmp	r3, #0
 8005694:	d033      	beq.n	80056fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800569a:	2b00      	cmp	r3, #0
 800569c:	d12f      	bne.n	80056fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800569e:	4b72      	ldr	r3, [pc, #456]	; (8005868 <HAL_RCC_ClockConfig+0x264>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056a6:	4a70      	ldr	r2, [pc, #448]	; (8005868 <HAL_RCC_ClockConfig+0x264>)
 80056a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80056ae:	2380      	movs	r3, #128	; 0x80
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	e024      	b.n	80056fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d107      	bne.n	80056cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056bc:	4b6a      	ldr	r3, [pc, #424]	; (8005868 <HAL_RCC_ClockConfig+0x264>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d109      	bne.n	80056dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e0c6      	b.n	800585a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056cc:	4b66      	ldr	r3, [pc, #408]	; (8005868 <HAL_RCC_ClockConfig+0x264>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e0be      	b.n	800585a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80056dc:	f000 f8ce 	bl	800587c <HAL_RCC_GetSysClockFreq>
 80056e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	4a61      	ldr	r2, [pc, #388]	; (800586c <HAL_RCC_ClockConfig+0x268>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d909      	bls.n	80056fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056ea:	4b5f      	ldr	r3, [pc, #380]	; (8005868 <HAL_RCC_ClockConfig+0x264>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056f2:	4a5d      	ldr	r2, [pc, #372]	; (8005868 <HAL_RCC_ClockConfig+0x264>)
 80056f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80056fa:	2380      	movs	r3, #128	; 0x80
 80056fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056fe:	4b5a      	ldr	r3, [pc, #360]	; (8005868 <HAL_RCC_ClockConfig+0x264>)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f023 0203 	bic.w	r2, r3, #3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	4957      	ldr	r1, [pc, #348]	; (8005868 <HAL_RCC_ClockConfig+0x264>)
 800570c:	4313      	orrs	r3, r2
 800570e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005710:	f7fc ffc0 	bl	8002694 <HAL_GetTick>
 8005714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005716:	e00a      	b.n	800572e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005718:	f7fc ffbc 	bl	8002694 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	f241 3288 	movw	r2, #5000	; 0x1388
 8005726:	4293      	cmp	r3, r2
 8005728:	d901      	bls.n	800572e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e095      	b.n	800585a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800572e:	4b4e      	ldr	r3, [pc, #312]	; (8005868 <HAL_RCC_ClockConfig+0x264>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f003 020c 	and.w	r2, r3, #12
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	429a      	cmp	r2, r3
 800573e:	d1eb      	bne.n	8005718 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d023      	beq.n	8005794 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b00      	cmp	r3, #0
 8005756:	d005      	beq.n	8005764 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005758:	4b43      	ldr	r3, [pc, #268]	; (8005868 <HAL_RCC_ClockConfig+0x264>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	4a42      	ldr	r2, [pc, #264]	; (8005868 <HAL_RCC_ClockConfig+0x264>)
 800575e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005762:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0308 	and.w	r3, r3, #8
 800576c:	2b00      	cmp	r3, #0
 800576e:	d007      	beq.n	8005780 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005770:	4b3d      	ldr	r3, [pc, #244]	; (8005868 <HAL_RCC_ClockConfig+0x264>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005778:	4a3b      	ldr	r2, [pc, #236]	; (8005868 <HAL_RCC_ClockConfig+0x264>)
 800577a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800577e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005780:	4b39      	ldr	r3, [pc, #228]	; (8005868 <HAL_RCC_ClockConfig+0x264>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	4936      	ldr	r1, [pc, #216]	; (8005868 <HAL_RCC_ClockConfig+0x264>)
 800578e:	4313      	orrs	r3, r2
 8005790:	608b      	str	r3, [r1, #8]
 8005792:	e008      	b.n	80057a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2b80      	cmp	r3, #128	; 0x80
 8005798:	d105      	bne.n	80057a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800579a:	4b33      	ldr	r3, [pc, #204]	; (8005868 <HAL_RCC_ClockConfig+0x264>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	4a32      	ldr	r2, [pc, #200]	; (8005868 <HAL_RCC_ClockConfig+0x264>)
 80057a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057a6:	4b2f      	ldr	r3, [pc, #188]	; (8005864 <HAL_RCC_ClockConfig+0x260>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 030f 	and.w	r3, r3, #15
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d21d      	bcs.n	80057f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057b4:	4b2b      	ldr	r3, [pc, #172]	; (8005864 <HAL_RCC_ClockConfig+0x260>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f023 020f 	bic.w	r2, r3, #15
 80057bc:	4929      	ldr	r1, [pc, #164]	; (8005864 <HAL_RCC_ClockConfig+0x260>)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057c4:	f7fc ff66 	bl	8002694 <HAL_GetTick>
 80057c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ca:	e00a      	b.n	80057e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057cc:	f7fc ff62 	bl	8002694 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057da:	4293      	cmp	r3, r2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e03b      	b.n	800585a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057e2:	4b20      	ldr	r3, [pc, #128]	; (8005864 <HAL_RCC_ClockConfig+0x260>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 030f 	and.w	r3, r3, #15
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d1ed      	bne.n	80057cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0304 	and.w	r3, r3, #4
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d008      	beq.n	800580e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057fc:	4b1a      	ldr	r3, [pc, #104]	; (8005868 <HAL_RCC_ClockConfig+0x264>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	4917      	ldr	r1, [pc, #92]	; (8005868 <HAL_RCC_ClockConfig+0x264>)
 800580a:	4313      	orrs	r3, r2
 800580c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d009      	beq.n	800582e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800581a:	4b13      	ldr	r3, [pc, #76]	; (8005868 <HAL_RCC_ClockConfig+0x264>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	490f      	ldr	r1, [pc, #60]	; (8005868 <HAL_RCC_ClockConfig+0x264>)
 800582a:	4313      	orrs	r3, r2
 800582c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800582e:	f000 f825 	bl	800587c <HAL_RCC_GetSysClockFreq>
 8005832:	4602      	mov	r2, r0
 8005834:	4b0c      	ldr	r3, [pc, #48]	; (8005868 <HAL_RCC_ClockConfig+0x264>)
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	091b      	lsrs	r3, r3, #4
 800583a:	f003 030f 	and.w	r3, r3, #15
 800583e:	490c      	ldr	r1, [pc, #48]	; (8005870 <HAL_RCC_ClockConfig+0x26c>)
 8005840:	5ccb      	ldrb	r3, [r1, r3]
 8005842:	f003 031f 	and.w	r3, r3, #31
 8005846:	fa22 f303 	lsr.w	r3, r2, r3
 800584a:	4a0a      	ldr	r2, [pc, #40]	; (8005874 <HAL_RCC_ClockConfig+0x270>)
 800584c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800584e:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <HAL_RCC_ClockConfig+0x274>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f7fb fea2 	bl	800159c <HAL_InitTick>
 8005858:	4603      	mov	r3, r0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	40022000 	.word	0x40022000
 8005868:	40021000 	.word	0x40021000
 800586c:	04c4b400 	.word	0x04c4b400
 8005870:	0800b568 	.word	0x0800b568
 8005874:	20000000 	.word	0x20000000
 8005878:	200000c4 	.word	0x200000c4

0800587c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800587c:	b480      	push	{r7}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005882:	4b2c      	ldr	r3, [pc, #176]	; (8005934 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 030c 	and.w	r3, r3, #12
 800588a:	2b04      	cmp	r3, #4
 800588c:	d102      	bne.n	8005894 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800588e:	4b2a      	ldr	r3, [pc, #168]	; (8005938 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005890:	613b      	str	r3, [r7, #16]
 8005892:	e047      	b.n	8005924 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005894:	4b27      	ldr	r3, [pc, #156]	; (8005934 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f003 030c 	and.w	r3, r3, #12
 800589c:	2b08      	cmp	r3, #8
 800589e:	d102      	bne.n	80058a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058a0:	4b26      	ldr	r3, [pc, #152]	; (800593c <HAL_RCC_GetSysClockFreq+0xc0>)
 80058a2:	613b      	str	r3, [r7, #16]
 80058a4:	e03e      	b.n	8005924 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80058a6:	4b23      	ldr	r3, [pc, #140]	; (8005934 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 030c 	and.w	r3, r3, #12
 80058ae:	2b0c      	cmp	r3, #12
 80058b0:	d136      	bne.n	8005920 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058b2:	4b20      	ldr	r3, [pc, #128]	; (8005934 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058bc:	4b1d      	ldr	r3, [pc, #116]	; (8005934 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	091b      	lsrs	r3, r3, #4
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	3301      	adds	r3, #1
 80058c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d10c      	bne.n	80058ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058d0:	4a1a      	ldr	r2, [pc, #104]	; (800593c <HAL_RCC_GetSysClockFreq+0xc0>)
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d8:	4a16      	ldr	r2, [pc, #88]	; (8005934 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058da:	68d2      	ldr	r2, [r2, #12]
 80058dc:	0a12      	lsrs	r2, r2, #8
 80058de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80058e2:	fb02 f303 	mul.w	r3, r2, r3
 80058e6:	617b      	str	r3, [r7, #20]
      break;
 80058e8:	e00c      	b.n	8005904 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058ea:	4a13      	ldr	r2, [pc, #76]	; (8005938 <HAL_RCC_GetSysClockFreq+0xbc>)
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f2:	4a10      	ldr	r2, [pc, #64]	; (8005934 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058f4:	68d2      	ldr	r2, [r2, #12]
 80058f6:	0a12      	lsrs	r2, r2, #8
 80058f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80058fc:	fb02 f303 	mul.w	r3, r2, r3
 8005900:	617b      	str	r3, [r7, #20]
      break;
 8005902:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005904:	4b0b      	ldr	r3, [pc, #44]	; (8005934 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	0e5b      	lsrs	r3, r3, #25
 800590a:	f003 0303 	and.w	r3, r3, #3
 800590e:	3301      	adds	r3, #1
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	fbb2 f3f3 	udiv	r3, r2, r3
 800591c:	613b      	str	r3, [r7, #16]
 800591e:	e001      	b.n	8005924 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005924:	693b      	ldr	r3, [r7, #16]
}
 8005926:	4618      	mov	r0, r3
 8005928:	371c      	adds	r7, #28
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40021000 	.word	0x40021000
 8005938:	00f42400 	.word	0x00f42400
 800593c:	016e3600 	.word	0x016e3600

08005940 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005940:	b480      	push	{r7}
 8005942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005944:	4b03      	ldr	r3, [pc, #12]	; (8005954 <HAL_RCC_GetHCLKFreq+0x14>)
 8005946:	681b      	ldr	r3, [r3, #0]
}
 8005948:	4618      	mov	r0, r3
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	20000000 	.word	0x20000000

08005958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800595c:	f7ff fff0 	bl	8005940 <HAL_RCC_GetHCLKFreq>
 8005960:	4602      	mov	r2, r0
 8005962:	4b06      	ldr	r3, [pc, #24]	; (800597c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	0a1b      	lsrs	r3, r3, #8
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	4904      	ldr	r1, [pc, #16]	; (8005980 <HAL_RCC_GetPCLK1Freq+0x28>)
 800596e:	5ccb      	ldrb	r3, [r1, r3]
 8005970:	f003 031f 	and.w	r3, r3, #31
 8005974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005978:	4618      	mov	r0, r3
 800597a:	bd80      	pop	{r7, pc}
 800597c:	40021000 	.word	0x40021000
 8005980:	0800b578 	.word	0x0800b578

08005984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005988:	f7ff ffda 	bl	8005940 <HAL_RCC_GetHCLKFreq>
 800598c:	4602      	mov	r2, r0
 800598e:	4b06      	ldr	r3, [pc, #24]	; (80059a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	0adb      	lsrs	r3, r3, #11
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	4904      	ldr	r1, [pc, #16]	; (80059ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800599a:	5ccb      	ldrb	r3, [r1, r3]
 800599c:	f003 031f 	and.w	r3, r3, #31
 80059a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	40021000 	.word	0x40021000
 80059ac:	0800b578 	.word	0x0800b578

080059b0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	220f      	movs	r2, #15
 80059be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80059c0:	4b12      	ldr	r3, [pc, #72]	; (8005a0c <HAL_RCC_GetClockConfig+0x5c>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 0203 	and.w	r2, r3, #3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80059cc:	4b0f      	ldr	r3, [pc, #60]	; (8005a0c <HAL_RCC_GetClockConfig+0x5c>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80059d8:	4b0c      	ldr	r3, [pc, #48]	; (8005a0c <HAL_RCC_GetClockConfig+0x5c>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80059e4:	4b09      	ldr	r3, [pc, #36]	; (8005a0c <HAL_RCC_GetClockConfig+0x5c>)
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	08db      	lsrs	r3, r3, #3
 80059ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80059f2:	4b07      	ldr	r3, [pc, #28]	; (8005a10 <HAL_RCC_GetClockConfig+0x60>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 020f 	and.w	r2, r3, #15
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	601a      	str	r2, [r3, #0]
}
 80059fe:	bf00      	nop
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40021000 	.word	0x40021000
 8005a10:	40022000 	.word	0x40022000

08005a14 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a1a:	4b1e      	ldr	r3, [pc, #120]	; (8005a94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	f003 0303 	and.w	r3, r3, #3
 8005a22:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a24:	4b1b      	ldr	r3, [pc, #108]	; (8005a94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	091b      	lsrs	r3, r3, #4
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	3301      	adds	r3, #1
 8005a30:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d10c      	bne.n	8005a52 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a38:	4a17      	ldr	r2, [pc, #92]	; (8005a98 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a40:	4a14      	ldr	r2, [pc, #80]	; (8005a94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a42:	68d2      	ldr	r2, [r2, #12]
 8005a44:	0a12      	lsrs	r2, r2, #8
 8005a46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a4a:	fb02 f303 	mul.w	r3, r2, r3
 8005a4e:	617b      	str	r3, [r7, #20]
    break;
 8005a50:	e00c      	b.n	8005a6c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a52:	4a12      	ldr	r2, [pc, #72]	; (8005a9c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5a:	4a0e      	ldr	r2, [pc, #56]	; (8005a94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a5c:	68d2      	ldr	r2, [r2, #12]
 8005a5e:	0a12      	lsrs	r2, r2, #8
 8005a60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a64:	fb02 f303 	mul.w	r3, r2, r3
 8005a68:	617b      	str	r3, [r7, #20]
    break;
 8005a6a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a6c:	4b09      	ldr	r3, [pc, #36]	; (8005a94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	0e5b      	lsrs	r3, r3, #25
 8005a72:	f003 0303 	and.w	r3, r3, #3
 8005a76:	3301      	adds	r3, #1
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a84:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005a86:	687b      	ldr	r3, [r7, #4]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	371c      	adds	r7, #28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	40021000 	.word	0x40021000
 8005a98:	016e3600 	.word	0x016e3600
 8005a9c:	00f42400 	.word	0x00f42400

08005aa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005aac:	2300      	movs	r3, #0
 8005aae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 8098 	beq.w	8005bee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ac2:	4b43      	ldr	r3, [pc, #268]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10d      	bne.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ace:	4b40      	ldr	r3, [pc, #256]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad2:	4a3f      	ldr	r2, [pc, #252]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad8:	6593      	str	r3, [r2, #88]	; 0x58
 8005ada:	4b3d      	ldr	r3, [pc, #244]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ae2:	60bb      	str	r3, [r7, #8]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005aea:	4b3a      	ldr	r3, [pc, #232]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a39      	ldr	r2, [pc, #228]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005af6:	f7fc fdcd 	bl	8002694 <HAL_GetTick>
 8005afa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005afc:	e009      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005afe:	f7fc fdc9 	bl	8002694 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d902      	bls.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	74fb      	strb	r3, [r7, #19]
        break;
 8005b10:	e005      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b12:	4b30      	ldr	r3, [pc, #192]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0ef      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005b1e:	7cfb      	ldrb	r3, [r7, #19]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d159      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b24:	4b2a      	ldr	r3, [pc, #168]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b2e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d01e      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d019      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b40:	4b23      	ldr	r3, [pc, #140]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b4c:	4b20      	ldr	r3, [pc, #128]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b52:	4a1f      	ldr	r2, [pc, #124]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b5c:	4b1c      	ldr	r3, [pc, #112]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b62:	4a1b      	ldr	r2, [pc, #108]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b6c:	4a18      	ldr	r2, [pc, #96]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d016      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b7e:	f7fc fd89 	bl	8002694 <HAL_GetTick>
 8005b82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b84:	e00b      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b86:	f7fc fd85 	bl	8002694 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d902      	bls.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	74fb      	strb	r3, [r7, #19]
            break;
 8005b9c:	e006      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b9e:	4b0c      	ldr	r3, [pc, #48]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d0ec      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005bac:	7cfb      	ldrb	r3, [r7, #19]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10b      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bb2:	4b07      	ldr	r3, [pc, #28]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc0:	4903      	ldr	r1, [pc, #12]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005bc8:	e008      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bca:	7cfb      	ldrb	r3, [r7, #19]
 8005bcc:	74bb      	strb	r3, [r7, #18]
 8005bce:	e005      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005bd0:	40021000 	.word	0x40021000
 8005bd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd8:	7cfb      	ldrb	r3, [r7, #19]
 8005bda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bdc:	7c7b      	ldrb	r3, [r7, #17]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d105      	bne.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005be2:	4ba7      	ldr	r3, [pc, #668]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be6:	4aa6      	ldr	r2, [pc, #664]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bfa:	4ba1      	ldr	r3, [pc, #644]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c00:	f023 0203 	bic.w	r2, r3, #3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	499d      	ldr	r1, [pc, #628]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00a      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c1c:	4b98      	ldr	r3, [pc, #608]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c22:	f023 020c 	bic.w	r2, r3, #12
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	4995      	ldr	r1, [pc, #596]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0304 	and.w	r3, r3, #4
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00a      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c3e:	4b90      	ldr	r3, [pc, #576]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	498c      	ldr	r1, [pc, #560]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0308 	and.w	r3, r3, #8
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00a      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c60:	4b87      	ldr	r3, [pc, #540]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	4984      	ldr	r1, [pc, #528]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0310 	and.w	r3, r3, #16
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c82:	4b7f      	ldr	r3, [pc, #508]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	497b      	ldr	r1, [pc, #492]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0320 	and.w	r3, r3, #32
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00a      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ca4:	4b76      	ldr	r3, [pc, #472]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005caa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	4973      	ldr	r1, [pc, #460]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00a      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cc6:	4b6e      	ldr	r3, [pc, #440]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ccc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	496a      	ldr	r1, [pc, #424]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00a      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ce8:	4b65      	ldr	r3, [pc, #404]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	4962      	ldr	r1, [pc, #392]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00a      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d0a:	4b5d      	ldr	r3, [pc, #372]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	4959      	ldr	r1, [pc, #356]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00a      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d2c:	4b54      	ldr	r3, [pc, #336]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d32:	f023 0203 	bic.w	r2, r3, #3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3a:	4951      	ldr	r1, [pc, #324]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d4e:	4b4c      	ldr	r3, [pc, #304]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5c:	4948      	ldr	r1, [pc, #288]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d015      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d70:	4b43      	ldr	r3, [pc, #268]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7e:	4940      	ldr	r1, [pc, #256]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d8e:	d105      	bne.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d90:	4b3b      	ldr	r3, [pc, #236]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	4a3a      	ldr	r2, [pc, #232]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d9a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d015      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005da8:	4b35      	ldr	r3, [pc, #212]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db6:	4932      	ldr	r1, [pc, #200]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dc6:	d105      	bne.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dc8:	4b2d      	ldr	r3, [pc, #180]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	4a2c      	ldr	r2, [pc, #176]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dd2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d015      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005de0:	4b27      	ldr	r3, [pc, #156]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dee:	4924      	ldr	r1, [pc, #144]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dfe:	d105      	bne.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e00:	4b1f      	ldr	r3, [pc, #124]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	4a1e      	ldr	r2, [pc, #120]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e0a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d015      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e18:	4b19      	ldr	r3, [pc, #100]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e26:	4916      	ldr	r1, [pc, #88]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e36:	d105      	bne.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e38:	4b11      	ldr	r3, [pc, #68]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	4a10      	ldr	r2, [pc, #64]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e42:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d019      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e50:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	4908      	ldr	r1, [pc, #32]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e6e:	d109      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e70:	4b03      	ldr	r3, [pc, #12]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	4a02      	ldr	r2, [pc, #8]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e7a:	60d3      	str	r3, [r2, #12]
 8005e7c:	e002      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005e7e:	bf00      	nop
 8005e80:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d015      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e90:	4b29      	ldr	r3, [pc, #164]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e9e:	4926      	ldr	r1, [pc, #152]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eae:	d105      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005eb0:	4b21      	ldr	r3, [pc, #132]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	4a20      	ldr	r2, [pc, #128]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d015      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005ec8:	4b1b      	ldr	r3, [pc, #108]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ece:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ed6:	4918      	ldr	r1, [pc, #96]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee6:	d105      	bne.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ee8:	4b13      	ldr	r3, [pc, #76]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	4a12      	ldr	r2, [pc, #72]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ef2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d015      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005f00:	4b0d      	ldr	r3, [pc, #52]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f0e:	490a      	ldr	r1, [pc, #40]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f1e:	d105      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f20:	4b05      	ldr	r3, [pc, #20]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	4a04      	ldr	r2, [pc, #16]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f2a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005f2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	40021000 	.word	0x40021000

08005f3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e049      	b.n	8005fe2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d106      	bne.n	8005f68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7fb fe02 	bl	8001b6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	3304      	adds	r3, #4
 8005f78:	4619      	mov	r1, r3
 8005f7a:	4610      	mov	r0, r2
 8005f7c:	f000 ffda 	bl	8006f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3708      	adds	r7, #8
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
	...

08005fec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d001      	beq.n	8006004 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e054      	b.n	80060ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0201 	orr.w	r2, r2, #1
 800601a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a26      	ldr	r2, [pc, #152]	; (80060bc <HAL_TIM_Base_Start_IT+0xd0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d022      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x80>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800602e:	d01d      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x80>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a22      	ldr	r2, [pc, #136]	; (80060c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d018      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x80>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a21      	ldr	r2, [pc, #132]	; (80060c4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d013      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x80>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a1f      	ldr	r2, [pc, #124]	; (80060c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00e      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x80>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a1e      	ldr	r2, [pc, #120]	; (80060cc <HAL_TIM_Base_Start_IT+0xe0>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d009      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x80>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a1c      	ldr	r2, [pc, #112]	; (80060d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d004      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x80>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a1b      	ldr	r2, [pc, #108]	; (80060d4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d115      	bne.n	8006098 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	4b19      	ldr	r3, [pc, #100]	; (80060d8 <HAL_TIM_Base_Start_IT+0xec>)
 8006074:	4013      	ands	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2b06      	cmp	r3, #6
 800607c:	d015      	beq.n	80060aa <HAL_TIM_Base_Start_IT+0xbe>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006084:	d011      	beq.n	80060aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f042 0201 	orr.w	r2, r2, #1
 8006094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006096:	e008      	b.n	80060aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f042 0201 	orr.w	r2, r2, #1
 80060a6:	601a      	str	r2, [r3, #0]
 80060a8:	e000      	b.n	80060ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40012c00 	.word	0x40012c00
 80060c0:	40000400 	.word	0x40000400
 80060c4:	40000800 	.word	0x40000800
 80060c8:	40000c00 	.word	0x40000c00
 80060cc:	40013400 	.word	0x40013400
 80060d0:	40014000 	.word	0x40014000
 80060d4:	40015000 	.word	0x40015000
 80060d8:	00010007 	.word	0x00010007

080060dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e049      	b.n	8006182 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d106      	bne.n	8006108 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f841 	bl	800618a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3304      	adds	r3, #4
 8006118:	4619      	mov	r1, r3
 800611a:	4610      	mov	r0, r2
 800611c:	f000 ff0a 	bl	8006f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006192:	bf00      	nop
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
	...

080061a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d109      	bne.n	80061c4 <HAL_TIM_PWM_Start+0x24>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	bf14      	ite	ne
 80061bc:	2301      	movne	r3, #1
 80061be:	2300      	moveq	r3, #0
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	e03c      	b.n	800623e <HAL_TIM_PWM_Start+0x9e>
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d109      	bne.n	80061de <HAL_TIM_PWM_Start+0x3e>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	bf14      	ite	ne
 80061d6:	2301      	movne	r3, #1
 80061d8:	2300      	moveq	r3, #0
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	e02f      	b.n	800623e <HAL_TIM_PWM_Start+0x9e>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	d109      	bne.n	80061f8 <HAL_TIM_PWM_Start+0x58>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	bf14      	ite	ne
 80061f0:	2301      	movne	r3, #1
 80061f2:	2300      	moveq	r3, #0
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	e022      	b.n	800623e <HAL_TIM_PWM_Start+0x9e>
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b0c      	cmp	r3, #12
 80061fc:	d109      	bne.n	8006212 <HAL_TIM_PWM_Start+0x72>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b01      	cmp	r3, #1
 8006208:	bf14      	ite	ne
 800620a:	2301      	movne	r3, #1
 800620c:	2300      	moveq	r3, #0
 800620e:	b2db      	uxtb	r3, r3
 8006210:	e015      	b.n	800623e <HAL_TIM_PWM_Start+0x9e>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b10      	cmp	r3, #16
 8006216:	d109      	bne.n	800622c <HAL_TIM_PWM_Start+0x8c>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b01      	cmp	r3, #1
 8006222:	bf14      	ite	ne
 8006224:	2301      	movne	r3, #1
 8006226:	2300      	moveq	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	e008      	b.n	800623e <HAL_TIM_PWM_Start+0x9e>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b01      	cmp	r3, #1
 8006236:	bf14      	ite	ne
 8006238:	2301      	movne	r3, #1
 800623a:	2300      	moveq	r3, #0
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e0a6      	b.n	8006394 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d104      	bne.n	8006256 <HAL_TIM_PWM_Start+0xb6>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006254:	e023      	b.n	800629e <HAL_TIM_PWM_Start+0xfe>
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b04      	cmp	r3, #4
 800625a:	d104      	bne.n	8006266 <HAL_TIM_PWM_Start+0xc6>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006264:	e01b      	b.n	800629e <HAL_TIM_PWM_Start+0xfe>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b08      	cmp	r3, #8
 800626a:	d104      	bne.n	8006276 <HAL_TIM_PWM_Start+0xd6>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006274:	e013      	b.n	800629e <HAL_TIM_PWM_Start+0xfe>
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b0c      	cmp	r3, #12
 800627a:	d104      	bne.n	8006286 <HAL_TIM_PWM_Start+0xe6>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2202      	movs	r2, #2
 8006280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006284:	e00b      	b.n	800629e <HAL_TIM_PWM_Start+0xfe>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b10      	cmp	r3, #16
 800628a:	d104      	bne.n	8006296 <HAL_TIM_PWM_Start+0xf6>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006294:	e003      	b.n	800629e <HAL_TIM_PWM_Start+0xfe>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2202      	movs	r2, #2
 800629a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2201      	movs	r2, #1
 80062a4:	6839      	ldr	r1, [r7, #0]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f001 fab2 	bl	8007810 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a3a      	ldr	r2, [pc, #232]	; (800639c <HAL_TIM_PWM_Start+0x1fc>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d018      	beq.n	80062e8 <HAL_TIM_PWM_Start+0x148>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a39      	ldr	r2, [pc, #228]	; (80063a0 <HAL_TIM_PWM_Start+0x200>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d013      	beq.n	80062e8 <HAL_TIM_PWM_Start+0x148>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a37      	ldr	r2, [pc, #220]	; (80063a4 <HAL_TIM_PWM_Start+0x204>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d00e      	beq.n	80062e8 <HAL_TIM_PWM_Start+0x148>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a36      	ldr	r2, [pc, #216]	; (80063a8 <HAL_TIM_PWM_Start+0x208>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d009      	beq.n	80062e8 <HAL_TIM_PWM_Start+0x148>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a34      	ldr	r2, [pc, #208]	; (80063ac <HAL_TIM_PWM_Start+0x20c>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d004      	beq.n	80062e8 <HAL_TIM_PWM_Start+0x148>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a33      	ldr	r2, [pc, #204]	; (80063b0 <HAL_TIM_PWM_Start+0x210>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d101      	bne.n	80062ec <HAL_TIM_PWM_Start+0x14c>
 80062e8:	2301      	movs	r3, #1
 80062ea:	e000      	b.n	80062ee <HAL_TIM_PWM_Start+0x14e>
 80062ec:	2300      	movs	r3, #0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d007      	beq.n	8006302 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006300:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a25      	ldr	r2, [pc, #148]	; (800639c <HAL_TIM_PWM_Start+0x1fc>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d022      	beq.n	8006352 <HAL_TIM_PWM_Start+0x1b2>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006314:	d01d      	beq.n	8006352 <HAL_TIM_PWM_Start+0x1b2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a26      	ldr	r2, [pc, #152]	; (80063b4 <HAL_TIM_PWM_Start+0x214>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d018      	beq.n	8006352 <HAL_TIM_PWM_Start+0x1b2>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a24      	ldr	r2, [pc, #144]	; (80063b8 <HAL_TIM_PWM_Start+0x218>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d013      	beq.n	8006352 <HAL_TIM_PWM_Start+0x1b2>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a23      	ldr	r2, [pc, #140]	; (80063bc <HAL_TIM_PWM_Start+0x21c>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d00e      	beq.n	8006352 <HAL_TIM_PWM_Start+0x1b2>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a19      	ldr	r2, [pc, #100]	; (80063a0 <HAL_TIM_PWM_Start+0x200>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d009      	beq.n	8006352 <HAL_TIM_PWM_Start+0x1b2>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a18      	ldr	r2, [pc, #96]	; (80063a4 <HAL_TIM_PWM_Start+0x204>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d004      	beq.n	8006352 <HAL_TIM_PWM_Start+0x1b2>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a18      	ldr	r2, [pc, #96]	; (80063b0 <HAL_TIM_PWM_Start+0x210>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d115      	bne.n	800637e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	4b19      	ldr	r3, [pc, #100]	; (80063c0 <HAL_TIM_PWM_Start+0x220>)
 800635a:	4013      	ands	r3, r2
 800635c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2b06      	cmp	r3, #6
 8006362:	d015      	beq.n	8006390 <HAL_TIM_PWM_Start+0x1f0>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800636a:	d011      	beq.n	8006390 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f042 0201 	orr.w	r2, r2, #1
 800637a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800637c:	e008      	b.n	8006390 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f042 0201 	orr.w	r2, r2, #1
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	e000      	b.n	8006392 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006390:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	40012c00 	.word	0x40012c00
 80063a0:	40013400 	.word	0x40013400
 80063a4:	40014000 	.word	0x40014000
 80063a8:	40014400 	.word	0x40014400
 80063ac:	40014800 	.word	0x40014800
 80063b0:	40015000 	.word	0x40015000
 80063b4:	40000400 	.word	0x40000400
 80063b8:	40000800 	.word	0x40000800
 80063bc:	40000c00 	.word	0x40000c00
 80063c0:	00010007 	.word	0x00010007

080063c4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2200      	movs	r2, #0
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f001 fa1a 	bl	8007810 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a40      	ldr	r2, [pc, #256]	; (80064e4 <HAL_TIM_PWM_Stop+0x120>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d018      	beq.n	8006418 <HAL_TIM_PWM_Stop+0x54>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a3f      	ldr	r2, [pc, #252]	; (80064e8 <HAL_TIM_PWM_Stop+0x124>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d013      	beq.n	8006418 <HAL_TIM_PWM_Stop+0x54>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a3d      	ldr	r2, [pc, #244]	; (80064ec <HAL_TIM_PWM_Stop+0x128>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d00e      	beq.n	8006418 <HAL_TIM_PWM_Stop+0x54>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a3c      	ldr	r2, [pc, #240]	; (80064f0 <HAL_TIM_PWM_Stop+0x12c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d009      	beq.n	8006418 <HAL_TIM_PWM_Stop+0x54>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a3a      	ldr	r2, [pc, #232]	; (80064f4 <HAL_TIM_PWM_Stop+0x130>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d004      	beq.n	8006418 <HAL_TIM_PWM_Stop+0x54>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a39      	ldr	r2, [pc, #228]	; (80064f8 <HAL_TIM_PWM_Stop+0x134>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d101      	bne.n	800641c <HAL_TIM_PWM_Stop+0x58>
 8006418:	2301      	movs	r3, #1
 800641a:	e000      	b.n	800641e <HAL_TIM_PWM_Stop+0x5a>
 800641c:	2300      	movs	r3, #0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d017      	beq.n	8006452 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6a1a      	ldr	r2, [r3, #32]
 8006428:	f241 1311 	movw	r3, #4369	; 0x1111
 800642c:	4013      	ands	r3, r2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10f      	bne.n	8006452 <HAL_TIM_PWM_Stop+0x8e>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6a1a      	ldr	r2, [r3, #32]
 8006438:	f244 4344 	movw	r3, #17476	; 0x4444
 800643c:	4013      	ands	r3, r2
 800643e:	2b00      	cmp	r3, #0
 8006440:	d107      	bne.n	8006452 <HAL_TIM_PWM_Stop+0x8e>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006450:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6a1a      	ldr	r2, [r3, #32]
 8006458:	f241 1311 	movw	r3, #4369	; 0x1111
 800645c:	4013      	ands	r3, r2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10f      	bne.n	8006482 <HAL_TIM_PWM_Stop+0xbe>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6a1a      	ldr	r2, [r3, #32]
 8006468:	f244 4344 	movw	r3, #17476	; 0x4444
 800646c:	4013      	ands	r3, r2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d107      	bne.n	8006482 <HAL_TIM_PWM_Stop+0xbe>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0201 	bic.w	r2, r2, #1
 8006480:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d104      	bne.n	8006492 <HAL_TIM_PWM_Stop+0xce>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006490:	e023      	b.n	80064da <HAL_TIM_PWM_Stop+0x116>
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b04      	cmp	r3, #4
 8006496:	d104      	bne.n	80064a2 <HAL_TIM_PWM_Stop+0xde>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064a0:	e01b      	b.n	80064da <HAL_TIM_PWM_Stop+0x116>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d104      	bne.n	80064b2 <HAL_TIM_PWM_Stop+0xee>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064b0:	e013      	b.n	80064da <HAL_TIM_PWM_Stop+0x116>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b0c      	cmp	r3, #12
 80064b6:	d104      	bne.n	80064c2 <HAL_TIM_PWM_Stop+0xfe>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064c0:	e00b      	b.n	80064da <HAL_TIM_PWM_Stop+0x116>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b10      	cmp	r3, #16
 80064c6:	d104      	bne.n	80064d2 <HAL_TIM_PWM_Stop+0x10e>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064d0:	e003      	b.n	80064da <HAL_TIM_PWM_Stop+0x116>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	40012c00 	.word	0x40012c00
 80064e8:	40013400 	.word	0x40013400
 80064ec:	40014000 	.word	0x40014000
 80064f0:	40014400 	.word	0x40014400
 80064f4:	40014800 	.word	0x40014800
 80064f8:	40015000 	.word	0x40015000

080064fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e097      	b.n	8006640 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d106      	bne.n	800652a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7fb fb41 	bl	8001bac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2202      	movs	r2, #2
 800652e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	6812      	ldr	r2, [r2, #0]
 800653c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006540:	f023 0307 	bic.w	r3, r3, #7
 8006544:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	3304      	adds	r3, #4
 800654e:	4619      	mov	r1, r3
 8006550:	4610      	mov	r0, r2
 8006552:	f000 fcef 	bl	8006f34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	4313      	orrs	r3, r2
 8006576:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800657e:	f023 0303 	bic.w	r3, r3, #3
 8006582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	021b      	lsls	r3, r3, #8
 800658e:	4313      	orrs	r3, r2
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	4313      	orrs	r3, r2
 8006594:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800659c:	f023 030c 	bic.w	r3, r3, #12
 80065a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68da      	ldr	r2, [r3, #12]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	021b      	lsls	r3, r3, #8
 80065b8:	4313      	orrs	r3, r2
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	4313      	orrs	r3, r2
 80065be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	011a      	lsls	r2, r3, #4
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	031b      	lsls	r3, r3, #12
 80065cc:	4313      	orrs	r3, r2
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80065da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80065e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	011b      	lsls	r3, r3, #4
 80065ee:	4313      	orrs	r3, r2
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3718      	adds	r7, #24
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006658:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006660:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006668:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006670:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d110      	bne.n	800669a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006678:	7bfb      	ldrb	r3, [r7, #15]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d102      	bne.n	8006684 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800667e:	7b7b      	ldrb	r3, [r7, #13]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d001      	beq.n	8006688 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e089      	b.n	800679c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006698:	e031      	b.n	80066fe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b04      	cmp	r3, #4
 800669e:	d110      	bne.n	80066c2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80066a0:	7bbb      	ldrb	r3, [r7, #14]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d102      	bne.n	80066ac <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80066a6:	7b3b      	ldrb	r3, [r7, #12]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d001      	beq.n	80066b0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e075      	b.n	800679c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2202      	movs	r2, #2
 80066bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066c0:	e01d      	b.n	80066fe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d108      	bne.n	80066da <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80066c8:	7bbb      	ldrb	r3, [r7, #14]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d105      	bne.n	80066da <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066ce:	7b7b      	ldrb	r3, [r7, #13]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d102      	bne.n	80066da <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80066d4:	7b3b      	ldrb	r3, [r7, #12]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d001      	beq.n	80066de <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e05e      	b.n	800679c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2202      	movs	r2, #2
 80066e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2202      	movs	r2, #2
 80066ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2202      	movs	r2, #2
 80066f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2202      	movs	r2, #2
 80066fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d003      	beq.n	800670c <HAL_TIM_Encoder_Start_IT+0xc4>
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2b04      	cmp	r3, #4
 8006708:	d010      	beq.n	800672c <HAL_TIM_Encoder_Start_IT+0xe4>
 800670a:	e01f      	b.n	800674c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2201      	movs	r2, #1
 8006712:	2100      	movs	r1, #0
 8006714:	4618      	mov	r0, r3
 8006716:	f001 f87b 	bl	8007810 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68da      	ldr	r2, [r3, #12]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f042 0202 	orr.w	r2, r2, #2
 8006728:	60da      	str	r2, [r3, #12]
      break;
 800672a:	e02e      	b.n	800678a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2201      	movs	r2, #1
 8006732:	2104      	movs	r1, #4
 8006734:	4618      	mov	r0, r3
 8006736:	f001 f86b 	bl	8007810 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f042 0204 	orr.w	r2, r2, #4
 8006748:	60da      	str	r2, [r3, #12]
      break;
 800674a:	e01e      	b.n	800678a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2201      	movs	r2, #1
 8006752:	2100      	movs	r1, #0
 8006754:	4618      	mov	r0, r3
 8006756:	f001 f85b 	bl	8007810 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2201      	movs	r2, #1
 8006760:	2104      	movs	r1, #4
 8006762:	4618      	mov	r0, r3
 8006764:	f001 f854 	bl	8007810 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68da      	ldr	r2, [r3, #12]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0202 	orr.w	r2, r2, #2
 8006776:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f042 0204 	orr.w	r2, r2, #4
 8006786:	60da      	str	r2, [r3, #12]
      break;
 8006788:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f042 0201 	orr.w	r2, r2, #1
 8006798:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	f003 0302 	and.w	r3, r3, #2
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d122      	bne.n	8006800 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d11b      	bne.n	8006800 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f06f 0202 	mvn.w	r2, #2
 80067d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	f003 0303 	and.w	r3, r3, #3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7fb fbfc 	bl	8001fe4 <HAL_TIM_IC_CaptureCallback>
 80067ec:	e005      	b.n	80067fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fb82 	bl	8006ef8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fb89 	bl	8006f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	f003 0304 	and.w	r3, r3, #4
 800680a:	2b04      	cmp	r3, #4
 800680c:	d122      	bne.n	8006854 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f003 0304 	and.w	r3, r3, #4
 8006818:	2b04      	cmp	r3, #4
 800681a:	d11b      	bne.n	8006854 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f06f 0204 	mvn.w	r2, #4
 8006824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2202      	movs	r2, #2
 800682a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fb fbd2 	bl	8001fe4 <HAL_TIM_IC_CaptureCallback>
 8006840:	e005      	b.n	800684e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fb58 	bl	8006ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fb5f 	bl	8006f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	f003 0308 	and.w	r3, r3, #8
 800685e:	2b08      	cmp	r3, #8
 8006860:	d122      	bne.n	80068a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f003 0308 	and.w	r3, r3, #8
 800686c:	2b08      	cmp	r3, #8
 800686e:	d11b      	bne.n	80068a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f06f 0208 	mvn.w	r2, #8
 8006878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2204      	movs	r2, #4
 800687e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	f003 0303 	and.w	r3, r3, #3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7fb fba8 	bl	8001fe4 <HAL_TIM_IC_CaptureCallback>
 8006894:	e005      	b.n	80068a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fb2e 	bl	8006ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fb35 	bl	8006f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	f003 0310 	and.w	r3, r3, #16
 80068b2:	2b10      	cmp	r3, #16
 80068b4:	d122      	bne.n	80068fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	f003 0310 	and.w	r3, r3, #16
 80068c0:	2b10      	cmp	r3, #16
 80068c2:	d11b      	bne.n	80068fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f06f 0210 	mvn.w	r2, #16
 80068cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2208      	movs	r2, #8
 80068d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7fb fb7e 	bl	8001fe4 <HAL_TIM_IC_CaptureCallback>
 80068e8:	e005      	b.n	80068f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fb04 	bl	8006ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fb0b 	bl	8006f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b01      	cmp	r3, #1
 8006908:	d10e      	bne.n	8006928 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	2b01      	cmp	r3, #1
 8006916:	d107      	bne.n	8006928 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f06f 0201 	mvn.w	r2, #1
 8006920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7fa fdfe 	bl	8001524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006932:	2b80      	cmp	r3, #128	; 0x80
 8006934:	d10e      	bne.n	8006954 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006940:	2b80      	cmp	r3, #128	; 0x80
 8006942:	d107      	bne.n	8006954 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800694c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f001 fa09 	bl	8007d66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006962:	d10e      	bne.n	8006982 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800696e:	2b80      	cmp	r3, #128	; 0x80
 8006970:	d107      	bne.n	8006982 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800697a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f001 f9fc 	bl	8007d7a <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698c:	2b40      	cmp	r3, #64	; 0x40
 800698e:	d10e      	bne.n	80069ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699a:	2b40      	cmp	r3, #64	; 0x40
 800699c:	d107      	bne.n	80069ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fab9 	bl	8006f20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	f003 0320 	and.w	r3, r3, #32
 80069b8:	2b20      	cmp	r3, #32
 80069ba:	d10e      	bne.n	80069da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	f003 0320 	and.w	r3, r3, #32
 80069c6:	2b20      	cmp	r3, #32
 80069c8:	d107      	bne.n	80069da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f06f 0220 	mvn.w	r2, #32
 80069d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f001 f9bc 	bl	8007d52 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069e8:	d10f      	bne.n	8006a0a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069f8:	d107      	bne.n	8006a0a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f001 f9c2 	bl	8007d8e <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a18:	d10f      	bne.n	8006a3a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a28:	d107      	bne.n	8006a3a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f001 f9b4 	bl	8007da2 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a48:	d10f      	bne.n	8006a6a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a58:	d107      	bne.n	8006a6a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f001 f9a6 	bl	8007db6 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a78:	d10f      	bne.n	8006a9a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a88:	d107      	bne.n	8006a9a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f001 f998 	bl	8007dca <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a9a:	bf00      	nop
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
	...

08006aa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d101      	bne.n	8006ac2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006abe:	2302      	movs	r3, #2
 8006ac0:	e0ff      	b.n	8006cc2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b14      	cmp	r3, #20
 8006ace:	f200 80f0 	bhi.w	8006cb2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006ad2:	a201      	add	r2, pc, #4	; (adr r2, 8006ad8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad8:	08006b2d 	.word	0x08006b2d
 8006adc:	08006cb3 	.word	0x08006cb3
 8006ae0:	08006cb3 	.word	0x08006cb3
 8006ae4:	08006cb3 	.word	0x08006cb3
 8006ae8:	08006b6d 	.word	0x08006b6d
 8006aec:	08006cb3 	.word	0x08006cb3
 8006af0:	08006cb3 	.word	0x08006cb3
 8006af4:	08006cb3 	.word	0x08006cb3
 8006af8:	08006baf 	.word	0x08006baf
 8006afc:	08006cb3 	.word	0x08006cb3
 8006b00:	08006cb3 	.word	0x08006cb3
 8006b04:	08006cb3 	.word	0x08006cb3
 8006b08:	08006bef 	.word	0x08006bef
 8006b0c:	08006cb3 	.word	0x08006cb3
 8006b10:	08006cb3 	.word	0x08006cb3
 8006b14:	08006cb3 	.word	0x08006cb3
 8006b18:	08006c31 	.word	0x08006c31
 8006b1c:	08006cb3 	.word	0x08006cb3
 8006b20:	08006cb3 	.word	0x08006cb3
 8006b24:	08006cb3 	.word	0x08006cb3
 8006b28:	08006c71 	.word	0x08006c71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68b9      	ldr	r1, [r7, #8]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 faa6 	bl	8007084 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699a      	ldr	r2, [r3, #24]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f042 0208 	orr.w	r2, r2, #8
 8006b46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	699a      	ldr	r2, [r3, #24]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 0204 	bic.w	r2, r2, #4
 8006b56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6999      	ldr	r1, [r3, #24]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	691a      	ldr	r2, [r3, #16]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	619a      	str	r2, [r3, #24]
      break;
 8006b6a:	e0a5      	b.n	8006cb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68b9      	ldr	r1, [r7, #8]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 fb20 	bl	80071b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699a      	ldr	r2, [r3, #24]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	699a      	ldr	r2, [r3, #24]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6999      	ldr	r1, [r3, #24]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	021a      	lsls	r2, r3, #8
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	619a      	str	r2, [r3, #24]
      break;
 8006bac:	e084      	b.n	8006cb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68b9      	ldr	r1, [r7, #8]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 fb93 	bl	80072e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69da      	ldr	r2, [r3, #28]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f042 0208 	orr.w	r2, r2, #8
 8006bc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69da      	ldr	r2, [r3, #28]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0204 	bic.w	r2, r2, #4
 8006bd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	69d9      	ldr	r1, [r3, #28]
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	691a      	ldr	r2, [r3, #16]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	61da      	str	r2, [r3, #28]
      break;
 8006bec:	e064      	b.n	8006cb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68b9      	ldr	r1, [r7, #8]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 fc05 	bl	8007404 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	69da      	ldr	r2, [r3, #28]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69da      	ldr	r2, [r3, #28]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69d9      	ldr	r1, [r3, #28]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	021a      	lsls	r2, r3, #8
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	61da      	str	r2, [r3, #28]
      break;
 8006c2e:	e043      	b.n	8006cb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68b9      	ldr	r1, [r7, #8]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 fc78 	bl	800752c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f042 0208 	orr.w	r2, r2, #8
 8006c4a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f022 0204 	bic.w	r2, r2, #4
 8006c5a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	691a      	ldr	r2, [r3, #16]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006c6e:	e023      	b.n	8006cb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68b9      	ldr	r1, [r7, #8]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 fcc2 	bl	8007600 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c8a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c9a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	021a      	lsls	r2, r3, #8
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	430a      	orrs	r2, r1
 8006cae:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006cb0:	e002      	b.n	8006cb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	75fb      	strb	r3, [r7, #23]
      break;
 8006cb6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop

08006ccc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d101      	bne.n	8006ce8 <HAL_TIM_ConfigClockSource+0x1c>
 8006ce4:	2302      	movs	r3, #2
 8006ce6:	e0f6      	b.n	8006ed6 <HAL_TIM_ConfigClockSource+0x20a>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006d06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a6f      	ldr	r2, [pc, #444]	; (8006ee0 <HAL_TIM_ConfigClockSource+0x214>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	f000 80c1 	beq.w	8006eaa <HAL_TIM_ConfigClockSource+0x1de>
 8006d28:	4a6d      	ldr	r2, [pc, #436]	; (8006ee0 <HAL_TIM_ConfigClockSource+0x214>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	f200 80c6 	bhi.w	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006d30:	4a6c      	ldr	r2, [pc, #432]	; (8006ee4 <HAL_TIM_ConfigClockSource+0x218>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	f000 80b9 	beq.w	8006eaa <HAL_TIM_ConfigClockSource+0x1de>
 8006d38:	4a6a      	ldr	r2, [pc, #424]	; (8006ee4 <HAL_TIM_ConfigClockSource+0x218>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	f200 80be 	bhi.w	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006d40:	4a69      	ldr	r2, [pc, #420]	; (8006ee8 <HAL_TIM_ConfigClockSource+0x21c>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	f000 80b1 	beq.w	8006eaa <HAL_TIM_ConfigClockSource+0x1de>
 8006d48:	4a67      	ldr	r2, [pc, #412]	; (8006ee8 <HAL_TIM_ConfigClockSource+0x21c>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	f200 80b6 	bhi.w	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006d50:	4a66      	ldr	r2, [pc, #408]	; (8006eec <HAL_TIM_ConfigClockSource+0x220>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	f000 80a9 	beq.w	8006eaa <HAL_TIM_ConfigClockSource+0x1de>
 8006d58:	4a64      	ldr	r2, [pc, #400]	; (8006eec <HAL_TIM_ConfigClockSource+0x220>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	f200 80ae 	bhi.w	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006d60:	4a63      	ldr	r2, [pc, #396]	; (8006ef0 <HAL_TIM_ConfigClockSource+0x224>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	f000 80a1 	beq.w	8006eaa <HAL_TIM_ConfigClockSource+0x1de>
 8006d68:	4a61      	ldr	r2, [pc, #388]	; (8006ef0 <HAL_TIM_ConfigClockSource+0x224>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	f200 80a6 	bhi.w	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006d70:	4a60      	ldr	r2, [pc, #384]	; (8006ef4 <HAL_TIM_ConfigClockSource+0x228>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	f000 8099 	beq.w	8006eaa <HAL_TIM_ConfigClockSource+0x1de>
 8006d78:	4a5e      	ldr	r2, [pc, #376]	; (8006ef4 <HAL_TIM_ConfigClockSource+0x228>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	f200 809e 	bhi.w	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006d80:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006d84:	f000 8091 	beq.w	8006eaa <HAL_TIM_ConfigClockSource+0x1de>
 8006d88:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006d8c:	f200 8096 	bhi.w	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006d90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d94:	f000 8089 	beq.w	8006eaa <HAL_TIM_ConfigClockSource+0x1de>
 8006d98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d9c:	f200 808e 	bhi.w	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006da4:	d03e      	beq.n	8006e24 <HAL_TIM_ConfigClockSource+0x158>
 8006da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006daa:	f200 8087 	bhi.w	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db2:	f000 8086 	beq.w	8006ec2 <HAL_TIM_ConfigClockSource+0x1f6>
 8006db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dba:	d87f      	bhi.n	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006dbc:	2b70      	cmp	r3, #112	; 0x70
 8006dbe:	d01a      	beq.n	8006df6 <HAL_TIM_ConfigClockSource+0x12a>
 8006dc0:	2b70      	cmp	r3, #112	; 0x70
 8006dc2:	d87b      	bhi.n	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006dc4:	2b60      	cmp	r3, #96	; 0x60
 8006dc6:	d050      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x19e>
 8006dc8:	2b60      	cmp	r3, #96	; 0x60
 8006dca:	d877      	bhi.n	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006dcc:	2b50      	cmp	r3, #80	; 0x50
 8006dce:	d03c      	beq.n	8006e4a <HAL_TIM_ConfigClockSource+0x17e>
 8006dd0:	2b50      	cmp	r3, #80	; 0x50
 8006dd2:	d873      	bhi.n	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006dd4:	2b40      	cmp	r3, #64	; 0x40
 8006dd6:	d058      	beq.n	8006e8a <HAL_TIM_ConfigClockSource+0x1be>
 8006dd8:	2b40      	cmp	r3, #64	; 0x40
 8006dda:	d86f      	bhi.n	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006ddc:	2b30      	cmp	r3, #48	; 0x30
 8006dde:	d064      	beq.n	8006eaa <HAL_TIM_ConfigClockSource+0x1de>
 8006de0:	2b30      	cmp	r3, #48	; 0x30
 8006de2:	d86b      	bhi.n	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006de4:	2b20      	cmp	r3, #32
 8006de6:	d060      	beq.n	8006eaa <HAL_TIM_ConfigClockSource+0x1de>
 8006de8:	2b20      	cmp	r3, #32
 8006dea:	d867      	bhi.n	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d05c      	beq.n	8006eaa <HAL_TIM_ConfigClockSource+0x1de>
 8006df0:	2b10      	cmp	r3, #16
 8006df2:	d05a      	beq.n	8006eaa <HAL_TIM_ConfigClockSource+0x1de>
 8006df4:	e062      	b.n	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6818      	ldr	r0, [r3, #0]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	6899      	ldr	r1, [r3, #8]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	685a      	ldr	r2, [r3, #4]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	f000 fce3 	bl	80077d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	609a      	str	r2, [r3, #8]
      break;
 8006e22:	e04f      	b.n	8006ec4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6818      	ldr	r0, [r3, #0]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	6899      	ldr	r1, [r3, #8]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	f000 fccc 	bl	80077d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689a      	ldr	r2, [r3, #8]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e46:	609a      	str	r2, [r3, #8]
      break;
 8006e48:	e03c      	b.n	8006ec4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	6859      	ldr	r1, [r3, #4]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	461a      	mov	r2, r3
 8006e58:	f000 fc3e 	bl	80076d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2150      	movs	r1, #80	; 0x50
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 fc97 	bl	8007796 <TIM_ITRx_SetConfig>
      break;
 8006e68:	e02c      	b.n	8006ec4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6818      	ldr	r0, [r3, #0]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	6859      	ldr	r1, [r3, #4]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	461a      	mov	r2, r3
 8006e78:	f000 fc5d 	bl	8007736 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2160      	movs	r1, #96	; 0x60
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 fc87 	bl	8007796 <TIM_ITRx_SetConfig>
      break;
 8006e88:	e01c      	b.n	8006ec4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6818      	ldr	r0, [r3, #0]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	6859      	ldr	r1, [r3, #4]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	461a      	mov	r2, r3
 8006e98:	f000 fc1e 	bl	80076d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2140      	movs	r1, #64	; 0x40
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 fc77 	bl	8007796 <TIM_ITRx_SetConfig>
      break;
 8006ea8:	e00c      	b.n	8006ec4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	f000 fc6e 	bl	8007796 <TIM_ITRx_SetConfig>
      break;
 8006eba:	e003      	b.n	8006ec4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8006ec0:	e000      	b.n	8006ec4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006ec2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	00100070 	.word	0x00100070
 8006ee4:	00100060 	.word	0x00100060
 8006ee8:	00100050 	.word	0x00100050
 8006eec:	00100040 	.word	0x00100040
 8006ef0:	00100030 	.word	0x00100030
 8006ef4:	00100020 	.word	0x00100020

08006ef8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a46      	ldr	r2, [pc, #280]	; (8007060 <TIM_Base_SetConfig+0x12c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d017      	beq.n	8006f7c <TIM_Base_SetConfig+0x48>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f52:	d013      	beq.n	8006f7c <TIM_Base_SetConfig+0x48>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a43      	ldr	r2, [pc, #268]	; (8007064 <TIM_Base_SetConfig+0x130>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d00f      	beq.n	8006f7c <TIM_Base_SetConfig+0x48>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a42      	ldr	r2, [pc, #264]	; (8007068 <TIM_Base_SetConfig+0x134>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d00b      	beq.n	8006f7c <TIM_Base_SetConfig+0x48>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a41      	ldr	r2, [pc, #260]	; (800706c <TIM_Base_SetConfig+0x138>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d007      	beq.n	8006f7c <TIM_Base_SetConfig+0x48>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a40      	ldr	r2, [pc, #256]	; (8007070 <TIM_Base_SetConfig+0x13c>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d003      	beq.n	8006f7c <TIM_Base_SetConfig+0x48>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a3f      	ldr	r2, [pc, #252]	; (8007074 <TIM_Base_SetConfig+0x140>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d108      	bne.n	8006f8e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a33      	ldr	r2, [pc, #204]	; (8007060 <TIM_Base_SetConfig+0x12c>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d023      	beq.n	8006fde <TIM_Base_SetConfig+0xaa>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f9c:	d01f      	beq.n	8006fde <TIM_Base_SetConfig+0xaa>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a30      	ldr	r2, [pc, #192]	; (8007064 <TIM_Base_SetConfig+0x130>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d01b      	beq.n	8006fde <TIM_Base_SetConfig+0xaa>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a2f      	ldr	r2, [pc, #188]	; (8007068 <TIM_Base_SetConfig+0x134>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d017      	beq.n	8006fde <TIM_Base_SetConfig+0xaa>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a2e      	ldr	r2, [pc, #184]	; (800706c <TIM_Base_SetConfig+0x138>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d013      	beq.n	8006fde <TIM_Base_SetConfig+0xaa>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a2d      	ldr	r2, [pc, #180]	; (8007070 <TIM_Base_SetConfig+0x13c>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d00f      	beq.n	8006fde <TIM_Base_SetConfig+0xaa>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a2d      	ldr	r2, [pc, #180]	; (8007078 <TIM_Base_SetConfig+0x144>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d00b      	beq.n	8006fde <TIM_Base_SetConfig+0xaa>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a2c      	ldr	r2, [pc, #176]	; (800707c <TIM_Base_SetConfig+0x148>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d007      	beq.n	8006fde <TIM_Base_SetConfig+0xaa>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a2b      	ldr	r2, [pc, #172]	; (8007080 <TIM_Base_SetConfig+0x14c>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d003      	beq.n	8006fde <TIM_Base_SetConfig+0xaa>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a26      	ldr	r2, [pc, #152]	; (8007074 <TIM_Base_SetConfig+0x140>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d108      	bne.n	8006ff0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	689a      	ldr	r2, [r3, #8]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a12      	ldr	r2, [pc, #72]	; (8007060 <TIM_Base_SetConfig+0x12c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d013      	beq.n	8007044 <TIM_Base_SetConfig+0x110>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a14      	ldr	r2, [pc, #80]	; (8007070 <TIM_Base_SetConfig+0x13c>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d00f      	beq.n	8007044 <TIM_Base_SetConfig+0x110>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a14      	ldr	r2, [pc, #80]	; (8007078 <TIM_Base_SetConfig+0x144>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d00b      	beq.n	8007044 <TIM_Base_SetConfig+0x110>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a13      	ldr	r2, [pc, #76]	; (800707c <TIM_Base_SetConfig+0x148>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d007      	beq.n	8007044 <TIM_Base_SetConfig+0x110>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a12      	ldr	r2, [pc, #72]	; (8007080 <TIM_Base_SetConfig+0x14c>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d003      	beq.n	8007044 <TIM_Base_SetConfig+0x110>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a0d      	ldr	r2, [pc, #52]	; (8007074 <TIM_Base_SetConfig+0x140>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d103      	bne.n	800704c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	691a      	ldr	r2, [r3, #16]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	615a      	str	r2, [r3, #20]
}
 8007052:	bf00      	nop
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	40012c00 	.word	0x40012c00
 8007064:	40000400 	.word	0x40000400
 8007068:	40000800 	.word	0x40000800
 800706c:	40000c00 	.word	0x40000c00
 8007070:	40013400 	.word	0x40013400
 8007074:	40015000 	.word	0x40015000
 8007078:	40014000 	.word	0x40014000
 800707c:	40014400 	.word	0x40014400
 8007080:	40014800 	.word	0x40014800

08007084 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007084:	b480      	push	{r7}
 8007086:	b087      	sub	sp, #28
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	f023 0201 	bic.w	r2, r3, #1
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f023 0303 	bic.w	r3, r3, #3
 80070be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	f023 0302 	bic.w	r3, r3, #2
 80070d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	4313      	orrs	r3, r2
 80070da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a30      	ldr	r2, [pc, #192]	; (80071a0 <TIM_OC1_SetConfig+0x11c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d013      	beq.n	800710c <TIM_OC1_SetConfig+0x88>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a2f      	ldr	r2, [pc, #188]	; (80071a4 <TIM_OC1_SetConfig+0x120>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00f      	beq.n	800710c <TIM_OC1_SetConfig+0x88>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a2e      	ldr	r2, [pc, #184]	; (80071a8 <TIM_OC1_SetConfig+0x124>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d00b      	beq.n	800710c <TIM_OC1_SetConfig+0x88>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a2d      	ldr	r2, [pc, #180]	; (80071ac <TIM_OC1_SetConfig+0x128>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d007      	beq.n	800710c <TIM_OC1_SetConfig+0x88>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a2c      	ldr	r2, [pc, #176]	; (80071b0 <TIM_OC1_SetConfig+0x12c>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d003      	beq.n	800710c <TIM_OC1_SetConfig+0x88>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a2b      	ldr	r2, [pc, #172]	; (80071b4 <TIM_OC1_SetConfig+0x130>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d10c      	bne.n	8007126 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f023 0308 	bic.w	r3, r3, #8
 8007112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	4313      	orrs	r3, r2
 800711c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f023 0304 	bic.w	r3, r3, #4
 8007124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a1d      	ldr	r2, [pc, #116]	; (80071a0 <TIM_OC1_SetConfig+0x11c>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d013      	beq.n	8007156 <TIM_OC1_SetConfig+0xd2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a1c      	ldr	r2, [pc, #112]	; (80071a4 <TIM_OC1_SetConfig+0x120>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d00f      	beq.n	8007156 <TIM_OC1_SetConfig+0xd2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a1b      	ldr	r2, [pc, #108]	; (80071a8 <TIM_OC1_SetConfig+0x124>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d00b      	beq.n	8007156 <TIM_OC1_SetConfig+0xd2>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a1a      	ldr	r2, [pc, #104]	; (80071ac <TIM_OC1_SetConfig+0x128>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d007      	beq.n	8007156 <TIM_OC1_SetConfig+0xd2>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a19      	ldr	r2, [pc, #100]	; (80071b0 <TIM_OC1_SetConfig+0x12c>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d003      	beq.n	8007156 <TIM_OC1_SetConfig+0xd2>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a18      	ldr	r2, [pc, #96]	; (80071b4 <TIM_OC1_SetConfig+0x130>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d111      	bne.n	800717a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800715c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	4313      	orrs	r3, r2
 800716e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	4313      	orrs	r3, r2
 8007178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	621a      	str	r2, [r3, #32]
}
 8007194:	bf00      	nop
 8007196:	371c      	adds	r7, #28
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	40012c00 	.word	0x40012c00
 80071a4:	40013400 	.word	0x40013400
 80071a8:	40014000 	.word	0x40014000
 80071ac:	40014400 	.word	0x40014400
 80071b0:	40014800 	.word	0x40014800
 80071b4:	40015000 	.word	0x40015000

080071b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	f023 0210 	bic.w	r2, r3, #16
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	021b      	lsls	r3, r3, #8
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	f023 0320 	bic.w	r3, r3, #32
 8007206:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	011b      	lsls	r3, r3, #4
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	4313      	orrs	r3, r2
 8007212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a2c      	ldr	r2, [pc, #176]	; (80072c8 <TIM_OC2_SetConfig+0x110>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d007      	beq.n	800722c <TIM_OC2_SetConfig+0x74>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a2b      	ldr	r2, [pc, #172]	; (80072cc <TIM_OC2_SetConfig+0x114>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d003      	beq.n	800722c <TIM_OC2_SetConfig+0x74>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a2a      	ldr	r2, [pc, #168]	; (80072d0 <TIM_OC2_SetConfig+0x118>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d10d      	bne.n	8007248 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	011b      	lsls	r3, r3, #4
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	4313      	orrs	r3, r2
 800723e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007246:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a1f      	ldr	r2, [pc, #124]	; (80072c8 <TIM_OC2_SetConfig+0x110>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d013      	beq.n	8007278 <TIM_OC2_SetConfig+0xc0>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a1e      	ldr	r2, [pc, #120]	; (80072cc <TIM_OC2_SetConfig+0x114>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d00f      	beq.n	8007278 <TIM_OC2_SetConfig+0xc0>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a1e      	ldr	r2, [pc, #120]	; (80072d4 <TIM_OC2_SetConfig+0x11c>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d00b      	beq.n	8007278 <TIM_OC2_SetConfig+0xc0>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a1d      	ldr	r2, [pc, #116]	; (80072d8 <TIM_OC2_SetConfig+0x120>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d007      	beq.n	8007278 <TIM_OC2_SetConfig+0xc0>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a1c      	ldr	r2, [pc, #112]	; (80072dc <TIM_OC2_SetConfig+0x124>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d003      	beq.n	8007278 <TIM_OC2_SetConfig+0xc0>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a17      	ldr	r2, [pc, #92]	; (80072d0 <TIM_OC2_SetConfig+0x118>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d113      	bne.n	80072a0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800727e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007286:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	4313      	orrs	r3, r2
 8007292:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	4313      	orrs	r3, r2
 800729e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	621a      	str	r2, [r3, #32]
}
 80072ba:	bf00      	nop
 80072bc:	371c      	adds	r7, #28
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	40012c00 	.word	0x40012c00
 80072cc:	40013400 	.word	0x40013400
 80072d0:	40015000 	.word	0x40015000
 80072d4:	40014000 	.word	0x40014000
 80072d8:	40014400 	.word	0x40014400
 80072dc:	40014800 	.word	0x40014800

080072e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800730e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f023 0303 	bic.w	r3, r3, #3
 800731a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	4313      	orrs	r3, r2
 8007324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800732c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	021b      	lsls	r3, r3, #8
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	4313      	orrs	r3, r2
 8007338:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a2b      	ldr	r2, [pc, #172]	; (80073ec <TIM_OC3_SetConfig+0x10c>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d007      	beq.n	8007352 <TIM_OC3_SetConfig+0x72>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a2a      	ldr	r2, [pc, #168]	; (80073f0 <TIM_OC3_SetConfig+0x110>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d003      	beq.n	8007352 <TIM_OC3_SetConfig+0x72>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a29      	ldr	r2, [pc, #164]	; (80073f4 <TIM_OC3_SetConfig+0x114>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d10d      	bne.n	800736e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007358:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	021b      	lsls	r3, r3, #8
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	4313      	orrs	r3, r2
 8007364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800736c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a1e      	ldr	r2, [pc, #120]	; (80073ec <TIM_OC3_SetConfig+0x10c>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d013      	beq.n	800739e <TIM_OC3_SetConfig+0xbe>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a1d      	ldr	r2, [pc, #116]	; (80073f0 <TIM_OC3_SetConfig+0x110>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d00f      	beq.n	800739e <TIM_OC3_SetConfig+0xbe>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a1d      	ldr	r2, [pc, #116]	; (80073f8 <TIM_OC3_SetConfig+0x118>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d00b      	beq.n	800739e <TIM_OC3_SetConfig+0xbe>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a1c      	ldr	r2, [pc, #112]	; (80073fc <TIM_OC3_SetConfig+0x11c>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d007      	beq.n	800739e <TIM_OC3_SetConfig+0xbe>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a1b      	ldr	r2, [pc, #108]	; (8007400 <TIM_OC3_SetConfig+0x120>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d003      	beq.n	800739e <TIM_OC3_SetConfig+0xbe>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a16      	ldr	r2, [pc, #88]	; (80073f4 <TIM_OC3_SetConfig+0x114>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d113      	bne.n	80073c6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	011b      	lsls	r3, r3, #4
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	011b      	lsls	r3, r3, #4
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	621a      	str	r2, [r3, #32]
}
 80073e0:	bf00      	nop
 80073e2:	371c      	adds	r7, #28
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr
 80073ec:	40012c00 	.word	0x40012c00
 80073f0:	40013400 	.word	0x40013400
 80073f4:	40015000 	.word	0x40015000
 80073f8:	40014000 	.word	0x40014000
 80073fc:	40014400 	.word	0x40014400
 8007400:	40014800 	.word	0x40014800

08007404 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007404:	b480      	push	{r7}
 8007406:	b087      	sub	sp, #28
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a1b      	ldr	r3, [r3, #32]
 8007412:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800743e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	021b      	lsls	r3, r3, #8
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	4313      	orrs	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007452:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	031b      	lsls	r3, r3, #12
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	4313      	orrs	r3, r2
 800745e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a2c      	ldr	r2, [pc, #176]	; (8007514 <TIM_OC4_SetConfig+0x110>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d007      	beq.n	8007478 <TIM_OC4_SetConfig+0x74>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a2b      	ldr	r2, [pc, #172]	; (8007518 <TIM_OC4_SetConfig+0x114>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d003      	beq.n	8007478 <TIM_OC4_SetConfig+0x74>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a2a      	ldr	r2, [pc, #168]	; (800751c <TIM_OC4_SetConfig+0x118>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d10d      	bne.n	8007494 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800747e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	031b      	lsls	r3, r3, #12
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	4313      	orrs	r3, r2
 800748a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007492:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a1f      	ldr	r2, [pc, #124]	; (8007514 <TIM_OC4_SetConfig+0x110>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d013      	beq.n	80074c4 <TIM_OC4_SetConfig+0xc0>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a1e      	ldr	r2, [pc, #120]	; (8007518 <TIM_OC4_SetConfig+0x114>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d00f      	beq.n	80074c4 <TIM_OC4_SetConfig+0xc0>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a1e      	ldr	r2, [pc, #120]	; (8007520 <TIM_OC4_SetConfig+0x11c>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d00b      	beq.n	80074c4 <TIM_OC4_SetConfig+0xc0>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a1d      	ldr	r2, [pc, #116]	; (8007524 <TIM_OC4_SetConfig+0x120>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d007      	beq.n	80074c4 <TIM_OC4_SetConfig+0xc0>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a1c      	ldr	r2, [pc, #112]	; (8007528 <TIM_OC4_SetConfig+0x124>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d003      	beq.n	80074c4 <TIM_OC4_SetConfig+0xc0>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a17      	ldr	r2, [pc, #92]	; (800751c <TIM_OC4_SetConfig+0x118>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d113      	bne.n	80074ec <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074ca:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074d2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	695b      	ldr	r3, [r3, #20]
 80074d8:	019b      	lsls	r3, r3, #6
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	4313      	orrs	r3, r2
 80074de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	019b      	lsls	r3, r3, #6
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	621a      	str	r2, [r3, #32]
}
 8007506:	bf00      	nop
 8007508:	371c      	adds	r7, #28
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	40012c00 	.word	0x40012c00
 8007518:	40013400 	.word	0x40013400
 800751c:	40015000 	.word	0x40015000
 8007520:	40014000 	.word	0x40014000
 8007524:	40014400 	.word	0x40014400
 8007528:	40014800 	.word	0x40014800

0800752c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800752c:	b480      	push	{r7}
 800752e:	b087      	sub	sp, #28
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a1b      	ldr	r3, [r3, #32]
 800753a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800755a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800755e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	4313      	orrs	r3, r2
 8007568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007570:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	041b      	lsls	r3, r3, #16
 8007578:	693a      	ldr	r2, [r7, #16]
 800757a:	4313      	orrs	r3, r2
 800757c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a19      	ldr	r2, [pc, #100]	; (80075e8 <TIM_OC5_SetConfig+0xbc>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d013      	beq.n	80075ae <TIM_OC5_SetConfig+0x82>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a18      	ldr	r2, [pc, #96]	; (80075ec <TIM_OC5_SetConfig+0xc0>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d00f      	beq.n	80075ae <TIM_OC5_SetConfig+0x82>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a17      	ldr	r2, [pc, #92]	; (80075f0 <TIM_OC5_SetConfig+0xc4>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d00b      	beq.n	80075ae <TIM_OC5_SetConfig+0x82>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a16      	ldr	r2, [pc, #88]	; (80075f4 <TIM_OC5_SetConfig+0xc8>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d007      	beq.n	80075ae <TIM_OC5_SetConfig+0x82>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a15      	ldr	r2, [pc, #84]	; (80075f8 <TIM_OC5_SetConfig+0xcc>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d003      	beq.n	80075ae <TIM_OC5_SetConfig+0x82>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a14      	ldr	r2, [pc, #80]	; (80075fc <TIM_OC5_SetConfig+0xd0>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d109      	bne.n	80075c2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	021b      	lsls	r3, r3, #8
 80075bc:	697a      	ldr	r2, [r7, #20]
 80075be:	4313      	orrs	r3, r2
 80075c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	621a      	str	r2, [r3, #32]
}
 80075dc:	bf00      	nop
 80075de:	371c      	adds	r7, #28
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	40012c00 	.word	0x40012c00
 80075ec:	40013400 	.word	0x40013400
 80075f0:	40014000 	.word	0x40014000
 80075f4:	40014400 	.word	0x40014400
 80075f8:	40014800 	.word	0x40014800
 80075fc:	40015000 	.word	0x40015000

08007600 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007600:	b480      	push	{r7}
 8007602:	b087      	sub	sp, #28
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800762e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	021b      	lsls	r3, r3, #8
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	4313      	orrs	r3, r2
 800763e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007646:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	051b      	lsls	r3, r3, #20
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	4313      	orrs	r3, r2
 8007652:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a1a      	ldr	r2, [pc, #104]	; (80076c0 <TIM_OC6_SetConfig+0xc0>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d013      	beq.n	8007684 <TIM_OC6_SetConfig+0x84>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a19      	ldr	r2, [pc, #100]	; (80076c4 <TIM_OC6_SetConfig+0xc4>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d00f      	beq.n	8007684 <TIM_OC6_SetConfig+0x84>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a18      	ldr	r2, [pc, #96]	; (80076c8 <TIM_OC6_SetConfig+0xc8>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d00b      	beq.n	8007684 <TIM_OC6_SetConfig+0x84>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a17      	ldr	r2, [pc, #92]	; (80076cc <TIM_OC6_SetConfig+0xcc>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d007      	beq.n	8007684 <TIM_OC6_SetConfig+0x84>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a16      	ldr	r2, [pc, #88]	; (80076d0 <TIM_OC6_SetConfig+0xd0>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d003      	beq.n	8007684 <TIM_OC6_SetConfig+0x84>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a15      	ldr	r2, [pc, #84]	; (80076d4 <TIM_OC6_SetConfig+0xd4>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d109      	bne.n	8007698 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800768a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	029b      	lsls	r3, r3, #10
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	4313      	orrs	r3, r2
 8007696:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	685a      	ldr	r2, [r3, #4]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	693a      	ldr	r2, [r7, #16]
 80076b0:	621a      	str	r2, [r3, #32]
}
 80076b2:	bf00      	nop
 80076b4:	371c      	adds	r7, #28
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	40012c00 	.word	0x40012c00
 80076c4:	40013400 	.word	0x40013400
 80076c8:	40014000 	.word	0x40014000
 80076cc:	40014400 	.word	0x40014400
 80076d0:	40014800 	.word	0x40014800
 80076d4:	40015000 	.word	0x40015000

080076d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076d8:	b480      	push	{r7}
 80076da:	b087      	sub	sp, #28
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	f023 0201 	bic.w	r2, r3, #1
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007702:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	011b      	lsls	r3, r3, #4
 8007708:	693a      	ldr	r2, [r7, #16]
 800770a:	4313      	orrs	r3, r2
 800770c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f023 030a 	bic.w	r3, r3, #10
 8007714:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	4313      	orrs	r3, r2
 800771c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	621a      	str	r2, [r3, #32]
}
 800772a:	bf00      	nop
 800772c:	371c      	adds	r7, #28
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007736:	b480      	push	{r7}
 8007738:	b087      	sub	sp, #28
 800773a:	af00      	add	r7, sp, #0
 800773c:	60f8      	str	r0, [r7, #12]
 800773e:	60b9      	str	r1, [r7, #8]
 8007740:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	f023 0210 	bic.w	r2, r3, #16
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6a1b      	ldr	r3, [r3, #32]
 8007758:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007760:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	031b      	lsls	r3, r3, #12
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	4313      	orrs	r3, r2
 800776a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007772:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	011b      	lsls	r3, r3, #4
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	4313      	orrs	r3, r2
 800777c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	621a      	str	r2, [r3, #32]
}
 800778a:	bf00      	nop
 800778c:	371c      	adds	r7, #28
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007796:	b480      	push	{r7}
 8007798:	b085      	sub	sp, #20
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
 800779e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80077ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	f043 0307 	orr.w	r3, r3, #7
 80077bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	609a      	str	r2, [r3, #8]
}
 80077c4:	bf00      	nop
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b087      	sub	sp, #28
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
 80077dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	021a      	lsls	r2, r3, #8
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	431a      	orrs	r2, r3
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	609a      	str	r2, [r3, #8]
}
 8007804:	bf00      	nop
 8007806:	371c      	adds	r7, #28
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007810:	b480      	push	{r7}
 8007812:	b087      	sub	sp, #28
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f003 031f 	and.w	r3, r3, #31
 8007822:	2201      	movs	r2, #1
 8007824:	fa02 f303 	lsl.w	r3, r2, r3
 8007828:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6a1a      	ldr	r2, [r3, #32]
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	43db      	mvns	r3, r3
 8007832:	401a      	ands	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6a1a      	ldr	r2, [r3, #32]
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f003 031f 	and.w	r3, r3, #31
 8007842:	6879      	ldr	r1, [r7, #4]
 8007844:	fa01 f303 	lsl.w	r3, r1, r3
 8007848:	431a      	orrs	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	621a      	str	r2, [r3, #32]
}
 800784e:	bf00      	nop
 8007850:	371c      	adds	r7, #28
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
	...

0800785c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d109      	bne.n	8007880 <HAL_TIMEx_PWMN_Start+0x24>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007872:	b2db      	uxtb	r3, r3
 8007874:	2b01      	cmp	r3, #1
 8007876:	bf14      	ite	ne
 8007878:	2301      	movne	r3, #1
 800787a:	2300      	moveq	r3, #0
 800787c:	b2db      	uxtb	r3, r3
 800787e:	e022      	b.n	80078c6 <HAL_TIMEx_PWMN_Start+0x6a>
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2b04      	cmp	r3, #4
 8007884:	d109      	bne.n	800789a <HAL_TIMEx_PWMN_Start+0x3e>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b01      	cmp	r3, #1
 8007890:	bf14      	ite	ne
 8007892:	2301      	movne	r3, #1
 8007894:	2300      	moveq	r3, #0
 8007896:	b2db      	uxtb	r3, r3
 8007898:	e015      	b.n	80078c6 <HAL_TIMEx_PWMN_Start+0x6a>
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	2b08      	cmp	r3, #8
 800789e:	d109      	bne.n	80078b4 <HAL_TIMEx_PWMN_Start+0x58>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	bf14      	ite	ne
 80078ac:	2301      	movne	r3, #1
 80078ae:	2300      	moveq	r3, #0
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	e008      	b.n	80078c6 <HAL_TIMEx_PWMN_Start+0x6a>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b01      	cmp	r3, #1
 80078be:	bf14      	ite	ne
 80078c0:	2301      	movne	r3, #1
 80078c2:	2300      	moveq	r3, #0
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e073      	b.n	80079b6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d104      	bne.n	80078de <HAL_TIMEx_PWMN_Start+0x82>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2202      	movs	r2, #2
 80078d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078dc:	e013      	b.n	8007906 <HAL_TIMEx_PWMN_Start+0xaa>
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b04      	cmp	r3, #4
 80078e2:	d104      	bne.n	80078ee <HAL_TIMEx_PWMN_Start+0x92>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2202      	movs	r2, #2
 80078e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078ec:	e00b      	b.n	8007906 <HAL_TIMEx_PWMN_Start+0xaa>
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b08      	cmp	r3, #8
 80078f2:	d104      	bne.n	80078fe <HAL_TIMEx_PWMN_Start+0xa2>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2202      	movs	r2, #2
 80078f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80078fc:	e003      	b.n	8007906 <HAL_TIMEx_PWMN_Start+0xaa>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2202      	movs	r2, #2
 8007902:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2204      	movs	r2, #4
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	4618      	mov	r0, r3
 8007910:	f000 fa65 	bl	8007dde <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007922:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a25      	ldr	r2, [pc, #148]	; (80079c0 <HAL_TIMEx_PWMN_Start+0x164>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d022      	beq.n	8007974 <HAL_TIMEx_PWMN_Start+0x118>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007936:	d01d      	beq.n	8007974 <HAL_TIMEx_PWMN_Start+0x118>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a21      	ldr	r2, [pc, #132]	; (80079c4 <HAL_TIMEx_PWMN_Start+0x168>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d018      	beq.n	8007974 <HAL_TIMEx_PWMN_Start+0x118>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a20      	ldr	r2, [pc, #128]	; (80079c8 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d013      	beq.n	8007974 <HAL_TIMEx_PWMN_Start+0x118>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a1e      	ldr	r2, [pc, #120]	; (80079cc <HAL_TIMEx_PWMN_Start+0x170>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d00e      	beq.n	8007974 <HAL_TIMEx_PWMN_Start+0x118>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a1d      	ldr	r2, [pc, #116]	; (80079d0 <HAL_TIMEx_PWMN_Start+0x174>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d009      	beq.n	8007974 <HAL_TIMEx_PWMN_Start+0x118>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a1b      	ldr	r2, [pc, #108]	; (80079d4 <HAL_TIMEx_PWMN_Start+0x178>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d004      	beq.n	8007974 <HAL_TIMEx_PWMN_Start+0x118>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a1a      	ldr	r2, [pc, #104]	; (80079d8 <HAL_TIMEx_PWMN_Start+0x17c>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d115      	bne.n	80079a0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	689a      	ldr	r2, [r3, #8]
 800797a:	4b18      	ldr	r3, [pc, #96]	; (80079dc <HAL_TIMEx_PWMN_Start+0x180>)
 800797c:	4013      	ands	r3, r2
 800797e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2b06      	cmp	r3, #6
 8007984:	d015      	beq.n	80079b2 <HAL_TIMEx_PWMN_Start+0x156>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800798c:	d011      	beq.n	80079b2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f042 0201 	orr.w	r2, r2, #1
 800799c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800799e:	e008      	b.n	80079b2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f042 0201 	orr.w	r2, r2, #1
 80079ae:	601a      	str	r2, [r3, #0]
 80079b0:	e000      	b.n	80079b4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	40012c00 	.word	0x40012c00
 80079c4:	40000400 	.word	0x40000400
 80079c8:	40000800 	.word	0x40000800
 80079cc:	40000c00 	.word	0x40000c00
 80079d0:	40013400 	.word	0x40013400
 80079d4:	40014000 	.word	0x40014000
 80079d8:	40015000 	.word	0x40015000
 80079dc:	00010007 	.word	0x00010007

080079e0 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2200      	movs	r2, #0
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 f9f3 	bl	8007dde <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6a1a      	ldr	r2, [r3, #32]
 80079fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a02:	4013      	ands	r3, r2
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10f      	bne.n	8007a28 <HAL_TIMEx_PWMN_Stop+0x48>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	6a1a      	ldr	r2, [r3, #32]
 8007a0e:	f244 4344 	movw	r3, #17476	; 0x4444
 8007a12:	4013      	ands	r3, r2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d107      	bne.n	8007a28 <HAL_TIMEx_PWMN_Stop+0x48>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6a1a      	ldr	r2, [r3, #32]
 8007a2e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a32:	4013      	ands	r3, r2
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10f      	bne.n	8007a58 <HAL_TIMEx_PWMN_Stop+0x78>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6a1a      	ldr	r2, [r3, #32]
 8007a3e:	f244 4344 	movw	r3, #17476	; 0x4444
 8007a42:	4013      	ands	r3, r2
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d107      	bne.n	8007a58 <HAL_TIMEx_PWMN_Stop+0x78>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f022 0201 	bic.w	r2, r2, #1
 8007a56:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d104      	bne.n	8007a68 <HAL_TIMEx_PWMN_Stop+0x88>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a66:	e013      	b.n	8007a90 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	2b04      	cmp	r3, #4
 8007a6c:	d104      	bne.n	8007a78 <HAL_TIMEx_PWMN_Stop+0x98>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a76:	e00b      	b.n	8007a90 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	2b08      	cmp	r3, #8
 8007a7c:	d104      	bne.n	8007a88 <HAL_TIMEx_PWMN_Stop+0xa8>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a86:	e003      	b.n	8007a90 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
	...

08007a9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d101      	bne.n	8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	e074      	b.n	8007b9e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a34      	ldr	r2, [pc, #208]	; (8007bac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d009      	beq.n	8007af2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a33      	ldr	r2, [pc, #204]	; (8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d004      	beq.n	8007af2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a31      	ldr	r2, [pc, #196]	; (8007bb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d108      	bne.n	8007b04 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007af8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a21      	ldr	r2, [pc, #132]	; (8007bac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d022      	beq.n	8007b72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b34:	d01d      	beq.n	8007b72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a1f      	ldr	r2, [pc, #124]	; (8007bb8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d018      	beq.n	8007b72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a1d      	ldr	r2, [pc, #116]	; (8007bbc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d013      	beq.n	8007b72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a1c      	ldr	r2, [pc, #112]	; (8007bc0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d00e      	beq.n	8007b72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a15      	ldr	r2, [pc, #84]	; (8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d009      	beq.n	8007b72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a18      	ldr	r2, [pc, #96]	; (8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d004      	beq.n	8007b72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a11      	ldr	r2, [pc, #68]	; (8007bb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d10c      	bne.n	8007b8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	40012c00 	.word	0x40012c00
 8007bb0:	40013400 	.word	0x40013400
 8007bb4:	40015000 	.word	0x40015000
 8007bb8:	40000400 	.word	0x40000400
 8007bbc:	40000800 	.word	0x40000800
 8007bc0:	40000c00 	.word	0x40000c00
 8007bc4:	40014000 	.word	0x40014000

08007bc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d101      	bne.n	8007be4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007be0:	2302      	movs	r3, #2
 8007be2:	e096      	b.n	8007d12 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	695b      	ldr	r3, [r3, #20]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	041b      	lsls	r3, r3, #16
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a2f      	ldr	r2, [pc, #188]	; (8007d20 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d009      	beq.n	8007c7c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a2d      	ldr	r2, [pc, #180]	; (8007d24 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d004      	beq.n	8007c7c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a2c      	ldr	r2, [pc, #176]	; (8007d28 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d106      	bne.n	8007c8a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a24      	ldr	r2, [pc, #144]	; (8007d20 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d009      	beq.n	8007ca8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a22      	ldr	r2, [pc, #136]	; (8007d24 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d004      	beq.n	8007ca8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a21      	ldr	r2, [pc, #132]	; (8007d28 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d12b      	bne.n	8007d00 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb2:	051b      	lsls	r3, r3, #20
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a11      	ldr	r2, [pc, #68]	; (8007d20 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d009      	beq.n	8007cf2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a10      	ldr	r2, [pc, #64]	; (8007d24 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d004      	beq.n	8007cf2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a0e      	ldr	r2, [pc, #56]	; (8007d28 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d106      	bne.n	8007d00 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	40012c00 	.word	0x40012c00
 8007d24:	40013400 	.word	0x40013400
 8007d28:	40015000 	.word	0x40015000

08007d2c <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007d42:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b083      	sub	sp, #12
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d5a:	bf00      	nop
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b083      	sub	sp, #12
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d6e:	bf00      	nop
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b083      	sub	sp, #12
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d82:	bf00      	nop
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b083      	sub	sp, #12
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007d96:	bf00      	nop
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b083      	sub	sp, #12
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007daa:	bf00      	nop
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b083      	sub	sp, #12
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007dd2:	bf00      	nop
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007dde:	b480      	push	{r7}
 8007de0:	b087      	sub	sp, #28
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	60f8      	str	r0, [r7, #12]
 8007de6:	60b9      	str	r1, [r7, #8]
 8007de8:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	f003 031f 	and.w	r3, r3, #31
 8007df0:	2204      	movs	r2, #4
 8007df2:	fa02 f303 	lsl.w	r3, r2, r3
 8007df6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6a1a      	ldr	r2, [r3, #32]
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	43db      	mvns	r3, r3
 8007e00:	401a      	ands	r2, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6a1a      	ldr	r2, [r3, #32]
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	f003 031f 	and.w	r3, r3, #31
 8007e10:	6879      	ldr	r1, [r7, #4]
 8007e12:	fa01 f303 	lsl.w	r3, r1, r3
 8007e16:	431a      	orrs	r2, r3
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	621a      	str	r2, [r3, #32]
}
 8007e1c:	bf00      	nop
 8007e1e:	371c      	adds	r7, #28
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e042      	b.n	8007ec0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d106      	bne.n	8007e52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7fa f817 	bl	8001e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2224      	movs	r2, #36	; 0x24
 8007e56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f022 0201 	bic.w	r2, r2, #1
 8007e68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fc50 	bl	8008710 <UART_SetConfig>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d101      	bne.n	8007e7a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e022      	b.n	8007ec0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d002      	beq.n	8007e88 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 ff40 	bl	8008d08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689a      	ldr	r2, [r3, #8]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ea6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f042 0201 	orr.w	r2, r2, #1
 8007eb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 ffc7 	bl	8008e4c <UART_CheckIdleState>
 8007ebe:	4603      	mov	r3, r0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b08a      	sub	sp, #40	; 0x28
 8007ecc:	af02      	add	r7, sp, #8
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	603b      	str	r3, [r7, #0]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ede:	2b20      	cmp	r3, #32
 8007ee0:	f040 8083 	bne.w	8007fea <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d002      	beq.n	8007ef0 <HAL_UART_Transmit+0x28>
 8007eea:	88fb      	ldrh	r3, [r7, #6]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e07b      	b.n	8007fec <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d101      	bne.n	8007f02 <HAL_UART_Transmit+0x3a>
 8007efe:	2302      	movs	r3, #2
 8007f00:	e074      	b.n	8007fec <HAL_UART_Transmit+0x124>
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2221      	movs	r2, #33	; 0x21
 8007f16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f1a:	f7fa fbbb 	bl	8002694 <HAL_GetTick>
 8007f1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	88fa      	ldrh	r2, [r7, #6]
 8007f24:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	88fa      	ldrh	r2, [r7, #6]
 8007f2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f38:	d108      	bne.n	8007f4c <HAL_UART_Transmit+0x84>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d104      	bne.n	8007f4c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007f42:	2300      	movs	r3, #0
 8007f44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	61bb      	str	r3, [r7, #24]
 8007f4a:	e003      	b.n	8007f54 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f50:	2300      	movs	r3, #0
 8007f52:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007f5c:	e02c      	b.n	8007fb8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	2200      	movs	r2, #0
 8007f66:	2180      	movs	r1, #128	; 0x80
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f000 ffba 	bl	8008ee2 <UART_WaitOnFlagUntilTimeout>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e039      	b.n	8007fec <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10b      	bne.n	8007f96 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f8c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	3302      	adds	r3, #2
 8007f92:	61bb      	str	r3, [r7, #24]
 8007f94:	e007      	b.n	8007fa6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	781a      	ldrb	r2, [r3, #0]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1cc      	bne.n	8007f5e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	2140      	movs	r1, #64	; 0x40
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f000 ff87 	bl	8008ee2 <UART_WaitOnFlagUntilTimeout>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e006      	b.n	8007fec <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2220      	movs	r2, #32
 8007fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	e000      	b.n	8007fec <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007fea:	2302      	movs	r3, #2
  }
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3720      	adds	r7, #32
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b08a      	sub	sp, #40	; 0x28
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	4613      	mov	r3, r2
 8008000:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008008:	2b20      	cmp	r3, #32
 800800a:	d142      	bne.n	8008092 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d002      	beq.n	8008018 <HAL_UART_Receive_IT+0x24>
 8008012:	88fb      	ldrh	r3, [r7, #6]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	e03b      	b.n	8008094 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008022:	2b01      	cmp	r3, #1
 8008024:	d101      	bne.n	800802a <HAL_UART_Receive_IT+0x36>
 8008026:	2302      	movs	r3, #2
 8008028:	e034      	b.n	8008094 <HAL_UART_Receive_IT+0xa0>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a17      	ldr	r2, [pc, #92]	; (800809c <HAL_UART_Receive_IT+0xa8>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d01f      	beq.n	8008082 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d018      	beq.n	8008082 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	e853 3f00 	ldrex	r3, [r3]
 800805c:	613b      	str	r3, [r7, #16]
   return(result);
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008064:	627b      	str	r3, [r7, #36]	; 0x24
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	461a      	mov	r2, r3
 800806c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806e:	623b      	str	r3, [r7, #32]
 8008070:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008072:	69f9      	ldr	r1, [r7, #28]
 8008074:	6a3a      	ldr	r2, [r7, #32]
 8008076:	e841 2300 	strex	r3, r2, [r1]
 800807a:	61bb      	str	r3, [r7, #24]
   return(result);
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1e6      	bne.n	8008050 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008082:	88fb      	ldrh	r3, [r7, #6]
 8008084:	461a      	mov	r2, r3
 8008086:	68b9      	ldr	r1, [r7, #8]
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f000 fff3 	bl	8009074 <UART_Start_Receive_IT>
 800808e:	4603      	mov	r3, r0
 8008090:	e000      	b.n	8008094 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008092:	2302      	movs	r3, #2
  }
}
 8008094:	4618      	mov	r0, r3
 8008096:	3728      	adds	r7, #40	; 0x28
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	40008000 	.word	0x40008000

080080a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b0ba      	sub	sp, #232	; 0xe8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	69db      	ldr	r3, [r3, #28]
 80080ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80080c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80080ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80080ce:	4013      	ands	r3, r2
 80080d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80080d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d11b      	bne.n	8008114 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080e0:	f003 0320 	and.w	r3, r3, #32
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d015      	beq.n	8008114 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ec:	f003 0320 	and.w	r3, r3, #32
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d105      	bne.n	8008100 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d009      	beq.n	8008114 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008104:	2b00      	cmp	r3, #0
 8008106:	f000 82d6 	beq.w	80086b6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	4798      	blx	r3
      }
      return;
 8008112:	e2d0      	b.n	80086b6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008114:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 811f 	beq.w	800835c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800811e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008122:	4b8b      	ldr	r3, [pc, #556]	; (8008350 <HAL_UART_IRQHandler+0x2b0>)
 8008124:	4013      	ands	r3, r2
 8008126:	2b00      	cmp	r3, #0
 8008128:	d106      	bne.n	8008138 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800812a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800812e:	4b89      	ldr	r3, [pc, #548]	; (8008354 <HAL_UART_IRQHandler+0x2b4>)
 8008130:	4013      	ands	r3, r2
 8008132:	2b00      	cmp	r3, #0
 8008134:	f000 8112 	beq.w	800835c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	2b00      	cmp	r3, #0
 8008142:	d011      	beq.n	8008168 <HAL_UART_IRQHandler+0xc8>
 8008144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00b      	beq.n	8008168 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2201      	movs	r2, #1
 8008156:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800815e:	f043 0201 	orr.w	r2, r3, #1
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800816c:	f003 0302 	and.w	r3, r3, #2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d011      	beq.n	8008198 <HAL_UART_IRQHandler+0xf8>
 8008174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00b      	beq.n	8008198 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2202      	movs	r2, #2
 8008186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800818e:	f043 0204 	orr.w	r2, r3, #4
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800819c:	f003 0304 	and.w	r3, r3, #4
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d011      	beq.n	80081c8 <HAL_UART_IRQHandler+0x128>
 80081a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081a8:	f003 0301 	and.w	r3, r3, #1
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00b      	beq.n	80081c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2204      	movs	r2, #4
 80081b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081be:	f043 0202 	orr.w	r2, r3, #2
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80081c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081cc:	f003 0308 	and.w	r3, r3, #8
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d017      	beq.n	8008204 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081d8:	f003 0320 	and.w	r3, r3, #32
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d105      	bne.n	80081ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80081e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80081e4:	4b5a      	ldr	r3, [pc, #360]	; (8008350 <HAL_UART_IRQHandler+0x2b0>)
 80081e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00b      	beq.n	8008204 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2208      	movs	r2, #8
 80081f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081fa:	f043 0208 	orr.w	r2, r3, #8
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800820c:	2b00      	cmp	r3, #0
 800820e:	d012      	beq.n	8008236 <HAL_UART_IRQHandler+0x196>
 8008210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008214:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00c      	beq.n	8008236 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008224:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800822c:	f043 0220 	orr.w	r2, r3, #32
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 823c 	beq.w	80086ba <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008246:	f003 0320 	and.w	r3, r3, #32
 800824a:	2b00      	cmp	r3, #0
 800824c:	d013      	beq.n	8008276 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800824e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008252:	f003 0320 	and.w	r3, r3, #32
 8008256:	2b00      	cmp	r3, #0
 8008258:	d105      	bne.n	8008266 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800825a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800825e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d007      	beq.n	8008276 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800827c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800828a:	2b40      	cmp	r3, #64	; 0x40
 800828c:	d005      	beq.n	800829a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800828e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008292:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008296:	2b00      	cmp	r3, #0
 8008298:	d04f      	beq.n	800833a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f001 f814 	bl	80092c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082aa:	2b40      	cmp	r3, #64	; 0x40
 80082ac:	d141      	bne.n	8008332 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	3308      	adds	r3, #8
 80082b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082bc:	e853 3f00 	ldrex	r3, [r3]
 80082c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80082c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	3308      	adds	r3, #8
 80082d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80082da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80082de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80082e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80082ea:	e841 2300 	strex	r3, r2, [r1]
 80082ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80082f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1d9      	bne.n	80082ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d013      	beq.n	800832a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008306:	4a14      	ldr	r2, [pc, #80]	; (8008358 <HAL_UART_IRQHandler+0x2b8>)
 8008308:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800830e:	4618      	mov	r0, r3
 8008310:	f7fc fa38 	bl	8004784 <HAL_DMA_Abort_IT>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d017      	beq.n	800834a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800831e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008324:	4610      	mov	r0, r2
 8008326:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008328:	e00f      	b.n	800834a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f9da 	bl	80086e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008330:	e00b      	b.n	800834a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f9d6 	bl	80086e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008338:	e007      	b.n	800834a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f9d2 	bl	80086e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008348:	e1b7      	b.n	80086ba <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800834a:	bf00      	nop
    return;
 800834c:	e1b5      	b.n	80086ba <HAL_UART_IRQHandler+0x61a>
 800834e:	bf00      	nop
 8008350:	10000001 	.word	0x10000001
 8008354:	04000120 	.word	0x04000120
 8008358:	08009395 	.word	0x08009395

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008360:	2b01      	cmp	r3, #1
 8008362:	f040 814a 	bne.w	80085fa <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800836a:	f003 0310 	and.w	r3, r3, #16
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 8143 	beq.w	80085fa <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008378:	f003 0310 	and.w	r3, r3, #16
 800837c:	2b00      	cmp	r3, #0
 800837e:	f000 813c 	beq.w	80085fa <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2210      	movs	r2, #16
 8008388:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008394:	2b40      	cmp	r3, #64	; 0x40
 8008396:	f040 80b5 	bne.w	8008504 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f000 8187 	beq.w	80086be <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80083b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083ba:	429a      	cmp	r2, r3
 80083bc:	f080 817f 	bcs.w	80086be <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 0320 	and.w	r3, r3, #32
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f040 8086 	bne.w	80084e8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083e8:	e853 3f00 	ldrex	r3, [r3]
 80083ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80083f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	461a      	mov	r2, r3
 8008402:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008406:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800840a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008412:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008416:	e841 2300 	strex	r3, r2, [r1]
 800841a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800841e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1da      	bne.n	80083dc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	3308      	adds	r3, #8
 800842c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008430:	e853 3f00 	ldrex	r3, [r3]
 8008434:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008436:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008438:	f023 0301 	bic.w	r3, r3, #1
 800843c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	3308      	adds	r3, #8
 8008446:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800844a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800844e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008450:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008452:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008456:	e841 2300 	strex	r3, r2, [r1]
 800845a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800845c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1e1      	bne.n	8008426 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	3308      	adds	r3, #8
 8008468:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800846c:	e853 3f00 	ldrex	r3, [r3]
 8008470:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3308      	adds	r3, #8
 8008482:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008486:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008488:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800848c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800848e:	e841 2300 	strex	r3, r2, [r1]
 8008492:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1e3      	bne.n	8008462 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2220      	movs	r2, #32
 800849e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084b0:	e853 3f00 	ldrex	r3, [r3]
 80084b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084b8:	f023 0310 	bic.w	r3, r3, #16
 80084bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	461a      	mov	r2, r3
 80084c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80084cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084d2:	e841 2300 	strex	r3, r2, [r1]
 80084d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1e4      	bne.n	80084a8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7fc f8f5 	bl	80046d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	4619      	mov	r1, r3
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 f8fb 	bl	80086f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008502:	e0dc      	b.n	80086be <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008510:	b29b      	uxth	r3, r3
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800851e:	b29b      	uxth	r3, r3
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 80ce 	beq.w	80086c2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8008526:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800852a:	2b00      	cmp	r3, #0
 800852c:	f000 80c9 	beq.w	80086c2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008538:	e853 3f00 	ldrex	r3, [r3]
 800853c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800853e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008540:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008544:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	461a      	mov	r2, r3
 800854e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008552:	647b      	str	r3, [r7, #68]	; 0x44
 8008554:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008556:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008558:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800855a:	e841 2300 	strex	r3, r2, [r1]
 800855e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1e4      	bne.n	8008530 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	3308      	adds	r3, #8
 800856c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	e853 3f00 	ldrex	r3, [r3]
 8008574:	623b      	str	r3, [r7, #32]
   return(result);
 8008576:	6a3b      	ldr	r3, [r7, #32]
 8008578:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800857c:	f023 0301 	bic.w	r3, r3, #1
 8008580:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	3308      	adds	r3, #8
 800858a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800858e:	633a      	str	r2, [r7, #48]	; 0x30
 8008590:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008592:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008596:	e841 2300 	strex	r3, r2, [r1]
 800859a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800859c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1e1      	bne.n	8008566 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2220      	movs	r2, #32
 80085a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	e853 3f00 	ldrex	r3, [r3]
 80085c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f023 0310 	bic.w	r3, r3, #16
 80085ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	461a      	mov	r2, r3
 80085d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80085d8:	61fb      	str	r3, [r7, #28]
 80085da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085dc:	69b9      	ldr	r1, [r7, #24]
 80085de:	69fa      	ldr	r2, [r7, #28]
 80085e0:	e841 2300 	strex	r3, r2, [r1]
 80085e4:	617b      	str	r3, [r7, #20]
   return(result);
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1e4      	bne.n	80085b6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f880 	bl	80086f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085f8:	e063      	b.n	80086c2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80085fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00e      	beq.n	8008624 <HAL_UART_IRQHandler+0x584>
 8008606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800860a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d008      	beq.n	8008624 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800861a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f001 fb57 	bl	8009cd0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008622:	e051      	b.n	80086c8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800862c:	2b00      	cmp	r3, #0
 800862e:	d014      	beq.n	800865a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008638:	2b00      	cmp	r3, #0
 800863a:	d105      	bne.n	8008648 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800863c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008640:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008644:	2b00      	cmp	r3, #0
 8008646:	d008      	beq.n	800865a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800864c:	2b00      	cmp	r3, #0
 800864e:	d03a      	beq.n	80086c6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	4798      	blx	r3
    }
    return;
 8008658:	e035      	b.n	80086c6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800865a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800865e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008662:	2b00      	cmp	r3, #0
 8008664:	d009      	beq.n	800867a <HAL_UART_IRQHandler+0x5da>
 8008666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800866a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800866e:	2b00      	cmp	r3, #0
 8008670:	d003      	beq.n	800867a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fea4 	bl	80093c0 <UART_EndTransmit_IT>
    return;
 8008678:	e026      	b.n	80086c8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800867a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800867e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d009      	beq.n	800869a <HAL_UART_IRQHandler+0x5fa>
 8008686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800868a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800868e:	2b00      	cmp	r3, #0
 8008690:	d003      	beq.n	800869a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f001 fb30 	bl	8009cf8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008698:	e016      	b.n	80086c8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800869a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800869e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d010      	beq.n	80086c8 <HAL_UART_IRQHandler+0x628>
 80086a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	da0c      	bge.n	80086c8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f001 fb18 	bl	8009ce4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086b4:	e008      	b.n	80086c8 <HAL_UART_IRQHandler+0x628>
      return;
 80086b6:	bf00      	nop
 80086b8:	e006      	b.n	80086c8 <HAL_UART_IRQHandler+0x628>
    return;
 80086ba:	bf00      	nop
 80086bc:	e004      	b.n	80086c8 <HAL_UART_IRQHandler+0x628>
      return;
 80086be:	bf00      	nop
 80086c0:	e002      	b.n	80086c8 <HAL_UART_IRQHandler+0x628>
      return;
 80086c2:	bf00      	nop
 80086c4:	e000      	b.n	80086c8 <HAL_UART_IRQHandler+0x628>
    return;
 80086c6:	bf00      	nop
  }
}
 80086c8:	37e8      	adds	r7, #232	; 0xe8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop

080086d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80086d8:	bf00      	nop
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	460b      	mov	r3, r1
 8008702:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008704:	bf00      	nop
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008714:	b08c      	sub	sp, #48	; 0x30
 8008716:	af00      	add	r7, sp, #0
 8008718:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800871a:	2300      	movs	r3, #0
 800871c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	689a      	ldr	r2, [r3, #8]
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	431a      	orrs	r2, r3
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	431a      	orrs	r2, r3
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	69db      	ldr	r3, [r3, #28]
 8008734:	4313      	orrs	r3, r2
 8008736:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	4baa      	ldr	r3, [pc, #680]	; (80089e8 <UART_SetConfig+0x2d8>)
 8008740:	4013      	ands	r3, r2
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	6812      	ldr	r2, [r2, #0]
 8008746:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008748:	430b      	orrs	r3, r1
 800874a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	68da      	ldr	r2, [r3, #12]
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	430a      	orrs	r2, r1
 8008760:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	699b      	ldr	r3, [r3, #24]
 8008766:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a9f      	ldr	r2, [pc, #636]	; (80089ec <UART_SetConfig+0x2dc>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d004      	beq.n	800877c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	6a1b      	ldr	r3, [r3, #32]
 8008776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008778:	4313      	orrs	r3, r2
 800877a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008786:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	6812      	ldr	r2, [r2, #0]
 800878e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008790:	430b      	orrs	r3, r1
 8008792:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879a:	f023 010f 	bic.w	r1, r3, #15
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	430a      	orrs	r2, r1
 80087a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a90      	ldr	r2, [pc, #576]	; (80089f0 <UART_SetConfig+0x2e0>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d125      	bne.n	8008800 <UART_SetConfig+0xf0>
 80087b4:	4b8f      	ldr	r3, [pc, #572]	; (80089f4 <UART_SetConfig+0x2e4>)
 80087b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087ba:	f003 0303 	and.w	r3, r3, #3
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d81a      	bhi.n	80087f8 <UART_SetConfig+0xe8>
 80087c2:	a201      	add	r2, pc, #4	; (adr r2, 80087c8 <UART_SetConfig+0xb8>)
 80087c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c8:	080087d9 	.word	0x080087d9
 80087cc:	080087e9 	.word	0x080087e9
 80087d0:	080087e1 	.word	0x080087e1
 80087d4:	080087f1 	.word	0x080087f1
 80087d8:	2301      	movs	r3, #1
 80087da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087de:	e116      	b.n	8008a0e <UART_SetConfig+0x2fe>
 80087e0:	2302      	movs	r3, #2
 80087e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087e6:	e112      	b.n	8008a0e <UART_SetConfig+0x2fe>
 80087e8:	2304      	movs	r3, #4
 80087ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ee:	e10e      	b.n	8008a0e <UART_SetConfig+0x2fe>
 80087f0:	2308      	movs	r3, #8
 80087f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087f6:	e10a      	b.n	8008a0e <UART_SetConfig+0x2fe>
 80087f8:	2310      	movs	r3, #16
 80087fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087fe:	e106      	b.n	8008a0e <UART_SetConfig+0x2fe>
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a7c      	ldr	r2, [pc, #496]	; (80089f8 <UART_SetConfig+0x2e8>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d138      	bne.n	800887c <UART_SetConfig+0x16c>
 800880a:	4b7a      	ldr	r3, [pc, #488]	; (80089f4 <UART_SetConfig+0x2e4>)
 800880c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008810:	f003 030c 	and.w	r3, r3, #12
 8008814:	2b0c      	cmp	r3, #12
 8008816:	d82d      	bhi.n	8008874 <UART_SetConfig+0x164>
 8008818:	a201      	add	r2, pc, #4	; (adr r2, 8008820 <UART_SetConfig+0x110>)
 800881a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881e:	bf00      	nop
 8008820:	08008855 	.word	0x08008855
 8008824:	08008875 	.word	0x08008875
 8008828:	08008875 	.word	0x08008875
 800882c:	08008875 	.word	0x08008875
 8008830:	08008865 	.word	0x08008865
 8008834:	08008875 	.word	0x08008875
 8008838:	08008875 	.word	0x08008875
 800883c:	08008875 	.word	0x08008875
 8008840:	0800885d 	.word	0x0800885d
 8008844:	08008875 	.word	0x08008875
 8008848:	08008875 	.word	0x08008875
 800884c:	08008875 	.word	0x08008875
 8008850:	0800886d 	.word	0x0800886d
 8008854:	2300      	movs	r3, #0
 8008856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800885a:	e0d8      	b.n	8008a0e <UART_SetConfig+0x2fe>
 800885c:	2302      	movs	r3, #2
 800885e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008862:	e0d4      	b.n	8008a0e <UART_SetConfig+0x2fe>
 8008864:	2304      	movs	r3, #4
 8008866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800886a:	e0d0      	b.n	8008a0e <UART_SetConfig+0x2fe>
 800886c:	2308      	movs	r3, #8
 800886e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008872:	e0cc      	b.n	8008a0e <UART_SetConfig+0x2fe>
 8008874:	2310      	movs	r3, #16
 8008876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800887a:	e0c8      	b.n	8008a0e <UART_SetConfig+0x2fe>
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a5e      	ldr	r2, [pc, #376]	; (80089fc <UART_SetConfig+0x2ec>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d125      	bne.n	80088d2 <UART_SetConfig+0x1c2>
 8008886:	4b5b      	ldr	r3, [pc, #364]	; (80089f4 <UART_SetConfig+0x2e4>)
 8008888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800888c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008890:	2b30      	cmp	r3, #48	; 0x30
 8008892:	d016      	beq.n	80088c2 <UART_SetConfig+0x1b2>
 8008894:	2b30      	cmp	r3, #48	; 0x30
 8008896:	d818      	bhi.n	80088ca <UART_SetConfig+0x1ba>
 8008898:	2b20      	cmp	r3, #32
 800889a:	d00a      	beq.n	80088b2 <UART_SetConfig+0x1a2>
 800889c:	2b20      	cmp	r3, #32
 800889e:	d814      	bhi.n	80088ca <UART_SetConfig+0x1ba>
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d002      	beq.n	80088aa <UART_SetConfig+0x19a>
 80088a4:	2b10      	cmp	r3, #16
 80088a6:	d008      	beq.n	80088ba <UART_SetConfig+0x1aa>
 80088a8:	e00f      	b.n	80088ca <UART_SetConfig+0x1ba>
 80088aa:	2300      	movs	r3, #0
 80088ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088b0:	e0ad      	b.n	8008a0e <UART_SetConfig+0x2fe>
 80088b2:	2302      	movs	r3, #2
 80088b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088b8:	e0a9      	b.n	8008a0e <UART_SetConfig+0x2fe>
 80088ba:	2304      	movs	r3, #4
 80088bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088c0:	e0a5      	b.n	8008a0e <UART_SetConfig+0x2fe>
 80088c2:	2308      	movs	r3, #8
 80088c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088c8:	e0a1      	b.n	8008a0e <UART_SetConfig+0x2fe>
 80088ca:	2310      	movs	r3, #16
 80088cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088d0:	e09d      	b.n	8008a0e <UART_SetConfig+0x2fe>
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a4a      	ldr	r2, [pc, #296]	; (8008a00 <UART_SetConfig+0x2f0>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d125      	bne.n	8008928 <UART_SetConfig+0x218>
 80088dc:	4b45      	ldr	r3, [pc, #276]	; (80089f4 <UART_SetConfig+0x2e4>)
 80088de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80088e6:	2bc0      	cmp	r3, #192	; 0xc0
 80088e8:	d016      	beq.n	8008918 <UART_SetConfig+0x208>
 80088ea:	2bc0      	cmp	r3, #192	; 0xc0
 80088ec:	d818      	bhi.n	8008920 <UART_SetConfig+0x210>
 80088ee:	2b80      	cmp	r3, #128	; 0x80
 80088f0:	d00a      	beq.n	8008908 <UART_SetConfig+0x1f8>
 80088f2:	2b80      	cmp	r3, #128	; 0x80
 80088f4:	d814      	bhi.n	8008920 <UART_SetConfig+0x210>
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d002      	beq.n	8008900 <UART_SetConfig+0x1f0>
 80088fa:	2b40      	cmp	r3, #64	; 0x40
 80088fc:	d008      	beq.n	8008910 <UART_SetConfig+0x200>
 80088fe:	e00f      	b.n	8008920 <UART_SetConfig+0x210>
 8008900:	2300      	movs	r3, #0
 8008902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008906:	e082      	b.n	8008a0e <UART_SetConfig+0x2fe>
 8008908:	2302      	movs	r3, #2
 800890a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800890e:	e07e      	b.n	8008a0e <UART_SetConfig+0x2fe>
 8008910:	2304      	movs	r3, #4
 8008912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008916:	e07a      	b.n	8008a0e <UART_SetConfig+0x2fe>
 8008918:	2308      	movs	r3, #8
 800891a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800891e:	e076      	b.n	8008a0e <UART_SetConfig+0x2fe>
 8008920:	2310      	movs	r3, #16
 8008922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008926:	e072      	b.n	8008a0e <UART_SetConfig+0x2fe>
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a35      	ldr	r2, [pc, #212]	; (8008a04 <UART_SetConfig+0x2f4>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d12a      	bne.n	8008988 <UART_SetConfig+0x278>
 8008932:	4b30      	ldr	r3, [pc, #192]	; (80089f4 <UART_SetConfig+0x2e4>)
 8008934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008938:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800893c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008940:	d01a      	beq.n	8008978 <UART_SetConfig+0x268>
 8008942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008946:	d81b      	bhi.n	8008980 <UART_SetConfig+0x270>
 8008948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800894c:	d00c      	beq.n	8008968 <UART_SetConfig+0x258>
 800894e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008952:	d815      	bhi.n	8008980 <UART_SetConfig+0x270>
 8008954:	2b00      	cmp	r3, #0
 8008956:	d003      	beq.n	8008960 <UART_SetConfig+0x250>
 8008958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800895c:	d008      	beq.n	8008970 <UART_SetConfig+0x260>
 800895e:	e00f      	b.n	8008980 <UART_SetConfig+0x270>
 8008960:	2300      	movs	r3, #0
 8008962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008966:	e052      	b.n	8008a0e <UART_SetConfig+0x2fe>
 8008968:	2302      	movs	r3, #2
 800896a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800896e:	e04e      	b.n	8008a0e <UART_SetConfig+0x2fe>
 8008970:	2304      	movs	r3, #4
 8008972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008976:	e04a      	b.n	8008a0e <UART_SetConfig+0x2fe>
 8008978:	2308      	movs	r3, #8
 800897a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800897e:	e046      	b.n	8008a0e <UART_SetConfig+0x2fe>
 8008980:	2310      	movs	r3, #16
 8008982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008986:	e042      	b.n	8008a0e <UART_SetConfig+0x2fe>
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a17      	ldr	r2, [pc, #92]	; (80089ec <UART_SetConfig+0x2dc>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d13a      	bne.n	8008a08 <UART_SetConfig+0x2f8>
 8008992:	4b18      	ldr	r3, [pc, #96]	; (80089f4 <UART_SetConfig+0x2e4>)
 8008994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008998:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800899c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089a0:	d01a      	beq.n	80089d8 <UART_SetConfig+0x2c8>
 80089a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089a6:	d81b      	bhi.n	80089e0 <UART_SetConfig+0x2d0>
 80089a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089ac:	d00c      	beq.n	80089c8 <UART_SetConfig+0x2b8>
 80089ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089b2:	d815      	bhi.n	80089e0 <UART_SetConfig+0x2d0>
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d003      	beq.n	80089c0 <UART_SetConfig+0x2b0>
 80089b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089bc:	d008      	beq.n	80089d0 <UART_SetConfig+0x2c0>
 80089be:	e00f      	b.n	80089e0 <UART_SetConfig+0x2d0>
 80089c0:	2300      	movs	r3, #0
 80089c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089c6:	e022      	b.n	8008a0e <UART_SetConfig+0x2fe>
 80089c8:	2302      	movs	r3, #2
 80089ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089ce:	e01e      	b.n	8008a0e <UART_SetConfig+0x2fe>
 80089d0:	2304      	movs	r3, #4
 80089d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089d6:	e01a      	b.n	8008a0e <UART_SetConfig+0x2fe>
 80089d8:	2308      	movs	r3, #8
 80089da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089de:	e016      	b.n	8008a0e <UART_SetConfig+0x2fe>
 80089e0:	2310      	movs	r3, #16
 80089e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089e6:	e012      	b.n	8008a0e <UART_SetConfig+0x2fe>
 80089e8:	cfff69f3 	.word	0xcfff69f3
 80089ec:	40008000 	.word	0x40008000
 80089f0:	40013800 	.word	0x40013800
 80089f4:	40021000 	.word	0x40021000
 80089f8:	40004400 	.word	0x40004400
 80089fc:	40004800 	.word	0x40004800
 8008a00:	40004c00 	.word	0x40004c00
 8008a04:	40005000 	.word	0x40005000
 8008a08:	2310      	movs	r3, #16
 8008a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4aae      	ldr	r2, [pc, #696]	; (8008ccc <UART_SetConfig+0x5bc>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	f040 8097 	bne.w	8008b48 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a1e:	2b08      	cmp	r3, #8
 8008a20:	d823      	bhi.n	8008a6a <UART_SetConfig+0x35a>
 8008a22:	a201      	add	r2, pc, #4	; (adr r2, 8008a28 <UART_SetConfig+0x318>)
 8008a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a28:	08008a4d 	.word	0x08008a4d
 8008a2c:	08008a6b 	.word	0x08008a6b
 8008a30:	08008a55 	.word	0x08008a55
 8008a34:	08008a6b 	.word	0x08008a6b
 8008a38:	08008a5b 	.word	0x08008a5b
 8008a3c:	08008a6b 	.word	0x08008a6b
 8008a40:	08008a6b 	.word	0x08008a6b
 8008a44:	08008a6b 	.word	0x08008a6b
 8008a48:	08008a63 	.word	0x08008a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a4c:	f7fc ff84 	bl	8005958 <HAL_RCC_GetPCLK1Freq>
 8008a50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a52:	e010      	b.n	8008a76 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a54:	4b9e      	ldr	r3, [pc, #632]	; (8008cd0 <UART_SetConfig+0x5c0>)
 8008a56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a58:	e00d      	b.n	8008a76 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a5a:	f7fc ff0f 	bl	800587c <HAL_RCC_GetSysClockFreq>
 8008a5e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a60:	e009      	b.n	8008a76 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a68:	e005      	b.n	8008a76 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 8130 	beq.w	8008cde <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a82:	4a94      	ldr	r2, [pc, #592]	; (8008cd4 <UART_SetConfig+0x5c4>)
 8008a84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a88:	461a      	mov	r2, r3
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a90:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	685a      	ldr	r2, [r3, #4]
 8008a96:	4613      	mov	r3, r2
 8008a98:	005b      	lsls	r3, r3, #1
 8008a9a:	4413      	add	r3, r2
 8008a9c:	69ba      	ldr	r2, [r7, #24]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d305      	bcc.n	8008aae <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008aa8:	69ba      	ldr	r2, [r7, #24]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d903      	bls.n	8008ab6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008ab4:	e113      	b.n	8008cde <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab8:	2200      	movs	r2, #0
 8008aba:	60bb      	str	r3, [r7, #8]
 8008abc:	60fa      	str	r2, [r7, #12]
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac2:	4a84      	ldr	r2, [pc, #528]	; (8008cd4 <UART_SetConfig+0x5c4>)
 8008ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	2200      	movs	r2, #0
 8008acc:	603b      	str	r3, [r7, #0]
 8008ace:	607a      	str	r2, [r7, #4]
 8008ad0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ad4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ad8:	f7f7 fff8 	bl	8000acc <__aeabi_uldivmod>
 8008adc:	4602      	mov	r2, r0
 8008ade:	460b      	mov	r3, r1
 8008ae0:	4610      	mov	r0, r2
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	f04f 0200 	mov.w	r2, #0
 8008ae8:	f04f 0300 	mov.w	r3, #0
 8008aec:	020b      	lsls	r3, r1, #8
 8008aee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008af2:	0202      	lsls	r2, r0, #8
 8008af4:	6979      	ldr	r1, [r7, #20]
 8008af6:	6849      	ldr	r1, [r1, #4]
 8008af8:	0849      	lsrs	r1, r1, #1
 8008afa:	2000      	movs	r0, #0
 8008afc:	460c      	mov	r4, r1
 8008afe:	4605      	mov	r5, r0
 8008b00:	eb12 0804 	adds.w	r8, r2, r4
 8008b04:	eb43 0905 	adc.w	r9, r3, r5
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	469a      	mov	sl, r3
 8008b10:	4693      	mov	fp, r2
 8008b12:	4652      	mov	r2, sl
 8008b14:	465b      	mov	r3, fp
 8008b16:	4640      	mov	r0, r8
 8008b18:	4649      	mov	r1, r9
 8008b1a:	f7f7 ffd7 	bl	8000acc <__aeabi_uldivmod>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	4613      	mov	r3, r2
 8008b24:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b26:	6a3b      	ldr	r3, [r7, #32]
 8008b28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b2c:	d308      	bcc.n	8008b40 <UART_SetConfig+0x430>
 8008b2e:	6a3b      	ldr	r3, [r7, #32]
 8008b30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b34:	d204      	bcs.n	8008b40 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	6a3a      	ldr	r2, [r7, #32]
 8008b3c:	60da      	str	r2, [r3, #12]
 8008b3e:	e0ce      	b.n	8008cde <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008b46:	e0ca      	b.n	8008cde <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	69db      	ldr	r3, [r3, #28]
 8008b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b50:	d166      	bne.n	8008c20 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008b52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b56:	2b08      	cmp	r3, #8
 8008b58:	d827      	bhi.n	8008baa <UART_SetConfig+0x49a>
 8008b5a:	a201      	add	r2, pc, #4	; (adr r2, 8008b60 <UART_SetConfig+0x450>)
 8008b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b60:	08008b85 	.word	0x08008b85
 8008b64:	08008b8d 	.word	0x08008b8d
 8008b68:	08008b95 	.word	0x08008b95
 8008b6c:	08008bab 	.word	0x08008bab
 8008b70:	08008b9b 	.word	0x08008b9b
 8008b74:	08008bab 	.word	0x08008bab
 8008b78:	08008bab 	.word	0x08008bab
 8008b7c:	08008bab 	.word	0x08008bab
 8008b80:	08008ba3 	.word	0x08008ba3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b84:	f7fc fee8 	bl	8005958 <HAL_RCC_GetPCLK1Freq>
 8008b88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b8a:	e014      	b.n	8008bb6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b8c:	f7fc fefa 	bl	8005984 <HAL_RCC_GetPCLK2Freq>
 8008b90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b92:	e010      	b.n	8008bb6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b94:	4b4e      	ldr	r3, [pc, #312]	; (8008cd0 <UART_SetConfig+0x5c0>)
 8008b96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b98:	e00d      	b.n	8008bb6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b9a:	f7fc fe6f 	bl	800587c <HAL_RCC_GetSysClockFreq>
 8008b9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ba0:	e009      	b.n	8008bb6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ba6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ba8:	e005      	b.n	8008bb6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008baa:	2300      	movs	r3, #0
 8008bac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008bb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 8090 	beq.w	8008cde <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc2:	4a44      	ldr	r2, [pc, #272]	; (8008cd4 <UART_SetConfig+0x5c4>)
 8008bc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bd0:	005a      	lsls	r2, r3, #1
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	085b      	lsrs	r3, r3, #1
 8008bd8:	441a      	add	r2, r3
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8008be2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008be4:	6a3b      	ldr	r3, [r7, #32]
 8008be6:	2b0f      	cmp	r3, #15
 8008be8:	d916      	bls.n	8008c18 <UART_SetConfig+0x508>
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bf0:	d212      	bcs.n	8008c18 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bf2:	6a3b      	ldr	r3, [r7, #32]
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	f023 030f 	bic.w	r3, r3, #15
 8008bfa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
 8008bfe:	085b      	lsrs	r3, r3, #1
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	f003 0307 	and.w	r3, r3, #7
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	8bfb      	ldrh	r3, [r7, #30]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	8bfa      	ldrh	r2, [r7, #30]
 8008c14:	60da      	str	r2, [r3, #12]
 8008c16:	e062      	b.n	8008cde <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008c1e:	e05e      	b.n	8008cde <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c24:	2b08      	cmp	r3, #8
 8008c26:	d828      	bhi.n	8008c7a <UART_SetConfig+0x56a>
 8008c28:	a201      	add	r2, pc, #4	; (adr r2, 8008c30 <UART_SetConfig+0x520>)
 8008c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2e:	bf00      	nop
 8008c30:	08008c55 	.word	0x08008c55
 8008c34:	08008c5d 	.word	0x08008c5d
 8008c38:	08008c65 	.word	0x08008c65
 8008c3c:	08008c7b 	.word	0x08008c7b
 8008c40:	08008c6b 	.word	0x08008c6b
 8008c44:	08008c7b 	.word	0x08008c7b
 8008c48:	08008c7b 	.word	0x08008c7b
 8008c4c:	08008c7b 	.word	0x08008c7b
 8008c50:	08008c73 	.word	0x08008c73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c54:	f7fc fe80 	bl	8005958 <HAL_RCC_GetPCLK1Freq>
 8008c58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c5a:	e014      	b.n	8008c86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c5c:	f7fc fe92 	bl	8005984 <HAL_RCC_GetPCLK2Freq>
 8008c60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c62:	e010      	b.n	8008c86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c64:	4b1a      	ldr	r3, [pc, #104]	; (8008cd0 <UART_SetConfig+0x5c0>)
 8008c66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c68:	e00d      	b.n	8008c86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c6a:	f7fc fe07 	bl	800587c <HAL_RCC_GetSysClockFreq>
 8008c6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c70:	e009      	b.n	8008c86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c78:	e005      	b.n	8008c86 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008c84:	bf00      	nop
    }

    if (pclk != 0U)
 8008c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d028      	beq.n	8008cde <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c90:	4a10      	ldr	r2, [pc, #64]	; (8008cd4 <UART_SetConfig+0x5c4>)
 8008c92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c96:	461a      	mov	r2, r3
 8008c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	085b      	lsrs	r3, r3, #1
 8008ca4:	441a      	add	r2, r3
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cb0:	6a3b      	ldr	r3, [r7, #32]
 8008cb2:	2b0f      	cmp	r3, #15
 8008cb4:	d910      	bls.n	8008cd8 <UART_SetConfig+0x5c8>
 8008cb6:	6a3b      	ldr	r3, [r7, #32]
 8008cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cbc:	d20c      	bcs.n	8008cd8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	b29a      	uxth	r2, r3
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	60da      	str	r2, [r3, #12]
 8008cc8:	e009      	b.n	8008cde <UART_SetConfig+0x5ce>
 8008cca:	bf00      	nop
 8008ccc:	40008000 	.word	0x40008000
 8008cd0:	00f42400 	.word	0x00f42400
 8008cd4:	0800b580 	.word	0x0800b580
      }
      else
      {
        ret = HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008cfa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3730      	adds	r7, #48	; 0x30
 8008d02:	46bd      	mov	sp, r7
 8008d04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008d08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d14:	f003 0301 	and.w	r3, r3, #1
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00a      	beq.n	8008d32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	430a      	orrs	r2, r1
 8008d30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d36:	f003 0302 	and.w	r3, r3, #2
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00a      	beq.n	8008d54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	430a      	orrs	r2, r1
 8008d52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d58:	f003 0304 	and.w	r3, r3, #4
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00a      	beq.n	8008d76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	430a      	orrs	r2, r1
 8008d74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7a:	f003 0308 	and.w	r3, r3, #8
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00a      	beq.n	8008d98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	430a      	orrs	r2, r1
 8008d96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9c:	f003 0310 	and.w	r3, r3, #16
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00a      	beq.n	8008dba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	430a      	orrs	r2, r1
 8008db8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dbe:	f003 0320 	and.w	r3, r3, #32
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00a      	beq.n	8008ddc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	430a      	orrs	r2, r1
 8008dda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d01a      	beq.n	8008e1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	430a      	orrs	r2, r1
 8008dfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e06:	d10a      	bne.n	8008e1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	430a      	orrs	r2, r1
 8008e1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00a      	beq.n	8008e40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	430a      	orrs	r2, r1
 8008e3e:	605a      	str	r2, [r3, #4]
  }
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b086      	sub	sp, #24
 8008e50:	af02      	add	r7, sp, #8
 8008e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e5c:	f7f9 fc1a 	bl	8002694 <HAL_GetTick>
 8008e60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 0308 	and.w	r3, r3, #8
 8008e6c:	2b08      	cmp	r3, #8
 8008e6e:	d10e      	bne.n	8008e8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f82f 	bl	8008ee2 <UART_WaitOnFlagUntilTimeout>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d001      	beq.n	8008e8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e025      	b.n	8008eda <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 0304 	and.w	r3, r3, #4
 8008e98:	2b04      	cmp	r3, #4
 8008e9a:	d10e      	bne.n	8008eba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f819 	bl	8008ee2 <UART_WaitOnFlagUntilTimeout>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d001      	beq.n	8008eba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	e00f      	b.n	8008eda <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2220      	movs	r2, #32
 8008ebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2220      	movs	r2, #32
 8008ec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b09c      	sub	sp, #112	; 0x70
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	60f8      	str	r0, [r7, #12]
 8008eea:	60b9      	str	r1, [r7, #8]
 8008eec:	603b      	str	r3, [r7, #0]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ef2:	e0a9      	b.n	8009048 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ef4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008efa:	f000 80a5 	beq.w	8009048 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008efe:	f7f9 fbc9 	bl	8002694 <HAL_GetTick>
 8008f02:	4602      	mov	r2, r0
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d302      	bcc.n	8008f14 <UART_WaitOnFlagUntilTimeout+0x32>
 8008f0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d140      	bne.n	8008f96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f1c:	e853 3f00 	ldrex	r3, [r3]
 8008f20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f28:	667b      	str	r3, [r7, #100]	; 0x64
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f34:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f3a:	e841 2300 	strex	r3, r2, [r1]
 8008f3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1e6      	bne.n	8008f14 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	3308      	adds	r3, #8
 8008f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f50:	e853 3f00 	ldrex	r3, [r3]
 8008f54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f58:	f023 0301 	bic.w	r3, r3, #1
 8008f5c:	663b      	str	r3, [r7, #96]	; 0x60
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	3308      	adds	r3, #8
 8008f64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f66:	64ba      	str	r2, [r7, #72]	; 0x48
 8008f68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f6e:	e841 2300 	strex	r3, r2, [r1]
 8008f72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1e5      	bne.n	8008f46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2220      	movs	r2, #32
 8008f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2220      	movs	r2, #32
 8008f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008f92:	2303      	movs	r3, #3
 8008f94:	e069      	b.n	800906a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 0304 	and.w	r3, r3, #4
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d051      	beq.n	8009048 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	69db      	ldr	r3, [r3, #28]
 8008faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fb2:	d149      	bne.n	8009048 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fbc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc6:	e853 3f00 	ldrex	r3, [r3]
 8008fca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fdc:	637b      	str	r3, [r7, #52]	; 0x34
 8008fde:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008fe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fe4:	e841 2300 	strex	r3, r2, [r1]
 8008fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d1e6      	bne.n	8008fbe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	3308      	adds	r3, #8
 8008ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	e853 3f00 	ldrex	r3, [r3]
 8008ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	f023 0301 	bic.w	r3, r3, #1
 8009006:	66bb      	str	r3, [r7, #104]	; 0x68
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	3308      	adds	r3, #8
 800900e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009010:	623a      	str	r2, [r7, #32]
 8009012:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009014:	69f9      	ldr	r1, [r7, #28]
 8009016:	6a3a      	ldr	r2, [r7, #32]
 8009018:	e841 2300 	strex	r3, r2, [r1]
 800901c:	61bb      	str	r3, [r7, #24]
   return(result);
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d1e5      	bne.n	8008ff0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2220      	movs	r2, #32
 8009028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2220      	movs	r2, #32
 8009030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2220      	movs	r2, #32
 8009038:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2200      	movs	r2, #0
 8009040:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009044:	2303      	movs	r3, #3
 8009046:	e010      	b.n	800906a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	69da      	ldr	r2, [r3, #28]
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	4013      	ands	r3, r2
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	429a      	cmp	r2, r3
 8009056:	bf0c      	ite	eq
 8009058:	2301      	moveq	r3, #1
 800905a:	2300      	movne	r3, #0
 800905c:	b2db      	uxtb	r3, r3
 800905e:	461a      	mov	r2, r3
 8009060:	79fb      	ldrb	r3, [r7, #7]
 8009062:	429a      	cmp	r2, r3
 8009064:	f43f af46 	beq.w	8008ef4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3770      	adds	r7, #112	; 0x70
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
	...

08009074 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009074:	b480      	push	{r7}
 8009076:	b0a3      	sub	sp, #140	; 0x8c
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	4613      	mov	r3, r2
 8009080:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	88fa      	ldrh	r2, [r7, #6]
 800908c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	88fa      	ldrh	r2, [r7, #6]
 8009094:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2200      	movs	r2, #0
 800909c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090a6:	d10e      	bne.n	80090c6 <UART_Start_Receive_IT+0x52>
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	691b      	ldr	r3, [r3, #16]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d105      	bne.n	80090bc <UART_Start_Receive_IT+0x48>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80090b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090ba:	e02d      	b.n	8009118 <UART_Start_Receive_IT+0xa4>
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	22ff      	movs	r2, #255	; 0xff
 80090c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090c4:	e028      	b.n	8009118 <UART_Start_Receive_IT+0xa4>
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d10d      	bne.n	80090ea <UART_Start_Receive_IT+0x76>
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d104      	bne.n	80090e0 <UART_Start_Receive_IT+0x6c>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	22ff      	movs	r2, #255	; 0xff
 80090da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090de:	e01b      	b.n	8009118 <UART_Start_Receive_IT+0xa4>
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	227f      	movs	r2, #127	; 0x7f
 80090e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090e8:	e016      	b.n	8009118 <UART_Start_Receive_IT+0xa4>
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090f2:	d10d      	bne.n	8009110 <UART_Start_Receive_IT+0x9c>
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d104      	bne.n	8009106 <UART_Start_Receive_IT+0x92>
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	227f      	movs	r2, #127	; 0x7f
 8009100:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009104:	e008      	b.n	8009118 <UART_Start_Receive_IT+0xa4>
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	223f      	movs	r2, #63	; 0x3f
 800910a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800910e:	e003      	b.n	8009118 <UART_Start_Receive_IT+0xa4>
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2222      	movs	r2, #34	; 0x22
 8009124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	3308      	adds	r3, #8
 800912e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009132:	e853 3f00 	ldrex	r3, [r3]
 8009136:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009138:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800913a:	f043 0301 	orr.w	r3, r3, #1
 800913e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3308      	adds	r3, #8
 8009148:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800914c:	673a      	str	r2, [r7, #112]	; 0x70
 800914e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009150:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009152:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009154:	e841 2300 	strex	r3, r2, [r1]
 8009158:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800915a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1e3      	bne.n	8009128 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009164:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009168:	d153      	bne.n	8009212 <UART_Start_Receive_IT+0x19e>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009170:	88fa      	ldrh	r2, [r7, #6]
 8009172:	429a      	cmp	r2, r3
 8009174:	d34d      	bcc.n	8009212 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800917e:	d107      	bne.n	8009190 <UART_Start_Receive_IT+0x11c>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d103      	bne.n	8009190 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	4a4b      	ldr	r2, [pc, #300]	; (80092b8 <UART_Start_Receive_IT+0x244>)
 800918c:	671a      	str	r2, [r3, #112]	; 0x70
 800918e:	e002      	b.n	8009196 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	4a4a      	ldr	r2, [pc, #296]	; (80092bc <UART_Start_Receive_IT+0x248>)
 8009194:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d01a      	beq.n	80091dc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091ae:	e853 3f00 	ldrex	r3, [r3]
 80091b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80091b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	461a      	mov	r2, r3
 80091c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80091c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091ca:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80091d0:	e841 2300 	strex	r3, r2, [r1]
 80091d4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80091d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1e4      	bne.n	80091a6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3308      	adds	r3, #8
 80091e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091e6:	e853 3f00 	ldrex	r3, [r3]
 80091ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	3308      	adds	r3, #8
 80091fa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80091fc:	64ba      	str	r2, [r7, #72]	; 0x48
 80091fe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009200:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009202:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009204:	e841 2300 	strex	r3, r2, [r1]
 8009208:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800920a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1e5      	bne.n	80091dc <UART_Start_Receive_IT+0x168>
 8009210:	e04a      	b.n	80092a8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800921a:	d107      	bne.n	800922c <UART_Start_Receive_IT+0x1b8>
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d103      	bne.n	800922c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	4a26      	ldr	r2, [pc, #152]	; (80092c0 <UART_Start_Receive_IT+0x24c>)
 8009228:	671a      	str	r2, [r3, #112]	; 0x70
 800922a:	e002      	b.n	8009232 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	4a25      	ldr	r2, [pc, #148]	; (80092c4 <UART_Start_Receive_IT+0x250>)
 8009230:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d019      	beq.n	8009276 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924a:	e853 3f00 	ldrex	r3, [r3]
 800924e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009256:	677b      	str	r3, [r7, #116]	; 0x74
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	461a      	mov	r2, r3
 800925e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009260:	637b      	str	r3, [r7, #52]	; 0x34
 8009262:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009264:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009268:	e841 2300 	strex	r3, r2, [r1]
 800926c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800926e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1e6      	bne.n	8009242 <UART_Start_Receive_IT+0x1ce>
 8009274:	e018      	b.n	80092a8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	e853 3f00 	ldrex	r3, [r3]
 8009282:	613b      	str	r3, [r7, #16]
   return(result);
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	f043 0320 	orr.w	r3, r3, #32
 800928a:	67bb      	str	r3, [r7, #120]	; 0x78
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	461a      	mov	r2, r3
 8009292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009294:	623b      	str	r3, [r7, #32]
 8009296:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009298:	69f9      	ldr	r1, [r7, #28]
 800929a:	6a3a      	ldr	r2, [r7, #32]
 800929c:	e841 2300 	strex	r3, r2, [r1]
 80092a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d1e6      	bne.n	8009276 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	378c      	adds	r7, #140	; 0x8c
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	080099d1 	.word	0x080099d1
 80092bc:	080096d9 	.word	0x080096d9
 80092c0:	08009577 	.word	0x08009577
 80092c4:	08009417 	.word	0x08009417

080092c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b095      	sub	sp, #84	; 0x54
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d8:	e853 3f00 	ldrex	r3, [r3]
 80092dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	461a      	mov	r2, r3
 80092ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ee:	643b      	str	r3, [r7, #64]	; 0x40
 80092f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092f6:	e841 2300 	strex	r3, r2, [r1]
 80092fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1e6      	bne.n	80092d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	3308      	adds	r3, #8
 8009308:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930a:	6a3b      	ldr	r3, [r7, #32]
 800930c:	e853 3f00 	ldrex	r3, [r3]
 8009310:	61fb      	str	r3, [r7, #28]
   return(result);
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009318:	f023 0301 	bic.w	r3, r3, #1
 800931c:	64bb      	str	r3, [r7, #72]	; 0x48
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	3308      	adds	r3, #8
 8009324:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009326:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009328:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800932c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800932e:	e841 2300 	strex	r3, r2, [r1]
 8009332:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1e3      	bne.n	8009302 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800933e:	2b01      	cmp	r3, #1
 8009340:	d118      	bne.n	8009374 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	e853 3f00 	ldrex	r3, [r3]
 800934e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	f023 0310 	bic.w	r3, r3, #16
 8009356:	647b      	str	r3, [r7, #68]	; 0x44
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	461a      	mov	r2, r3
 800935e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009360:	61bb      	str	r3, [r7, #24]
 8009362:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009364:	6979      	ldr	r1, [r7, #20]
 8009366:	69ba      	ldr	r2, [r7, #24]
 8009368:	e841 2300 	strex	r3, r2, [r1]
 800936c:	613b      	str	r3, [r7, #16]
   return(result);
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1e6      	bne.n	8009342 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2220      	movs	r2, #32
 8009378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009388:	bf00      	nop
 800938a:	3754      	adds	r7, #84	; 0x54
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f7ff f996 	bl	80086e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093b8:	bf00      	nop
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b088      	sub	sp, #32
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	e853 3f00 	ldrex	r3, [r3]
 80093d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093dc:	61fb      	str	r3, [r7, #28]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	461a      	mov	r2, r3
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	61bb      	str	r3, [r7, #24]
 80093e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ea:	6979      	ldr	r1, [r7, #20]
 80093ec:	69ba      	ldr	r2, [r7, #24]
 80093ee:	e841 2300 	strex	r3, r2, [r1]
 80093f2:	613b      	str	r3, [r7, #16]
   return(result);
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d1e6      	bne.n	80093c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2220      	movs	r2, #32
 80093fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f7ff f961 	bl	80086d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800940e:	bf00      	nop
 8009410:	3720      	adds	r7, #32
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b096      	sub	sp, #88	; 0x58
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009424:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800942e:	2b22      	cmp	r3, #34	; 0x22
 8009430:	f040 8095 	bne.w	800955e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800943e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009442:	b2d9      	uxtb	r1, r3
 8009444:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009448:	b2da      	uxtb	r2, r3
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800944e:	400a      	ands	r2, r1
 8009450:	b2d2      	uxtb	r2, r2
 8009452:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009458:	1c5a      	adds	r2, r3, #1
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009464:	b29b      	uxth	r3, r3
 8009466:	3b01      	subs	r3, #1
 8009468:	b29a      	uxth	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009476:	b29b      	uxth	r3, r3
 8009478:	2b00      	cmp	r3, #0
 800947a:	d178      	bne.n	800956e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009484:	e853 3f00 	ldrex	r3, [r3]
 8009488:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800948a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800948c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009490:	653b      	str	r3, [r7, #80]	; 0x50
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	461a      	mov	r2, r3
 8009498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800949a:	647b      	str	r3, [r7, #68]	; 0x44
 800949c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094a2:	e841 2300 	strex	r3, r2, [r1]
 80094a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1e6      	bne.n	800947c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	3308      	adds	r3, #8
 80094b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b8:	e853 3f00 	ldrex	r3, [r3]
 80094bc:	623b      	str	r3, [r7, #32]
   return(result);
 80094be:	6a3b      	ldr	r3, [r7, #32]
 80094c0:	f023 0301 	bic.w	r3, r3, #1
 80094c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	3308      	adds	r3, #8
 80094cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094ce:	633a      	str	r2, [r7, #48]	; 0x30
 80094d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094d6:	e841 2300 	strex	r3, r2, [r1]
 80094da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1e5      	bne.n	80094ae <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2220      	movs	r2, #32
 80094e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d12e      	bne.n	8009556 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	e853 3f00 	ldrex	r3, [r3]
 800950a:	60fb      	str	r3, [r7, #12]
   return(result);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f023 0310 	bic.w	r3, r3, #16
 8009512:	64bb      	str	r3, [r7, #72]	; 0x48
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	461a      	mov	r2, r3
 800951a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800951c:	61fb      	str	r3, [r7, #28]
 800951e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009520:	69b9      	ldr	r1, [r7, #24]
 8009522:	69fa      	ldr	r2, [r7, #28]
 8009524:	e841 2300 	strex	r3, r2, [r1]
 8009528:	617b      	str	r3, [r7, #20]
   return(result);
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1e6      	bne.n	80094fe <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	69db      	ldr	r3, [r3, #28]
 8009536:	f003 0310 	and.w	r3, r3, #16
 800953a:	2b10      	cmp	r3, #16
 800953c:	d103      	bne.n	8009546 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2210      	movs	r2, #16
 8009544:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800954c:	4619      	mov	r1, r3
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f7ff f8d2 	bl	80086f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009554:	e00b      	b.n	800956e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f7f9 f832 	bl	80025c0 <HAL_UART_RxCpltCallback>
}
 800955c:	e007      	b.n	800956e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	699a      	ldr	r2, [r3, #24]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f042 0208 	orr.w	r2, r2, #8
 800956c:	619a      	str	r2, [r3, #24]
}
 800956e:	bf00      	nop
 8009570:	3758      	adds	r7, #88	; 0x58
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b096      	sub	sp, #88	; 0x58
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009584:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800958e:	2b22      	cmp	r3, #34	; 0x22
 8009590:	f040 8095 	bne.w	80096be <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095a2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80095a4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80095a8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80095ac:	4013      	ands	r3, r2
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095b2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095b8:	1c9a      	adds	r2, r3, #2
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	3b01      	subs	r3, #1
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d178      	bne.n	80096ce <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095e4:	e853 3f00 	ldrex	r3, [r3]
 80095e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80095ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	461a      	mov	r2, r3
 80095f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095fa:	643b      	str	r3, [r7, #64]	; 0x40
 80095fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009600:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009602:	e841 2300 	strex	r3, r2, [r1]
 8009606:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1e6      	bne.n	80095dc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	3308      	adds	r3, #8
 8009614:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009616:	6a3b      	ldr	r3, [r7, #32]
 8009618:	e853 3f00 	ldrex	r3, [r3]
 800961c:	61fb      	str	r3, [r7, #28]
   return(result);
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	f023 0301 	bic.w	r3, r3, #1
 8009624:	64bb      	str	r3, [r7, #72]	; 0x48
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	3308      	adds	r3, #8
 800962c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800962e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009630:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009632:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009636:	e841 2300 	strex	r3, r2, [r1]
 800963a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800963c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1e5      	bne.n	800960e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2220      	movs	r2, #32
 8009646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009654:	2b01      	cmp	r3, #1
 8009656:	d12e      	bne.n	80096b6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	e853 3f00 	ldrex	r3, [r3]
 800966a:	60bb      	str	r3, [r7, #8]
   return(result);
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	f023 0310 	bic.w	r3, r3, #16
 8009672:	647b      	str	r3, [r7, #68]	; 0x44
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	461a      	mov	r2, r3
 800967a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800967c:	61bb      	str	r3, [r7, #24]
 800967e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009680:	6979      	ldr	r1, [r7, #20]
 8009682:	69ba      	ldr	r2, [r7, #24]
 8009684:	e841 2300 	strex	r3, r2, [r1]
 8009688:	613b      	str	r3, [r7, #16]
   return(result);
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d1e6      	bne.n	800965e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	69db      	ldr	r3, [r3, #28]
 8009696:	f003 0310 	and.w	r3, r3, #16
 800969a:	2b10      	cmp	r3, #16
 800969c:	d103      	bne.n	80096a6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2210      	movs	r2, #16
 80096a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096ac:	4619      	mov	r1, r3
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7ff f822 	bl	80086f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096b4:	e00b      	b.n	80096ce <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f7f8 ff82 	bl	80025c0 <HAL_UART_RxCpltCallback>
}
 80096bc:	e007      	b.n	80096ce <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	699a      	ldr	r2, [r3, #24]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f042 0208 	orr.w	r2, r2, #8
 80096cc:	619a      	str	r2, [r3, #24]
}
 80096ce:	bf00      	nop
 80096d0:	3758      	adds	r7, #88	; 0x58
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
	...

080096d8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b0a6      	sub	sp, #152	; 0x98
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80096e6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	69db      	ldr	r3, [r3, #28]
 80096f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800970e:	2b22      	cmp	r3, #34	; 0x22
 8009710:	f040 814f 	bne.w	80099b2 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800971a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800971e:	e0f6      	b.n	800990e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009726:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800972a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800972e:	b2d9      	uxtb	r1, r3
 8009730:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009734:	b2da      	uxtb	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800973a:	400a      	ands	r2, r1
 800973c:	b2d2      	uxtb	r2, r2
 800973e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009744:	1c5a      	adds	r2, r3, #1
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009750:	b29b      	uxth	r3, r3
 8009752:	3b01      	subs	r3, #1
 8009754:	b29a      	uxth	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	69db      	ldr	r3, [r3, #28]
 8009762:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009766:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800976a:	f003 0307 	and.w	r3, r3, #7
 800976e:	2b00      	cmp	r3, #0
 8009770:	d053      	beq.n	800981a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009772:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009776:	f003 0301 	and.w	r3, r3, #1
 800977a:	2b00      	cmp	r3, #0
 800977c:	d011      	beq.n	80097a2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800977e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00b      	beq.n	80097a2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2201      	movs	r2, #1
 8009790:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009798:	f043 0201 	orr.w	r2, r3, #1
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097a6:	f003 0302 	and.w	r3, r3, #2
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d011      	beq.n	80097d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80097ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097b2:	f003 0301 	and.w	r3, r3, #1
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00b      	beq.n	80097d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2202      	movs	r2, #2
 80097c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097c8:	f043 0204 	orr.w	r2, r3, #4
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097d6:	f003 0304 	and.w	r3, r3, #4
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d011      	beq.n	8009802 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80097de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097e2:	f003 0301 	and.w	r3, r3, #1
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00b      	beq.n	8009802 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2204      	movs	r2, #4
 80097f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097f8:	f043 0202 	orr.w	r2, r3, #2
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009808:	2b00      	cmp	r3, #0
 800980a:	d006      	beq.n	800981a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7fe ff69 	bl	80086e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009820:	b29b      	uxth	r3, r3
 8009822:	2b00      	cmp	r3, #0
 8009824:	d173      	bne.n	800990e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800982e:	e853 3f00 	ldrex	r3, [r3]
 8009832:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009836:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800983a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	461a      	mov	r2, r3
 8009844:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009848:	66bb      	str	r3, [r7, #104]	; 0x68
 800984a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800984e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009850:	e841 2300 	strex	r3, r2, [r1]
 8009854:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1e4      	bne.n	8009826 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	3308      	adds	r3, #8
 8009862:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009866:	e853 3f00 	ldrex	r3, [r3]
 800986a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800986c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800986e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009872:	f023 0301 	bic.w	r3, r3, #1
 8009876:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	3308      	adds	r3, #8
 800987e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009880:	657a      	str	r2, [r7, #84]	; 0x54
 8009882:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009884:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009886:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009888:	e841 2300 	strex	r3, r2, [r1]
 800988c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800988e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1e3      	bne.n	800985c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2220      	movs	r2, #32
 8009898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d12e      	bne.n	8009908 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098b8:	e853 3f00 	ldrex	r3, [r3]
 80098bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80098be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c0:	f023 0310 	bic.w	r3, r3, #16
 80098c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	461a      	mov	r2, r3
 80098cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098ce:	643b      	str	r3, [r7, #64]	; 0x40
 80098d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098d6:	e841 2300 	strex	r3, r2, [r1]
 80098da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80098dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1e6      	bne.n	80098b0 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	69db      	ldr	r3, [r3, #28]
 80098e8:	f003 0310 	and.w	r3, r3, #16
 80098ec:	2b10      	cmp	r3, #16
 80098ee:	d103      	bne.n	80098f8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2210      	movs	r2, #16
 80098f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80098fe:	4619      	mov	r1, r3
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f7fe fef9 	bl	80086f8 <HAL_UARTEx_RxEventCallback>
 8009906:	e002      	b.n	800990e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f7f8 fe59 	bl	80025c0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800990e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009912:	2b00      	cmp	r3, #0
 8009914:	d006      	beq.n	8009924 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009916:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800991a:	f003 0320 	and.w	r3, r3, #32
 800991e:	2b00      	cmp	r3, #0
 8009920:	f47f aefe 	bne.w	8009720 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800992a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800992e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009932:	2b00      	cmp	r3, #0
 8009934:	d045      	beq.n	80099c2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800993c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009940:	429a      	cmp	r2, r3
 8009942:	d23e      	bcs.n	80099c2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	3308      	adds	r3, #8
 800994a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994c:	6a3b      	ldr	r3, [r7, #32]
 800994e:	e853 3f00 	ldrex	r3, [r3]
 8009952:	61fb      	str	r3, [r7, #28]
   return(result);
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800995a:	673b      	str	r3, [r7, #112]	; 0x70
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	3308      	adds	r3, #8
 8009962:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009964:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009966:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009968:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800996a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800996c:	e841 2300 	strex	r3, r2, [r1]
 8009970:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1e5      	bne.n	8009944 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4a14      	ldr	r2, [pc, #80]	; (80099cc <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800997c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	e853 3f00 	ldrex	r3, [r3]
 800998a:	60bb      	str	r3, [r7, #8]
   return(result);
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	f043 0320 	orr.w	r3, r3, #32
 8009992:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	461a      	mov	r2, r3
 800999a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800999c:	61bb      	str	r3, [r7, #24]
 800999e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a0:	6979      	ldr	r1, [r7, #20]
 80099a2:	69ba      	ldr	r2, [r7, #24]
 80099a4:	e841 2300 	strex	r3, r2, [r1]
 80099a8:	613b      	str	r3, [r7, #16]
   return(result);
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1e6      	bne.n	800997e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099b0:	e007      	b.n	80099c2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	699a      	ldr	r2, [r3, #24]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f042 0208 	orr.w	r2, r2, #8
 80099c0:	619a      	str	r2, [r3, #24]
}
 80099c2:	bf00      	nop
 80099c4:	3798      	adds	r7, #152	; 0x98
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	08009417 	.word	0x08009417

080099d0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b0a8      	sub	sp, #160	; 0xa0
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80099de:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	69db      	ldr	r3, [r3, #28]
 80099e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a06:	2b22      	cmp	r3, #34	; 0x22
 8009a08:	f040 8153 	bne.w	8009cb2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a12:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a16:	e0fa      	b.n	8009c0e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009a2a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009a2e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009a32:	4013      	ands	r3, r2
 8009a34:	b29a      	uxth	r2, r3
 8009a36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a40:	1c9a      	adds	r2, r3, #2
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	b29a      	uxth	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	69db      	ldr	r3, [r3, #28]
 8009a5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009a62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a66:	f003 0307 	and.w	r3, r3, #7
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d053      	beq.n	8009b16 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a72:	f003 0301 	and.w	r3, r3, #1
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d011      	beq.n	8009a9e <UART_RxISR_16BIT_FIFOEN+0xce>
 8009a7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00b      	beq.n	8009a9e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a94:	f043 0201 	orr.w	r2, r3, #1
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009aa2:	f003 0302 	and.w	r3, r3, #2
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d011      	beq.n	8009ace <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009aaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009aae:	f003 0301 	and.w	r3, r3, #1
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00b      	beq.n	8009ace <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2202      	movs	r2, #2
 8009abc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ac4:	f043 0204 	orr.w	r2, r3, #4
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ace:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ad2:	f003 0304 	and.w	r3, r3, #4
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d011      	beq.n	8009afe <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009ada:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ade:	f003 0301 	and.w	r3, r3, #1
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00b      	beq.n	8009afe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2204      	movs	r2, #4
 8009aec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009af4:	f043 0202 	orr.w	r2, r3, #2
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d006      	beq.n	8009b16 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f7fe fdeb 	bl	80086e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d175      	bne.n	8009c0e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b2a:	e853 3f00 	ldrex	r3, [r3]
 8009b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009b30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b46:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b48:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009b4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009b4c:	e841 2300 	strex	r3, r2, [r1]
 8009b50:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009b52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1e4      	bne.n	8009b22 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	3308      	adds	r3, #8
 8009b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b62:	e853 3f00 	ldrex	r3, [r3]
 8009b66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b6e:	f023 0301 	bic.w	r3, r3, #1
 8009b72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	3308      	adds	r3, #8
 8009b7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009b80:	65ba      	str	r2, [r7, #88]	; 0x58
 8009b82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b88:	e841 2300 	strex	r3, r2, [r1]
 8009b8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1e1      	bne.n	8009b58 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2220      	movs	r2, #32
 8009b98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d12e      	bne.n	8009c08 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb8:	e853 3f00 	ldrex	r3, [r3]
 8009bbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bc0:	f023 0310 	bic.w	r3, r3, #16
 8009bc4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009bce:	647b      	str	r3, [r7, #68]	; 0x44
 8009bd0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009bd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bd6:	e841 2300 	strex	r3, r2, [r1]
 8009bda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d1e6      	bne.n	8009bb0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	69db      	ldr	r3, [r3, #28]
 8009be8:	f003 0310 	and.w	r3, r3, #16
 8009bec:	2b10      	cmp	r3, #16
 8009bee:	d103      	bne.n	8009bf8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2210      	movs	r2, #16
 8009bf6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009bfe:	4619      	mov	r1, r3
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f7fe fd79 	bl	80086f8 <HAL_UARTEx_RxEventCallback>
 8009c06:	e002      	b.n	8009c0e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f7f8 fcd9 	bl	80025c0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c0e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d006      	beq.n	8009c24 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009c16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c1a:	f003 0320 	and.w	r3, r3, #32
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f47f aefa 	bne.w	8009a18 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c2a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009c2e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d045      	beq.n	8009cc2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c3c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d23e      	bcs.n	8009cc2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	3308      	adds	r3, #8
 8009c4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	e853 3f00 	ldrex	r3, [r3]
 8009c52:	623b      	str	r3, [r7, #32]
   return(result);
 8009c54:	6a3b      	ldr	r3, [r7, #32]
 8009c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c5a:	677b      	str	r3, [r7, #116]	; 0x74
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	3308      	adds	r3, #8
 8009c62:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009c64:	633a      	str	r2, [r7, #48]	; 0x30
 8009c66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c6c:	e841 2300 	strex	r3, r2, [r1]
 8009c70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1e5      	bne.n	8009c44 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4a14      	ldr	r2, [pc, #80]	; (8009ccc <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009c7c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	e853 3f00 	ldrex	r3, [r3]
 8009c8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f043 0320 	orr.w	r3, r3, #32
 8009c92:	673b      	str	r3, [r7, #112]	; 0x70
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	461a      	mov	r2, r3
 8009c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c9c:	61fb      	str	r3, [r7, #28]
 8009c9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca0:	69b9      	ldr	r1, [r7, #24]
 8009ca2:	69fa      	ldr	r2, [r7, #28]
 8009ca4:	e841 2300 	strex	r3, r2, [r1]
 8009ca8:	617b      	str	r3, [r7, #20]
   return(result);
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d1e6      	bne.n	8009c7e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009cb0:	e007      	b.n	8009cc2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	699a      	ldr	r2, [r3, #24]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f042 0208 	orr.w	r2, r2, #8
 8009cc0:	619a      	str	r2, [r3, #24]
}
 8009cc2:	bf00      	nop
 8009cc4:	37a0      	adds	r7, #160	; 0xa0
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	08009577 	.word	0x08009577

08009cd0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009cd8:	bf00      	nop
 8009cda:	370c      	adds	r7, #12
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009cec:	bf00      	nop
 8009cee:	370c      	adds	r7, #12
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009d00:	bf00      	nop
 8009d02:	370c      	adds	r7, #12
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d101      	bne.n	8009d22 <HAL_UARTEx_DisableFifoMode+0x16>
 8009d1e:	2302      	movs	r3, #2
 8009d20:	e027      	b.n	8009d72 <HAL_UARTEx_DisableFifoMode+0x66>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2224      	movs	r2, #36	; 0x24
 8009d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f022 0201 	bic.w	r2, r2, #1
 8009d48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2220      	movs	r2, #32
 8009d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3714      	adds	r7, #20
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr

08009d7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b084      	sub	sp, #16
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
 8009d86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d101      	bne.n	8009d96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d92:	2302      	movs	r3, #2
 8009d94:	e02d      	b.n	8009df2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2224      	movs	r2, #36	; 0x24
 8009da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f022 0201 	bic.w	r2, r2, #1
 8009dbc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	683a      	ldr	r2, [r7, #0]
 8009dce:	430a      	orrs	r2, r1
 8009dd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f850 	bl	8009e78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2220      	movs	r2, #32
 8009de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b084      	sub	sp, #16
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
 8009e02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d101      	bne.n	8009e12 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009e0e:	2302      	movs	r3, #2
 8009e10:	e02d      	b.n	8009e6e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2201      	movs	r2, #1
 8009e16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2224      	movs	r2, #36	; 0x24
 8009e1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f022 0201 	bic.w	r2, r2, #1
 8009e38:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	683a      	ldr	r2, [r7, #0]
 8009e4a:	430a      	orrs	r2, r1
 8009e4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 f812 	bl	8009e78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2220      	movs	r2, #32
 8009e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2200      	movs	r2, #0
 8009e68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
	...

08009e78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d108      	bne.n	8009e9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2201      	movs	r2, #1
 8009e94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e98:	e031      	b.n	8009efe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e9a:	2308      	movs	r3, #8
 8009e9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e9e:	2308      	movs	r3, #8
 8009ea0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	0e5b      	lsrs	r3, r3, #25
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	f003 0307 	and.w	r3, r3, #7
 8009eb0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	0f5b      	lsrs	r3, r3, #29
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	f003 0307 	and.w	r3, r3, #7
 8009ec0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ec2:	7bbb      	ldrb	r3, [r7, #14]
 8009ec4:	7b3a      	ldrb	r2, [r7, #12]
 8009ec6:	4911      	ldr	r1, [pc, #68]	; (8009f0c <UARTEx_SetNbDataToProcess+0x94>)
 8009ec8:	5c8a      	ldrb	r2, [r1, r2]
 8009eca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009ece:	7b3a      	ldrb	r2, [r7, #12]
 8009ed0:	490f      	ldr	r1, [pc, #60]	; (8009f10 <UARTEx_SetNbDataToProcess+0x98>)
 8009ed2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ed4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ee0:	7bfb      	ldrb	r3, [r7, #15]
 8009ee2:	7b7a      	ldrb	r2, [r7, #13]
 8009ee4:	4909      	ldr	r1, [pc, #36]	; (8009f0c <UARTEx_SetNbDataToProcess+0x94>)
 8009ee6:	5c8a      	ldrb	r2, [r1, r2]
 8009ee8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009eec:	7b7a      	ldrb	r2, [r7, #13]
 8009eee:	4908      	ldr	r1, [pc, #32]	; (8009f10 <UARTEx_SetNbDataToProcess+0x98>)
 8009ef0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ef2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ef6:	b29a      	uxth	r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009efe:	bf00      	nop
 8009f00:	3714      	adds	r7, #20
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	0800b598 	.word	0x0800b598
 8009f10:	0800b5a0 	.word	0x0800b5a0

08009f14 <atoi>:
 8009f14:	220a      	movs	r2, #10
 8009f16:	2100      	movs	r1, #0
 8009f18:	f000 b882 	b.w	800a020 <strtol>

08009f1c <_strtol_l.constprop.0>:
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f22:	d001      	beq.n	8009f28 <_strtol_l.constprop.0+0xc>
 8009f24:	2b24      	cmp	r3, #36	; 0x24
 8009f26:	d906      	bls.n	8009f36 <_strtol_l.constprop.0+0x1a>
 8009f28:	f000 fa56 	bl	800a3d8 <__errno>
 8009f2c:	2316      	movs	r3, #22
 8009f2e:	6003      	str	r3, [r0, #0]
 8009f30:	2000      	movs	r0, #0
 8009f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f36:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a01c <_strtol_l.constprop.0+0x100>
 8009f3a:	460d      	mov	r5, r1
 8009f3c:	462e      	mov	r6, r5
 8009f3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f42:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009f46:	f017 0708 	ands.w	r7, r7, #8
 8009f4a:	d1f7      	bne.n	8009f3c <_strtol_l.constprop.0+0x20>
 8009f4c:	2c2d      	cmp	r4, #45	; 0x2d
 8009f4e:	d132      	bne.n	8009fb6 <_strtol_l.constprop.0+0x9a>
 8009f50:	782c      	ldrb	r4, [r5, #0]
 8009f52:	2701      	movs	r7, #1
 8009f54:	1cb5      	adds	r5, r6, #2
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d05b      	beq.n	800a012 <_strtol_l.constprop.0+0xf6>
 8009f5a:	2b10      	cmp	r3, #16
 8009f5c:	d109      	bne.n	8009f72 <_strtol_l.constprop.0+0x56>
 8009f5e:	2c30      	cmp	r4, #48	; 0x30
 8009f60:	d107      	bne.n	8009f72 <_strtol_l.constprop.0+0x56>
 8009f62:	782c      	ldrb	r4, [r5, #0]
 8009f64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009f68:	2c58      	cmp	r4, #88	; 0x58
 8009f6a:	d14d      	bne.n	800a008 <_strtol_l.constprop.0+0xec>
 8009f6c:	786c      	ldrb	r4, [r5, #1]
 8009f6e:	2310      	movs	r3, #16
 8009f70:	3502      	adds	r5, #2
 8009f72:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009f76:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f7a:	f04f 0e00 	mov.w	lr, #0
 8009f7e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009f82:	4676      	mov	r6, lr
 8009f84:	fb03 8a19 	mls	sl, r3, r9, r8
 8009f88:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009f8c:	f1bc 0f09 	cmp.w	ip, #9
 8009f90:	d816      	bhi.n	8009fc0 <_strtol_l.constprop.0+0xa4>
 8009f92:	4664      	mov	r4, ip
 8009f94:	42a3      	cmp	r3, r4
 8009f96:	dd24      	ble.n	8009fe2 <_strtol_l.constprop.0+0xc6>
 8009f98:	f1be 3fff 	cmp.w	lr, #4294967295
 8009f9c:	d008      	beq.n	8009fb0 <_strtol_l.constprop.0+0x94>
 8009f9e:	45b1      	cmp	r9, r6
 8009fa0:	d31c      	bcc.n	8009fdc <_strtol_l.constprop.0+0xc0>
 8009fa2:	d101      	bne.n	8009fa8 <_strtol_l.constprop.0+0x8c>
 8009fa4:	45a2      	cmp	sl, r4
 8009fa6:	db19      	blt.n	8009fdc <_strtol_l.constprop.0+0xc0>
 8009fa8:	fb06 4603 	mla	r6, r6, r3, r4
 8009fac:	f04f 0e01 	mov.w	lr, #1
 8009fb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fb4:	e7e8      	b.n	8009f88 <_strtol_l.constprop.0+0x6c>
 8009fb6:	2c2b      	cmp	r4, #43	; 0x2b
 8009fb8:	bf04      	itt	eq
 8009fba:	782c      	ldrbeq	r4, [r5, #0]
 8009fbc:	1cb5      	addeq	r5, r6, #2
 8009fbe:	e7ca      	b.n	8009f56 <_strtol_l.constprop.0+0x3a>
 8009fc0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009fc4:	f1bc 0f19 	cmp.w	ip, #25
 8009fc8:	d801      	bhi.n	8009fce <_strtol_l.constprop.0+0xb2>
 8009fca:	3c37      	subs	r4, #55	; 0x37
 8009fcc:	e7e2      	b.n	8009f94 <_strtol_l.constprop.0+0x78>
 8009fce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009fd2:	f1bc 0f19 	cmp.w	ip, #25
 8009fd6:	d804      	bhi.n	8009fe2 <_strtol_l.constprop.0+0xc6>
 8009fd8:	3c57      	subs	r4, #87	; 0x57
 8009fda:	e7db      	b.n	8009f94 <_strtol_l.constprop.0+0x78>
 8009fdc:	f04f 3eff 	mov.w	lr, #4294967295
 8009fe0:	e7e6      	b.n	8009fb0 <_strtol_l.constprop.0+0x94>
 8009fe2:	f1be 3fff 	cmp.w	lr, #4294967295
 8009fe6:	d105      	bne.n	8009ff4 <_strtol_l.constprop.0+0xd8>
 8009fe8:	2322      	movs	r3, #34	; 0x22
 8009fea:	6003      	str	r3, [r0, #0]
 8009fec:	4646      	mov	r6, r8
 8009fee:	b942      	cbnz	r2, 800a002 <_strtol_l.constprop.0+0xe6>
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	e79e      	b.n	8009f32 <_strtol_l.constprop.0+0x16>
 8009ff4:	b107      	cbz	r7, 8009ff8 <_strtol_l.constprop.0+0xdc>
 8009ff6:	4276      	negs	r6, r6
 8009ff8:	2a00      	cmp	r2, #0
 8009ffa:	d0f9      	beq.n	8009ff0 <_strtol_l.constprop.0+0xd4>
 8009ffc:	f1be 0f00 	cmp.w	lr, #0
 800a000:	d000      	beq.n	800a004 <_strtol_l.constprop.0+0xe8>
 800a002:	1e69      	subs	r1, r5, #1
 800a004:	6011      	str	r1, [r2, #0]
 800a006:	e7f3      	b.n	8009ff0 <_strtol_l.constprop.0+0xd4>
 800a008:	2430      	movs	r4, #48	; 0x30
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1b1      	bne.n	8009f72 <_strtol_l.constprop.0+0x56>
 800a00e:	2308      	movs	r3, #8
 800a010:	e7af      	b.n	8009f72 <_strtol_l.constprop.0+0x56>
 800a012:	2c30      	cmp	r4, #48	; 0x30
 800a014:	d0a5      	beq.n	8009f62 <_strtol_l.constprop.0+0x46>
 800a016:	230a      	movs	r3, #10
 800a018:	e7ab      	b.n	8009f72 <_strtol_l.constprop.0+0x56>
 800a01a:	bf00      	nop
 800a01c:	0800b5a9 	.word	0x0800b5a9

0800a020 <strtol>:
 800a020:	4613      	mov	r3, r2
 800a022:	460a      	mov	r2, r1
 800a024:	4601      	mov	r1, r0
 800a026:	4802      	ldr	r0, [pc, #8]	; (800a030 <strtol+0x10>)
 800a028:	6800      	ldr	r0, [r0, #0]
 800a02a:	f7ff bf77 	b.w	8009f1c <_strtol_l.constprop.0>
 800a02e:	bf00      	nop
 800a030:	20000124 	.word	0x20000124

0800a034 <std>:
 800a034:	2300      	movs	r3, #0
 800a036:	b510      	push	{r4, lr}
 800a038:	4604      	mov	r4, r0
 800a03a:	e9c0 3300 	strd	r3, r3, [r0]
 800a03e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a042:	6083      	str	r3, [r0, #8]
 800a044:	8181      	strh	r1, [r0, #12]
 800a046:	6643      	str	r3, [r0, #100]	; 0x64
 800a048:	81c2      	strh	r2, [r0, #14]
 800a04a:	6183      	str	r3, [r0, #24]
 800a04c:	4619      	mov	r1, r3
 800a04e:	2208      	movs	r2, #8
 800a050:	305c      	adds	r0, #92	; 0x5c
 800a052:	f000 f916 	bl	800a282 <memset>
 800a056:	4b05      	ldr	r3, [pc, #20]	; (800a06c <std+0x38>)
 800a058:	6263      	str	r3, [r4, #36]	; 0x24
 800a05a:	4b05      	ldr	r3, [pc, #20]	; (800a070 <std+0x3c>)
 800a05c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a05e:	4b05      	ldr	r3, [pc, #20]	; (800a074 <std+0x40>)
 800a060:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a062:	4b05      	ldr	r3, [pc, #20]	; (800a078 <std+0x44>)
 800a064:	6224      	str	r4, [r4, #32]
 800a066:	6323      	str	r3, [r4, #48]	; 0x30
 800a068:	bd10      	pop	{r4, pc}
 800a06a:	bf00      	nop
 800a06c:	0800a1fd 	.word	0x0800a1fd
 800a070:	0800a21f 	.word	0x0800a21f
 800a074:	0800a257 	.word	0x0800a257
 800a078:	0800a27b 	.word	0x0800a27b

0800a07c <stdio_exit_handler>:
 800a07c:	4a02      	ldr	r2, [pc, #8]	; (800a088 <stdio_exit_handler+0xc>)
 800a07e:	4903      	ldr	r1, [pc, #12]	; (800a08c <stdio_exit_handler+0x10>)
 800a080:	4803      	ldr	r0, [pc, #12]	; (800a090 <stdio_exit_handler+0x14>)
 800a082:	f000 b869 	b.w	800a158 <_fwalk_sglue>
 800a086:	bf00      	nop
 800a088:	200000cc 	.word	0x200000cc
 800a08c:	0800ad49 	.word	0x0800ad49
 800a090:	200000d8 	.word	0x200000d8

0800a094 <cleanup_stdio>:
 800a094:	6841      	ldr	r1, [r0, #4]
 800a096:	4b0c      	ldr	r3, [pc, #48]	; (800a0c8 <cleanup_stdio+0x34>)
 800a098:	4299      	cmp	r1, r3
 800a09a:	b510      	push	{r4, lr}
 800a09c:	4604      	mov	r4, r0
 800a09e:	d001      	beq.n	800a0a4 <cleanup_stdio+0x10>
 800a0a0:	f000 fe52 	bl	800ad48 <_fflush_r>
 800a0a4:	68a1      	ldr	r1, [r4, #8]
 800a0a6:	4b09      	ldr	r3, [pc, #36]	; (800a0cc <cleanup_stdio+0x38>)
 800a0a8:	4299      	cmp	r1, r3
 800a0aa:	d002      	beq.n	800a0b2 <cleanup_stdio+0x1e>
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f000 fe4b 	bl	800ad48 <_fflush_r>
 800a0b2:	68e1      	ldr	r1, [r4, #12]
 800a0b4:	4b06      	ldr	r3, [pc, #24]	; (800a0d0 <cleanup_stdio+0x3c>)
 800a0b6:	4299      	cmp	r1, r3
 800a0b8:	d004      	beq.n	800a0c4 <cleanup_stdio+0x30>
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0c0:	f000 be42 	b.w	800ad48 <_fflush_r>
 800a0c4:	bd10      	pop	{r4, pc}
 800a0c6:	bf00      	nop
 800a0c8:	20000568 	.word	0x20000568
 800a0cc:	200005d0 	.word	0x200005d0
 800a0d0:	20000638 	.word	0x20000638

0800a0d4 <global_stdio_init.part.0>:
 800a0d4:	b510      	push	{r4, lr}
 800a0d6:	4b0b      	ldr	r3, [pc, #44]	; (800a104 <global_stdio_init.part.0+0x30>)
 800a0d8:	4c0b      	ldr	r4, [pc, #44]	; (800a108 <global_stdio_init.part.0+0x34>)
 800a0da:	4a0c      	ldr	r2, [pc, #48]	; (800a10c <global_stdio_init.part.0+0x38>)
 800a0dc:	601a      	str	r2, [r3, #0]
 800a0de:	4620      	mov	r0, r4
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	2104      	movs	r1, #4
 800a0e4:	f7ff ffa6 	bl	800a034 <std>
 800a0e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	2109      	movs	r1, #9
 800a0f0:	f7ff ffa0 	bl	800a034 <std>
 800a0f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a0f8:	2202      	movs	r2, #2
 800a0fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0fe:	2112      	movs	r1, #18
 800a100:	f7ff bf98 	b.w	800a034 <std>
 800a104:	200006a0 	.word	0x200006a0
 800a108:	20000568 	.word	0x20000568
 800a10c:	0800a07d 	.word	0x0800a07d

0800a110 <__sfp_lock_acquire>:
 800a110:	4801      	ldr	r0, [pc, #4]	; (800a118 <__sfp_lock_acquire+0x8>)
 800a112:	f000 b98b 	b.w	800a42c <__retarget_lock_acquire_recursive>
 800a116:	bf00      	nop
 800a118:	200006a9 	.word	0x200006a9

0800a11c <__sfp_lock_release>:
 800a11c:	4801      	ldr	r0, [pc, #4]	; (800a124 <__sfp_lock_release+0x8>)
 800a11e:	f000 b986 	b.w	800a42e <__retarget_lock_release_recursive>
 800a122:	bf00      	nop
 800a124:	200006a9 	.word	0x200006a9

0800a128 <__sinit>:
 800a128:	b510      	push	{r4, lr}
 800a12a:	4604      	mov	r4, r0
 800a12c:	f7ff fff0 	bl	800a110 <__sfp_lock_acquire>
 800a130:	6a23      	ldr	r3, [r4, #32]
 800a132:	b11b      	cbz	r3, 800a13c <__sinit+0x14>
 800a134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a138:	f7ff bff0 	b.w	800a11c <__sfp_lock_release>
 800a13c:	4b04      	ldr	r3, [pc, #16]	; (800a150 <__sinit+0x28>)
 800a13e:	6223      	str	r3, [r4, #32]
 800a140:	4b04      	ldr	r3, [pc, #16]	; (800a154 <__sinit+0x2c>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d1f5      	bne.n	800a134 <__sinit+0xc>
 800a148:	f7ff ffc4 	bl	800a0d4 <global_stdio_init.part.0>
 800a14c:	e7f2      	b.n	800a134 <__sinit+0xc>
 800a14e:	bf00      	nop
 800a150:	0800a095 	.word	0x0800a095
 800a154:	200006a0 	.word	0x200006a0

0800a158 <_fwalk_sglue>:
 800a158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a15c:	4607      	mov	r7, r0
 800a15e:	4688      	mov	r8, r1
 800a160:	4614      	mov	r4, r2
 800a162:	2600      	movs	r6, #0
 800a164:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a168:	f1b9 0901 	subs.w	r9, r9, #1
 800a16c:	d505      	bpl.n	800a17a <_fwalk_sglue+0x22>
 800a16e:	6824      	ldr	r4, [r4, #0]
 800a170:	2c00      	cmp	r4, #0
 800a172:	d1f7      	bne.n	800a164 <_fwalk_sglue+0xc>
 800a174:	4630      	mov	r0, r6
 800a176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a17a:	89ab      	ldrh	r3, [r5, #12]
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d907      	bls.n	800a190 <_fwalk_sglue+0x38>
 800a180:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a184:	3301      	adds	r3, #1
 800a186:	d003      	beq.n	800a190 <_fwalk_sglue+0x38>
 800a188:	4629      	mov	r1, r5
 800a18a:	4638      	mov	r0, r7
 800a18c:	47c0      	blx	r8
 800a18e:	4306      	orrs	r6, r0
 800a190:	3568      	adds	r5, #104	; 0x68
 800a192:	e7e9      	b.n	800a168 <_fwalk_sglue+0x10>

0800a194 <sniprintf>:
 800a194:	b40c      	push	{r2, r3}
 800a196:	b530      	push	{r4, r5, lr}
 800a198:	4b17      	ldr	r3, [pc, #92]	; (800a1f8 <sniprintf+0x64>)
 800a19a:	1e0c      	subs	r4, r1, #0
 800a19c:	681d      	ldr	r5, [r3, #0]
 800a19e:	b09d      	sub	sp, #116	; 0x74
 800a1a0:	da08      	bge.n	800a1b4 <sniprintf+0x20>
 800a1a2:	238b      	movs	r3, #139	; 0x8b
 800a1a4:	602b      	str	r3, [r5, #0]
 800a1a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a1aa:	b01d      	add	sp, #116	; 0x74
 800a1ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1b0:	b002      	add	sp, #8
 800a1b2:	4770      	bx	lr
 800a1b4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a1b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a1bc:	bf14      	ite	ne
 800a1be:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a1c2:	4623      	moveq	r3, r4
 800a1c4:	9304      	str	r3, [sp, #16]
 800a1c6:	9307      	str	r3, [sp, #28]
 800a1c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a1cc:	9002      	str	r0, [sp, #8]
 800a1ce:	9006      	str	r0, [sp, #24]
 800a1d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a1d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a1d6:	ab21      	add	r3, sp, #132	; 0x84
 800a1d8:	a902      	add	r1, sp, #8
 800a1da:	4628      	mov	r0, r5
 800a1dc:	9301      	str	r3, [sp, #4]
 800a1de:	f000 fa9f 	bl	800a720 <_svfiprintf_r>
 800a1e2:	1c43      	adds	r3, r0, #1
 800a1e4:	bfbc      	itt	lt
 800a1e6:	238b      	movlt	r3, #139	; 0x8b
 800a1e8:	602b      	strlt	r3, [r5, #0]
 800a1ea:	2c00      	cmp	r4, #0
 800a1ec:	d0dd      	beq.n	800a1aa <sniprintf+0x16>
 800a1ee:	9b02      	ldr	r3, [sp, #8]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	701a      	strb	r2, [r3, #0]
 800a1f4:	e7d9      	b.n	800a1aa <sniprintf+0x16>
 800a1f6:	bf00      	nop
 800a1f8:	20000124 	.word	0x20000124

0800a1fc <__sread>:
 800a1fc:	b510      	push	{r4, lr}
 800a1fe:	460c      	mov	r4, r1
 800a200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a204:	f000 f8c4 	bl	800a390 <_read_r>
 800a208:	2800      	cmp	r0, #0
 800a20a:	bfab      	itete	ge
 800a20c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a20e:	89a3      	ldrhlt	r3, [r4, #12]
 800a210:	181b      	addge	r3, r3, r0
 800a212:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a216:	bfac      	ite	ge
 800a218:	6563      	strge	r3, [r4, #84]	; 0x54
 800a21a:	81a3      	strhlt	r3, [r4, #12]
 800a21c:	bd10      	pop	{r4, pc}

0800a21e <__swrite>:
 800a21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a222:	461f      	mov	r7, r3
 800a224:	898b      	ldrh	r3, [r1, #12]
 800a226:	05db      	lsls	r3, r3, #23
 800a228:	4605      	mov	r5, r0
 800a22a:	460c      	mov	r4, r1
 800a22c:	4616      	mov	r6, r2
 800a22e:	d505      	bpl.n	800a23c <__swrite+0x1e>
 800a230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a234:	2302      	movs	r3, #2
 800a236:	2200      	movs	r2, #0
 800a238:	f000 f898 	bl	800a36c <_lseek_r>
 800a23c:	89a3      	ldrh	r3, [r4, #12]
 800a23e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a242:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a246:	81a3      	strh	r3, [r4, #12]
 800a248:	4632      	mov	r2, r6
 800a24a:	463b      	mov	r3, r7
 800a24c:	4628      	mov	r0, r5
 800a24e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a252:	f000 b8af 	b.w	800a3b4 <_write_r>

0800a256 <__sseek>:
 800a256:	b510      	push	{r4, lr}
 800a258:	460c      	mov	r4, r1
 800a25a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a25e:	f000 f885 	bl	800a36c <_lseek_r>
 800a262:	1c43      	adds	r3, r0, #1
 800a264:	89a3      	ldrh	r3, [r4, #12]
 800a266:	bf15      	itete	ne
 800a268:	6560      	strne	r0, [r4, #84]	; 0x54
 800a26a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a26e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a272:	81a3      	strheq	r3, [r4, #12]
 800a274:	bf18      	it	ne
 800a276:	81a3      	strhne	r3, [r4, #12]
 800a278:	bd10      	pop	{r4, pc}

0800a27a <__sclose>:
 800a27a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a27e:	f000 b865 	b.w	800a34c <_close_r>

0800a282 <memset>:
 800a282:	4402      	add	r2, r0
 800a284:	4603      	mov	r3, r0
 800a286:	4293      	cmp	r3, r2
 800a288:	d100      	bne.n	800a28c <memset+0xa>
 800a28a:	4770      	bx	lr
 800a28c:	f803 1b01 	strb.w	r1, [r3], #1
 800a290:	e7f9      	b.n	800a286 <memset+0x4>
	...

0800a294 <strtok>:
 800a294:	4b16      	ldr	r3, [pc, #88]	; (800a2f0 <strtok+0x5c>)
 800a296:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a298:	681e      	ldr	r6, [r3, #0]
 800a29a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800a29c:	4605      	mov	r5, r0
 800a29e:	b9fc      	cbnz	r4, 800a2e0 <strtok+0x4c>
 800a2a0:	2050      	movs	r0, #80	; 0x50
 800a2a2:	9101      	str	r1, [sp, #4]
 800a2a4:	f000 f92e 	bl	800a504 <malloc>
 800a2a8:	9901      	ldr	r1, [sp, #4]
 800a2aa:	6470      	str	r0, [r6, #68]	; 0x44
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	b920      	cbnz	r0, 800a2ba <strtok+0x26>
 800a2b0:	4b10      	ldr	r3, [pc, #64]	; (800a2f4 <strtok+0x60>)
 800a2b2:	4811      	ldr	r0, [pc, #68]	; (800a2f8 <strtok+0x64>)
 800a2b4:	215b      	movs	r1, #91	; 0x5b
 800a2b6:	f000 f8bb 	bl	800a430 <__assert_func>
 800a2ba:	e9c0 4400 	strd	r4, r4, [r0]
 800a2be:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a2c2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a2c6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a2ca:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a2ce:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a2d2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a2d6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a2da:	6184      	str	r4, [r0, #24]
 800a2dc:	7704      	strb	r4, [r0, #28]
 800a2de:	6244      	str	r4, [r0, #36]	; 0x24
 800a2e0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	b002      	add	sp, #8
 800a2e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a2ec:	f000 b806 	b.w	800a2fc <__strtok_r>
 800a2f0:	20000124 	.word	0x20000124
 800a2f4:	0800b6a9 	.word	0x0800b6a9
 800a2f8:	0800b6c0 	.word	0x0800b6c0

0800a2fc <__strtok_r>:
 800a2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2fe:	b908      	cbnz	r0, 800a304 <__strtok_r+0x8>
 800a300:	6810      	ldr	r0, [r2, #0]
 800a302:	b188      	cbz	r0, 800a328 <__strtok_r+0x2c>
 800a304:	4604      	mov	r4, r0
 800a306:	4620      	mov	r0, r4
 800a308:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a30c:	460f      	mov	r7, r1
 800a30e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a312:	b91e      	cbnz	r6, 800a31c <__strtok_r+0x20>
 800a314:	b965      	cbnz	r5, 800a330 <__strtok_r+0x34>
 800a316:	6015      	str	r5, [r2, #0]
 800a318:	4628      	mov	r0, r5
 800a31a:	e005      	b.n	800a328 <__strtok_r+0x2c>
 800a31c:	42b5      	cmp	r5, r6
 800a31e:	d1f6      	bne.n	800a30e <__strtok_r+0x12>
 800a320:	2b00      	cmp	r3, #0
 800a322:	d1f0      	bne.n	800a306 <__strtok_r+0xa>
 800a324:	6014      	str	r4, [r2, #0]
 800a326:	7003      	strb	r3, [r0, #0]
 800a328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a32a:	461c      	mov	r4, r3
 800a32c:	e00c      	b.n	800a348 <__strtok_r+0x4c>
 800a32e:	b915      	cbnz	r5, 800a336 <__strtok_r+0x3a>
 800a330:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a334:	460e      	mov	r6, r1
 800a336:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a33a:	42ab      	cmp	r3, r5
 800a33c:	d1f7      	bne.n	800a32e <__strtok_r+0x32>
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d0f3      	beq.n	800a32a <__strtok_r+0x2e>
 800a342:	2300      	movs	r3, #0
 800a344:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a348:	6014      	str	r4, [r2, #0]
 800a34a:	e7ed      	b.n	800a328 <__strtok_r+0x2c>

0800a34c <_close_r>:
 800a34c:	b538      	push	{r3, r4, r5, lr}
 800a34e:	4d06      	ldr	r5, [pc, #24]	; (800a368 <_close_r+0x1c>)
 800a350:	2300      	movs	r3, #0
 800a352:	4604      	mov	r4, r0
 800a354:	4608      	mov	r0, r1
 800a356:	602b      	str	r3, [r5, #0]
 800a358:	f7f7 fa65 	bl	8001826 <_close>
 800a35c:	1c43      	adds	r3, r0, #1
 800a35e:	d102      	bne.n	800a366 <_close_r+0x1a>
 800a360:	682b      	ldr	r3, [r5, #0]
 800a362:	b103      	cbz	r3, 800a366 <_close_r+0x1a>
 800a364:	6023      	str	r3, [r4, #0]
 800a366:	bd38      	pop	{r3, r4, r5, pc}
 800a368:	200006a4 	.word	0x200006a4

0800a36c <_lseek_r>:
 800a36c:	b538      	push	{r3, r4, r5, lr}
 800a36e:	4d07      	ldr	r5, [pc, #28]	; (800a38c <_lseek_r+0x20>)
 800a370:	4604      	mov	r4, r0
 800a372:	4608      	mov	r0, r1
 800a374:	4611      	mov	r1, r2
 800a376:	2200      	movs	r2, #0
 800a378:	602a      	str	r2, [r5, #0]
 800a37a:	461a      	mov	r2, r3
 800a37c:	f7f7 fa7a 	bl	8001874 <_lseek>
 800a380:	1c43      	adds	r3, r0, #1
 800a382:	d102      	bne.n	800a38a <_lseek_r+0x1e>
 800a384:	682b      	ldr	r3, [r5, #0]
 800a386:	b103      	cbz	r3, 800a38a <_lseek_r+0x1e>
 800a388:	6023      	str	r3, [r4, #0]
 800a38a:	bd38      	pop	{r3, r4, r5, pc}
 800a38c:	200006a4 	.word	0x200006a4

0800a390 <_read_r>:
 800a390:	b538      	push	{r3, r4, r5, lr}
 800a392:	4d07      	ldr	r5, [pc, #28]	; (800a3b0 <_read_r+0x20>)
 800a394:	4604      	mov	r4, r0
 800a396:	4608      	mov	r0, r1
 800a398:	4611      	mov	r1, r2
 800a39a:	2200      	movs	r2, #0
 800a39c:	602a      	str	r2, [r5, #0]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	f7f7 fa08 	bl	80017b4 <_read>
 800a3a4:	1c43      	adds	r3, r0, #1
 800a3a6:	d102      	bne.n	800a3ae <_read_r+0x1e>
 800a3a8:	682b      	ldr	r3, [r5, #0]
 800a3aa:	b103      	cbz	r3, 800a3ae <_read_r+0x1e>
 800a3ac:	6023      	str	r3, [r4, #0]
 800a3ae:	bd38      	pop	{r3, r4, r5, pc}
 800a3b0:	200006a4 	.word	0x200006a4

0800a3b4 <_write_r>:
 800a3b4:	b538      	push	{r3, r4, r5, lr}
 800a3b6:	4d07      	ldr	r5, [pc, #28]	; (800a3d4 <_write_r+0x20>)
 800a3b8:	4604      	mov	r4, r0
 800a3ba:	4608      	mov	r0, r1
 800a3bc:	4611      	mov	r1, r2
 800a3be:	2200      	movs	r2, #0
 800a3c0:	602a      	str	r2, [r5, #0]
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	f7f7 fa13 	bl	80017ee <_write>
 800a3c8:	1c43      	adds	r3, r0, #1
 800a3ca:	d102      	bne.n	800a3d2 <_write_r+0x1e>
 800a3cc:	682b      	ldr	r3, [r5, #0]
 800a3ce:	b103      	cbz	r3, 800a3d2 <_write_r+0x1e>
 800a3d0:	6023      	str	r3, [r4, #0]
 800a3d2:	bd38      	pop	{r3, r4, r5, pc}
 800a3d4:	200006a4 	.word	0x200006a4

0800a3d8 <__errno>:
 800a3d8:	4b01      	ldr	r3, [pc, #4]	; (800a3e0 <__errno+0x8>)
 800a3da:	6818      	ldr	r0, [r3, #0]
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	20000124 	.word	0x20000124

0800a3e4 <__libc_init_array>:
 800a3e4:	b570      	push	{r4, r5, r6, lr}
 800a3e6:	4d0d      	ldr	r5, [pc, #52]	; (800a41c <__libc_init_array+0x38>)
 800a3e8:	4c0d      	ldr	r4, [pc, #52]	; (800a420 <__libc_init_array+0x3c>)
 800a3ea:	1b64      	subs	r4, r4, r5
 800a3ec:	10a4      	asrs	r4, r4, #2
 800a3ee:	2600      	movs	r6, #0
 800a3f0:	42a6      	cmp	r6, r4
 800a3f2:	d109      	bne.n	800a408 <__libc_init_array+0x24>
 800a3f4:	4d0b      	ldr	r5, [pc, #44]	; (800a424 <__libc_init_array+0x40>)
 800a3f6:	4c0c      	ldr	r4, [pc, #48]	; (800a428 <__libc_init_array+0x44>)
 800a3f8:	f000 fff8 	bl	800b3ec <_init>
 800a3fc:	1b64      	subs	r4, r4, r5
 800a3fe:	10a4      	asrs	r4, r4, #2
 800a400:	2600      	movs	r6, #0
 800a402:	42a6      	cmp	r6, r4
 800a404:	d105      	bne.n	800a412 <__libc_init_array+0x2e>
 800a406:	bd70      	pop	{r4, r5, r6, pc}
 800a408:	f855 3b04 	ldr.w	r3, [r5], #4
 800a40c:	4798      	blx	r3
 800a40e:	3601      	adds	r6, #1
 800a410:	e7ee      	b.n	800a3f0 <__libc_init_array+0xc>
 800a412:	f855 3b04 	ldr.w	r3, [r5], #4
 800a416:	4798      	blx	r3
 800a418:	3601      	adds	r6, #1
 800a41a:	e7f2      	b.n	800a402 <__libc_init_array+0x1e>
 800a41c:	0800b794 	.word	0x0800b794
 800a420:	0800b794 	.word	0x0800b794
 800a424:	0800b794 	.word	0x0800b794
 800a428:	0800b798 	.word	0x0800b798

0800a42c <__retarget_lock_acquire_recursive>:
 800a42c:	4770      	bx	lr

0800a42e <__retarget_lock_release_recursive>:
 800a42e:	4770      	bx	lr

0800a430 <__assert_func>:
 800a430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a432:	4614      	mov	r4, r2
 800a434:	461a      	mov	r2, r3
 800a436:	4b09      	ldr	r3, [pc, #36]	; (800a45c <__assert_func+0x2c>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4605      	mov	r5, r0
 800a43c:	68d8      	ldr	r0, [r3, #12]
 800a43e:	b14c      	cbz	r4, 800a454 <__assert_func+0x24>
 800a440:	4b07      	ldr	r3, [pc, #28]	; (800a460 <__assert_func+0x30>)
 800a442:	9100      	str	r1, [sp, #0]
 800a444:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a448:	4906      	ldr	r1, [pc, #24]	; (800a464 <__assert_func+0x34>)
 800a44a:	462b      	mov	r3, r5
 800a44c:	f000 fca4 	bl	800ad98 <fiprintf>
 800a450:	f000 fcec 	bl	800ae2c <abort>
 800a454:	4b04      	ldr	r3, [pc, #16]	; (800a468 <__assert_func+0x38>)
 800a456:	461c      	mov	r4, r3
 800a458:	e7f3      	b.n	800a442 <__assert_func+0x12>
 800a45a:	bf00      	nop
 800a45c:	20000124 	.word	0x20000124
 800a460:	0800b71a 	.word	0x0800b71a
 800a464:	0800b727 	.word	0x0800b727
 800a468:	0800b755 	.word	0x0800b755

0800a46c <_free_r>:
 800a46c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a46e:	2900      	cmp	r1, #0
 800a470:	d044      	beq.n	800a4fc <_free_r+0x90>
 800a472:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a476:	9001      	str	r0, [sp, #4]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f1a1 0404 	sub.w	r4, r1, #4
 800a47e:	bfb8      	it	lt
 800a480:	18e4      	addlt	r4, r4, r3
 800a482:	f000 f8e7 	bl	800a654 <__malloc_lock>
 800a486:	4a1e      	ldr	r2, [pc, #120]	; (800a500 <_free_r+0x94>)
 800a488:	9801      	ldr	r0, [sp, #4]
 800a48a:	6813      	ldr	r3, [r2, #0]
 800a48c:	b933      	cbnz	r3, 800a49c <_free_r+0x30>
 800a48e:	6063      	str	r3, [r4, #4]
 800a490:	6014      	str	r4, [r2, #0]
 800a492:	b003      	add	sp, #12
 800a494:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a498:	f000 b8e2 	b.w	800a660 <__malloc_unlock>
 800a49c:	42a3      	cmp	r3, r4
 800a49e:	d908      	bls.n	800a4b2 <_free_r+0x46>
 800a4a0:	6825      	ldr	r5, [r4, #0]
 800a4a2:	1961      	adds	r1, r4, r5
 800a4a4:	428b      	cmp	r3, r1
 800a4a6:	bf01      	itttt	eq
 800a4a8:	6819      	ldreq	r1, [r3, #0]
 800a4aa:	685b      	ldreq	r3, [r3, #4]
 800a4ac:	1949      	addeq	r1, r1, r5
 800a4ae:	6021      	streq	r1, [r4, #0]
 800a4b0:	e7ed      	b.n	800a48e <_free_r+0x22>
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	b10b      	cbz	r3, 800a4bc <_free_r+0x50>
 800a4b8:	42a3      	cmp	r3, r4
 800a4ba:	d9fa      	bls.n	800a4b2 <_free_r+0x46>
 800a4bc:	6811      	ldr	r1, [r2, #0]
 800a4be:	1855      	adds	r5, r2, r1
 800a4c0:	42a5      	cmp	r5, r4
 800a4c2:	d10b      	bne.n	800a4dc <_free_r+0x70>
 800a4c4:	6824      	ldr	r4, [r4, #0]
 800a4c6:	4421      	add	r1, r4
 800a4c8:	1854      	adds	r4, r2, r1
 800a4ca:	42a3      	cmp	r3, r4
 800a4cc:	6011      	str	r1, [r2, #0]
 800a4ce:	d1e0      	bne.n	800a492 <_free_r+0x26>
 800a4d0:	681c      	ldr	r4, [r3, #0]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	6053      	str	r3, [r2, #4]
 800a4d6:	440c      	add	r4, r1
 800a4d8:	6014      	str	r4, [r2, #0]
 800a4da:	e7da      	b.n	800a492 <_free_r+0x26>
 800a4dc:	d902      	bls.n	800a4e4 <_free_r+0x78>
 800a4de:	230c      	movs	r3, #12
 800a4e0:	6003      	str	r3, [r0, #0]
 800a4e2:	e7d6      	b.n	800a492 <_free_r+0x26>
 800a4e4:	6825      	ldr	r5, [r4, #0]
 800a4e6:	1961      	adds	r1, r4, r5
 800a4e8:	428b      	cmp	r3, r1
 800a4ea:	bf04      	itt	eq
 800a4ec:	6819      	ldreq	r1, [r3, #0]
 800a4ee:	685b      	ldreq	r3, [r3, #4]
 800a4f0:	6063      	str	r3, [r4, #4]
 800a4f2:	bf04      	itt	eq
 800a4f4:	1949      	addeq	r1, r1, r5
 800a4f6:	6021      	streq	r1, [r4, #0]
 800a4f8:	6054      	str	r4, [r2, #4]
 800a4fa:	e7ca      	b.n	800a492 <_free_r+0x26>
 800a4fc:	b003      	add	sp, #12
 800a4fe:	bd30      	pop	{r4, r5, pc}
 800a500:	200006ac 	.word	0x200006ac

0800a504 <malloc>:
 800a504:	4b02      	ldr	r3, [pc, #8]	; (800a510 <malloc+0xc>)
 800a506:	4601      	mov	r1, r0
 800a508:	6818      	ldr	r0, [r3, #0]
 800a50a:	f000 b823 	b.w	800a554 <_malloc_r>
 800a50e:	bf00      	nop
 800a510:	20000124 	.word	0x20000124

0800a514 <sbrk_aligned>:
 800a514:	b570      	push	{r4, r5, r6, lr}
 800a516:	4e0e      	ldr	r6, [pc, #56]	; (800a550 <sbrk_aligned+0x3c>)
 800a518:	460c      	mov	r4, r1
 800a51a:	6831      	ldr	r1, [r6, #0]
 800a51c:	4605      	mov	r5, r0
 800a51e:	b911      	cbnz	r1, 800a526 <sbrk_aligned+0x12>
 800a520:	f000 fc66 	bl	800adf0 <_sbrk_r>
 800a524:	6030      	str	r0, [r6, #0]
 800a526:	4621      	mov	r1, r4
 800a528:	4628      	mov	r0, r5
 800a52a:	f000 fc61 	bl	800adf0 <_sbrk_r>
 800a52e:	1c43      	adds	r3, r0, #1
 800a530:	d00a      	beq.n	800a548 <sbrk_aligned+0x34>
 800a532:	1cc4      	adds	r4, r0, #3
 800a534:	f024 0403 	bic.w	r4, r4, #3
 800a538:	42a0      	cmp	r0, r4
 800a53a:	d007      	beq.n	800a54c <sbrk_aligned+0x38>
 800a53c:	1a21      	subs	r1, r4, r0
 800a53e:	4628      	mov	r0, r5
 800a540:	f000 fc56 	bl	800adf0 <_sbrk_r>
 800a544:	3001      	adds	r0, #1
 800a546:	d101      	bne.n	800a54c <sbrk_aligned+0x38>
 800a548:	f04f 34ff 	mov.w	r4, #4294967295
 800a54c:	4620      	mov	r0, r4
 800a54e:	bd70      	pop	{r4, r5, r6, pc}
 800a550:	200006b0 	.word	0x200006b0

0800a554 <_malloc_r>:
 800a554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a558:	1ccd      	adds	r5, r1, #3
 800a55a:	f025 0503 	bic.w	r5, r5, #3
 800a55e:	3508      	adds	r5, #8
 800a560:	2d0c      	cmp	r5, #12
 800a562:	bf38      	it	cc
 800a564:	250c      	movcc	r5, #12
 800a566:	2d00      	cmp	r5, #0
 800a568:	4607      	mov	r7, r0
 800a56a:	db01      	blt.n	800a570 <_malloc_r+0x1c>
 800a56c:	42a9      	cmp	r1, r5
 800a56e:	d905      	bls.n	800a57c <_malloc_r+0x28>
 800a570:	230c      	movs	r3, #12
 800a572:	603b      	str	r3, [r7, #0]
 800a574:	2600      	movs	r6, #0
 800a576:	4630      	mov	r0, r6
 800a578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a57c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a650 <_malloc_r+0xfc>
 800a580:	f000 f868 	bl	800a654 <__malloc_lock>
 800a584:	f8d8 3000 	ldr.w	r3, [r8]
 800a588:	461c      	mov	r4, r3
 800a58a:	bb5c      	cbnz	r4, 800a5e4 <_malloc_r+0x90>
 800a58c:	4629      	mov	r1, r5
 800a58e:	4638      	mov	r0, r7
 800a590:	f7ff ffc0 	bl	800a514 <sbrk_aligned>
 800a594:	1c43      	adds	r3, r0, #1
 800a596:	4604      	mov	r4, r0
 800a598:	d155      	bne.n	800a646 <_malloc_r+0xf2>
 800a59a:	f8d8 4000 	ldr.w	r4, [r8]
 800a59e:	4626      	mov	r6, r4
 800a5a0:	2e00      	cmp	r6, #0
 800a5a2:	d145      	bne.n	800a630 <_malloc_r+0xdc>
 800a5a4:	2c00      	cmp	r4, #0
 800a5a6:	d048      	beq.n	800a63a <_malloc_r+0xe6>
 800a5a8:	6823      	ldr	r3, [r4, #0]
 800a5aa:	4631      	mov	r1, r6
 800a5ac:	4638      	mov	r0, r7
 800a5ae:	eb04 0903 	add.w	r9, r4, r3
 800a5b2:	f000 fc1d 	bl	800adf0 <_sbrk_r>
 800a5b6:	4581      	cmp	r9, r0
 800a5b8:	d13f      	bne.n	800a63a <_malloc_r+0xe6>
 800a5ba:	6821      	ldr	r1, [r4, #0]
 800a5bc:	1a6d      	subs	r5, r5, r1
 800a5be:	4629      	mov	r1, r5
 800a5c0:	4638      	mov	r0, r7
 800a5c2:	f7ff ffa7 	bl	800a514 <sbrk_aligned>
 800a5c6:	3001      	adds	r0, #1
 800a5c8:	d037      	beq.n	800a63a <_malloc_r+0xe6>
 800a5ca:	6823      	ldr	r3, [r4, #0]
 800a5cc:	442b      	add	r3, r5
 800a5ce:	6023      	str	r3, [r4, #0]
 800a5d0:	f8d8 3000 	ldr.w	r3, [r8]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d038      	beq.n	800a64a <_malloc_r+0xf6>
 800a5d8:	685a      	ldr	r2, [r3, #4]
 800a5da:	42a2      	cmp	r2, r4
 800a5dc:	d12b      	bne.n	800a636 <_malloc_r+0xe2>
 800a5de:	2200      	movs	r2, #0
 800a5e0:	605a      	str	r2, [r3, #4]
 800a5e2:	e00f      	b.n	800a604 <_malloc_r+0xb0>
 800a5e4:	6822      	ldr	r2, [r4, #0]
 800a5e6:	1b52      	subs	r2, r2, r5
 800a5e8:	d41f      	bmi.n	800a62a <_malloc_r+0xd6>
 800a5ea:	2a0b      	cmp	r2, #11
 800a5ec:	d917      	bls.n	800a61e <_malloc_r+0xca>
 800a5ee:	1961      	adds	r1, r4, r5
 800a5f0:	42a3      	cmp	r3, r4
 800a5f2:	6025      	str	r5, [r4, #0]
 800a5f4:	bf18      	it	ne
 800a5f6:	6059      	strne	r1, [r3, #4]
 800a5f8:	6863      	ldr	r3, [r4, #4]
 800a5fa:	bf08      	it	eq
 800a5fc:	f8c8 1000 	streq.w	r1, [r8]
 800a600:	5162      	str	r2, [r4, r5]
 800a602:	604b      	str	r3, [r1, #4]
 800a604:	4638      	mov	r0, r7
 800a606:	f104 060b 	add.w	r6, r4, #11
 800a60a:	f000 f829 	bl	800a660 <__malloc_unlock>
 800a60e:	f026 0607 	bic.w	r6, r6, #7
 800a612:	1d23      	adds	r3, r4, #4
 800a614:	1af2      	subs	r2, r6, r3
 800a616:	d0ae      	beq.n	800a576 <_malloc_r+0x22>
 800a618:	1b9b      	subs	r3, r3, r6
 800a61a:	50a3      	str	r3, [r4, r2]
 800a61c:	e7ab      	b.n	800a576 <_malloc_r+0x22>
 800a61e:	42a3      	cmp	r3, r4
 800a620:	6862      	ldr	r2, [r4, #4]
 800a622:	d1dd      	bne.n	800a5e0 <_malloc_r+0x8c>
 800a624:	f8c8 2000 	str.w	r2, [r8]
 800a628:	e7ec      	b.n	800a604 <_malloc_r+0xb0>
 800a62a:	4623      	mov	r3, r4
 800a62c:	6864      	ldr	r4, [r4, #4]
 800a62e:	e7ac      	b.n	800a58a <_malloc_r+0x36>
 800a630:	4634      	mov	r4, r6
 800a632:	6876      	ldr	r6, [r6, #4]
 800a634:	e7b4      	b.n	800a5a0 <_malloc_r+0x4c>
 800a636:	4613      	mov	r3, r2
 800a638:	e7cc      	b.n	800a5d4 <_malloc_r+0x80>
 800a63a:	230c      	movs	r3, #12
 800a63c:	603b      	str	r3, [r7, #0]
 800a63e:	4638      	mov	r0, r7
 800a640:	f000 f80e 	bl	800a660 <__malloc_unlock>
 800a644:	e797      	b.n	800a576 <_malloc_r+0x22>
 800a646:	6025      	str	r5, [r4, #0]
 800a648:	e7dc      	b.n	800a604 <_malloc_r+0xb0>
 800a64a:	605b      	str	r3, [r3, #4]
 800a64c:	deff      	udf	#255	; 0xff
 800a64e:	bf00      	nop
 800a650:	200006ac 	.word	0x200006ac

0800a654 <__malloc_lock>:
 800a654:	4801      	ldr	r0, [pc, #4]	; (800a65c <__malloc_lock+0x8>)
 800a656:	f7ff bee9 	b.w	800a42c <__retarget_lock_acquire_recursive>
 800a65a:	bf00      	nop
 800a65c:	200006a8 	.word	0x200006a8

0800a660 <__malloc_unlock>:
 800a660:	4801      	ldr	r0, [pc, #4]	; (800a668 <__malloc_unlock+0x8>)
 800a662:	f7ff bee4 	b.w	800a42e <__retarget_lock_release_recursive>
 800a666:	bf00      	nop
 800a668:	200006a8 	.word	0x200006a8

0800a66c <__ssputs_r>:
 800a66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a670:	688e      	ldr	r6, [r1, #8]
 800a672:	461f      	mov	r7, r3
 800a674:	42be      	cmp	r6, r7
 800a676:	680b      	ldr	r3, [r1, #0]
 800a678:	4682      	mov	sl, r0
 800a67a:	460c      	mov	r4, r1
 800a67c:	4690      	mov	r8, r2
 800a67e:	d82c      	bhi.n	800a6da <__ssputs_r+0x6e>
 800a680:	898a      	ldrh	r2, [r1, #12]
 800a682:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a686:	d026      	beq.n	800a6d6 <__ssputs_r+0x6a>
 800a688:	6965      	ldr	r5, [r4, #20]
 800a68a:	6909      	ldr	r1, [r1, #16]
 800a68c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a690:	eba3 0901 	sub.w	r9, r3, r1
 800a694:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a698:	1c7b      	adds	r3, r7, #1
 800a69a:	444b      	add	r3, r9
 800a69c:	106d      	asrs	r5, r5, #1
 800a69e:	429d      	cmp	r5, r3
 800a6a0:	bf38      	it	cc
 800a6a2:	461d      	movcc	r5, r3
 800a6a4:	0553      	lsls	r3, r2, #21
 800a6a6:	d527      	bpl.n	800a6f8 <__ssputs_r+0x8c>
 800a6a8:	4629      	mov	r1, r5
 800a6aa:	f7ff ff53 	bl	800a554 <_malloc_r>
 800a6ae:	4606      	mov	r6, r0
 800a6b0:	b360      	cbz	r0, 800a70c <__ssputs_r+0xa0>
 800a6b2:	6921      	ldr	r1, [r4, #16]
 800a6b4:	464a      	mov	r2, r9
 800a6b6:	f000 fbab 	bl	800ae10 <memcpy>
 800a6ba:	89a3      	ldrh	r3, [r4, #12]
 800a6bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a6c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6c4:	81a3      	strh	r3, [r4, #12]
 800a6c6:	6126      	str	r6, [r4, #16]
 800a6c8:	6165      	str	r5, [r4, #20]
 800a6ca:	444e      	add	r6, r9
 800a6cc:	eba5 0509 	sub.w	r5, r5, r9
 800a6d0:	6026      	str	r6, [r4, #0]
 800a6d2:	60a5      	str	r5, [r4, #8]
 800a6d4:	463e      	mov	r6, r7
 800a6d6:	42be      	cmp	r6, r7
 800a6d8:	d900      	bls.n	800a6dc <__ssputs_r+0x70>
 800a6da:	463e      	mov	r6, r7
 800a6dc:	6820      	ldr	r0, [r4, #0]
 800a6de:	4632      	mov	r2, r6
 800a6e0:	4641      	mov	r1, r8
 800a6e2:	f000 fb6b 	bl	800adbc <memmove>
 800a6e6:	68a3      	ldr	r3, [r4, #8]
 800a6e8:	1b9b      	subs	r3, r3, r6
 800a6ea:	60a3      	str	r3, [r4, #8]
 800a6ec:	6823      	ldr	r3, [r4, #0]
 800a6ee:	4433      	add	r3, r6
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	2000      	movs	r0, #0
 800a6f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6f8:	462a      	mov	r2, r5
 800a6fa:	f000 fb9e 	bl	800ae3a <_realloc_r>
 800a6fe:	4606      	mov	r6, r0
 800a700:	2800      	cmp	r0, #0
 800a702:	d1e0      	bne.n	800a6c6 <__ssputs_r+0x5a>
 800a704:	6921      	ldr	r1, [r4, #16]
 800a706:	4650      	mov	r0, sl
 800a708:	f7ff feb0 	bl	800a46c <_free_r>
 800a70c:	230c      	movs	r3, #12
 800a70e:	f8ca 3000 	str.w	r3, [sl]
 800a712:	89a3      	ldrh	r3, [r4, #12]
 800a714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a718:	81a3      	strh	r3, [r4, #12]
 800a71a:	f04f 30ff 	mov.w	r0, #4294967295
 800a71e:	e7e9      	b.n	800a6f4 <__ssputs_r+0x88>

0800a720 <_svfiprintf_r>:
 800a720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a724:	4698      	mov	r8, r3
 800a726:	898b      	ldrh	r3, [r1, #12]
 800a728:	061b      	lsls	r3, r3, #24
 800a72a:	b09d      	sub	sp, #116	; 0x74
 800a72c:	4607      	mov	r7, r0
 800a72e:	460d      	mov	r5, r1
 800a730:	4614      	mov	r4, r2
 800a732:	d50e      	bpl.n	800a752 <_svfiprintf_r+0x32>
 800a734:	690b      	ldr	r3, [r1, #16]
 800a736:	b963      	cbnz	r3, 800a752 <_svfiprintf_r+0x32>
 800a738:	2140      	movs	r1, #64	; 0x40
 800a73a:	f7ff ff0b 	bl	800a554 <_malloc_r>
 800a73e:	6028      	str	r0, [r5, #0]
 800a740:	6128      	str	r0, [r5, #16]
 800a742:	b920      	cbnz	r0, 800a74e <_svfiprintf_r+0x2e>
 800a744:	230c      	movs	r3, #12
 800a746:	603b      	str	r3, [r7, #0]
 800a748:	f04f 30ff 	mov.w	r0, #4294967295
 800a74c:	e0d0      	b.n	800a8f0 <_svfiprintf_r+0x1d0>
 800a74e:	2340      	movs	r3, #64	; 0x40
 800a750:	616b      	str	r3, [r5, #20]
 800a752:	2300      	movs	r3, #0
 800a754:	9309      	str	r3, [sp, #36]	; 0x24
 800a756:	2320      	movs	r3, #32
 800a758:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a75c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a760:	2330      	movs	r3, #48	; 0x30
 800a762:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a908 <_svfiprintf_r+0x1e8>
 800a766:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a76a:	f04f 0901 	mov.w	r9, #1
 800a76e:	4623      	mov	r3, r4
 800a770:	469a      	mov	sl, r3
 800a772:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a776:	b10a      	cbz	r2, 800a77c <_svfiprintf_r+0x5c>
 800a778:	2a25      	cmp	r2, #37	; 0x25
 800a77a:	d1f9      	bne.n	800a770 <_svfiprintf_r+0x50>
 800a77c:	ebba 0b04 	subs.w	fp, sl, r4
 800a780:	d00b      	beq.n	800a79a <_svfiprintf_r+0x7a>
 800a782:	465b      	mov	r3, fp
 800a784:	4622      	mov	r2, r4
 800a786:	4629      	mov	r1, r5
 800a788:	4638      	mov	r0, r7
 800a78a:	f7ff ff6f 	bl	800a66c <__ssputs_r>
 800a78e:	3001      	adds	r0, #1
 800a790:	f000 80a9 	beq.w	800a8e6 <_svfiprintf_r+0x1c6>
 800a794:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a796:	445a      	add	r2, fp
 800a798:	9209      	str	r2, [sp, #36]	; 0x24
 800a79a:	f89a 3000 	ldrb.w	r3, [sl]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	f000 80a1 	beq.w	800a8e6 <_svfiprintf_r+0x1c6>
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7ae:	f10a 0a01 	add.w	sl, sl, #1
 800a7b2:	9304      	str	r3, [sp, #16]
 800a7b4:	9307      	str	r3, [sp, #28]
 800a7b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7ba:	931a      	str	r3, [sp, #104]	; 0x68
 800a7bc:	4654      	mov	r4, sl
 800a7be:	2205      	movs	r2, #5
 800a7c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7c4:	4850      	ldr	r0, [pc, #320]	; (800a908 <_svfiprintf_r+0x1e8>)
 800a7c6:	f7f5 fd43 	bl	8000250 <memchr>
 800a7ca:	9a04      	ldr	r2, [sp, #16]
 800a7cc:	b9d8      	cbnz	r0, 800a806 <_svfiprintf_r+0xe6>
 800a7ce:	06d0      	lsls	r0, r2, #27
 800a7d0:	bf44      	itt	mi
 800a7d2:	2320      	movmi	r3, #32
 800a7d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7d8:	0711      	lsls	r1, r2, #28
 800a7da:	bf44      	itt	mi
 800a7dc:	232b      	movmi	r3, #43	; 0x2b
 800a7de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a7e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a7e8:	d015      	beq.n	800a816 <_svfiprintf_r+0xf6>
 800a7ea:	9a07      	ldr	r2, [sp, #28]
 800a7ec:	4654      	mov	r4, sl
 800a7ee:	2000      	movs	r0, #0
 800a7f0:	f04f 0c0a 	mov.w	ip, #10
 800a7f4:	4621      	mov	r1, r4
 800a7f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7fa:	3b30      	subs	r3, #48	; 0x30
 800a7fc:	2b09      	cmp	r3, #9
 800a7fe:	d94d      	bls.n	800a89c <_svfiprintf_r+0x17c>
 800a800:	b1b0      	cbz	r0, 800a830 <_svfiprintf_r+0x110>
 800a802:	9207      	str	r2, [sp, #28]
 800a804:	e014      	b.n	800a830 <_svfiprintf_r+0x110>
 800a806:	eba0 0308 	sub.w	r3, r0, r8
 800a80a:	fa09 f303 	lsl.w	r3, r9, r3
 800a80e:	4313      	orrs	r3, r2
 800a810:	9304      	str	r3, [sp, #16]
 800a812:	46a2      	mov	sl, r4
 800a814:	e7d2      	b.n	800a7bc <_svfiprintf_r+0x9c>
 800a816:	9b03      	ldr	r3, [sp, #12]
 800a818:	1d19      	adds	r1, r3, #4
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	9103      	str	r1, [sp, #12]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	bfbb      	ittet	lt
 800a822:	425b      	neglt	r3, r3
 800a824:	f042 0202 	orrlt.w	r2, r2, #2
 800a828:	9307      	strge	r3, [sp, #28]
 800a82a:	9307      	strlt	r3, [sp, #28]
 800a82c:	bfb8      	it	lt
 800a82e:	9204      	strlt	r2, [sp, #16]
 800a830:	7823      	ldrb	r3, [r4, #0]
 800a832:	2b2e      	cmp	r3, #46	; 0x2e
 800a834:	d10c      	bne.n	800a850 <_svfiprintf_r+0x130>
 800a836:	7863      	ldrb	r3, [r4, #1]
 800a838:	2b2a      	cmp	r3, #42	; 0x2a
 800a83a:	d134      	bne.n	800a8a6 <_svfiprintf_r+0x186>
 800a83c:	9b03      	ldr	r3, [sp, #12]
 800a83e:	1d1a      	adds	r2, r3, #4
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	9203      	str	r2, [sp, #12]
 800a844:	2b00      	cmp	r3, #0
 800a846:	bfb8      	it	lt
 800a848:	f04f 33ff 	movlt.w	r3, #4294967295
 800a84c:	3402      	adds	r4, #2
 800a84e:	9305      	str	r3, [sp, #20]
 800a850:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a918 <_svfiprintf_r+0x1f8>
 800a854:	7821      	ldrb	r1, [r4, #0]
 800a856:	2203      	movs	r2, #3
 800a858:	4650      	mov	r0, sl
 800a85a:	f7f5 fcf9 	bl	8000250 <memchr>
 800a85e:	b138      	cbz	r0, 800a870 <_svfiprintf_r+0x150>
 800a860:	9b04      	ldr	r3, [sp, #16]
 800a862:	eba0 000a 	sub.w	r0, r0, sl
 800a866:	2240      	movs	r2, #64	; 0x40
 800a868:	4082      	lsls	r2, r0
 800a86a:	4313      	orrs	r3, r2
 800a86c:	3401      	adds	r4, #1
 800a86e:	9304      	str	r3, [sp, #16]
 800a870:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a874:	4825      	ldr	r0, [pc, #148]	; (800a90c <_svfiprintf_r+0x1ec>)
 800a876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a87a:	2206      	movs	r2, #6
 800a87c:	f7f5 fce8 	bl	8000250 <memchr>
 800a880:	2800      	cmp	r0, #0
 800a882:	d038      	beq.n	800a8f6 <_svfiprintf_r+0x1d6>
 800a884:	4b22      	ldr	r3, [pc, #136]	; (800a910 <_svfiprintf_r+0x1f0>)
 800a886:	bb1b      	cbnz	r3, 800a8d0 <_svfiprintf_r+0x1b0>
 800a888:	9b03      	ldr	r3, [sp, #12]
 800a88a:	3307      	adds	r3, #7
 800a88c:	f023 0307 	bic.w	r3, r3, #7
 800a890:	3308      	adds	r3, #8
 800a892:	9303      	str	r3, [sp, #12]
 800a894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a896:	4433      	add	r3, r6
 800a898:	9309      	str	r3, [sp, #36]	; 0x24
 800a89a:	e768      	b.n	800a76e <_svfiprintf_r+0x4e>
 800a89c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8a0:	460c      	mov	r4, r1
 800a8a2:	2001      	movs	r0, #1
 800a8a4:	e7a6      	b.n	800a7f4 <_svfiprintf_r+0xd4>
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	3401      	adds	r4, #1
 800a8aa:	9305      	str	r3, [sp, #20]
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	f04f 0c0a 	mov.w	ip, #10
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8b8:	3a30      	subs	r2, #48	; 0x30
 800a8ba:	2a09      	cmp	r2, #9
 800a8bc:	d903      	bls.n	800a8c6 <_svfiprintf_r+0x1a6>
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d0c6      	beq.n	800a850 <_svfiprintf_r+0x130>
 800a8c2:	9105      	str	r1, [sp, #20]
 800a8c4:	e7c4      	b.n	800a850 <_svfiprintf_r+0x130>
 800a8c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e7f0      	b.n	800a8b2 <_svfiprintf_r+0x192>
 800a8d0:	ab03      	add	r3, sp, #12
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	462a      	mov	r2, r5
 800a8d6:	4b0f      	ldr	r3, [pc, #60]	; (800a914 <_svfiprintf_r+0x1f4>)
 800a8d8:	a904      	add	r1, sp, #16
 800a8da:	4638      	mov	r0, r7
 800a8dc:	f3af 8000 	nop.w
 800a8e0:	1c42      	adds	r2, r0, #1
 800a8e2:	4606      	mov	r6, r0
 800a8e4:	d1d6      	bne.n	800a894 <_svfiprintf_r+0x174>
 800a8e6:	89ab      	ldrh	r3, [r5, #12]
 800a8e8:	065b      	lsls	r3, r3, #25
 800a8ea:	f53f af2d 	bmi.w	800a748 <_svfiprintf_r+0x28>
 800a8ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8f0:	b01d      	add	sp, #116	; 0x74
 800a8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f6:	ab03      	add	r3, sp, #12
 800a8f8:	9300      	str	r3, [sp, #0]
 800a8fa:	462a      	mov	r2, r5
 800a8fc:	4b05      	ldr	r3, [pc, #20]	; (800a914 <_svfiprintf_r+0x1f4>)
 800a8fe:	a904      	add	r1, sp, #16
 800a900:	4638      	mov	r0, r7
 800a902:	f000 f879 	bl	800a9f8 <_printf_i>
 800a906:	e7eb      	b.n	800a8e0 <_svfiprintf_r+0x1c0>
 800a908:	0800b756 	.word	0x0800b756
 800a90c:	0800b760 	.word	0x0800b760
 800a910:	00000000 	.word	0x00000000
 800a914:	0800a66d 	.word	0x0800a66d
 800a918:	0800b75c 	.word	0x0800b75c

0800a91c <_printf_common>:
 800a91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a920:	4616      	mov	r6, r2
 800a922:	4699      	mov	r9, r3
 800a924:	688a      	ldr	r2, [r1, #8]
 800a926:	690b      	ldr	r3, [r1, #16]
 800a928:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a92c:	4293      	cmp	r3, r2
 800a92e:	bfb8      	it	lt
 800a930:	4613      	movlt	r3, r2
 800a932:	6033      	str	r3, [r6, #0]
 800a934:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a938:	4607      	mov	r7, r0
 800a93a:	460c      	mov	r4, r1
 800a93c:	b10a      	cbz	r2, 800a942 <_printf_common+0x26>
 800a93e:	3301      	adds	r3, #1
 800a940:	6033      	str	r3, [r6, #0]
 800a942:	6823      	ldr	r3, [r4, #0]
 800a944:	0699      	lsls	r1, r3, #26
 800a946:	bf42      	ittt	mi
 800a948:	6833      	ldrmi	r3, [r6, #0]
 800a94a:	3302      	addmi	r3, #2
 800a94c:	6033      	strmi	r3, [r6, #0]
 800a94e:	6825      	ldr	r5, [r4, #0]
 800a950:	f015 0506 	ands.w	r5, r5, #6
 800a954:	d106      	bne.n	800a964 <_printf_common+0x48>
 800a956:	f104 0a19 	add.w	sl, r4, #25
 800a95a:	68e3      	ldr	r3, [r4, #12]
 800a95c:	6832      	ldr	r2, [r6, #0]
 800a95e:	1a9b      	subs	r3, r3, r2
 800a960:	42ab      	cmp	r3, r5
 800a962:	dc26      	bgt.n	800a9b2 <_printf_common+0x96>
 800a964:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a968:	1e13      	subs	r3, r2, #0
 800a96a:	6822      	ldr	r2, [r4, #0]
 800a96c:	bf18      	it	ne
 800a96e:	2301      	movne	r3, #1
 800a970:	0692      	lsls	r2, r2, #26
 800a972:	d42b      	bmi.n	800a9cc <_printf_common+0xb0>
 800a974:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a978:	4649      	mov	r1, r9
 800a97a:	4638      	mov	r0, r7
 800a97c:	47c0      	blx	r8
 800a97e:	3001      	adds	r0, #1
 800a980:	d01e      	beq.n	800a9c0 <_printf_common+0xa4>
 800a982:	6823      	ldr	r3, [r4, #0]
 800a984:	6922      	ldr	r2, [r4, #16]
 800a986:	f003 0306 	and.w	r3, r3, #6
 800a98a:	2b04      	cmp	r3, #4
 800a98c:	bf02      	ittt	eq
 800a98e:	68e5      	ldreq	r5, [r4, #12]
 800a990:	6833      	ldreq	r3, [r6, #0]
 800a992:	1aed      	subeq	r5, r5, r3
 800a994:	68a3      	ldr	r3, [r4, #8]
 800a996:	bf0c      	ite	eq
 800a998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a99c:	2500      	movne	r5, #0
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	bfc4      	itt	gt
 800a9a2:	1a9b      	subgt	r3, r3, r2
 800a9a4:	18ed      	addgt	r5, r5, r3
 800a9a6:	2600      	movs	r6, #0
 800a9a8:	341a      	adds	r4, #26
 800a9aa:	42b5      	cmp	r5, r6
 800a9ac:	d11a      	bne.n	800a9e4 <_printf_common+0xc8>
 800a9ae:	2000      	movs	r0, #0
 800a9b0:	e008      	b.n	800a9c4 <_printf_common+0xa8>
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	4652      	mov	r2, sl
 800a9b6:	4649      	mov	r1, r9
 800a9b8:	4638      	mov	r0, r7
 800a9ba:	47c0      	blx	r8
 800a9bc:	3001      	adds	r0, #1
 800a9be:	d103      	bne.n	800a9c8 <_printf_common+0xac>
 800a9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9c8:	3501      	adds	r5, #1
 800a9ca:	e7c6      	b.n	800a95a <_printf_common+0x3e>
 800a9cc:	18e1      	adds	r1, r4, r3
 800a9ce:	1c5a      	adds	r2, r3, #1
 800a9d0:	2030      	movs	r0, #48	; 0x30
 800a9d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9d6:	4422      	add	r2, r4
 800a9d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9e0:	3302      	adds	r3, #2
 800a9e2:	e7c7      	b.n	800a974 <_printf_common+0x58>
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	4622      	mov	r2, r4
 800a9e8:	4649      	mov	r1, r9
 800a9ea:	4638      	mov	r0, r7
 800a9ec:	47c0      	blx	r8
 800a9ee:	3001      	adds	r0, #1
 800a9f0:	d0e6      	beq.n	800a9c0 <_printf_common+0xa4>
 800a9f2:	3601      	adds	r6, #1
 800a9f4:	e7d9      	b.n	800a9aa <_printf_common+0x8e>
	...

0800a9f8 <_printf_i>:
 800a9f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9fc:	7e0f      	ldrb	r7, [r1, #24]
 800a9fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa00:	2f78      	cmp	r7, #120	; 0x78
 800aa02:	4691      	mov	r9, r2
 800aa04:	4680      	mov	r8, r0
 800aa06:	460c      	mov	r4, r1
 800aa08:	469a      	mov	sl, r3
 800aa0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa0e:	d807      	bhi.n	800aa20 <_printf_i+0x28>
 800aa10:	2f62      	cmp	r7, #98	; 0x62
 800aa12:	d80a      	bhi.n	800aa2a <_printf_i+0x32>
 800aa14:	2f00      	cmp	r7, #0
 800aa16:	f000 80d4 	beq.w	800abc2 <_printf_i+0x1ca>
 800aa1a:	2f58      	cmp	r7, #88	; 0x58
 800aa1c:	f000 80c0 	beq.w	800aba0 <_printf_i+0x1a8>
 800aa20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa28:	e03a      	b.n	800aaa0 <_printf_i+0xa8>
 800aa2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa2e:	2b15      	cmp	r3, #21
 800aa30:	d8f6      	bhi.n	800aa20 <_printf_i+0x28>
 800aa32:	a101      	add	r1, pc, #4	; (adr r1, 800aa38 <_printf_i+0x40>)
 800aa34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa38:	0800aa91 	.word	0x0800aa91
 800aa3c:	0800aaa5 	.word	0x0800aaa5
 800aa40:	0800aa21 	.word	0x0800aa21
 800aa44:	0800aa21 	.word	0x0800aa21
 800aa48:	0800aa21 	.word	0x0800aa21
 800aa4c:	0800aa21 	.word	0x0800aa21
 800aa50:	0800aaa5 	.word	0x0800aaa5
 800aa54:	0800aa21 	.word	0x0800aa21
 800aa58:	0800aa21 	.word	0x0800aa21
 800aa5c:	0800aa21 	.word	0x0800aa21
 800aa60:	0800aa21 	.word	0x0800aa21
 800aa64:	0800aba9 	.word	0x0800aba9
 800aa68:	0800aad1 	.word	0x0800aad1
 800aa6c:	0800ab63 	.word	0x0800ab63
 800aa70:	0800aa21 	.word	0x0800aa21
 800aa74:	0800aa21 	.word	0x0800aa21
 800aa78:	0800abcb 	.word	0x0800abcb
 800aa7c:	0800aa21 	.word	0x0800aa21
 800aa80:	0800aad1 	.word	0x0800aad1
 800aa84:	0800aa21 	.word	0x0800aa21
 800aa88:	0800aa21 	.word	0x0800aa21
 800aa8c:	0800ab6b 	.word	0x0800ab6b
 800aa90:	682b      	ldr	r3, [r5, #0]
 800aa92:	1d1a      	adds	r2, r3, #4
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	602a      	str	r2, [r5, #0]
 800aa98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	e09f      	b.n	800abe4 <_printf_i+0x1ec>
 800aaa4:	6820      	ldr	r0, [r4, #0]
 800aaa6:	682b      	ldr	r3, [r5, #0]
 800aaa8:	0607      	lsls	r7, r0, #24
 800aaaa:	f103 0104 	add.w	r1, r3, #4
 800aaae:	6029      	str	r1, [r5, #0]
 800aab0:	d501      	bpl.n	800aab6 <_printf_i+0xbe>
 800aab2:	681e      	ldr	r6, [r3, #0]
 800aab4:	e003      	b.n	800aabe <_printf_i+0xc6>
 800aab6:	0646      	lsls	r6, r0, #25
 800aab8:	d5fb      	bpl.n	800aab2 <_printf_i+0xba>
 800aaba:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aabe:	2e00      	cmp	r6, #0
 800aac0:	da03      	bge.n	800aaca <_printf_i+0xd2>
 800aac2:	232d      	movs	r3, #45	; 0x2d
 800aac4:	4276      	negs	r6, r6
 800aac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaca:	485a      	ldr	r0, [pc, #360]	; (800ac34 <_printf_i+0x23c>)
 800aacc:	230a      	movs	r3, #10
 800aace:	e012      	b.n	800aaf6 <_printf_i+0xfe>
 800aad0:	682b      	ldr	r3, [r5, #0]
 800aad2:	6820      	ldr	r0, [r4, #0]
 800aad4:	1d19      	adds	r1, r3, #4
 800aad6:	6029      	str	r1, [r5, #0]
 800aad8:	0605      	lsls	r5, r0, #24
 800aada:	d501      	bpl.n	800aae0 <_printf_i+0xe8>
 800aadc:	681e      	ldr	r6, [r3, #0]
 800aade:	e002      	b.n	800aae6 <_printf_i+0xee>
 800aae0:	0641      	lsls	r1, r0, #25
 800aae2:	d5fb      	bpl.n	800aadc <_printf_i+0xe4>
 800aae4:	881e      	ldrh	r6, [r3, #0]
 800aae6:	4853      	ldr	r0, [pc, #332]	; (800ac34 <_printf_i+0x23c>)
 800aae8:	2f6f      	cmp	r7, #111	; 0x6f
 800aaea:	bf0c      	ite	eq
 800aaec:	2308      	moveq	r3, #8
 800aaee:	230a      	movne	r3, #10
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aaf6:	6865      	ldr	r5, [r4, #4]
 800aaf8:	60a5      	str	r5, [r4, #8]
 800aafa:	2d00      	cmp	r5, #0
 800aafc:	bfa2      	ittt	ge
 800aafe:	6821      	ldrge	r1, [r4, #0]
 800ab00:	f021 0104 	bicge.w	r1, r1, #4
 800ab04:	6021      	strge	r1, [r4, #0]
 800ab06:	b90e      	cbnz	r6, 800ab0c <_printf_i+0x114>
 800ab08:	2d00      	cmp	r5, #0
 800ab0a:	d04b      	beq.n	800aba4 <_printf_i+0x1ac>
 800ab0c:	4615      	mov	r5, r2
 800ab0e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab12:	fb03 6711 	mls	r7, r3, r1, r6
 800ab16:	5dc7      	ldrb	r7, [r0, r7]
 800ab18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab1c:	4637      	mov	r7, r6
 800ab1e:	42bb      	cmp	r3, r7
 800ab20:	460e      	mov	r6, r1
 800ab22:	d9f4      	bls.n	800ab0e <_printf_i+0x116>
 800ab24:	2b08      	cmp	r3, #8
 800ab26:	d10b      	bne.n	800ab40 <_printf_i+0x148>
 800ab28:	6823      	ldr	r3, [r4, #0]
 800ab2a:	07de      	lsls	r6, r3, #31
 800ab2c:	d508      	bpl.n	800ab40 <_printf_i+0x148>
 800ab2e:	6923      	ldr	r3, [r4, #16]
 800ab30:	6861      	ldr	r1, [r4, #4]
 800ab32:	4299      	cmp	r1, r3
 800ab34:	bfde      	ittt	le
 800ab36:	2330      	movle	r3, #48	; 0x30
 800ab38:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab40:	1b52      	subs	r2, r2, r5
 800ab42:	6122      	str	r2, [r4, #16]
 800ab44:	f8cd a000 	str.w	sl, [sp]
 800ab48:	464b      	mov	r3, r9
 800ab4a:	aa03      	add	r2, sp, #12
 800ab4c:	4621      	mov	r1, r4
 800ab4e:	4640      	mov	r0, r8
 800ab50:	f7ff fee4 	bl	800a91c <_printf_common>
 800ab54:	3001      	adds	r0, #1
 800ab56:	d14a      	bne.n	800abee <_printf_i+0x1f6>
 800ab58:	f04f 30ff 	mov.w	r0, #4294967295
 800ab5c:	b004      	add	sp, #16
 800ab5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab62:	6823      	ldr	r3, [r4, #0]
 800ab64:	f043 0320 	orr.w	r3, r3, #32
 800ab68:	6023      	str	r3, [r4, #0]
 800ab6a:	4833      	ldr	r0, [pc, #204]	; (800ac38 <_printf_i+0x240>)
 800ab6c:	2778      	movs	r7, #120	; 0x78
 800ab6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ab72:	6823      	ldr	r3, [r4, #0]
 800ab74:	6829      	ldr	r1, [r5, #0]
 800ab76:	061f      	lsls	r7, r3, #24
 800ab78:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab7c:	d402      	bmi.n	800ab84 <_printf_i+0x18c>
 800ab7e:	065f      	lsls	r7, r3, #25
 800ab80:	bf48      	it	mi
 800ab82:	b2b6      	uxthmi	r6, r6
 800ab84:	07df      	lsls	r7, r3, #31
 800ab86:	bf48      	it	mi
 800ab88:	f043 0320 	orrmi.w	r3, r3, #32
 800ab8c:	6029      	str	r1, [r5, #0]
 800ab8e:	bf48      	it	mi
 800ab90:	6023      	strmi	r3, [r4, #0]
 800ab92:	b91e      	cbnz	r6, 800ab9c <_printf_i+0x1a4>
 800ab94:	6823      	ldr	r3, [r4, #0]
 800ab96:	f023 0320 	bic.w	r3, r3, #32
 800ab9a:	6023      	str	r3, [r4, #0]
 800ab9c:	2310      	movs	r3, #16
 800ab9e:	e7a7      	b.n	800aaf0 <_printf_i+0xf8>
 800aba0:	4824      	ldr	r0, [pc, #144]	; (800ac34 <_printf_i+0x23c>)
 800aba2:	e7e4      	b.n	800ab6e <_printf_i+0x176>
 800aba4:	4615      	mov	r5, r2
 800aba6:	e7bd      	b.n	800ab24 <_printf_i+0x12c>
 800aba8:	682b      	ldr	r3, [r5, #0]
 800abaa:	6826      	ldr	r6, [r4, #0]
 800abac:	6961      	ldr	r1, [r4, #20]
 800abae:	1d18      	adds	r0, r3, #4
 800abb0:	6028      	str	r0, [r5, #0]
 800abb2:	0635      	lsls	r5, r6, #24
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	d501      	bpl.n	800abbc <_printf_i+0x1c4>
 800abb8:	6019      	str	r1, [r3, #0]
 800abba:	e002      	b.n	800abc2 <_printf_i+0x1ca>
 800abbc:	0670      	lsls	r0, r6, #25
 800abbe:	d5fb      	bpl.n	800abb8 <_printf_i+0x1c0>
 800abc0:	8019      	strh	r1, [r3, #0]
 800abc2:	2300      	movs	r3, #0
 800abc4:	6123      	str	r3, [r4, #16]
 800abc6:	4615      	mov	r5, r2
 800abc8:	e7bc      	b.n	800ab44 <_printf_i+0x14c>
 800abca:	682b      	ldr	r3, [r5, #0]
 800abcc:	1d1a      	adds	r2, r3, #4
 800abce:	602a      	str	r2, [r5, #0]
 800abd0:	681d      	ldr	r5, [r3, #0]
 800abd2:	6862      	ldr	r2, [r4, #4]
 800abd4:	2100      	movs	r1, #0
 800abd6:	4628      	mov	r0, r5
 800abd8:	f7f5 fb3a 	bl	8000250 <memchr>
 800abdc:	b108      	cbz	r0, 800abe2 <_printf_i+0x1ea>
 800abde:	1b40      	subs	r0, r0, r5
 800abe0:	6060      	str	r0, [r4, #4]
 800abe2:	6863      	ldr	r3, [r4, #4]
 800abe4:	6123      	str	r3, [r4, #16]
 800abe6:	2300      	movs	r3, #0
 800abe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abec:	e7aa      	b.n	800ab44 <_printf_i+0x14c>
 800abee:	6923      	ldr	r3, [r4, #16]
 800abf0:	462a      	mov	r2, r5
 800abf2:	4649      	mov	r1, r9
 800abf4:	4640      	mov	r0, r8
 800abf6:	47d0      	blx	sl
 800abf8:	3001      	adds	r0, #1
 800abfa:	d0ad      	beq.n	800ab58 <_printf_i+0x160>
 800abfc:	6823      	ldr	r3, [r4, #0]
 800abfe:	079b      	lsls	r3, r3, #30
 800ac00:	d413      	bmi.n	800ac2a <_printf_i+0x232>
 800ac02:	68e0      	ldr	r0, [r4, #12]
 800ac04:	9b03      	ldr	r3, [sp, #12]
 800ac06:	4298      	cmp	r0, r3
 800ac08:	bfb8      	it	lt
 800ac0a:	4618      	movlt	r0, r3
 800ac0c:	e7a6      	b.n	800ab5c <_printf_i+0x164>
 800ac0e:	2301      	movs	r3, #1
 800ac10:	4632      	mov	r2, r6
 800ac12:	4649      	mov	r1, r9
 800ac14:	4640      	mov	r0, r8
 800ac16:	47d0      	blx	sl
 800ac18:	3001      	adds	r0, #1
 800ac1a:	d09d      	beq.n	800ab58 <_printf_i+0x160>
 800ac1c:	3501      	adds	r5, #1
 800ac1e:	68e3      	ldr	r3, [r4, #12]
 800ac20:	9903      	ldr	r1, [sp, #12]
 800ac22:	1a5b      	subs	r3, r3, r1
 800ac24:	42ab      	cmp	r3, r5
 800ac26:	dcf2      	bgt.n	800ac0e <_printf_i+0x216>
 800ac28:	e7eb      	b.n	800ac02 <_printf_i+0x20a>
 800ac2a:	2500      	movs	r5, #0
 800ac2c:	f104 0619 	add.w	r6, r4, #25
 800ac30:	e7f5      	b.n	800ac1e <_printf_i+0x226>
 800ac32:	bf00      	nop
 800ac34:	0800b767 	.word	0x0800b767
 800ac38:	0800b778 	.word	0x0800b778

0800ac3c <__sflush_r>:
 800ac3c:	898a      	ldrh	r2, [r1, #12]
 800ac3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac42:	4605      	mov	r5, r0
 800ac44:	0710      	lsls	r0, r2, #28
 800ac46:	460c      	mov	r4, r1
 800ac48:	d458      	bmi.n	800acfc <__sflush_r+0xc0>
 800ac4a:	684b      	ldr	r3, [r1, #4]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	dc05      	bgt.n	800ac5c <__sflush_r+0x20>
 800ac50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	dc02      	bgt.n	800ac5c <__sflush_r+0x20>
 800ac56:	2000      	movs	r0, #0
 800ac58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac5e:	2e00      	cmp	r6, #0
 800ac60:	d0f9      	beq.n	800ac56 <__sflush_r+0x1a>
 800ac62:	2300      	movs	r3, #0
 800ac64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac68:	682f      	ldr	r7, [r5, #0]
 800ac6a:	6a21      	ldr	r1, [r4, #32]
 800ac6c:	602b      	str	r3, [r5, #0]
 800ac6e:	d032      	beq.n	800acd6 <__sflush_r+0x9a>
 800ac70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac72:	89a3      	ldrh	r3, [r4, #12]
 800ac74:	075a      	lsls	r2, r3, #29
 800ac76:	d505      	bpl.n	800ac84 <__sflush_r+0x48>
 800ac78:	6863      	ldr	r3, [r4, #4]
 800ac7a:	1ac0      	subs	r0, r0, r3
 800ac7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac7e:	b10b      	cbz	r3, 800ac84 <__sflush_r+0x48>
 800ac80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac82:	1ac0      	subs	r0, r0, r3
 800ac84:	2300      	movs	r3, #0
 800ac86:	4602      	mov	r2, r0
 800ac88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac8a:	6a21      	ldr	r1, [r4, #32]
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	47b0      	blx	r6
 800ac90:	1c43      	adds	r3, r0, #1
 800ac92:	89a3      	ldrh	r3, [r4, #12]
 800ac94:	d106      	bne.n	800aca4 <__sflush_r+0x68>
 800ac96:	6829      	ldr	r1, [r5, #0]
 800ac98:	291d      	cmp	r1, #29
 800ac9a:	d82b      	bhi.n	800acf4 <__sflush_r+0xb8>
 800ac9c:	4a29      	ldr	r2, [pc, #164]	; (800ad44 <__sflush_r+0x108>)
 800ac9e:	410a      	asrs	r2, r1
 800aca0:	07d6      	lsls	r6, r2, #31
 800aca2:	d427      	bmi.n	800acf4 <__sflush_r+0xb8>
 800aca4:	2200      	movs	r2, #0
 800aca6:	6062      	str	r2, [r4, #4]
 800aca8:	04d9      	lsls	r1, r3, #19
 800acaa:	6922      	ldr	r2, [r4, #16]
 800acac:	6022      	str	r2, [r4, #0]
 800acae:	d504      	bpl.n	800acba <__sflush_r+0x7e>
 800acb0:	1c42      	adds	r2, r0, #1
 800acb2:	d101      	bne.n	800acb8 <__sflush_r+0x7c>
 800acb4:	682b      	ldr	r3, [r5, #0]
 800acb6:	b903      	cbnz	r3, 800acba <__sflush_r+0x7e>
 800acb8:	6560      	str	r0, [r4, #84]	; 0x54
 800acba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acbc:	602f      	str	r7, [r5, #0]
 800acbe:	2900      	cmp	r1, #0
 800acc0:	d0c9      	beq.n	800ac56 <__sflush_r+0x1a>
 800acc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acc6:	4299      	cmp	r1, r3
 800acc8:	d002      	beq.n	800acd0 <__sflush_r+0x94>
 800acca:	4628      	mov	r0, r5
 800accc:	f7ff fbce 	bl	800a46c <_free_r>
 800acd0:	2000      	movs	r0, #0
 800acd2:	6360      	str	r0, [r4, #52]	; 0x34
 800acd4:	e7c0      	b.n	800ac58 <__sflush_r+0x1c>
 800acd6:	2301      	movs	r3, #1
 800acd8:	4628      	mov	r0, r5
 800acda:	47b0      	blx	r6
 800acdc:	1c41      	adds	r1, r0, #1
 800acde:	d1c8      	bne.n	800ac72 <__sflush_r+0x36>
 800ace0:	682b      	ldr	r3, [r5, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d0c5      	beq.n	800ac72 <__sflush_r+0x36>
 800ace6:	2b1d      	cmp	r3, #29
 800ace8:	d001      	beq.n	800acee <__sflush_r+0xb2>
 800acea:	2b16      	cmp	r3, #22
 800acec:	d101      	bne.n	800acf2 <__sflush_r+0xb6>
 800acee:	602f      	str	r7, [r5, #0]
 800acf0:	e7b1      	b.n	800ac56 <__sflush_r+0x1a>
 800acf2:	89a3      	ldrh	r3, [r4, #12]
 800acf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acf8:	81a3      	strh	r3, [r4, #12]
 800acfa:	e7ad      	b.n	800ac58 <__sflush_r+0x1c>
 800acfc:	690f      	ldr	r7, [r1, #16]
 800acfe:	2f00      	cmp	r7, #0
 800ad00:	d0a9      	beq.n	800ac56 <__sflush_r+0x1a>
 800ad02:	0793      	lsls	r3, r2, #30
 800ad04:	680e      	ldr	r6, [r1, #0]
 800ad06:	bf08      	it	eq
 800ad08:	694b      	ldreq	r3, [r1, #20]
 800ad0a:	600f      	str	r7, [r1, #0]
 800ad0c:	bf18      	it	ne
 800ad0e:	2300      	movne	r3, #0
 800ad10:	eba6 0807 	sub.w	r8, r6, r7
 800ad14:	608b      	str	r3, [r1, #8]
 800ad16:	f1b8 0f00 	cmp.w	r8, #0
 800ad1a:	dd9c      	ble.n	800ac56 <__sflush_r+0x1a>
 800ad1c:	6a21      	ldr	r1, [r4, #32]
 800ad1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad20:	4643      	mov	r3, r8
 800ad22:	463a      	mov	r2, r7
 800ad24:	4628      	mov	r0, r5
 800ad26:	47b0      	blx	r6
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	dc06      	bgt.n	800ad3a <__sflush_r+0xfe>
 800ad2c:	89a3      	ldrh	r3, [r4, #12]
 800ad2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad32:	81a3      	strh	r3, [r4, #12]
 800ad34:	f04f 30ff 	mov.w	r0, #4294967295
 800ad38:	e78e      	b.n	800ac58 <__sflush_r+0x1c>
 800ad3a:	4407      	add	r7, r0
 800ad3c:	eba8 0800 	sub.w	r8, r8, r0
 800ad40:	e7e9      	b.n	800ad16 <__sflush_r+0xda>
 800ad42:	bf00      	nop
 800ad44:	dfbffffe 	.word	0xdfbffffe

0800ad48 <_fflush_r>:
 800ad48:	b538      	push	{r3, r4, r5, lr}
 800ad4a:	690b      	ldr	r3, [r1, #16]
 800ad4c:	4605      	mov	r5, r0
 800ad4e:	460c      	mov	r4, r1
 800ad50:	b913      	cbnz	r3, 800ad58 <_fflush_r+0x10>
 800ad52:	2500      	movs	r5, #0
 800ad54:	4628      	mov	r0, r5
 800ad56:	bd38      	pop	{r3, r4, r5, pc}
 800ad58:	b118      	cbz	r0, 800ad62 <_fflush_r+0x1a>
 800ad5a:	6a03      	ldr	r3, [r0, #32]
 800ad5c:	b90b      	cbnz	r3, 800ad62 <_fflush_r+0x1a>
 800ad5e:	f7ff f9e3 	bl	800a128 <__sinit>
 800ad62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d0f3      	beq.n	800ad52 <_fflush_r+0xa>
 800ad6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad6c:	07d0      	lsls	r0, r2, #31
 800ad6e:	d404      	bmi.n	800ad7a <_fflush_r+0x32>
 800ad70:	0599      	lsls	r1, r3, #22
 800ad72:	d402      	bmi.n	800ad7a <_fflush_r+0x32>
 800ad74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad76:	f7ff fb59 	bl	800a42c <__retarget_lock_acquire_recursive>
 800ad7a:	4628      	mov	r0, r5
 800ad7c:	4621      	mov	r1, r4
 800ad7e:	f7ff ff5d 	bl	800ac3c <__sflush_r>
 800ad82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad84:	07da      	lsls	r2, r3, #31
 800ad86:	4605      	mov	r5, r0
 800ad88:	d4e4      	bmi.n	800ad54 <_fflush_r+0xc>
 800ad8a:	89a3      	ldrh	r3, [r4, #12]
 800ad8c:	059b      	lsls	r3, r3, #22
 800ad8e:	d4e1      	bmi.n	800ad54 <_fflush_r+0xc>
 800ad90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad92:	f7ff fb4c 	bl	800a42e <__retarget_lock_release_recursive>
 800ad96:	e7dd      	b.n	800ad54 <_fflush_r+0xc>

0800ad98 <fiprintf>:
 800ad98:	b40e      	push	{r1, r2, r3}
 800ad9a:	b503      	push	{r0, r1, lr}
 800ad9c:	4601      	mov	r1, r0
 800ad9e:	ab03      	add	r3, sp, #12
 800ada0:	4805      	ldr	r0, [pc, #20]	; (800adb8 <fiprintf+0x20>)
 800ada2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ada6:	6800      	ldr	r0, [r0, #0]
 800ada8:	9301      	str	r3, [sp, #4]
 800adaa:	f000 f89f 	bl	800aeec <_vfiprintf_r>
 800adae:	b002      	add	sp, #8
 800adb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800adb4:	b003      	add	sp, #12
 800adb6:	4770      	bx	lr
 800adb8:	20000124 	.word	0x20000124

0800adbc <memmove>:
 800adbc:	4288      	cmp	r0, r1
 800adbe:	b510      	push	{r4, lr}
 800adc0:	eb01 0402 	add.w	r4, r1, r2
 800adc4:	d902      	bls.n	800adcc <memmove+0x10>
 800adc6:	4284      	cmp	r4, r0
 800adc8:	4623      	mov	r3, r4
 800adca:	d807      	bhi.n	800addc <memmove+0x20>
 800adcc:	1e43      	subs	r3, r0, #1
 800adce:	42a1      	cmp	r1, r4
 800add0:	d008      	beq.n	800ade4 <memmove+0x28>
 800add2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800add6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adda:	e7f8      	b.n	800adce <memmove+0x12>
 800addc:	4402      	add	r2, r0
 800adde:	4601      	mov	r1, r0
 800ade0:	428a      	cmp	r2, r1
 800ade2:	d100      	bne.n	800ade6 <memmove+0x2a>
 800ade4:	bd10      	pop	{r4, pc}
 800ade6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adee:	e7f7      	b.n	800ade0 <memmove+0x24>

0800adf0 <_sbrk_r>:
 800adf0:	b538      	push	{r3, r4, r5, lr}
 800adf2:	4d06      	ldr	r5, [pc, #24]	; (800ae0c <_sbrk_r+0x1c>)
 800adf4:	2300      	movs	r3, #0
 800adf6:	4604      	mov	r4, r0
 800adf8:	4608      	mov	r0, r1
 800adfa:	602b      	str	r3, [r5, #0]
 800adfc:	f7f6 fd48 	bl	8001890 <_sbrk>
 800ae00:	1c43      	adds	r3, r0, #1
 800ae02:	d102      	bne.n	800ae0a <_sbrk_r+0x1a>
 800ae04:	682b      	ldr	r3, [r5, #0]
 800ae06:	b103      	cbz	r3, 800ae0a <_sbrk_r+0x1a>
 800ae08:	6023      	str	r3, [r4, #0]
 800ae0a:	bd38      	pop	{r3, r4, r5, pc}
 800ae0c:	200006a4 	.word	0x200006a4

0800ae10 <memcpy>:
 800ae10:	440a      	add	r2, r1
 800ae12:	4291      	cmp	r1, r2
 800ae14:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae18:	d100      	bne.n	800ae1c <memcpy+0xc>
 800ae1a:	4770      	bx	lr
 800ae1c:	b510      	push	{r4, lr}
 800ae1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae26:	4291      	cmp	r1, r2
 800ae28:	d1f9      	bne.n	800ae1e <memcpy+0xe>
 800ae2a:	bd10      	pop	{r4, pc}

0800ae2c <abort>:
 800ae2c:	b508      	push	{r3, lr}
 800ae2e:	2006      	movs	r0, #6
 800ae30:	f000 fa34 	bl	800b29c <raise>
 800ae34:	2001      	movs	r0, #1
 800ae36:	f7f6 fcb3 	bl	80017a0 <_exit>

0800ae3a <_realloc_r>:
 800ae3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae3e:	4680      	mov	r8, r0
 800ae40:	4614      	mov	r4, r2
 800ae42:	460e      	mov	r6, r1
 800ae44:	b921      	cbnz	r1, 800ae50 <_realloc_r+0x16>
 800ae46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae4a:	4611      	mov	r1, r2
 800ae4c:	f7ff bb82 	b.w	800a554 <_malloc_r>
 800ae50:	b92a      	cbnz	r2, 800ae5e <_realloc_r+0x24>
 800ae52:	f7ff fb0b 	bl	800a46c <_free_r>
 800ae56:	4625      	mov	r5, r4
 800ae58:	4628      	mov	r0, r5
 800ae5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae5e:	f000 fa39 	bl	800b2d4 <_malloc_usable_size_r>
 800ae62:	4284      	cmp	r4, r0
 800ae64:	4607      	mov	r7, r0
 800ae66:	d802      	bhi.n	800ae6e <_realloc_r+0x34>
 800ae68:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae6c:	d812      	bhi.n	800ae94 <_realloc_r+0x5a>
 800ae6e:	4621      	mov	r1, r4
 800ae70:	4640      	mov	r0, r8
 800ae72:	f7ff fb6f 	bl	800a554 <_malloc_r>
 800ae76:	4605      	mov	r5, r0
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	d0ed      	beq.n	800ae58 <_realloc_r+0x1e>
 800ae7c:	42bc      	cmp	r4, r7
 800ae7e:	4622      	mov	r2, r4
 800ae80:	4631      	mov	r1, r6
 800ae82:	bf28      	it	cs
 800ae84:	463a      	movcs	r2, r7
 800ae86:	f7ff ffc3 	bl	800ae10 <memcpy>
 800ae8a:	4631      	mov	r1, r6
 800ae8c:	4640      	mov	r0, r8
 800ae8e:	f7ff faed 	bl	800a46c <_free_r>
 800ae92:	e7e1      	b.n	800ae58 <_realloc_r+0x1e>
 800ae94:	4635      	mov	r5, r6
 800ae96:	e7df      	b.n	800ae58 <_realloc_r+0x1e>

0800ae98 <__sfputc_r>:
 800ae98:	6893      	ldr	r3, [r2, #8]
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	b410      	push	{r4}
 800aea0:	6093      	str	r3, [r2, #8]
 800aea2:	da08      	bge.n	800aeb6 <__sfputc_r+0x1e>
 800aea4:	6994      	ldr	r4, [r2, #24]
 800aea6:	42a3      	cmp	r3, r4
 800aea8:	db01      	blt.n	800aeae <__sfputc_r+0x16>
 800aeaa:	290a      	cmp	r1, #10
 800aeac:	d103      	bne.n	800aeb6 <__sfputc_r+0x1e>
 800aeae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aeb2:	f000 b935 	b.w	800b120 <__swbuf_r>
 800aeb6:	6813      	ldr	r3, [r2, #0]
 800aeb8:	1c58      	adds	r0, r3, #1
 800aeba:	6010      	str	r0, [r2, #0]
 800aebc:	7019      	strb	r1, [r3, #0]
 800aebe:	4608      	mov	r0, r1
 800aec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aec4:	4770      	bx	lr

0800aec6 <__sfputs_r>:
 800aec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec8:	4606      	mov	r6, r0
 800aeca:	460f      	mov	r7, r1
 800aecc:	4614      	mov	r4, r2
 800aece:	18d5      	adds	r5, r2, r3
 800aed0:	42ac      	cmp	r4, r5
 800aed2:	d101      	bne.n	800aed8 <__sfputs_r+0x12>
 800aed4:	2000      	movs	r0, #0
 800aed6:	e007      	b.n	800aee8 <__sfputs_r+0x22>
 800aed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aedc:	463a      	mov	r2, r7
 800aede:	4630      	mov	r0, r6
 800aee0:	f7ff ffda 	bl	800ae98 <__sfputc_r>
 800aee4:	1c43      	adds	r3, r0, #1
 800aee6:	d1f3      	bne.n	800aed0 <__sfputs_r+0xa>
 800aee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aeec <_vfiprintf_r>:
 800aeec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef0:	460d      	mov	r5, r1
 800aef2:	b09d      	sub	sp, #116	; 0x74
 800aef4:	4614      	mov	r4, r2
 800aef6:	4698      	mov	r8, r3
 800aef8:	4606      	mov	r6, r0
 800aefa:	b118      	cbz	r0, 800af04 <_vfiprintf_r+0x18>
 800aefc:	6a03      	ldr	r3, [r0, #32]
 800aefe:	b90b      	cbnz	r3, 800af04 <_vfiprintf_r+0x18>
 800af00:	f7ff f912 	bl	800a128 <__sinit>
 800af04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af06:	07d9      	lsls	r1, r3, #31
 800af08:	d405      	bmi.n	800af16 <_vfiprintf_r+0x2a>
 800af0a:	89ab      	ldrh	r3, [r5, #12]
 800af0c:	059a      	lsls	r2, r3, #22
 800af0e:	d402      	bmi.n	800af16 <_vfiprintf_r+0x2a>
 800af10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af12:	f7ff fa8b 	bl	800a42c <__retarget_lock_acquire_recursive>
 800af16:	89ab      	ldrh	r3, [r5, #12]
 800af18:	071b      	lsls	r3, r3, #28
 800af1a:	d501      	bpl.n	800af20 <_vfiprintf_r+0x34>
 800af1c:	692b      	ldr	r3, [r5, #16]
 800af1e:	b99b      	cbnz	r3, 800af48 <_vfiprintf_r+0x5c>
 800af20:	4629      	mov	r1, r5
 800af22:	4630      	mov	r0, r6
 800af24:	f000 f93a 	bl	800b19c <__swsetup_r>
 800af28:	b170      	cbz	r0, 800af48 <_vfiprintf_r+0x5c>
 800af2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af2c:	07dc      	lsls	r4, r3, #31
 800af2e:	d504      	bpl.n	800af3a <_vfiprintf_r+0x4e>
 800af30:	f04f 30ff 	mov.w	r0, #4294967295
 800af34:	b01d      	add	sp, #116	; 0x74
 800af36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af3a:	89ab      	ldrh	r3, [r5, #12]
 800af3c:	0598      	lsls	r0, r3, #22
 800af3e:	d4f7      	bmi.n	800af30 <_vfiprintf_r+0x44>
 800af40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af42:	f7ff fa74 	bl	800a42e <__retarget_lock_release_recursive>
 800af46:	e7f3      	b.n	800af30 <_vfiprintf_r+0x44>
 800af48:	2300      	movs	r3, #0
 800af4a:	9309      	str	r3, [sp, #36]	; 0x24
 800af4c:	2320      	movs	r3, #32
 800af4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af52:	f8cd 800c 	str.w	r8, [sp, #12]
 800af56:	2330      	movs	r3, #48	; 0x30
 800af58:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b10c <_vfiprintf_r+0x220>
 800af5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af60:	f04f 0901 	mov.w	r9, #1
 800af64:	4623      	mov	r3, r4
 800af66:	469a      	mov	sl, r3
 800af68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af6c:	b10a      	cbz	r2, 800af72 <_vfiprintf_r+0x86>
 800af6e:	2a25      	cmp	r2, #37	; 0x25
 800af70:	d1f9      	bne.n	800af66 <_vfiprintf_r+0x7a>
 800af72:	ebba 0b04 	subs.w	fp, sl, r4
 800af76:	d00b      	beq.n	800af90 <_vfiprintf_r+0xa4>
 800af78:	465b      	mov	r3, fp
 800af7a:	4622      	mov	r2, r4
 800af7c:	4629      	mov	r1, r5
 800af7e:	4630      	mov	r0, r6
 800af80:	f7ff ffa1 	bl	800aec6 <__sfputs_r>
 800af84:	3001      	adds	r0, #1
 800af86:	f000 80a9 	beq.w	800b0dc <_vfiprintf_r+0x1f0>
 800af8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af8c:	445a      	add	r2, fp
 800af8e:	9209      	str	r2, [sp, #36]	; 0x24
 800af90:	f89a 3000 	ldrb.w	r3, [sl]
 800af94:	2b00      	cmp	r3, #0
 800af96:	f000 80a1 	beq.w	800b0dc <_vfiprintf_r+0x1f0>
 800af9a:	2300      	movs	r3, #0
 800af9c:	f04f 32ff 	mov.w	r2, #4294967295
 800afa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afa4:	f10a 0a01 	add.w	sl, sl, #1
 800afa8:	9304      	str	r3, [sp, #16]
 800afaa:	9307      	str	r3, [sp, #28]
 800afac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afb0:	931a      	str	r3, [sp, #104]	; 0x68
 800afb2:	4654      	mov	r4, sl
 800afb4:	2205      	movs	r2, #5
 800afb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afba:	4854      	ldr	r0, [pc, #336]	; (800b10c <_vfiprintf_r+0x220>)
 800afbc:	f7f5 f948 	bl	8000250 <memchr>
 800afc0:	9a04      	ldr	r2, [sp, #16]
 800afc2:	b9d8      	cbnz	r0, 800affc <_vfiprintf_r+0x110>
 800afc4:	06d1      	lsls	r1, r2, #27
 800afc6:	bf44      	itt	mi
 800afc8:	2320      	movmi	r3, #32
 800afca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afce:	0713      	lsls	r3, r2, #28
 800afd0:	bf44      	itt	mi
 800afd2:	232b      	movmi	r3, #43	; 0x2b
 800afd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afd8:	f89a 3000 	ldrb.w	r3, [sl]
 800afdc:	2b2a      	cmp	r3, #42	; 0x2a
 800afde:	d015      	beq.n	800b00c <_vfiprintf_r+0x120>
 800afe0:	9a07      	ldr	r2, [sp, #28]
 800afe2:	4654      	mov	r4, sl
 800afe4:	2000      	movs	r0, #0
 800afe6:	f04f 0c0a 	mov.w	ip, #10
 800afea:	4621      	mov	r1, r4
 800afec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aff0:	3b30      	subs	r3, #48	; 0x30
 800aff2:	2b09      	cmp	r3, #9
 800aff4:	d94d      	bls.n	800b092 <_vfiprintf_r+0x1a6>
 800aff6:	b1b0      	cbz	r0, 800b026 <_vfiprintf_r+0x13a>
 800aff8:	9207      	str	r2, [sp, #28]
 800affa:	e014      	b.n	800b026 <_vfiprintf_r+0x13a>
 800affc:	eba0 0308 	sub.w	r3, r0, r8
 800b000:	fa09 f303 	lsl.w	r3, r9, r3
 800b004:	4313      	orrs	r3, r2
 800b006:	9304      	str	r3, [sp, #16]
 800b008:	46a2      	mov	sl, r4
 800b00a:	e7d2      	b.n	800afb2 <_vfiprintf_r+0xc6>
 800b00c:	9b03      	ldr	r3, [sp, #12]
 800b00e:	1d19      	adds	r1, r3, #4
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	9103      	str	r1, [sp, #12]
 800b014:	2b00      	cmp	r3, #0
 800b016:	bfbb      	ittet	lt
 800b018:	425b      	neglt	r3, r3
 800b01a:	f042 0202 	orrlt.w	r2, r2, #2
 800b01e:	9307      	strge	r3, [sp, #28]
 800b020:	9307      	strlt	r3, [sp, #28]
 800b022:	bfb8      	it	lt
 800b024:	9204      	strlt	r2, [sp, #16]
 800b026:	7823      	ldrb	r3, [r4, #0]
 800b028:	2b2e      	cmp	r3, #46	; 0x2e
 800b02a:	d10c      	bne.n	800b046 <_vfiprintf_r+0x15a>
 800b02c:	7863      	ldrb	r3, [r4, #1]
 800b02e:	2b2a      	cmp	r3, #42	; 0x2a
 800b030:	d134      	bne.n	800b09c <_vfiprintf_r+0x1b0>
 800b032:	9b03      	ldr	r3, [sp, #12]
 800b034:	1d1a      	adds	r2, r3, #4
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	9203      	str	r2, [sp, #12]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	bfb8      	it	lt
 800b03e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b042:	3402      	adds	r4, #2
 800b044:	9305      	str	r3, [sp, #20]
 800b046:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b11c <_vfiprintf_r+0x230>
 800b04a:	7821      	ldrb	r1, [r4, #0]
 800b04c:	2203      	movs	r2, #3
 800b04e:	4650      	mov	r0, sl
 800b050:	f7f5 f8fe 	bl	8000250 <memchr>
 800b054:	b138      	cbz	r0, 800b066 <_vfiprintf_r+0x17a>
 800b056:	9b04      	ldr	r3, [sp, #16]
 800b058:	eba0 000a 	sub.w	r0, r0, sl
 800b05c:	2240      	movs	r2, #64	; 0x40
 800b05e:	4082      	lsls	r2, r0
 800b060:	4313      	orrs	r3, r2
 800b062:	3401      	adds	r4, #1
 800b064:	9304      	str	r3, [sp, #16]
 800b066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b06a:	4829      	ldr	r0, [pc, #164]	; (800b110 <_vfiprintf_r+0x224>)
 800b06c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b070:	2206      	movs	r2, #6
 800b072:	f7f5 f8ed 	bl	8000250 <memchr>
 800b076:	2800      	cmp	r0, #0
 800b078:	d03f      	beq.n	800b0fa <_vfiprintf_r+0x20e>
 800b07a:	4b26      	ldr	r3, [pc, #152]	; (800b114 <_vfiprintf_r+0x228>)
 800b07c:	bb1b      	cbnz	r3, 800b0c6 <_vfiprintf_r+0x1da>
 800b07e:	9b03      	ldr	r3, [sp, #12]
 800b080:	3307      	adds	r3, #7
 800b082:	f023 0307 	bic.w	r3, r3, #7
 800b086:	3308      	adds	r3, #8
 800b088:	9303      	str	r3, [sp, #12]
 800b08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b08c:	443b      	add	r3, r7
 800b08e:	9309      	str	r3, [sp, #36]	; 0x24
 800b090:	e768      	b.n	800af64 <_vfiprintf_r+0x78>
 800b092:	fb0c 3202 	mla	r2, ip, r2, r3
 800b096:	460c      	mov	r4, r1
 800b098:	2001      	movs	r0, #1
 800b09a:	e7a6      	b.n	800afea <_vfiprintf_r+0xfe>
 800b09c:	2300      	movs	r3, #0
 800b09e:	3401      	adds	r4, #1
 800b0a0:	9305      	str	r3, [sp, #20]
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	f04f 0c0a 	mov.w	ip, #10
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0ae:	3a30      	subs	r2, #48	; 0x30
 800b0b0:	2a09      	cmp	r2, #9
 800b0b2:	d903      	bls.n	800b0bc <_vfiprintf_r+0x1d0>
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d0c6      	beq.n	800b046 <_vfiprintf_r+0x15a>
 800b0b8:	9105      	str	r1, [sp, #20]
 800b0ba:	e7c4      	b.n	800b046 <_vfiprintf_r+0x15a>
 800b0bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0c0:	4604      	mov	r4, r0
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e7f0      	b.n	800b0a8 <_vfiprintf_r+0x1bc>
 800b0c6:	ab03      	add	r3, sp, #12
 800b0c8:	9300      	str	r3, [sp, #0]
 800b0ca:	462a      	mov	r2, r5
 800b0cc:	4b12      	ldr	r3, [pc, #72]	; (800b118 <_vfiprintf_r+0x22c>)
 800b0ce:	a904      	add	r1, sp, #16
 800b0d0:	4630      	mov	r0, r6
 800b0d2:	f3af 8000 	nop.w
 800b0d6:	4607      	mov	r7, r0
 800b0d8:	1c78      	adds	r0, r7, #1
 800b0da:	d1d6      	bne.n	800b08a <_vfiprintf_r+0x19e>
 800b0dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0de:	07d9      	lsls	r1, r3, #31
 800b0e0:	d405      	bmi.n	800b0ee <_vfiprintf_r+0x202>
 800b0e2:	89ab      	ldrh	r3, [r5, #12]
 800b0e4:	059a      	lsls	r2, r3, #22
 800b0e6:	d402      	bmi.n	800b0ee <_vfiprintf_r+0x202>
 800b0e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0ea:	f7ff f9a0 	bl	800a42e <__retarget_lock_release_recursive>
 800b0ee:	89ab      	ldrh	r3, [r5, #12]
 800b0f0:	065b      	lsls	r3, r3, #25
 800b0f2:	f53f af1d 	bmi.w	800af30 <_vfiprintf_r+0x44>
 800b0f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0f8:	e71c      	b.n	800af34 <_vfiprintf_r+0x48>
 800b0fa:	ab03      	add	r3, sp, #12
 800b0fc:	9300      	str	r3, [sp, #0]
 800b0fe:	462a      	mov	r2, r5
 800b100:	4b05      	ldr	r3, [pc, #20]	; (800b118 <_vfiprintf_r+0x22c>)
 800b102:	a904      	add	r1, sp, #16
 800b104:	4630      	mov	r0, r6
 800b106:	f7ff fc77 	bl	800a9f8 <_printf_i>
 800b10a:	e7e4      	b.n	800b0d6 <_vfiprintf_r+0x1ea>
 800b10c:	0800b756 	.word	0x0800b756
 800b110:	0800b760 	.word	0x0800b760
 800b114:	00000000 	.word	0x00000000
 800b118:	0800aec7 	.word	0x0800aec7
 800b11c:	0800b75c 	.word	0x0800b75c

0800b120 <__swbuf_r>:
 800b120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b122:	460e      	mov	r6, r1
 800b124:	4614      	mov	r4, r2
 800b126:	4605      	mov	r5, r0
 800b128:	b118      	cbz	r0, 800b132 <__swbuf_r+0x12>
 800b12a:	6a03      	ldr	r3, [r0, #32]
 800b12c:	b90b      	cbnz	r3, 800b132 <__swbuf_r+0x12>
 800b12e:	f7fe fffb 	bl	800a128 <__sinit>
 800b132:	69a3      	ldr	r3, [r4, #24]
 800b134:	60a3      	str	r3, [r4, #8]
 800b136:	89a3      	ldrh	r3, [r4, #12]
 800b138:	071a      	lsls	r2, r3, #28
 800b13a:	d525      	bpl.n	800b188 <__swbuf_r+0x68>
 800b13c:	6923      	ldr	r3, [r4, #16]
 800b13e:	b31b      	cbz	r3, 800b188 <__swbuf_r+0x68>
 800b140:	6823      	ldr	r3, [r4, #0]
 800b142:	6922      	ldr	r2, [r4, #16]
 800b144:	1a98      	subs	r0, r3, r2
 800b146:	6963      	ldr	r3, [r4, #20]
 800b148:	b2f6      	uxtb	r6, r6
 800b14a:	4283      	cmp	r3, r0
 800b14c:	4637      	mov	r7, r6
 800b14e:	dc04      	bgt.n	800b15a <__swbuf_r+0x3a>
 800b150:	4621      	mov	r1, r4
 800b152:	4628      	mov	r0, r5
 800b154:	f7ff fdf8 	bl	800ad48 <_fflush_r>
 800b158:	b9e0      	cbnz	r0, 800b194 <__swbuf_r+0x74>
 800b15a:	68a3      	ldr	r3, [r4, #8]
 800b15c:	3b01      	subs	r3, #1
 800b15e:	60a3      	str	r3, [r4, #8]
 800b160:	6823      	ldr	r3, [r4, #0]
 800b162:	1c5a      	adds	r2, r3, #1
 800b164:	6022      	str	r2, [r4, #0]
 800b166:	701e      	strb	r6, [r3, #0]
 800b168:	6962      	ldr	r2, [r4, #20]
 800b16a:	1c43      	adds	r3, r0, #1
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d004      	beq.n	800b17a <__swbuf_r+0x5a>
 800b170:	89a3      	ldrh	r3, [r4, #12]
 800b172:	07db      	lsls	r3, r3, #31
 800b174:	d506      	bpl.n	800b184 <__swbuf_r+0x64>
 800b176:	2e0a      	cmp	r6, #10
 800b178:	d104      	bne.n	800b184 <__swbuf_r+0x64>
 800b17a:	4621      	mov	r1, r4
 800b17c:	4628      	mov	r0, r5
 800b17e:	f7ff fde3 	bl	800ad48 <_fflush_r>
 800b182:	b938      	cbnz	r0, 800b194 <__swbuf_r+0x74>
 800b184:	4638      	mov	r0, r7
 800b186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b188:	4621      	mov	r1, r4
 800b18a:	4628      	mov	r0, r5
 800b18c:	f000 f806 	bl	800b19c <__swsetup_r>
 800b190:	2800      	cmp	r0, #0
 800b192:	d0d5      	beq.n	800b140 <__swbuf_r+0x20>
 800b194:	f04f 37ff 	mov.w	r7, #4294967295
 800b198:	e7f4      	b.n	800b184 <__swbuf_r+0x64>
	...

0800b19c <__swsetup_r>:
 800b19c:	b538      	push	{r3, r4, r5, lr}
 800b19e:	4b2a      	ldr	r3, [pc, #168]	; (800b248 <__swsetup_r+0xac>)
 800b1a0:	4605      	mov	r5, r0
 800b1a2:	6818      	ldr	r0, [r3, #0]
 800b1a4:	460c      	mov	r4, r1
 800b1a6:	b118      	cbz	r0, 800b1b0 <__swsetup_r+0x14>
 800b1a8:	6a03      	ldr	r3, [r0, #32]
 800b1aa:	b90b      	cbnz	r3, 800b1b0 <__swsetup_r+0x14>
 800b1ac:	f7fe ffbc 	bl	800a128 <__sinit>
 800b1b0:	89a3      	ldrh	r3, [r4, #12]
 800b1b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1b6:	0718      	lsls	r0, r3, #28
 800b1b8:	d422      	bmi.n	800b200 <__swsetup_r+0x64>
 800b1ba:	06d9      	lsls	r1, r3, #27
 800b1bc:	d407      	bmi.n	800b1ce <__swsetup_r+0x32>
 800b1be:	2309      	movs	r3, #9
 800b1c0:	602b      	str	r3, [r5, #0]
 800b1c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b1c6:	81a3      	strh	r3, [r4, #12]
 800b1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1cc:	e034      	b.n	800b238 <__swsetup_r+0x9c>
 800b1ce:	0758      	lsls	r0, r3, #29
 800b1d0:	d512      	bpl.n	800b1f8 <__swsetup_r+0x5c>
 800b1d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1d4:	b141      	cbz	r1, 800b1e8 <__swsetup_r+0x4c>
 800b1d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1da:	4299      	cmp	r1, r3
 800b1dc:	d002      	beq.n	800b1e4 <__swsetup_r+0x48>
 800b1de:	4628      	mov	r0, r5
 800b1e0:	f7ff f944 	bl	800a46c <_free_r>
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	6363      	str	r3, [r4, #52]	; 0x34
 800b1e8:	89a3      	ldrh	r3, [r4, #12]
 800b1ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b1ee:	81a3      	strh	r3, [r4, #12]
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	6063      	str	r3, [r4, #4]
 800b1f4:	6923      	ldr	r3, [r4, #16]
 800b1f6:	6023      	str	r3, [r4, #0]
 800b1f8:	89a3      	ldrh	r3, [r4, #12]
 800b1fa:	f043 0308 	orr.w	r3, r3, #8
 800b1fe:	81a3      	strh	r3, [r4, #12]
 800b200:	6923      	ldr	r3, [r4, #16]
 800b202:	b94b      	cbnz	r3, 800b218 <__swsetup_r+0x7c>
 800b204:	89a3      	ldrh	r3, [r4, #12]
 800b206:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b20a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b20e:	d003      	beq.n	800b218 <__swsetup_r+0x7c>
 800b210:	4621      	mov	r1, r4
 800b212:	4628      	mov	r0, r5
 800b214:	f000 f88c 	bl	800b330 <__smakebuf_r>
 800b218:	89a0      	ldrh	r0, [r4, #12]
 800b21a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b21e:	f010 0301 	ands.w	r3, r0, #1
 800b222:	d00a      	beq.n	800b23a <__swsetup_r+0x9e>
 800b224:	2300      	movs	r3, #0
 800b226:	60a3      	str	r3, [r4, #8]
 800b228:	6963      	ldr	r3, [r4, #20]
 800b22a:	425b      	negs	r3, r3
 800b22c:	61a3      	str	r3, [r4, #24]
 800b22e:	6923      	ldr	r3, [r4, #16]
 800b230:	b943      	cbnz	r3, 800b244 <__swsetup_r+0xa8>
 800b232:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b236:	d1c4      	bne.n	800b1c2 <__swsetup_r+0x26>
 800b238:	bd38      	pop	{r3, r4, r5, pc}
 800b23a:	0781      	lsls	r1, r0, #30
 800b23c:	bf58      	it	pl
 800b23e:	6963      	ldrpl	r3, [r4, #20]
 800b240:	60a3      	str	r3, [r4, #8]
 800b242:	e7f4      	b.n	800b22e <__swsetup_r+0x92>
 800b244:	2000      	movs	r0, #0
 800b246:	e7f7      	b.n	800b238 <__swsetup_r+0x9c>
 800b248:	20000124 	.word	0x20000124

0800b24c <_raise_r>:
 800b24c:	291f      	cmp	r1, #31
 800b24e:	b538      	push	{r3, r4, r5, lr}
 800b250:	4604      	mov	r4, r0
 800b252:	460d      	mov	r5, r1
 800b254:	d904      	bls.n	800b260 <_raise_r+0x14>
 800b256:	2316      	movs	r3, #22
 800b258:	6003      	str	r3, [r0, #0]
 800b25a:	f04f 30ff 	mov.w	r0, #4294967295
 800b25e:	bd38      	pop	{r3, r4, r5, pc}
 800b260:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b262:	b112      	cbz	r2, 800b26a <_raise_r+0x1e>
 800b264:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b268:	b94b      	cbnz	r3, 800b27e <_raise_r+0x32>
 800b26a:	4620      	mov	r0, r4
 800b26c:	f000 f830 	bl	800b2d0 <_getpid_r>
 800b270:	462a      	mov	r2, r5
 800b272:	4601      	mov	r1, r0
 800b274:	4620      	mov	r0, r4
 800b276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b27a:	f000 b817 	b.w	800b2ac <_kill_r>
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d00a      	beq.n	800b298 <_raise_r+0x4c>
 800b282:	1c59      	adds	r1, r3, #1
 800b284:	d103      	bne.n	800b28e <_raise_r+0x42>
 800b286:	2316      	movs	r3, #22
 800b288:	6003      	str	r3, [r0, #0]
 800b28a:	2001      	movs	r0, #1
 800b28c:	e7e7      	b.n	800b25e <_raise_r+0x12>
 800b28e:	2400      	movs	r4, #0
 800b290:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b294:	4628      	mov	r0, r5
 800b296:	4798      	blx	r3
 800b298:	2000      	movs	r0, #0
 800b29a:	e7e0      	b.n	800b25e <_raise_r+0x12>

0800b29c <raise>:
 800b29c:	4b02      	ldr	r3, [pc, #8]	; (800b2a8 <raise+0xc>)
 800b29e:	4601      	mov	r1, r0
 800b2a0:	6818      	ldr	r0, [r3, #0]
 800b2a2:	f7ff bfd3 	b.w	800b24c <_raise_r>
 800b2a6:	bf00      	nop
 800b2a8:	20000124 	.word	0x20000124

0800b2ac <_kill_r>:
 800b2ac:	b538      	push	{r3, r4, r5, lr}
 800b2ae:	4d07      	ldr	r5, [pc, #28]	; (800b2cc <_kill_r+0x20>)
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	4608      	mov	r0, r1
 800b2b6:	4611      	mov	r1, r2
 800b2b8:	602b      	str	r3, [r5, #0]
 800b2ba:	f7f6 fa61 	bl	8001780 <_kill>
 800b2be:	1c43      	adds	r3, r0, #1
 800b2c0:	d102      	bne.n	800b2c8 <_kill_r+0x1c>
 800b2c2:	682b      	ldr	r3, [r5, #0]
 800b2c4:	b103      	cbz	r3, 800b2c8 <_kill_r+0x1c>
 800b2c6:	6023      	str	r3, [r4, #0]
 800b2c8:	bd38      	pop	{r3, r4, r5, pc}
 800b2ca:	bf00      	nop
 800b2cc:	200006a4 	.word	0x200006a4

0800b2d0 <_getpid_r>:
 800b2d0:	f7f6 ba4e 	b.w	8001770 <_getpid>

0800b2d4 <_malloc_usable_size_r>:
 800b2d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2d8:	1f18      	subs	r0, r3, #4
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	bfbc      	itt	lt
 800b2de:	580b      	ldrlt	r3, [r1, r0]
 800b2e0:	18c0      	addlt	r0, r0, r3
 800b2e2:	4770      	bx	lr

0800b2e4 <__swhatbuf_r>:
 800b2e4:	b570      	push	{r4, r5, r6, lr}
 800b2e6:	460c      	mov	r4, r1
 800b2e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ec:	2900      	cmp	r1, #0
 800b2ee:	b096      	sub	sp, #88	; 0x58
 800b2f0:	4615      	mov	r5, r2
 800b2f2:	461e      	mov	r6, r3
 800b2f4:	da0d      	bge.n	800b312 <__swhatbuf_r+0x2e>
 800b2f6:	89a3      	ldrh	r3, [r4, #12]
 800b2f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b2fc:	f04f 0100 	mov.w	r1, #0
 800b300:	bf0c      	ite	eq
 800b302:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b306:	2340      	movne	r3, #64	; 0x40
 800b308:	2000      	movs	r0, #0
 800b30a:	6031      	str	r1, [r6, #0]
 800b30c:	602b      	str	r3, [r5, #0]
 800b30e:	b016      	add	sp, #88	; 0x58
 800b310:	bd70      	pop	{r4, r5, r6, pc}
 800b312:	466a      	mov	r2, sp
 800b314:	f000 f848 	bl	800b3a8 <_fstat_r>
 800b318:	2800      	cmp	r0, #0
 800b31a:	dbec      	blt.n	800b2f6 <__swhatbuf_r+0x12>
 800b31c:	9901      	ldr	r1, [sp, #4]
 800b31e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b322:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b326:	4259      	negs	r1, r3
 800b328:	4159      	adcs	r1, r3
 800b32a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b32e:	e7eb      	b.n	800b308 <__swhatbuf_r+0x24>

0800b330 <__smakebuf_r>:
 800b330:	898b      	ldrh	r3, [r1, #12]
 800b332:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b334:	079d      	lsls	r5, r3, #30
 800b336:	4606      	mov	r6, r0
 800b338:	460c      	mov	r4, r1
 800b33a:	d507      	bpl.n	800b34c <__smakebuf_r+0x1c>
 800b33c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b340:	6023      	str	r3, [r4, #0]
 800b342:	6123      	str	r3, [r4, #16]
 800b344:	2301      	movs	r3, #1
 800b346:	6163      	str	r3, [r4, #20]
 800b348:	b002      	add	sp, #8
 800b34a:	bd70      	pop	{r4, r5, r6, pc}
 800b34c:	ab01      	add	r3, sp, #4
 800b34e:	466a      	mov	r2, sp
 800b350:	f7ff ffc8 	bl	800b2e4 <__swhatbuf_r>
 800b354:	9900      	ldr	r1, [sp, #0]
 800b356:	4605      	mov	r5, r0
 800b358:	4630      	mov	r0, r6
 800b35a:	f7ff f8fb 	bl	800a554 <_malloc_r>
 800b35e:	b948      	cbnz	r0, 800b374 <__smakebuf_r+0x44>
 800b360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b364:	059a      	lsls	r2, r3, #22
 800b366:	d4ef      	bmi.n	800b348 <__smakebuf_r+0x18>
 800b368:	f023 0303 	bic.w	r3, r3, #3
 800b36c:	f043 0302 	orr.w	r3, r3, #2
 800b370:	81a3      	strh	r3, [r4, #12]
 800b372:	e7e3      	b.n	800b33c <__smakebuf_r+0xc>
 800b374:	89a3      	ldrh	r3, [r4, #12]
 800b376:	6020      	str	r0, [r4, #0]
 800b378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b37c:	81a3      	strh	r3, [r4, #12]
 800b37e:	9b00      	ldr	r3, [sp, #0]
 800b380:	6163      	str	r3, [r4, #20]
 800b382:	9b01      	ldr	r3, [sp, #4]
 800b384:	6120      	str	r0, [r4, #16]
 800b386:	b15b      	cbz	r3, 800b3a0 <__smakebuf_r+0x70>
 800b388:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b38c:	4630      	mov	r0, r6
 800b38e:	f000 f81d 	bl	800b3cc <_isatty_r>
 800b392:	b128      	cbz	r0, 800b3a0 <__smakebuf_r+0x70>
 800b394:	89a3      	ldrh	r3, [r4, #12]
 800b396:	f023 0303 	bic.w	r3, r3, #3
 800b39a:	f043 0301 	orr.w	r3, r3, #1
 800b39e:	81a3      	strh	r3, [r4, #12]
 800b3a0:	89a3      	ldrh	r3, [r4, #12]
 800b3a2:	431d      	orrs	r5, r3
 800b3a4:	81a5      	strh	r5, [r4, #12]
 800b3a6:	e7cf      	b.n	800b348 <__smakebuf_r+0x18>

0800b3a8 <_fstat_r>:
 800b3a8:	b538      	push	{r3, r4, r5, lr}
 800b3aa:	4d07      	ldr	r5, [pc, #28]	; (800b3c8 <_fstat_r+0x20>)
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	4604      	mov	r4, r0
 800b3b0:	4608      	mov	r0, r1
 800b3b2:	4611      	mov	r1, r2
 800b3b4:	602b      	str	r3, [r5, #0]
 800b3b6:	f7f6 fa42 	bl	800183e <_fstat>
 800b3ba:	1c43      	adds	r3, r0, #1
 800b3bc:	d102      	bne.n	800b3c4 <_fstat_r+0x1c>
 800b3be:	682b      	ldr	r3, [r5, #0]
 800b3c0:	b103      	cbz	r3, 800b3c4 <_fstat_r+0x1c>
 800b3c2:	6023      	str	r3, [r4, #0]
 800b3c4:	bd38      	pop	{r3, r4, r5, pc}
 800b3c6:	bf00      	nop
 800b3c8:	200006a4 	.word	0x200006a4

0800b3cc <_isatty_r>:
 800b3cc:	b538      	push	{r3, r4, r5, lr}
 800b3ce:	4d06      	ldr	r5, [pc, #24]	; (800b3e8 <_isatty_r+0x1c>)
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	4608      	mov	r0, r1
 800b3d6:	602b      	str	r3, [r5, #0]
 800b3d8:	f7f6 fa41 	bl	800185e <_isatty>
 800b3dc:	1c43      	adds	r3, r0, #1
 800b3de:	d102      	bne.n	800b3e6 <_isatty_r+0x1a>
 800b3e0:	682b      	ldr	r3, [r5, #0]
 800b3e2:	b103      	cbz	r3, 800b3e6 <_isatty_r+0x1a>
 800b3e4:	6023      	str	r3, [r4, #0]
 800b3e6:	bd38      	pop	{r3, r4, r5, pc}
 800b3e8:	200006a4 	.word	0x200006a4

0800b3ec <_init>:
 800b3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ee:	bf00      	nop
 800b3f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3f2:	bc08      	pop	{r3}
 800b3f4:	469e      	mov	lr, r3
 800b3f6:	4770      	bx	lr

0800b3f8 <_fini>:
 800b3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3fa:	bf00      	nop
 800b3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3fe:	bc08      	pop	{r3}
 800b400:	469e      	mov	lr, r3
 800b402:	4770      	bx	lr
