
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b240  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  0800b420  0800b420  0001b420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7a8  0800b7a8  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7a8  0800b7a8  0001b7a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7b0  0800b7b0  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7b0  0800b7b0  0001b7b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b7b4  0800b7b4  0001b7b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  0800b7b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  20000130  0800b8e8  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  0800b8e8  000206bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ce1b  00000000  00000000  000201a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c3f  00000000  00000000  0003cfbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001698  00000000  00000000  00040c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001167  00000000  00000000  00042298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a934  00000000  00000000  000433ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ccc7  00000000  00000000  0006dd33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001147a7  00000000  00000000  0008a9fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b8c  00000000  00000000  0019f1a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d3  00000000  00000000  001a5d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000130 	.word	0x20000130
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b408 	.word	0x0800b408

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000134 	.word	0x20000134
 800021c:	0800b408 	.word	0x0800b408

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b970 	b.w	8000dc4 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9e08      	ldr	r6, [sp, #32]
 8000b02:	460d      	mov	r5, r1
 8000b04:	4604      	mov	r4, r0
 8000b06:	460f      	mov	r7, r1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d14a      	bne.n	8000ba2 <__udivmoddi4+0xa6>
 8000b0c:	428a      	cmp	r2, r1
 8000b0e:	4694      	mov	ip, r2
 8000b10:	d965      	bls.n	8000bde <__udivmoddi4+0xe2>
 8000b12:	fab2 f382 	clz	r3, r2
 8000b16:	b143      	cbz	r3, 8000b2a <__udivmoddi4+0x2e>
 8000b18:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b1c:	f1c3 0220 	rsb	r2, r3, #32
 8000b20:	409f      	lsls	r7, r3
 8000b22:	fa20 f202 	lsr.w	r2, r0, r2
 8000b26:	4317      	orrs	r7, r2
 8000b28:	409c      	lsls	r4, r3
 8000b2a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b2e:	fa1f f58c 	uxth.w	r5, ip
 8000b32:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b36:	0c22      	lsrs	r2, r4, #16
 8000b38:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b3c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b40:	fb01 f005 	mul.w	r0, r1, r5
 8000b44:	4290      	cmp	r0, r2
 8000b46:	d90a      	bls.n	8000b5e <__udivmoddi4+0x62>
 8000b48:	eb1c 0202 	adds.w	r2, ip, r2
 8000b4c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b50:	f080 811c 	bcs.w	8000d8c <__udivmoddi4+0x290>
 8000b54:	4290      	cmp	r0, r2
 8000b56:	f240 8119 	bls.w	8000d8c <__udivmoddi4+0x290>
 8000b5a:	3902      	subs	r1, #2
 8000b5c:	4462      	add	r2, ip
 8000b5e:	1a12      	subs	r2, r2, r0
 8000b60:	b2a4      	uxth	r4, r4
 8000b62:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b66:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b6a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b6e:	fb00 f505 	mul.w	r5, r0, r5
 8000b72:	42a5      	cmp	r5, r4
 8000b74:	d90a      	bls.n	8000b8c <__udivmoddi4+0x90>
 8000b76:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b7e:	f080 8107 	bcs.w	8000d90 <__udivmoddi4+0x294>
 8000b82:	42a5      	cmp	r5, r4
 8000b84:	f240 8104 	bls.w	8000d90 <__udivmoddi4+0x294>
 8000b88:	4464      	add	r4, ip
 8000b8a:	3802      	subs	r0, #2
 8000b8c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b90:	1b64      	subs	r4, r4, r5
 8000b92:	2100      	movs	r1, #0
 8000b94:	b11e      	cbz	r6, 8000b9e <__udivmoddi4+0xa2>
 8000b96:	40dc      	lsrs	r4, r3
 8000b98:	2300      	movs	r3, #0
 8000b9a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0xbc>
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	f000 80ed 	beq.w	8000d86 <__udivmoddi4+0x28a>
 8000bac:	2100      	movs	r1, #0
 8000bae:	e9c6 0500 	strd	r0, r5, [r6]
 8000bb2:	4608      	mov	r0, r1
 8000bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb8:	fab3 f183 	clz	r1, r3
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	d149      	bne.n	8000c54 <__udivmoddi4+0x158>
 8000bc0:	42ab      	cmp	r3, r5
 8000bc2:	d302      	bcc.n	8000bca <__udivmoddi4+0xce>
 8000bc4:	4282      	cmp	r2, r0
 8000bc6:	f200 80f8 	bhi.w	8000dba <__udivmoddi4+0x2be>
 8000bca:	1a84      	subs	r4, r0, r2
 8000bcc:	eb65 0203 	sbc.w	r2, r5, r3
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d0e2      	beq.n	8000b9e <__udivmoddi4+0xa2>
 8000bd8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bdc:	e7df      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000bde:	b902      	cbnz	r2, 8000be2 <__udivmoddi4+0xe6>
 8000be0:	deff      	udf	#255	; 0xff
 8000be2:	fab2 f382 	clz	r3, r2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8090 	bne.w	8000d0c <__udivmoddi4+0x210>
 8000bec:	1a8a      	subs	r2, r1, r2
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f fe8c 	uxth.w	lr, ip
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bfc:	fb07 2015 	mls	r0, r7, r5, r2
 8000c00:	0c22      	lsrs	r2, r4, #16
 8000c02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c06:	fb0e f005 	mul.w	r0, lr, r5
 8000c0a:	4290      	cmp	r0, r2
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x124>
 8000c0e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c12:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x122>
 8000c18:	4290      	cmp	r0, r2
 8000c1a:	f200 80cb 	bhi.w	8000db4 <__udivmoddi4+0x2b8>
 8000c1e:	4645      	mov	r5, r8
 8000c20:	1a12      	subs	r2, r2, r0
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c28:	fb07 2210 	mls	r2, r7, r0, r2
 8000c2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c30:	fb0e fe00 	mul.w	lr, lr, r0
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x14e>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x14c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f200 80bb 	bhi.w	8000dbe <__udivmoddi4+0x2c2>
 8000c48:	4610      	mov	r0, r2
 8000c4a:	eba4 040e 	sub.w	r4, r4, lr
 8000c4e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c52:	e79f      	b.n	8000b94 <__udivmoddi4+0x98>
 8000c54:	f1c1 0720 	rsb	r7, r1, #32
 8000c58:	408b      	lsls	r3, r1
 8000c5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c62:	fa05 f401 	lsl.w	r4, r5, r1
 8000c66:	fa20 f307 	lsr.w	r3, r0, r7
 8000c6a:	40fd      	lsrs	r5, r7
 8000c6c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c70:	4323      	orrs	r3, r4
 8000c72:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c76:	fa1f fe8c 	uxth.w	lr, ip
 8000c7a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c7e:	0c1c      	lsrs	r4, r3, #16
 8000c80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c84:	fb08 f50e 	mul.w	r5, r8, lr
 8000c88:	42a5      	cmp	r5, r4
 8000c8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c8e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c92:	d90b      	bls.n	8000cac <__udivmoddi4+0x1b0>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c9c:	f080 8088 	bcs.w	8000db0 <__udivmoddi4+0x2b4>
 8000ca0:	42a5      	cmp	r5, r4
 8000ca2:	f240 8085 	bls.w	8000db0 <__udivmoddi4+0x2b4>
 8000ca6:	f1a8 0802 	sub.w	r8, r8, #2
 8000caa:	4464      	add	r4, ip
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	b29d      	uxth	r5, r3
 8000cb0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cb4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cb8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cbc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x1da>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ccc:	d26c      	bcs.n	8000da8 <__udivmoddi4+0x2ac>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	d96a      	bls.n	8000da8 <__udivmoddi4+0x2ac>
 8000cd2:	3b02      	subs	r3, #2
 8000cd4:	4464      	add	r4, ip
 8000cd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cda:	fba3 9502 	umull	r9, r5, r3, r2
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	42ac      	cmp	r4, r5
 8000ce4:	46c8      	mov	r8, r9
 8000ce6:	46ae      	mov	lr, r5
 8000ce8:	d356      	bcc.n	8000d98 <__udivmoddi4+0x29c>
 8000cea:	d053      	beq.n	8000d94 <__udivmoddi4+0x298>
 8000cec:	b156      	cbz	r6, 8000d04 <__udivmoddi4+0x208>
 8000cee:	ebb0 0208 	subs.w	r2, r0, r8
 8000cf2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cf6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cfa:	40ca      	lsrs	r2, r1
 8000cfc:	40cc      	lsrs	r4, r1
 8000cfe:	4317      	orrs	r7, r2
 8000d00:	e9c6 7400 	strd	r7, r4, [r6]
 8000d04:	4618      	mov	r0, r3
 8000d06:	2100      	movs	r1, #0
 8000d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0c:	f1c3 0120 	rsb	r1, r3, #32
 8000d10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d14:	fa20 f201 	lsr.w	r2, r0, r1
 8000d18:	fa25 f101 	lsr.w	r1, r5, r1
 8000d1c:	409d      	lsls	r5, r3
 8000d1e:	432a      	orrs	r2, r5
 8000d20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d24:	fa1f fe8c 	uxth.w	lr, ip
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d30:	0c11      	lsrs	r1, r2, #16
 8000d32:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d36:	fb00 f50e 	mul.w	r5, r0, lr
 8000d3a:	428d      	cmp	r5, r1
 8000d3c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x258>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d4a:	d22f      	bcs.n	8000dac <__udivmoddi4+0x2b0>
 8000d4c:	428d      	cmp	r5, r1
 8000d4e:	d92d      	bls.n	8000dac <__udivmoddi4+0x2b0>
 8000d50:	3802      	subs	r0, #2
 8000d52:	4461      	add	r1, ip
 8000d54:	1b49      	subs	r1, r1, r5
 8000d56:	b292      	uxth	r2, r2
 8000d58:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d5c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d64:	fb05 f10e 	mul.w	r1, r5, lr
 8000d68:	4291      	cmp	r1, r2
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x282>
 8000d6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d70:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d74:	d216      	bcs.n	8000da4 <__udivmoddi4+0x2a8>
 8000d76:	4291      	cmp	r1, r2
 8000d78:	d914      	bls.n	8000da4 <__udivmoddi4+0x2a8>
 8000d7a:	3d02      	subs	r5, #2
 8000d7c:	4462      	add	r2, ip
 8000d7e:	1a52      	subs	r2, r2, r1
 8000d80:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d84:	e738      	b.n	8000bf8 <__udivmoddi4+0xfc>
 8000d86:	4631      	mov	r1, r6
 8000d88:	4630      	mov	r0, r6
 8000d8a:	e708      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000d8c:	4639      	mov	r1, r7
 8000d8e:	e6e6      	b.n	8000b5e <__udivmoddi4+0x62>
 8000d90:	4610      	mov	r0, r2
 8000d92:	e6fb      	b.n	8000b8c <__udivmoddi4+0x90>
 8000d94:	4548      	cmp	r0, r9
 8000d96:	d2a9      	bcs.n	8000cec <__udivmoddi4+0x1f0>
 8000d98:	ebb9 0802 	subs.w	r8, r9, r2
 8000d9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000da0:	3b01      	subs	r3, #1
 8000da2:	e7a3      	b.n	8000cec <__udivmoddi4+0x1f0>
 8000da4:	4645      	mov	r5, r8
 8000da6:	e7ea      	b.n	8000d7e <__udivmoddi4+0x282>
 8000da8:	462b      	mov	r3, r5
 8000daa:	e794      	b.n	8000cd6 <__udivmoddi4+0x1da>
 8000dac:	4640      	mov	r0, r8
 8000dae:	e7d1      	b.n	8000d54 <__udivmoddi4+0x258>
 8000db0:	46d0      	mov	r8, sl
 8000db2:	e77b      	b.n	8000cac <__udivmoddi4+0x1b0>
 8000db4:	3d02      	subs	r5, #2
 8000db6:	4462      	add	r2, ip
 8000db8:	e732      	b.n	8000c20 <__udivmoddi4+0x124>
 8000dba:	4608      	mov	r0, r1
 8000dbc:	e70a      	b.n	8000bd4 <__udivmoddi4+0xd8>
 8000dbe:	4464      	add	r4, ip
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	e742      	b.n	8000c4a <__udivmoddi4+0x14e>

08000dc4 <__aeabi_idiv0>:
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08c      	sub	sp, #48	; 0x30
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2220      	movs	r2, #32
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f009 fa5c 	bl	800a29e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000de6:	4b33      	ldr	r3, [pc, #204]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000de8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000dee:	4b31      	ldr	r3, [pc, #196]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000df0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000df4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000df6:	4b2f      	ldr	r3, [pc, #188]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dfc:	4b2d      	ldr	r3, [pc, #180]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e02:	4b2c      	ldr	r3, [pc, #176]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e08:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e0e:	4b29      	ldr	r3, [pc, #164]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e10:	2204      	movs	r2, #4
 8000e12:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e14:	4b27      	ldr	r3, [pc, #156]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e1a:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000e20:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e26:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000e2e:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e30:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000e34:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e36:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e3c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e46:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e54:	4817      	ldr	r0, [pc, #92]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e56:	f001 fe9d 	bl	8002b94 <HAL_ADC_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000e60:	f000 fb72 	bl	8001548 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4811      	ldr	r0, [pc, #68]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e70:	f003 f932 	bl	80040d8 <HAL_ADCEx_MultiModeConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000e7a:	f000 fb65 	bl	8001548 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_ADC1_Init+0xf0>)
 8000e80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e82:	2306      	movs	r3, #6
 8000e84:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000e86:	2307      	movs	r3, #7
 8000e88:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e8a:	237f      	movs	r3, #127	; 0x7f
 8000e8c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e8e:	2304      	movs	r3, #4
 8000e90:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4806      	ldr	r0, [pc, #24]	; (8000eb4 <MX_ADC1_Init+0xec>)
 8000e9c:	f002 fb8e 	bl	80035bc <HAL_ADC_ConfigChannel>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000ea6:	f000 fb4f 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	3730      	adds	r7, #48	; 0x30
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	2000014c 	.word	0x2000014c
 8000eb8:	08600004 	.word	0x08600004

08000ebc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	2220      	movs	r2, #32
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f009 f9e8 	bl	800a29e <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ece:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000ed0:	4a2b      	ldr	r2, [pc, #172]	; (8000f80 <MX_ADC2_Init+0xc4>)
 8000ed2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000ed4:	4b29      	ldr	r3, [pc, #164]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000ed6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000eda:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000edc:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee2:	4b26      	ldr	r3, [pc, #152]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000ee8:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eee:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef4:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000ef6:	2204      	movs	r2, #4
 8000ef8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000efa:	4b20      	ldr	r3, [pc, #128]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f00:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000f06:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f36:	4811      	ldr	r0, [pc, #68]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000f38:	f001 fe2c 	bl	8002b94 <HAL_ADC_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000f42:	f000 fb01 	bl	8001548 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <MX_ADC2_Init+0xc8>)
 8000f48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f4a:	2306      	movs	r3, #6
 8000f4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f52:	237f      	movs	r3, #127	; 0x7f
 8000f54:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f56:	2304      	movs	r3, #4
 8000f58:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	4619      	mov	r1, r3
 8000f62:	4806      	ldr	r0, [pc, #24]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000f64:	f002 fb2a 	bl	80035bc <HAL_ADC_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000f6e:	f000 faeb 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	3720      	adds	r7, #32
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200001b8 	.word	0x200001b8
 8000f80:	50000100 	.word	0x50000100
 8000f84:	19200040 	.word	0x19200040

08000f88 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b0a4      	sub	sp, #144	; 0x90
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fa4:	2254      	movs	r2, #84	; 0x54
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f009 f978 	bl	800a29e <memset>
  if(adcHandle->Instance==ADC1)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fb6:	f040 80a8 	bne.w	800110a <HAL_ADC_MspInit+0x182>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000fc0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000fc4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f004 fd76 	bl	8005abc <HAL_RCCEx_PeriphCLKConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000fd6:	f000 fab7 	bl	8001548 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fda:	4b81      	ldr	r3, [pc, #516]	; (80011e0 <HAL_ADC_MspInit+0x258>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	4a7f      	ldr	r2, [pc, #508]	; (80011e0 <HAL_ADC_MspInit+0x258>)
 8000fe2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fe4:	4b7e      	ldr	r3, [pc, #504]	; (80011e0 <HAL_ADC_MspInit+0x258>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d10b      	bne.n	8001004 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000fec:	4b7d      	ldr	r3, [pc, #500]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8000fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff0:	4a7c      	ldr	r2, [pc, #496]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8000ff2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ff6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff8:	4b7a      	ldr	r3, [pc, #488]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8000ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001004:	4b77      	ldr	r3, [pc, #476]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8001006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001008:	4a76      	ldr	r2, [pc, #472]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 800100a:	f043 0304 	orr.w	r3, r3, #4
 800100e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001010:	4b74      	ldr	r3, [pc, #464]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8001012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	623b      	str	r3, [r7, #32]
 800101a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101c:	4b71      	ldr	r3, [pc, #452]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001020:	4a70      	ldr	r2, [pc, #448]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001028:	4b6e      	ldr	r3, [pc, #440]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	61fb      	str	r3, [r7, #28]
 8001032:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001034:	4b6b      	ldr	r3, [pc, #428]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001038:	4a6a      	ldr	r2, [pc, #424]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 800103a:	f043 0302 	orr.w	r3, r3, #2
 800103e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001040:	4b68      	ldr	r3, [pc, #416]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8001042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	61bb      	str	r3, [r7, #24]
 800104a:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800104c:	2304      	movs	r3, #4
 800104e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001050:	2303      	movs	r3, #3
 8001052:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001060:	4619      	mov	r1, r3
 8001062:	4861      	ldr	r0, [pc, #388]	; (80011e8 <HAL_ADC_MspInit+0x260>)
 8001064:	f003 fd52 	bl	8004b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8001068:	2302      	movs	r3, #2
 800106a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106c:	2303      	movs	r3, #3
 800106e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800107c:	4619      	mov	r1, r3
 800107e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001082:	f003 fd43 	bl	8004b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001086:	2303      	movs	r3, #3
 8001088:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108a:	2303      	movs	r3, #3
 800108c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001096:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800109a:	4619      	mov	r1, r3
 800109c:	4853      	ldr	r0, [pc, #332]	; (80011ec <HAL_ADC_MspInit+0x264>)
 800109e:	f003 fd35 	bl	8004b0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80010a2:	4b53      	ldr	r3, [pc, #332]	; (80011f0 <HAL_ADC_MspInit+0x268>)
 80010a4:	4a53      	ldr	r2, [pc, #332]	; (80011f4 <HAL_ADC_MspInit+0x26c>)
 80010a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80010a8:	4b51      	ldr	r3, [pc, #324]	; (80011f0 <HAL_ADC_MspInit+0x268>)
 80010aa:	2205      	movs	r2, #5
 80010ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ae:	4b50      	ldr	r3, [pc, #320]	; (80011f0 <HAL_ADC_MspInit+0x268>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010b4:	4b4e      	ldr	r3, [pc, #312]	; (80011f0 <HAL_ADC_MspInit+0x268>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010ba:	4b4d      	ldr	r3, [pc, #308]	; (80011f0 <HAL_ADC_MspInit+0x268>)
 80010bc:	2280      	movs	r2, #128	; 0x80
 80010be:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010c0:	4b4b      	ldr	r3, [pc, #300]	; (80011f0 <HAL_ADC_MspInit+0x268>)
 80010c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010c6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010c8:	4b49      	ldr	r3, [pc, #292]	; (80011f0 <HAL_ADC_MspInit+0x268>)
 80010ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010d0:	4b47      	ldr	r3, [pc, #284]	; (80011f0 <HAL_ADC_MspInit+0x268>)
 80010d2:	2220      	movs	r2, #32
 80010d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010d6:	4b46      	ldr	r3, [pc, #280]	; (80011f0 <HAL_ADC_MspInit+0x268>)
 80010d8:	2200      	movs	r2, #0
 80010da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010dc:	4844      	ldr	r0, [pc, #272]	; (80011f0 <HAL_ADC_MspInit+0x268>)
 80010de:	f003 f9e3 	bl	80044a8 <HAL_DMA_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 80010e8:	f000 fa2e 	bl	8001548 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a40      	ldr	r2, [pc, #256]	; (80011f0 <HAL_ADC_MspInit+0x268>)
 80010f0:	655a      	str	r2, [r3, #84]	; 0x54
 80010f2:	4a3f      	ldr	r2, [pc, #252]	; (80011f0 <HAL_ADC_MspInit+0x268>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	2012      	movs	r0, #18
 80010fe:	f003 f9ab 	bl	8004458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001102:	2012      	movs	r0, #18
 8001104:	f003 f9c2 	bl	800448c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001108:	e066      	b.n	80011d8 <HAL_ADC_MspInit+0x250>
  else if(adcHandle->Instance==ADC2)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a3a      	ldr	r2, [pc, #232]	; (80011f8 <HAL_ADC_MspInit+0x270>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d161      	bne.n	80011d8 <HAL_ADC_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001114:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800111a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800111e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001120:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001124:	4618      	mov	r0, r3
 8001126:	f004 fcc9 	bl	8005abc <HAL_RCCEx_PeriphCLKConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <HAL_ADC_MspInit+0x1ac>
      Error_Handler();
 8001130:	f000 fa0a 	bl	8001548 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001134:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <HAL_ADC_MspInit+0x258>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	4a29      	ldr	r2, [pc, #164]	; (80011e0 <HAL_ADC_MspInit+0x258>)
 800113c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800113e:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <HAL_ADC_MspInit+0x258>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d10b      	bne.n	800115e <HAL_ADC_MspInit+0x1d6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001146:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	4a26      	ldr	r2, [pc, #152]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 800114c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001152:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800115e:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	4a20      	ldr	r2, [pc, #128]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116a:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	4a1a      	ldr	r2, [pc, #104]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <HAL_ADC_MspInit+0x25c>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800118e:	230b      	movs	r3, #11
 8001190:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001192:	2303      	movs	r3, #3
 8001194:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011a2:	4619      	mov	r1, r3
 80011a4:	4810      	ldr	r0, [pc, #64]	; (80011e8 <HAL_ADC_MspInit+0x260>)
 80011a6:	f003 fcb1 	bl	8004b0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 80011aa:	2301      	movs	r3, #1
 80011ac:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ae:	2303      	movs	r3, #3
 80011b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011be:	4619      	mov	r1, r3
 80011c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c4:	f003 fca2 	bl	8004b0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2100      	movs	r1, #0
 80011cc:	2012      	movs	r0, #18
 80011ce:	f003 f943 	bl	8004458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011d2:	2012      	movs	r0, #18
 80011d4:	f003 f95a 	bl	800448c <HAL_NVIC_EnableIRQ>
}
 80011d8:	bf00      	nop
 80011da:	3790      	adds	r7, #144	; 0x90
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000284 	.word	0x20000284
 80011e4:	40021000 	.word	0x40021000
 80011e8:	48000800 	.word	0x48000800
 80011ec:	48000400 	.word	0x48000400
 80011f0:	20000224 	.word	0x20000224
 80011f4:	40020008 	.word	0x40020008
 80011f8:	50000100 	.word	0x50000100

080011fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <MX_DMA_Init+0x50>)
 8001204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001206:	4a11      	ldr	r2, [pc, #68]	; (800124c <MX_DMA_Init+0x50>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6493      	str	r3, [r2, #72]	; 0x48
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <MX_DMA_Init+0x50>)
 8001210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_DMA_Init+0x50>)
 800121c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800121e:	4a0b      	ldr	r2, [pc, #44]	; (800124c <MX_DMA_Init+0x50>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6493      	str	r3, [r2, #72]	; 0x48
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_DMA_Init+0x50>)
 8001228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	200b      	movs	r0, #11
 8001238:	f003 f90e 	bl	8004458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800123c:	200b      	movs	r0, #11
 800123e:	f003 f925 	bl	800448c <HAL_NVIC_EnableIRQ>

}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000

08001250 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	4b3f      	ldr	r3, [pc, #252]	; (8001364 <MX_GPIO_Init+0x114>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	4a3e      	ldr	r2, [pc, #248]	; (8001364 <MX_GPIO_Init+0x114>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001272:	4b3c      	ldr	r3, [pc, #240]	; (8001364 <MX_GPIO_Init+0x114>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800127e:	4b39      	ldr	r3, [pc, #228]	; (8001364 <MX_GPIO_Init+0x114>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4a38      	ldr	r2, [pc, #224]	; (8001364 <MX_GPIO_Init+0x114>)
 8001284:	f043 0320 	orr.w	r3, r3, #32
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4b36      	ldr	r3, [pc, #216]	; (8001364 <MX_GPIO_Init+0x114>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0320 	and.w	r3, r3, #32
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b33      	ldr	r3, [pc, #204]	; (8001364 <MX_GPIO_Init+0x114>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	4a32      	ldr	r2, [pc, #200]	; (8001364 <MX_GPIO_Init+0x114>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a2:	4b30      	ldr	r3, [pc, #192]	; (8001364 <MX_GPIO_Init+0x114>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <MX_GPIO_Init+0x114>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	4a2c      	ldr	r2, [pc, #176]	; (8001364 <MX_GPIO_Init+0x114>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ba:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <MX_GPIO_Init+0x114>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c6:	4b27      	ldr	r3, [pc, #156]	; (8001364 <MX_GPIO_Init+0x114>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	4a26      	ldr	r2, [pc, #152]	; (8001364 <MX_GPIO_Init+0x114>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d2:	4b24      	ldr	r3, [pc, #144]	; (8001364 <MX_GPIO_Init+0x114>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2120      	movs	r1, #32
 80012e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e6:	f003 fd93 	bl	8004e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2104      	movs	r1, #4
 80012ee:	481e      	ldr	r0, [pc, #120]	; (8001368 <MX_GPIO_Init+0x118>)
 80012f0:	f003 fd8e 	bl	8004e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 80012f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4818      	ldr	r0, [pc, #96]	; (800136c <MX_GPIO_Init+0x11c>)
 800130c:	f003 fbfe 	bl	8004b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8001310:	2320      	movs	r3, #32
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132a:	f003 fbef 	bl	8004b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 800132e:	2304      	movs	r3, #4
 8001330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4808      	ldr	r0, [pc, #32]	; (8001368 <MX_GPIO_Init+0x118>)
 8001346:	f003 fbe1 	bl	8004b0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2100      	movs	r1, #0
 800134e:	2028      	movs	r0, #40	; 0x28
 8001350:	f003 f882 	bl	8004458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001354:	2028      	movs	r0, #40	; 0x28
 8001356:	f003 f899 	bl	800448c <HAL_NVIC_EnableIRQ>

}
 800135a:	bf00      	nop
 800135c:	3728      	adds	r7, #40	; 0x28
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40021000 	.word	0x40021000
 8001368:	48000c00 	.word	0x48000c00
 800136c:	48000800 	.word	0x48000800

08001370 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	//		flag=1;
	//	}
	//Interupt Mode
	//	adc_vall = HAL_ADC_GetValue(&hadc1);
	//	HAL_ADC_Start_IT(&hadc1);
	adc_vall= (buffer[0]-1351)/40.95;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_ADC_ConvCpltCallback+0x50>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f2a3 5347 	subw	r3, r3, #1351	; 0x547
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f8f7 	bl	8000574 <__aeabi_ui2d>
 8001386:	a30c      	add	r3, pc, #48	; (adr r3, 80013b8 <HAL_ADC_ConvCpltCallback+0x48>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	f7ff fa96 	bl	80008bc <__aeabi_ddiv>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fb78 	bl	8000a8c <__aeabi_d2uiz>
 800139c:	4603      	mov	r3, r0
 800139e:	b29a      	uxth	r2, r3
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <HAL_ADC_ConvCpltCallback+0x54>)
 80013a2:	801a      	strh	r2, [r3, #0]
	flag = 1;
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_ADC_ConvCpltCallback+0x58>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	f3af 8000 	nop.w
 80013b8:	9999999a 	.word	0x9999999a
 80013bc:	40447999 	.word	0x40447999
 80013c0:	20000288 	.word	0x20000288
 80013c4:	2000028e 	.word	0x2000028e
 80013c8:	2000028c 	.word	0x2000028c

080013cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int nb_loop = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d6:	f001 f940 	bl	800265a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013da:	f000 f859 	bl	8001490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013de:	f7ff ff37 	bl	8001250 <MX_GPIO_Init>
  MX_DMA_Init();
 80013e2:	f7ff ff0b 	bl	80011fc <MX_DMA_Init>
  MX_ADC2_Init();
 80013e6:	f7ff fd69 	bl	8000ebc <MX_ADC2_Init>
  MX_ADC1_Init();
 80013ea:	f7ff fced 	bl	8000dc8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80013ee:	f000 fa9d 	bl	800192c <MX_TIM1_Init>
  MX_TIM3_Init();
 80013f2:	f000 fb6b 	bl	8001acc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80013f6:	f000 fcb1 	bl	8001d5c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80013fa:	f000 fcfb 	bl	8001df4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	//	HAL_ADC_Start_IT(&hadc1);
	//if(HAL_OK =! HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED)){
	//Error_Handler();

	if(HAL_OK != HAL_ADC_Start_DMA(&hadc1, buffer, ADC_BUF_SIZE)){
 80013fe:	2201      	movs	r2, #1
 8001400:	491b      	ldr	r1, [pc, #108]	; (8001470 <main+0xa4>)
 8001402:	481c      	ldr	r0, [pc, #112]	; (8001474 <main+0xa8>)
 8001404:	f001 fd88 	bl	8002f18 <HAL_ADC_Start_DMA>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <main+0x46>
		Error_Handler();
 800140e:	f000 f89b 	bl	8001548 <Error_Handler>
	}

	codeur_start();
 8001412:	f000 fde3 	bl	8001fdc <codeur_start>

	/*pwm_start();
	set_pwm_alpha(70);*/


	Shell_Init();
 8001416:	f000 fed9 	bl	80021cc <Shell_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 800141a:	f000 ff17 	bl	800224c <Shell_Loop>
		if(flag){
 800141e:	4b16      	ldr	r3, [pc, #88]	; (8001478 <main+0xac>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f9      	beq.n	800141a <main+0x4e>
			nb_loop = (nb_loop + 1)%20000;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3301      	adds	r3, #1
 800142a:	4a14      	ldr	r2, [pc, #80]	; (800147c <main+0xb0>)
 800142c:	fb82 1203 	smull	r1, r2, r2, r3
 8001430:	1351      	asrs	r1, r2, #13
 8001432:	17da      	asrs	r2, r3, #31
 8001434:	1a8a      	subs	r2, r1, r2
 8001436:	f644 6120 	movw	r1, #20000	; 0x4e20
 800143a:	fb01 f202 	mul.w	r2, r1, r2
 800143e:	1a9b      	subs	r3, r3, r2
 8001440:	607b      	str	r3, [r7, #4]
			if(nb_loop == 0){
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10f      	bne.n	8001468 <main+0x9c>
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Valeur : %4d \r\n", adc_vall);
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <main+0xb4>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <main+0xb8>)
 800144e:	2140      	movs	r1, #64	; 0x40
 8001450:	480d      	ldr	r0, [pc, #52]	; (8001488 <main+0xbc>)
 8001452:	f008 fead 	bl	800a1b0 <sniprintf>
 8001456:	6038      	str	r0, [r7, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	b29a      	uxth	r2, r3
 800145c:	f04f 33ff 	mov.w	r3, #4294967295
 8001460:	4909      	ldr	r1, [pc, #36]	; (8001488 <main+0xbc>)
 8001462:	480a      	ldr	r0, [pc, #40]	; (800148c <main+0xc0>)
 8001464:	f006 fd3e 	bl	8007ee4 <HAL_UART_Transmit>
			}
			flag = 0;
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <main+0xac>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
		Shell_Loop();
 800146e:	e7d4      	b.n	800141a <main+0x4e>
 8001470:	20000288 	.word	0x20000288
 8001474:	2000014c 	.word	0x2000014c
 8001478:	2000028c 	.word	0x2000028c
 800147c:	68db8bad 	.word	0x68db8bad
 8001480:	2000028e 	.word	0x2000028e
 8001484:	0800b420 	.word	0x0800b420
 8001488:	200004b4 	.word	0x200004b4
 800148c:	2000037c 	.word	0x2000037c

08001490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b094      	sub	sp, #80	; 0x50
 8001494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001496:	f107 0318 	add.w	r3, r7, #24
 800149a:	2238      	movs	r2, #56	; 0x38
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f008 fefd 	bl	800a29e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f003 fce8 	bl	8004e88 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014b8:	2301      	movs	r3, #1
 80014ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014c0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c2:	2302      	movs	r3, #2
 80014c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014c6:	2303      	movs	r3, #3
 80014c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80014ca:	2306      	movs	r3, #6
 80014cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80014ce:	2355      	movs	r3, #85	; 0x55
 80014d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014d2:	2302      	movs	r3, #2
 80014d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014d6:	2302      	movs	r3, #2
 80014d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014da:	2302      	movs	r3, #2
 80014dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014de:	f107 0318 	add.w	r3, r7, #24
 80014e2:	4618      	mov	r0, r3
 80014e4:	f003 fd84 	bl	8004ff0 <HAL_RCC_OscConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80014ee:	f000 f82b 	bl	8001548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f2:	230f      	movs	r3, #15
 80014f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f6:	2303      	movs	r3, #3
 80014f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2104      	movs	r1, #4
 800150a:	4618      	mov	r0, r3
 800150c:	f004 f888 	bl	8005620 <HAL_RCC_ClockConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001516:	f000 f817 	bl	8001548 <Error_Handler>
  }
}
 800151a:	bf00      	nop
 800151c:	3750      	adds	r7, #80	; 0x50
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d101      	bne.n	800153a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001536:	f001 f8a9 	bl	800268c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40001000 	.word	0x40001000

08001548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800154c:	b672      	cpsid	i
}
 800154e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001550:	e7fe      	b.n	8001550 <Error_Handler+0x8>
	...

08001554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <HAL_MspInit+0x44>)
 800155c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155e:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <HAL_MspInit+0x44>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6613      	str	r3, [r2, #96]	; 0x60
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <HAL_MspInit+0x44>)
 8001568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_MspInit+0x44>)
 8001574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001576:	4a08      	ldr	r2, [pc, #32]	; (8001598 <HAL_MspInit+0x44>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157c:	6593      	str	r3, [r2, #88]	; 0x58
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_MspInit+0x44>)
 8001580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800158a:	f003 fd21 	bl	8004fd0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000

0800159c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08c      	sub	sp, #48	; 0x30
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015ac:	4b2c      	ldr	r3, [pc, #176]	; (8001660 <HAL_InitTick+0xc4>)
 80015ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b0:	4a2b      	ldr	r2, [pc, #172]	; (8001660 <HAL_InitTick+0xc4>)
 80015b2:	f043 0310 	orr.w	r3, r3, #16
 80015b6:	6593      	str	r3, [r2, #88]	; 0x58
 80015b8:	4b29      	ldr	r3, [pc, #164]	; (8001660 <HAL_InitTick+0xc4>)
 80015ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015bc:	f003 0310 	and.w	r3, r3, #16
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015c4:	f107 020c 	add.w	r2, r7, #12
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	4611      	mov	r1, r2
 80015ce:	4618      	mov	r0, r3
 80015d0:	f004 f9fc 	bl	80059cc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015d4:	f004 f9ce 	bl	8005974 <HAL_RCC_GetPCLK1Freq>
 80015d8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015dc:	4a21      	ldr	r2, [pc, #132]	; (8001664 <HAL_InitTick+0xc8>)
 80015de:	fba2 2303 	umull	r2, r3, r2, r3
 80015e2:	0c9b      	lsrs	r3, r3, #18
 80015e4:	3b01      	subs	r3, #1
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015e8:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <HAL_InitTick+0xcc>)
 80015ea:	4a20      	ldr	r2, [pc, #128]	; (800166c <HAL_InitTick+0xd0>)
 80015ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015ee:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <HAL_InitTick+0xcc>)
 80015f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015f4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015f6:	4a1c      	ldr	r2, [pc, #112]	; (8001668 <HAL_InitTick+0xcc>)
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <HAL_InitTick+0xcc>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001602:	4b19      	ldr	r3, [pc, #100]	; (8001668 <HAL_InitTick+0xcc>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001608:	4817      	ldr	r0, [pc, #92]	; (8001668 <HAL_InitTick+0xcc>)
 800160a:	f004 fca5 	bl	8005f58 <HAL_TIM_Base_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001614:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001618:	2b00      	cmp	r3, #0
 800161a:	d11b      	bne.n	8001654 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800161c:	4812      	ldr	r0, [pc, #72]	; (8001668 <HAL_InitTick+0xcc>)
 800161e:	f004 fcf3 	bl	8006008 <HAL_TIM_Base_Start_IT>
 8001622:	4603      	mov	r3, r0
 8001624:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001628:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800162c:	2b00      	cmp	r3, #0
 800162e:	d111      	bne.n	8001654 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001630:	2036      	movs	r0, #54	; 0x36
 8001632:	f002 ff2b 	bl	800448c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d808      	bhi.n	800164e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	2036      	movs	r0, #54	; 0x36
 8001642:	f002 ff09 	bl	8004458 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001646:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <HAL_InitTick+0xd4>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	e002      	b.n	8001654 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001654:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001658:	4618      	mov	r0, r3
 800165a:	3730      	adds	r7, #48	; 0x30
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40021000 	.word	0x40021000
 8001664:	431bde83 	.word	0x431bde83
 8001668:	20000290 	.word	0x20000290
 800166c:	40001000 	.word	0x40001000
 8001670:	200000cc 	.word	0x200000cc

08001674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001678:	e7fe      	b.n	8001678 <NMI_Handler+0x4>

0800167a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167e:	e7fe      	b.n	800167e <HardFault_Handler+0x4>

08001680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <MemManage_Handler+0x4>

08001686 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <BusFault_Handler+0x4>

0800168c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <UsageFault_Handler+0x4>

08001692 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	idx++;
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <SysTick_Handler+0x28>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <SysTick_Handler+0x28>)
 80016c8:	6013      	str	r3, [r2, #0]
	if (idx == dt)
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <SysTick_Handler+0x28>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <SysTick_Handler+0x2c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d104      	bne.n	80016e0 <SysTick_Handler+0x24>
	{
		calc_speed();
 80016d6:	f000 fca5 	bl	8002024 <calc_speed>
		idx = 0;
 80016da:	4b02      	ldr	r3, [pc, #8]	; (80016e4 <SysTick_Handler+0x28>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200002dc 	.word	0x200002dc
 80016e8:	20000004 	.word	0x20000004

080016ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <DMA1_Channel1_IRQHandler+0x10>)
 80016f2:	f003 f8bc 	bl	800486e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000224 	.word	0x20000224

08001700 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001704:	4803      	ldr	r0, [pc, #12]	; (8001714 <ADC1_2_IRQHandler+0x14>)
 8001706:	f001 fcdb 	bl	80030c0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800170a:	4803      	ldr	r0, [pc, #12]	; (8001718 <ADC1_2_IRQHandler+0x18>)
 800170c:	f001 fcd8 	bl	80030c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	2000014c 	.word	0x2000014c
 8001718:	200001b8 	.word	0x200001b8

0800171c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <TIM3_IRQHandler+0x10>)
 8001722:	f005 f84d 	bl	80067c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000330 	.word	0x20000330

08001730 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <USART2_IRQHandler+0x10>)
 8001736:	f006 fcc1 	bl	80080bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2000037c 	.word	0x2000037c

08001744 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <USART3_IRQHandler+0x10>)
 800174a:	f006 fcb7 	bl	80080bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000040c 	.word	0x2000040c

08001758 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 800175c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001760:	f003 fb6e 	bl	8004e40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <TIM6_DAC_IRQHandler+0x10>)
 800176e:	f005 f827 	bl	80067c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000290 	.word	0x20000290

0800177c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return 1;
 8001780:	2301      	movs	r3, #1
}
 8001782:	4618      	mov	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <_kill>:

int _kill(int pid, int sig)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001796:	f008 fe2d 	bl	800a3f4 <__errno>
 800179a:	4603      	mov	r3, r0
 800179c:	2216      	movs	r2, #22
 800179e:	601a      	str	r2, [r3, #0]
  return -1;
 80017a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <_exit>:

void _exit (int status)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff ffe7 	bl	800178c <_kill>
  while (1) {}    /* Make sure we hang here */
 80017be:	e7fe      	b.n	80017be <_exit+0x12>

080017c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	e00a      	b.n	80017e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017d2:	f3af 8000 	nop.w
 80017d6:	4601      	mov	r1, r0
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	60ba      	str	r2, [r7, #8]
 80017de:	b2ca      	uxtb	r2, r1
 80017e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	3301      	adds	r3, #1
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	dbf0      	blt.n	80017d2 <_read+0x12>
  }

  return len;
 80017f0:	687b      	ldr	r3, [r7, #4]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	60f8      	str	r0, [r7, #12]
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	e009      	b.n	8001820 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	60ba      	str	r2, [r7, #8]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	3301      	adds	r3, #1
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	429a      	cmp	r2, r3
 8001826:	dbf1      	blt.n	800180c <_write+0x12>
  }
  return len;
 8001828:	687b      	ldr	r3, [r7, #4]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <_close>:

int _close(int file)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800185a:	605a      	str	r2, [r3, #4]
  return 0;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <_isatty>:

int _isatty(int file)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001872:	2301      	movs	r3, #1
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a4:	4a14      	ldr	r2, [pc, #80]	; (80018f8 <_sbrk+0x5c>)
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <_sbrk+0x60>)
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b0:	4b13      	ldr	r3, [pc, #76]	; (8001900 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d102      	bne.n	80018be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <_sbrk+0x64>)
 80018ba:	4a12      	ldr	r2, [pc, #72]	; (8001904 <_sbrk+0x68>)
 80018bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d207      	bcs.n	80018dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018cc:	f008 fd92 	bl	800a3f4 <__errno>
 80018d0:	4603      	mov	r3, r0
 80018d2:	220c      	movs	r2, #12
 80018d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018d6:	f04f 33ff 	mov.w	r3, #4294967295
 80018da:	e009      	b.n	80018f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <_sbrk+0x64>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	4a05      	ldr	r2, [pc, #20]	; (8001900 <_sbrk+0x64>)
 80018ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ee:	68fb      	ldr	r3, [r7, #12]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20020000 	.word	0x20020000
 80018fc:	00000400 	.word	0x00000400
 8001900:	200002e0 	.word	0x200002e0
 8001904:	200006c0 	.word	0x200006c0

08001908 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <SystemInit+0x20>)
 800190e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001912:	4a05      	ldr	r2, [pc, #20]	; (8001928 <SystemInit+0x20>)
 8001914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b09c      	sub	sp, #112	; 0x70
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001932:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001940:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800194c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
 800195c:	615a      	str	r2, [r3, #20]
 800195e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	2234      	movs	r2, #52	; 0x34
 8001964:	2100      	movs	r1, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f008 fc99 	bl	800a29e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800196c:	4b55      	ldr	r3, [pc, #340]	; (8001ac4 <MX_TIM1_Init+0x198>)
 800196e:	4a56      	ldr	r2, [pc, #344]	; (8001ac8 <MX_TIM1_Init+0x19c>)
 8001970:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 8001972:	4b54      	ldr	r3, [pc, #336]	; (8001ac4 <MX_TIM1_Init+0x198>)
 8001974:	2208      	movs	r2, #8
 8001976:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001978:	4b52      	ldr	r3, [pc, #328]	; (8001ac4 <MX_TIM1_Init+0x198>)
 800197a:	2220      	movs	r2, #32
 800197c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 800197e:	4b51      	ldr	r3, [pc, #324]	; (8001ac4 <MX_TIM1_Init+0x198>)
 8001980:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001984:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001986:	4b4f      	ldr	r3, [pc, #316]	; (8001ac4 <MX_TIM1_Init+0x198>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800198c:	4b4d      	ldr	r3, [pc, #308]	; (8001ac4 <MX_TIM1_Init+0x198>)
 800198e:	2200      	movs	r2, #0
 8001990:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001992:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <MX_TIM1_Init+0x198>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001998:	484a      	ldr	r0, [pc, #296]	; (8001ac4 <MX_TIM1_Init+0x198>)
 800199a:	f004 fadd 	bl	8005f58 <HAL_TIM_Base_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80019a4:	f7ff fdd0 	bl	8001548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ac:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019b2:	4619      	mov	r1, r3
 80019b4:	4843      	ldr	r0, [pc, #268]	; (8001ac4 <MX_TIM1_Init+0x198>)
 80019b6:	f005 f997 	bl	8006ce8 <HAL_TIM_ConfigClockSource>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80019c0:	f7ff fdc2 	bl	8001548 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019c4:	483f      	ldr	r0, [pc, #252]	; (8001ac4 <MX_TIM1_Init+0x198>)
 80019c6:	f004 fb97 	bl	80060f8 <HAL_TIM_PWM_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80019d0:	f7ff fdba 	bl	8001548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019d4:	2320      	movs	r3, #32
 80019d6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80019d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019dc:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019e6:	4619      	mov	r1, r3
 80019e8:	4836      	ldr	r0, [pc, #216]	; (8001ac4 <MX_TIM1_Init+0x198>)
 80019ea:	f006 f865 	bl	8007ab8 <HAL_TIMEx_MasterConfigSynchronization>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80019f4:	f7ff fda8 	bl	8001548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019f8:	2360      	movs	r3, #96	; 0x60
 80019fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 512;
 80019fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a00:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a02:	2300      	movs	r3, #0
 8001a04:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a06:	2300      	movs	r3, #0
 8001a08:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a12:	2300      	movs	r3, #0
 8001a14:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4829      	ldr	r0, [pc, #164]	; (8001ac4 <MX_TIM1_Init+0x198>)
 8001a20:	f005 f84e 	bl	8006ac0 <HAL_TIM_PWM_ConfigChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8001a2a:	f7ff fd8d 	bl	8001548 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a32:	2204      	movs	r2, #4
 8001a34:	4619      	mov	r1, r3
 8001a36:	4823      	ldr	r0, [pc, #140]	; (8001ac4 <MX_TIM1_Init+0x198>)
 8001a38:	f005 f842 	bl	8006ac0 <HAL_TIM_PWM_ConfigChannel>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 8001a42:	f7ff fd81 	bl	8001548 <Error_Handler>
  }
  sConfigOC.Pulse = 85;
 8001a46:	2355      	movs	r3, #85	; 0x55
 8001a48:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a4e:	2208      	movs	r2, #8
 8001a50:	4619      	mov	r1, r3
 8001a52:	481c      	ldr	r0, [pc, #112]	; (8001ac4 <MX_TIM1_Init+0x198>)
 8001a54:	f005 f834 	bl	8006ac0 <HAL_TIM_PWM_ConfigChannel>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8001a5e:	f7ff fd73 	bl	8001548 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8001a62:	4818      	ldr	r0, [pc, #96]	; (8001ac4 <MX_TIM1_Init+0x198>)
 8001a64:	f006 f970 	bl	8007d48 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 30;
 8001a74:	231e      	movs	r3, #30
 8001a76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4807      	ldr	r0, [pc, #28]	; (8001ac4 <MX_TIM1_Init+0x198>)
 8001aa6:	f006 f89d 	bl	8007be4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8001ab0:	f7ff fd4a 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ab4:	4803      	ldr	r0, [pc, #12]	; (8001ac4 <MX_TIM1_Init+0x198>)
 8001ab6:	f000 f8e9 	bl	8001c8c <HAL_TIM_MspPostInit>

}
 8001aba:	bf00      	nop
 8001abc:	3770      	adds	r7, #112	; 0x70
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200002e4 	.word	0x200002e4
 8001ac8:	40012c00 	.word	0x40012c00

08001acc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08c      	sub	sp, #48	; 0x30
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ad2:	f107 030c 	add.w	r3, r7, #12
 8001ad6:	2224      	movs	r2, #36	; 0x24
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f008 fbdf 	bl	800a29e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001aea:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <MX_TIM3_Init+0xa4>)
 8001aec:	4a21      	ldr	r2, [pc, #132]	; (8001b74 <MX_TIM3_Init+0xa8>)
 8001aee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001af0:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <MX_TIM3_Init+0xa4>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af6:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <MX_TIM3_Init+0xa4>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <MX_TIM3_Init+0xa4>)
 8001afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b04:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <MX_TIM3_Init+0xa4>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0a:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <MX_TIM3_Init+0xa4>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b10:	2303      	movs	r3, #3
 8001b12:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b14:	2300      	movs	r3, #0
 8001b16:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b24:	2300      	movs	r3, #0
 8001b26:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	4619      	mov	r1, r3
 8001b3a:	480d      	ldr	r0, [pc, #52]	; (8001b70 <MX_TIM3_Init+0xa4>)
 8001b3c:	f004 fcec 	bl	8006518 <HAL_TIM_Encoder_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001b46:	f7ff fcff 	bl	8001548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b52:	463b      	mov	r3, r7
 8001b54:	4619      	mov	r1, r3
 8001b56:	4806      	ldr	r0, [pc, #24]	; (8001b70 <MX_TIM3_Init+0xa4>)
 8001b58:	f005 ffae 	bl	8007ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001b62:	f7ff fcf1 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b66:	bf00      	nop
 8001b68:	3730      	adds	r7, #48	; 0x30
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000330 	.word	0x20000330
 8001b74:	40000400 	.word	0x40000400

08001b78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <HAL_TIM_Base_MspInit+0x38>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d10b      	bne.n	8001ba2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <HAL_TIM_Base_MspInit+0x3c>)
 8001b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8e:	4a09      	ldr	r2, [pc, #36]	; (8001bb4 <HAL_TIM_Base_MspInit+0x3c>)
 8001b90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b94:	6613      	str	r3, [r2, #96]	; 0x60
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <HAL_TIM_Base_MspInit+0x3c>)
 8001b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40012c00 	.word	0x40012c00
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	; 0x28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a2a      	ldr	r2, [pc, #168]	; (8001c80 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d14d      	bne.n	8001c76 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bda:	4b2a      	ldr	r3, [pc, #168]	; (8001c84 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bde:	4a29      	ldr	r2, [pc, #164]	; (8001c84 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001be0:	f043 0302 	orr.w	r3, r3, #2
 8001be4:	6593      	str	r3, [r2, #88]	; 0x58
 8001be6:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf2:	4b24      	ldr	r3, [pc, #144]	; (8001c84 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf6:	4a23      	ldr	r2, [pc, #140]	; (8001c84 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bfe:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0a:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0e:	4a1d      	ldr	r2, [pc, #116]	; (8001c84 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001c10:	f043 0304 	orr.w	r3, r3, #4
 8001c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c16:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001c22:	2350      	movs	r3, #80	; 0x50
 8001c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c32:	2302      	movs	r3, #2
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c40:	f002 ff64 	bl	8004b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c52:	2300      	movs	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c56:	2302      	movs	r3, #2
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4809      	ldr	r0, [pc, #36]	; (8001c88 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001c62:	f002 ff53 	bl	8004b0c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	201d      	movs	r0, #29
 8001c6c:	f002 fbf4 	bl	8004458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c70:	201d      	movs	r0, #29
 8001c72:	f002 fc0b 	bl	800448c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	; 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40000400 	.word	0x40000400
 8001c84:	40021000 	.word	0x40021000
 8001c88:	48000800 	.word	0x48000800

08001c8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a29      	ldr	r2, [pc, #164]	; (8001d50 <HAL_TIM_MspPostInit+0xc4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d14b      	bne.n	8001d46 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cae:	4b29      	ldr	r3, [pc, #164]	; (8001d54 <HAL_TIM_MspPostInit+0xc8>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	4a28      	ldr	r2, [pc, #160]	; (8001d54 <HAL_TIM_MspPostInit+0xc8>)
 8001cb4:	f043 0302 	orr.w	r3, r3, #2
 8001cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cba:	4b26      	ldr	r3, [pc, #152]	; (8001d54 <HAL_TIM_MspPostInit+0xc8>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <HAL_TIM_MspPostInit+0xc8>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cca:	4a22      	ldr	r2, [pc, #136]	; (8001d54 <HAL_TIM_MspPostInit+0xc8>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <HAL_TIM_MspPostInit+0xc8>)
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001cde:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cec:	2300      	movs	r3, #0
 8001cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001cf0:	2306      	movs	r3, #6
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4817      	ldr	r0, [pc, #92]	; (8001d58 <HAL_TIM_MspPostInit+0xcc>)
 8001cfc:	f002 ff06 	bl	8004b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001d00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001d12:	2304      	movs	r3, #4
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	480e      	ldr	r0, [pc, #56]	; (8001d58 <HAL_TIM_MspPostInit+0xcc>)
 8001d1e:	f002 fef5 	bl	8004b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001d22:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	2300      	movs	r3, #0
 8001d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d34:	2306      	movs	r3, #6
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d42:	f002 fee3 	bl	8004b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d46:	bf00      	nop
 8001d48:	3728      	adds	r7, #40	; 0x28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40012c00 	.word	0x40012c00
 8001d54:	40021000 	.word	0x40021000
 8001d58:	48000400 	.word	0x48000400

08001d5c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d60:	4b22      	ldr	r3, [pc, #136]	; (8001dec <MX_USART2_UART_Init+0x90>)
 8001d62:	4a23      	ldr	r2, [pc, #140]	; (8001df0 <MX_USART2_UART_Init+0x94>)
 8001d64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d66:	4b21      	ldr	r3, [pc, #132]	; (8001dec <MX_USART2_UART_Init+0x90>)
 8001d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d6e:	4b1f      	ldr	r3, [pc, #124]	; (8001dec <MX_USART2_UART_Init+0x90>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d74:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <MX_USART2_UART_Init+0x90>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d7a:	4b1c      	ldr	r3, [pc, #112]	; (8001dec <MX_USART2_UART_Init+0x90>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d80:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <MX_USART2_UART_Init+0x90>)
 8001d82:	220c      	movs	r2, #12
 8001d84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d86:	4b19      	ldr	r3, [pc, #100]	; (8001dec <MX_USART2_UART_Init+0x90>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d8c:	4b17      	ldr	r3, [pc, #92]	; (8001dec <MX_USART2_UART_Init+0x90>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d92:	4b16      	ldr	r3, [pc, #88]	; (8001dec <MX_USART2_UART_Init+0x90>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d98:	4b14      	ldr	r3, [pc, #80]	; (8001dec <MX_USART2_UART_Init+0x90>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d9e:	4b13      	ldr	r3, [pc, #76]	; (8001dec <MX_USART2_UART_Init+0x90>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001da4:	4811      	ldr	r0, [pc, #68]	; (8001dec <MX_USART2_UART_Init+0x90>)
 8001da6:	f006 f84d 	bl	8007e44 <HAL_UART_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001db0:	f7ff fbca 	bl	8001548 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001db4:	2100      	movs	r1, #0
 8001db6:	480d      	ldr	r0, [pc, #52]	; (8001dec <MX_USART2_UART_Init+0x90>)
 8001db8:	f007 ffef 	bl	8009d9a <HAL_UARTEx_SetTxFifoThreshold>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001dc2:	f7ff fbc1 	bl	8001548 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	4808      	ldr	r0, [pc, #32]	; (8001dec <MX_USART2_UART_Init+0x90>)
 8001dca:	f008 f824 	bl	8009e16 <HAL_UARTEx_SetRxFifoThreshold>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001dd4:	f7ff fbb8 	bl	8001548 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001dd8:	4804      	ldr	r0, [pc, #16]	; (8001dec <MX_USART2_UART_Init+0x90>)
 8001dda:	f007 ffa5 	bl	8009d28 <HAL_UARTEx_DisableFifoMode>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001de4:	f7ff fbb0 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	2000037c 	.word	0x2000037c
 8001df0:	40004400 	.word	0x40004400

08001df4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001df8:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <MX_USART3_UART_Init+0x90>)
 8001dfa:	4a23      	ldr	r2, [pc, #140]	; (8001e88 <MX_USART3_UART_Init+0x94>)
 8001dfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001dfe:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e06:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e0c:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e12:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e18:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1e:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e24:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e2a:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e30:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e36:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e3c:	4811      	ldr	r0, [pc, #68]	; (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e3e:	f006 f801 	bl	8007e44 <HAL_UART_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001e48:	f7ff fb7e 	bl	8001548 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	480d      	ldr	r0, [pc, #52]	; (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e50:	f007 ffa3 	bl	8009d9a <HAL_UARTEx_SetTxFifoThreshold>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001e5a:	f7ff fb75 	bl	8001548 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4808      	ldr	r0, [pc, #32]	; (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e62:	f007 ffd8 	bl	8009e16 <HAL_UARTEx_SetRxFifoThreshold>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001e6c:	f7ff fb6c 	bl	8001548 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001e70:	4804      	ldr	r0, [pc, #16]	; (8001e84 <MX_USART3_UART_Init+0x90>)
 8001e72:	f007 ff59 	bl	8009d28 <HAL_UARTEx_DisableFifoMode>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001e7c:	f7ff fb64 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	2000040c 	.word	0x2000040c
 8001e88:	40004800 	.word	0x40004800

08001e8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b0a0      	sub	sp, #128	; 0x80
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ea4:	f107 0318 	add.w	r3, r7, #24
 8001ea8:	2254      	movs	r2, #84	; 0x54
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f008 f9f6 	bl	800a29e <memset>
  if(uartHandle->Instance==USART2)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a45      	ldr	r2, [pc, #276]	; (8001fcc <HAL_UART_MspInit+0x140>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d13f      	bne.n	8001f3c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ec4:	f107 0318 	add.w	r3, r7, #24
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f003 fdf7 	bl	8005abc <HAL_RCCEx_PeriphCLKConfig>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ed4:	f7ff fb38 	bl	8001548 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ed8:	4b3d      	ldr	r3, [pc, #244]	; (8001fd0 <HAL_UART_MspInit+0x144>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	4a3c      	ldr	r2, [pc, #240]	; (8001fd0 <HAL_UART_MspInit+0x144>)
 8001ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee4:	4b3a      	ldr	r3, [pc, #232]	; (8001fd0 <HAL_UART_MspInit+0x144>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef0:	4b37      	ldr	r3, [pc, #220]	; (8001fd0 <HAL_UART_MspInit+0x144>)
 8001ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef4:	4a36      	ldr	r2, [pc, #216]	; (8001fd0 <HAL_UART_MspInit+0x144>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001efc:	4b34      	ldr	r3, [pc, #208]	; (8001fd0 <HAL_UART_MspInit+0x144>)
 8001efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f08:	230c      	movs	r3, #12
 8001f0a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f14:	2300      	movs	r3, #0
 8001f16:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f18:	2307      	movs	r3, #7
 8001f1a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f20:	4619      	mov	r1, r3
 8001f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f26:	f002 fdf1 	bl	8004b0c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	2026      	movs	r0, #38	; 0x26
 8001f30:	f002 fa92 	bl	8004458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f34:	2026      	movs	r0, #38	; 0x26
 8001f36:	f002 faa9 	bl	800448c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f3a:	e043      	b.n	8001fc4 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a24      	ldr	r2, [pc, #144]	; (8001fd4 <HAL_UART_MspInit+0x148>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d13e      	bne.n	8001fc4 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f46:	2304      	movs	r3, #4
 8001f48:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f4e:	f107 0318 	add.w	r3, r7, #24
 8001f52:	4618      	mov	r0, r3
 8001f54:	f003 fdb2 	bl	8005abc <HAL_RCCEx_PeriphCLKConfig>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001f5e:	f7ff faf3 	bl	8001548 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f62:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_UART_MspInit+0x144>)
 8001f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f66:	4a1a      	ldr	r2, [pc, #104]	; (8001fd0 <HAL_UART_MspInit+0x144>)
 8001f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f6c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f6e:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <HAL_UART_MspInit+0x144>)
 8001f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <HAL_UART_MspInit+0x144>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7e:	4a14      	ldr	r2, [pc, #80]	; (8001fd0 <HAL_UART_MspInit+0x144>)
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f86:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_UART_MspInit+0x144>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f92:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fa4:	2307      	movs	r3, #7
 8001fa6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fac:	4619      	mov	r1, r3
 8001fae:	480a      	ldr	r0, [pc, #40]	; (8001fd8 <HAL_UART_MspInit+0x14c>)
 8001fb0:	f002 fdac 	bl	8004b0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	2027      	movs	r0, #39	; 0x27
 8001fba:	f002 fa4d 	bl	8004458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001fbe:	2027      	movs	r0, #39	; 0x27
 8001fc0:	f002 fa64 	bl	800448c <HAL_NVIC_EnableIRQ>
}
 8001fc4:	bf00      	nop
 8001fc6:	3780      	adds	r7, #128	; 0x80
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40004400 	.word	0x40004400
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40004800 	.word	0x40004800
 8001fd8:	48000800 	.word	0x48000800

08001fdc <codeur_start>:
 * Cette fonction démarre le compteur d'encodeur sur le Timer 3 en mode interruption. L'encodeur est
 * configuré pour surveiller les deux canaux(TIM_CHANNEL_ALL).
 *
 * @note Vous devez appeler cette fonction pour activer l'acquisition des impulsions de l'encodeur.
 */
void codeur_start(void){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_ALL);
 8001fe0:	213c      	movs	r1, #60	; 0x3c
 8001fe2:	4802      	ldr	r0, [pc, #8]	; (8001fec <codeur_start+0x10>)
 8001fe4:	f004 fb3e 	bl	8006664 <HAL_TIM_Encoder_Start_IT>
}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20000330 	.word	0x20000330

08001ff0 <HAL_TIM_IC_CaptureCallback>:
 *
 * @param htim Un pointeur vers la structure TIM_HandleTypeDef associée à l'interruption.
 *
 * @note Cette fonction est destinée à être utilisée en tant que rappel (callback) pour gérer la capture d'interruption du Timer.
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(&htim3); //valeur du compteur absolue
 8001ff8:	4b07      	ldr	r3, [pc, #28]	; (8002018 <HAL_TIM_IC_CaptureCallback+0x28>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	4a07      	ldr	r2, [pc, #28]	; (800201c <HAL_TIM_IC_CaptureCallback+0x2c>)
 8002000:	6013      	str	r3, [r2, #0]
	pos = (int16_t)counter; //valeur du compteur avec les valeurs négatives
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_TIM_IC_CaptureCallback+0x2c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	b21a      	sxth	r2, r3
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_TIM_IC_CaptureCallback+0x30>)
 800200a:	801a      	strh	r2, [r3, #0]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	20000330 	.word	0x20000330
 800201c:	2000049c 	.word	0x2000049c
 8002020:	200004a0 	.word	0x200004a0

08002024 <calc_speed>:
 * La vitesse est exprimée en fronts par seconde (front/s) et est stockée dans la variable 'vitesse'.
 * Après le calcul, la variable 'old_pos' est mise à jour avec la valeur actuelle de 'pos', et 'idx' est réinitialisé à 0.
 *
 * @note Cette fonction doit être appelée toutes les 500ms à l'aide de systick pour mettre à jour la vitesse en temps réel.
 */
void calc_speed(){
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
	vitesse = (((pos - oldpos)*10)/reduRation)/hall_resolution; //speed in incr/sec, 2=1/500 ms,
 8002028:	4b13      	ldr	r3, [pc, #76]	; (8002078 <calc_speed+0x54>)
 800202a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202e:	461a      	mov	r2, r3
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <calc_speed+0x58>)
 8002032:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002036:	1ad2      	subs	r2, r2, r3
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	461a      	mov	r2, r3
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <calc_speed+0x5c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	fb92 f3f3 	sdiv	r3, r2, r3
 800204a:	ee07 3a90 	vmov	s15, r3
 800204e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <calc_speed+0x60>)
 8002054:	ed93 7a00 	vldr	s14, [r3]
 8002058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800205c:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <calc_speed+0x64>)
 800205e:	edc3 7a00 	vstr	s15, [r3]
	oldpos = pos;
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <calc_speed+0x54>)
 8002064:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002068:	4b04      	ldr	r3, [pc, #16]	; (800207c <calc_speed+0x58>)
 800206a:	801a      	strh	r2, [r3, #0]
	//vitesse=(pos-old_pos)*1000/dt; //vitesse en front/s
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	200004a0 	.word	0x200004a0
 800207c:	200004a2 	.word	0x200004a2
 8002080:	20000008 	.word	0x20000008
 8002084:	2000000c 	.word	0x2000000c
 8002088:	200004a4 	.word	0x200004a4

0800208c <pwm_start>:
 * Cette fonction démarre le PWM sur les canaux 1 et 2 du Timer 1.
 * Elle active la sortie PWM et la sortie complémentaire PWM (PWMN) sur ces canaux.
 *
 * @note Cette fonction doit être appelée après avoir configuré les paramètres PWM appropriés.
 */
void pwm_start(void){
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002090:	2100      	movs	r1, #0
 8002092:	480a      	ldr	r0, [pc, #40]	; (80020bc <pwm_start+0x30>)
 8002094:	f004 f892 	bl	80061bc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8002098:	2100      	movs	r1, #0
 800209a:	4808      	ldr	r0, [pc, #32]	; (80020bc <pwm_start+0x30>)
 800209c:	f005 fbec 	bl	8007878 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80020a0:	2104      	movs	r1, #4
 80020a2:	4806      	ldr	r0, [pc, #24]	; (80020bc <pwm_start+0x30>)
 80020a4:	f004 f88a 	bl	80061bc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80020a8:	2104      	movs	r1, #4
 80020aa:	4804      	ldr	r0, [pc, #16]	; (80020bc <pwm_start+0x30>)
 80020ac:	f005 fbe4 	bl	8007878 <HAL_TIMEx_PWMN_Start>

	aTemp=50;
 80020b0:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <pwm_start+0x34>)
 80020b2:	2232      	movs	r2, #50	; 0x32
 80020b4:	601a      	str	r2, [r3, #0]

}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200002e4 	.word	0x200002e4
 80020c0:	200004a8 	.word	0x200004a8

080020c4 <pwm_stop>:
 * Cette fonction arrete le PWM sur les canaux 1 et 2 du Timer 1.
 * Elle désactive la sortie PWM et la sortie complémentaire PWM (PWMN) sur ces canaux.
 *
 */

void pwm_stop(void){
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
	set_pwm_alpha(50);
 80020c8:	2032      	movs	r0, #50	; 0x32
 80020ca:	f000 f815 	bl	80020f8 <set_pwm_alpha>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80020ce:	2100      	movs	r1, #0
 80020d0:	4808      	ldr	r0, [pc, #32]	; (80020f4 <pwm_stop+0x30>)
 80020d2:	f004 f985 	bl	80063e0 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80020d6:	2100      	movs	r1, #0
 80020d8:	4806      	ldr	r0, [pc, #24]	; (80020f4 <pwm_stop+0x30>)
 80020da:	f005 fc8f 	bl	80079fc <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80020de:	2104      	movs	r1, #4
 80020e0:	4804      	ldr	r0, [pc, #16]	; (80020f4 <pwm_stop+0x30>)
 80020e2:	f004 f97d 	bl	80063e0 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80020e6:	2104      	movs	r1, #4
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <pwm_stop+0x30>)
 80020ea:	f005 fc87 	bl	80079fc <HAL_TIMEx_PWMN_Stop>
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200002e4 	.word	0x200002e4

080020f8 <set_pwm_alpha>:
 *
 * @param alpha La valeur du paramètre alpha en pourcentage (entre 0 et 100).
 *
 * @note Assurez-vous que le Timer 1 est configuré correctement pour le fonctionnement PWM avant d'appeler cette fonction.
 */
void set_pwm_alpha(int alpha){
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	int a1;
	int a2;
	int aTransi=aTemp;
 8002100:	4b2f      	ldr	r3, [pc, #188]	; (80021c0 <set_pwm_alpha+0xc8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	617b      	str	r3, [r7, #20]

	if (alpha > aTransi){
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	429a      	cmp	r2, r3
 800210c:	dd26      	ble.n	800215c <set_pwm_alpha+0x64>
		while(aTransi != alpha){
 800210e:	e021      	b.n	8002154 <set_pwm_alpha+0x5c>

			aTransi++;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	3301      	adds	r3, #1
 8002114:	617b      	str	r3, [r7, #20]
			a1=alpha_MAX*aTransi/PWM_MAX;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	029b      	lsls	r3, r3, #10
 800211a:	4a2a      	ldr	r2, [pc, #168]	; (80021c4 <set_pwm_alpha+0xcc>)
 800211c:	fb82 1203 	smull	r1, r2, r2, r3
 8002120:	1152      	asrs	r2, r2, #5
 8002122:	17db      	asrs	r3, r3, #31
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	613b      	str	r3, [r7, #16]
			a2=alpha_MAX*(PWM_MAX-aTransi)/PWM_MAX;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800212e:	029b      	lsls	r3, r3, #10
 8002130:	4a24      	ldr	r2, [pc, #144]	; (80021c4 <set_pwm_alpha+0xcc>)
 8002132:	fb82 1203 	smull	r1, r2, r2, r3
 8002136:	1152      	asrs	r2, r2, #5
 8002138:	17db      	asrs	r3, r3, #31
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,a1);
 800213e:	4b22      	ldr	r3, [pc, #136]	; (80021c8 <set_pwm_alpha+0xd0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,a2);
 8002146:	4b20      	ldr	r3, [pc, #128]	; (80021c8 <set_pwm_alpha+0xd0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(50);
 800214e:	2032      	movs	r0, #50	; 0x32
 8002150:	f000 faba 	bl	80026c8 <HAL_Delay>
		while(aTransi != alpha){
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	429a      	cmp	r2, r3
 800215a:	d1d9      	bne.n	8002110 <set_pwm_alpha+0x18>
		}
	}

	if (alpha < aTransi){
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	429a      	cmp	r2, r3
 8002162:	da26      	bge.n	80021b2 <set_pwm_alpha+0xba>
		while(aTransi != alpha){
 8002164:	e021      	b.n	80021aa <set_pwm_alpha+0xb2>

			aTransi--;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	3b01      	subs	r3, #1
 800216a:	617b      	str	r3, [r7, #20]
			a1=alpha_MAX*aTransi/PWM_MAX;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	029b      	lsls	r3, r3, #10
 8002170:	4a14      	ldr	r2, [pc, #80]	; (80021c4 <set_pwm_alpha+0xcc>)
 8002172:	fb82 1203 	smull	r1, r2, r2, r3
 8002176:	1152      	asrs	r2, r2, #5
 8002178:	17db      	asrs	r3, r3, #31
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	613b      	str	r3, [r7, #16]
			a2=alpha_MAX*(PWM_MAX-aTransi)/PWM_MAX;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8002184:	029b      	lsls	r3, r3, #10
 8002186:	4a0f      	ldr	r2, [pc, #60]	; (80021c4 <set_pwm_alpha+0xcc>)
 8002188:	fb82 1203 	smull	r1, r2, r2, r3
 800218c:	1152      	asrs	r2, r2, #5
 800218e:	17db      	asrs	r3, r3, #31
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,a1);
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <set_pwm_alpha+0xd0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,a2);
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <set_pwm_alpha+0xd0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(50);
 80021a4:	2032      	movs	r0, #50	; 0x32
 80021a6:	f000 fa8f 	bl	80026c8 <HAL_Delay>
		while(aTransi != alpha){
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d1d9      	bne.n	8002166 <set_pwm_alpha+0x6e>
		}
	}
	aTemp = alpha;
 80021b2:	4a03      	ldr	r2, [pc, #12]	; (80021c0 <set_pwm_alpha+0xc8>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6013      	str	r3, [r2, #0]

}
 80021b8:	bf00      	nop
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	200004a8 	.word	0x200004a8
 80021c4:	51eb851f 	.word	0x51eb851f
 80021c8:	200002e4 	.word	0x200002e4

080021cc <Shell_Init>:
/**
 * @brief Fonction d'initialisation du Shell
 * @note Affiche un message d'accueil lors du lançement du programme
 */

void Shell_Init(void){
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 80021d0:	2224      	movs	r2, #36	; 0x24
 80021d2:	2100      	movs	r1, #0
 80021d4:	4816      	ldr	r0, [pc, #88]	; (8002230 <Shell_Init+0x64>)
 80021d6:	f008 f862 	bl	800a29e <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 80021da:	2240      	movs	r2, #64	; 0x40
 80021dc:	2100      	movs	r1, #0
 80021de:	4815      	ldr	r0, [pc, #84]	; (8002234 <Shell_Init+0x68>)
 80021e0:	f008 f85d 	bl	800a29e <memset>
 80021e4:	4b14      	ldr	r3, [pc, #80]	; (8002238 <Shell_Init+0x6c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 80021ea:	2240      	movs	r2, #64	; 0x40
 80021ec:	2100      	movs	r1, #0
 80021ee:	4813      	ldr	r0, [pc, #76]	; (800223c <Shell_Init+0x70>)
 80021f0:	f008 f855 	bl	800a29e <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80021f4:	2201      	movs	r2, #1
 80021f6:	4910      	ldr	r1, [pc, #64]	; (8002238 <Shell_Init+0x6c>)
 80021f8:	4811      	ldr	r0, [pc, #68]	; (8002240 <Shell_Init+0x74>)
 80021fa:	f005 ff09 	bl	8008010 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 80021fe:	4811      	ldr	r0, [pc, #68]	; (8002244 <Shell_Init+0x78>)
 8002200:	f7fe f818 	bl	8000234 <strlen>
 8002204:	4603      	mov	r3, r0
 8002206:	b29a      	uxth	r2, r3
 8002208:	f04f 33ff 	mov.w	r3, #4294967295
 800220c:	490d      	ldr	r1, [pc, #52]	; (8002244 <Shell_Init+0x78>)
 800220e:	480c      	ldr	r0, [pc, #48]	; (8002240 <Shell_Init+0x74>)
 8002210:	f005 fe68 	bl	8007ee4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8002214:	480c      	ldr	r0, [pc, #48]	; (8002248 <Shell_Init+0x7c>)
 8002216:	f7fe f80d 	bl	8000234 <strlen>
 800221a:	4603      	mov	r3, r0
 800221c:	b29a      	uxth	r2, r3
 800221e:	f04f 33ff 	mov.w	r3, #4294967295
 8002222:	4909      	ldr	r1, [pc, #36]	; (8002248 <Shell_Init+0x7c>)
 8002224:	4806      	ldr	r0, [pc, #24]	; (8002240 <Shell_Init+0x74>)
 8002226:	f005 fe5d 	bl	8007ee4 <HAL_UART_Transmit>
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000538 	.word	0x20000538
 8002234:	200004f4 	.word	0x200004f4
 8002238:	200004b0 	.word	0x200004b0
 800223c:	200004b4 	.word	0x200004b4
 8002240:	2000037c 	.word	0x2000037c
 8002244:	2000002c 	.word	0x2000002c
 8002248:	20000010 	.word	0x20000010

0800224c <Shell_Loop>:

/**
 * @brief Cette fonction tourne en boucle afin de recevoir et d'exécuter les commandes du Shell
 */
void Shell_Loop(void){
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	; 0x28
 8002250:	af00      	add	r7, sp, #0
	if(uartRxReceived){ //Condition verifiée lors de la réception d'un nouveau caractère UART
 8002252:	4b9b      	ldr	r3, [pc, #620]	; (80024c0 <Shell_Loop+0x274>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d05b      	beq.n	8002312 <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 800225a:	4b9a      	ldr	r3, [pc, #616]	; (80024c4 <Shell_Loop+0x278>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b08      	cmp	r3, #8
 8002260:	d034      	beq.n	80022cc <Shell_Loop+0x80>
 8002262:	2b0d      	cmp	r3, #13
 8002264:	d142      	bne.n	80022ec <Shell_Loop+0xa0>
		case ASCII_CR: //Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8002266:	f04f 33ff 	mov.w	r3, #4294967295
 800226a:	2203      	movs	r2, #3
 800226c:	4996      	ldr	r1, [pc, #600]	; (80024c8 <Shell_Loop+0x27c>)
 800226e:	4897      	ldr	r0, [pc, #604]	; (80024cc <Shell_Loop+0x280>)
 8002270:	f005 fe38 	bl	8007ee4 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8002274:	4b96      	ldr	r3, [pc, #600]	; (80024d0 <Shell_Loop+0x284>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a96      	ldr	r2, [pc, #600]	; (80024d4 <Shell_Loop+0x288>)
 800227a:	2100      	movs	r1, #0
 800227c:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 800227e:	4b96      	ldr	r3, [pc, #600]	; (80024d8 <Shell_Loop+0x28c>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8002284:	4995      	ldr	r1, [pc, #596]	; (80024dc <Shell_Loop+0x290>)
 8002286:	4893      	ldr	r0, [pc, #588]	; (80024d4 <Shell_Loop+0x288>)
 8002288:	f008 f812 	bl	800a2b0 <strtok>
 800228c:	4603      	mov	r3, r0
 800228e:	4a94      	ldr	r2, [pc, #592]	; (80024e0 <Shell_Loop+0x294>)
 8002290:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8002292:	e010      	b.n	80022b6 <Shell_Loop+0x6a>
				argv[argc++] = token;
 8002294:	4b90      	ldr	r3, [pc, #576]	; (80024d8 <Shell_Loop+0x28c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	498f      	ldr	r1, [pc, #572]	; (80024d8 <Shell_Loop+0x28c>)
 800229c:	600a      	str	r2, [r1, #0]
 800229e:	4a90      	ldr	r2, [pc, #576]	; (80024e0 <Shell_Loop+0x294>)
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	4990      	ldr	r1, [pc, #576]	; (80024e4 <Shell_Loop+0x298>)
 80022a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 80022a8:	498c      	ldr	r1, [pc, #560]	; (80024dc <Shell_Loop+0x290>)
 80022aa:	2000      	movs	r0, #0
 80022ac:	f008 f800 	bl	800a2b0 <strtok>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4a8b      	ldr	r2, [pc, #556]	; (80024e0 <Shell_Loop+0x294>)
 80022b4:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80022b6:	4b8a      	ldr	r3, [pc, #552]	; (80024e0 <Shell_Loop+0x294>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1ea      	bne.n	8002294 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 80022be:	4b84      	ldr	r3, [pc, #528]	; (80024d0 <Shell_Loop+0x284>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 80022c4:	4b88      	ldr	r3, [pc, #544]	; (80024e8 <Shell_Loop+0x29c>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
			break;
 80022ca:	e01f      	b.n	800230c <Shell_Loop+0xc0>
		case ASCII_BACK: //Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 80022cc:	4b80      	ldr	r3, [pc, #512]	; (80024d0 <Shell_Loop+0x284>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	1e5a      	subs	r2, r3, #1
 80022d2:	497f      	ldr	r1, [pc, #508]	; (80024d0 <Shell_Loop+0x284>)
 80022d4:	600a      	str	r2, [r1, #0]
 80022d6:	4a7f      	ldr	r2, [pc, #508]	; (80024d4 <Shell_Loop+0x288>)
 80022d8:	2100      	movs	r1, #0
 80022da:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 80022dc:	f04f 33ff 	mov.w	r3, #4294967295
 80022e0:	2204      	movs	r2, #4
 80022e2:	4982      	ldr	r1, [pc, #520]	; (80024ec <Shell_Loop+0x2a0>)
 80022e4:	4879      	ldr	r0, [pc, #484]	; (80024cc <Shell_Loop+0x280>)
 80022e6:	f005 fdfd 	bl	8007ee4 <HAL_UART_Transmit>
			break;
 80022ea:	e00f      	b.n	800230c <Shell_Loop+0xc0>

		default: //Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80022ec:	4b78      	ldr	r3, [pc, #480]	; (80024d0 <Shell_Loop+0x284>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	4977      	ldr	r1, [pc, #476]	; (80024d0 <Shell_Loop+0x284>)
 80022f4:	600a      	str	r2, [r1, #0]
 80022f6:	4a73      	ldr	r2, [pc, #460]	; (80024c4 <Shell_Loop+0x278>)
 80022f8:	7811      	ldrb	r1, [r2, #0]
 80022fa:	4a76      	ldr	r2, [pc, #472]	; (80024d4 <Shell_Loop+0x288>)
 80022fc:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002302:	2201      	movs	r2, #1
 8002304:	496f      	ldr	r1, [pc, #444]	; (80024c4 <Shell_Loop+0x278>)
 8002306:	4871      	ldr	r0, [pc, #452]	; (80024cc <Shell_Loop+0x280>)
 8002308:	f005 fdec 	bl	8007ee4 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 800230c:	4b6c      	ldr	r3, [pc, #432]	; (80024c0 <Shell_Loop+0x274>)
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){ //Condition vérifiant la validitée d'une commande
 8002312:	4b75      	ldr	r3, [pc, #468]	; (80024e8 <Shell_Loop+0x29c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 8147 	beq.w	80025aa <Shell_Loop+0x35e>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 800231c:	4b71      	ldr	r3, [pc, #452]	; (80024e4 <Shell_Loop+0x298>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4973      	ldr	r1, [pc, #460]	; (80024f0 <Shell_Loop+0x2a4>)
 8002322:	4618      	mov	r0, r3
 8002324:	f7fd ff7c 	bl	8000220 <strcmp>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d107      	bne.n	800233e <Shell_Loop+0xf2>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 800232e:	f04f 33ff 	mov.w	r3, #4294967295
 8002332:	221a      	movs	r2, #26
 8002334:	496f      	ldr	r1, [pc, #444]	; (80024f4 <Shell_Loop+0x2a8>)
 8002336:	4865      	ldr	r0, [pc, #404]	; (80024cc <Shell_Loop+0x280>)
 8002338:	f005 fdd4 	bl	8007ee4 <HAL_UART_Transmit>
 800233c:	e12b      	b.n	8002596 <Shell_Loop+0x34a>
		}
		else if(strcmp(argv[0],"help")==0){//Fonction help renvoyant la notice des fonctions spécifiées
 800233e:	4b69      	ldr	r3, [pc, #420]	; (80024e4 <Shell_Loop+0x298>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	496d      	ldr	r1, [pc, #436]	; (80024f8 <Shell_Loop+0x2ac>)
 8002344:	4618      	mov	r0, r3
 8002346:	f7fd ff6b 	bl	8000220 <strcmp>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d126      	bne.n	800239e <Shell_Loop+0x152>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 8002350:	4a6a      	ldr	r2, [pc, #424]	; (80024fc <Shell_Loop+0x2b0>)
 8002352:	2140      	movs	r1, #64	; 0x40
 8002354:	486a      	ldr	r0, [pc, #424]	; (8002500 <Shell_Loop+0x2b4>)
 8002356:	f007 ff2b 	bl	800a1b0 <sniprintf>
 800235a:	60b8      	str	r0, [r7, #8]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	b29a      	uxth	r2, r3
 8002360:	f04f 33ff 	mov.w	r3, #4294967295
 8002364:	4966      	ldr	r1, [pc, #408]	; (8002500 <Shell_Loop+0x2b4>)
 8002366:	4859      	ldr	r0, [pc, #356]	; (80024cc <Shell_Loop+0x280>)
 8002368:	f005 fdbc 	bl	8007ee4 <HAL_UART_Transmit>
			if(strcmp(argv[1],"speed")==0){
 800236c:	4b5d      	ldr	r3, [pc, #372]	; (80024e4 <Shell_Loop+0x298>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	4964      	ldr	r1, [pc, #400]	; (8002504 <Shell_Loop+0x2b8>)
 8002372:	4618      	mov	r0, r3
 8002374:	f7fd ff54 	bl	8000220 <strcmp>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	f040 810b 	bne.w	8002596 <Shell_Loop+0x34a>
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Prend en argument un rapport cyclique entre 0 et 100\r\n");
 8002380:	4a61      	ldr	r2, [pc, #388]	; (8002508 <Shell_Loop+0x2bc>)
 8002382:	2140      	movs	r1, #64	; 0x40
 8002384:	485e      	ldr	r0, [pc, #376]	; (8002500 <Shell_Loop+0x2b4>)
 8002386:	f007 ff13 	bl	800a1b0 <sniprintf>
 800238a:	6078      	str	r0, [r7, #4]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	b29a      	uxth	r2, r3
 8002390:	f04f 33ff 	mov.w	r3, #4294967295
 8002394:	495a      	ldr	r1, [pc, #360]	; (8002500 <Shell_Loop+0x2b4>)
 8002396:	484d      	ldr	r0, [pc, #308]	; (80024cc <Shell_Loop+0x280>)
 8002398:	f005 fda4 	bl	8007ee4 <HAL_UART_Transmit>
 800239c:	e0fb      	b.n	8002596 <Shell_Loop+0x34a>
			}
		}
		else if(strcmp(argv[0],"speed")==0){//Fonction permettant de choisir le sens de rotation et la vitesse du moteur
 800239e:	4b51      	ldr	r3, [pc, #324]	; (80024e4 <Shell_Loop+0x298>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4958      	ldr	r1, [pc, #352]	; (8002504 <Shell_Loop+0x2b8>)
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fd ff3b 	bl	8000220 <strcmp>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d154      	bne.n	800245a <Shell_Loop+0x20e>
			if(atoi(argv[1])>=0){//La valeur de vitesse reçue étant une chaine de caractères ASCII, atoi permet de la convertir en entier
 80023b0:	4b4c      	ldr	r3, [pc, #304]	; (80024e4 <Shell_Loop+0x298>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f007 fdbb 	bl	8009f30 <atoi>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	db37      	blt.n	8002430 <Shell_Loop+0x1e4>
				if(atoi(argv[1])<=100){
 80023c0:	4b48      	ldr	r3, [pc, #288]	; (80024e4 <Shell_Loop+0x298>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f007 fdb3 	bl	8009f30 <atoi>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b64      	cmp	r3, #100	; 0x64
 80023ce:	dc1d      	bgt.n	800240c <Shell_Loop+0x1c0>
					set_pwm_alpha(atoi(argv[1]));//Appelle à la fonction permettant de changer le rapport cyclique
 80023d0:	4b44      	ldr	r3, [pc, #272]	; (80024e4 <Shell_Loop+0x298>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f007 fdab 	bl	8009f30 <atoi>
 80023da:	4603      	mov	r3, r0
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fe8b 	bl	80020f8 <set_pwm_alpha>
					int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Nouveau alpha = %d\r\n",atoi(argv[1]));
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <Shell_Loop+0x298>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f007 fda2 	bl	8009f30 <atoi>
 80023ec:	4603      	mov	r3, r0
 80023ee:	4a47      	ldr	r2, [pc, #284]	; (800250c <Shell_Loop+0x2c0>)
 80023f0:	2140      	movs	r1, #64	; 0x40
 80023f2:	4843      	ldr	r0, [pc, #268]	; (8002500 <Shell_Loop+0x2b4>)
 80023f4:	f007 fedc 	bl	800a1b0 <sniprintf>
 80023f8:	60f8      	str	r0, [r7, #12]
					HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002402:	493f      	ldr	r1, [pc, #252]	; (8002500 <Shell_Loop+0x2b4>)
 8002404:	4831      	ldr	r0, [pc, #196]	; (80024cc <Shell_Loop+0x280>)
 8002406:	f005 fd6d 	bl	8007ee4 <HAL_UART_Transmit>
 800240a:	e0c4      	b.n	8002596 <Shell_Loop+0x34a>
				}
				else{//Sécuritée permettant de ne pas avoir un rapport cyclique supérieur à 100
					set_pwm_alpha(100);
 800240c:	2064      	movs	r0, #100	; 0x64
 800240e:	f7ff fe73 	bl	80020f8 <set_pwm_alpha>
					int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Nouveau alpha = 100\r\n");
 8002412:	4a3f      	ldr	r2, [pc, #252]	; (8002510 <Shell_Loop+0x2c4>)
 8002414:	2140      	movs	r1, #64	; 0x40
 8002416:	483a      	ldr	r0, [pc, #232]	; (8002500 <Shell_Loop+0x2b4>)
 8002418:	f007 feca 	bl	800a1b0 <sniprintf>
 800241c:	6138      	str	r0, [r7, #16]
					HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	b29a      	uxth	r2, r3
 8002422:	f04f 33ff 	mov.w	r3, #4294967295
 8002426:	4936      	ldr	r1, [pc, #216]	; (8002500 <Shell_Loop+0x2b4>)
 8002428:	4828      	ldr	r0, [pc, #160]	; (80024cc <Shell_Loop+0x280>)
 800242a:	f005 fd5b 	bl	8007ee4 <HAL_UART_Transmit>
 800242e:	e0b2      	b.n	8002596 <Shell_Loop+0x34a>
				}
			}
			else{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Erreur alpha doit être compris entre 0 et 100\r\n",atoi(argv[1]));
 8002430:	4b2c      	ldr	r3, [pc, #176]	; (80024e4 <Shell_Loop+0x298>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4618      	mov	r0, r3
 8002436:	f007 fd7b 	bl	8009f30 <atoi>
 800243a:	4603      	mov	r3, r0
 800243c:	4a35      	ldr	r2, [pc, #212]	; (8002514 <Shell_Loop+0x2c8>)
 800243e:	2140      	movs	r1, #64	; 0x40
 8002440:	482f      	ldr	r0, [pc, #188]	; (8002500 <Shell_Loop+0x2b4>)
 8002442:	f007 feb5 	bl	800a1b0 <sniprintf>
 8002446:	6178      	str	r0, [r7, #20]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	b29a      	uxth	r2, r3
 800244c:	f04f 33ff 	mov.w	r3, #4294967295
 8002450:	492b      	ldr	r1, [pc, #172]	; (8002500 <Shell_Loop+0x2b4>)
 8002452:	481e      	ldr	r0, [pc, #120]	; (80024cc <Shell_Loop+0x280>)
 8002454:	f005 fd46 	bl	8007ee4 <HAL_UART_Transmit>
 8002458:	e09d      	b.n	8002596 <Shell_Loop+0x34a>
			}
		}

		else if(strcmp(argv[0],"start")==0){//Fonction permettant d'allumer les PWM
 800245a:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <Shell_Loop+0x298>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	492e      	ldr	r1, [pc, #184]	; (8002518 <Shell_Loop+0x2cc>)
 8002460:	4618      	mov	r0, r3
 8002462:	f7fd fedd 	bl	8000220 <strcmp>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d15d      	bne.n	8002528 <Shell_Loop+0x2dc>
			if(motorStart == 0){
 800246c:	4b2b      	ldr	r3, [pc, #172]	; (800251c <Shell_Loop+0x2d0>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d116      	bne.n	80024a2 <Shell_Loop+0x256>
				pwm_start();
 8002474:	f7ff fe0a 	bl	800208c <pwm_start>
				set_pwm_alpha(50);
 8002478:	2032      	movs	r0, #50	; 0x32
 800247a:	f7ff fe3d 	bl	80020f8 <set_pwm_alpha>
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Motor start\r\nalpha = 50\r\n");
 800247e:	4a28      	ldr	r2, [pc, #160]	; (8002520 <Shell_Loop+0x2d4>)
 8002480:	2140      	movs	r1, #64	; 0x40
 8002482:	481f      	ldr	r0, [pc, #124]	; (8002500 <Shell_Loop+0x2b4>)
 8002484:	f007 fe94 	bl	800a1b0 <sniprintf>
 8002488:	61b8      	str	r0, [r7, #24]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	b29a      	uxth	r2, r3
 800248e:	f04f 33ff 	mov.w	r3, #4294967295
 8002492:	491b      	ldr	r1, [pc, #108]	; (8002500 <Shell_Loop+0x2b4>)
 8002494:	480d      	ldr	r0, [pc, #52]	; (80024cc <Shell_Loop+0x280>)
 8002496:	f005 fd25 	bl	8007ee4 <HAL_UART_Transmit>
				motorStart =1;
 800249a:	4b20      	ldr	r3, [pc, #128]	; (800251c <Shell_Loop+0x2d0>)
 800249c:	2201      	movs	r2, #1
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	e079      	b.n	8002596 <Shell_Loop+0x34a>
			}
			else{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Motor is already on\r\n");
 80024a2:	4a20      	ldr	r2, [pc, #128]	; (8002524 <Shell_Loop+0x2d8>)
 80024a4:	2140      	movs	r1, #64	; 0x40
 80024a6:	4816      	ldr	r0, [pc, #88]	; (8002500 <Shell_Loop+0x2b4>)
 80024a8:	f007 fe82 	bl	800a1b0 <sniprintf>
 80024ac:	61f8      	str	r0, [r7, #28]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
 80024b6:	4912      	ldr	r1, [pc, #72]	; (8002500 <Shell_Loop+0x2b4>)
 80024b8:	4804      	ldr	r0, [pc, #16]	; (80024cc <Shell_Loop+0x280>)
 80024ba:	f005 fd13 	bl	8007ee4 <HAL_UART_Transmit>
 80024be:	e06a      	b.n	8002596 <Shell_Loop+0x34a>
 80024c0:	200004ac 	.word	0x200004ac
 80024c4:	200004b0 	.word	0x200004b0
 80024c8:	20000094 	.word	0x20000094
 80024cc:	2000037c 	.word	0x2000037c
 80024d0:	20000534 	.word	0x20000534
 80024d4:	200004f4 	.word	0x200004f4
 80024d8:	2000055c 	.word	0x2000055c
 80024dc:	0800b430 	.word	0x0800b430
 80024e0:	20000560 	.word	0x20000560
 80024e4:	20000538 	.word	0x20000538
 80024e8:	20000564 	.word	0x20000564
 80024ec:	20000098 	.word	0x20000098
 80024f0:	0800b434 	.word	0x0800b434
 80024f4:	200000b0 	.word	0x200000b0
 80024f8:	0800b444 	.word	0x0800b444
 80024fc:	0800b44c 	.word	0x0800b44c
 8002500:	200004b4 	.word	0x200004b4
 8002504:	0800b474 	.word	0x0800b474
 8002508:	0800b47c 	.word	0x0800b47c
 800250c:	0800b4b4 	.word	0x0800b4b4
 8002510:	0800b4cc 	.word	0x0800b4cc
 8002514:	0800b4e4 	.word	0x0800b4e4
 8002518:	0800b518 	.word	0x0800b518
 800251c:	20000568 	.word	0x20000568
 8002520:	0800b520 	.word	0x0800b520
 8002524:	0800b53c 	.word	0x0800b53c
			}
		}

		else if(strcmp(argv[0],"stop")==0){//Fonction permettant d'éteindre les PWM
 8002528:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <Shell_Loop+0x368>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4922      	ldr	r1, [pc, #136]	; (80025b8 <Shell_Loop+0x36c>)
 800252e:	4618      	mov	r0, r3
 8002530:	f7fd fe76 	bl	8000220 <strcmp>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d126      	bne.n	8002588 <Shell_Loop+0x33c>
					if(motorStart == 1){
 800253a:	4b20      	ldr	r3, [pc, #128]	; (80025bc <Shell_Loop+0x370>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d113      	bne.n	800256a <Shell_Loop+0x31e>
						pwm_stop();
 8002542:	f7ff fdbf 	bl	80020c4 <pwm_stop>
						int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Motor stop\r\n");
 8002546:	4a1e      	ldr	r2, [pc, #120]	; (80025c0 <Shell_Loop+0x374>)
 8002548:	2140      	movs	r1, #64	; 0x40
 800254a:	481e      	ldr	r0, [pc, #120]	; (80025c4 <Shell_Loop+0x378>)
 800254c:	f007 fe30 	bl	800a1b0 <sniprintf>
 8002550:	6238      	str	r0, [r7, #32]
						HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	b29a      	uxth	r2, r3
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
 800255a:	491a      	ldr	r1, [pc, #104]	; (80025c4 <Shell_Loop+0x378>)
 800255c:	481a      	ldr	r0, [pc, #104]	; (80025c8 <Shell_Loop+0x37c>)
 800255e:	f005 fcc1 	bl	8007ee4 <HAL_UART_Transmit>
						motorStart =0;
 8002562:	4b16      	ldr	r3, [pc, #88]	; (80025bc <Shell_Loop+0x370>)
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e015      	b.n	8002596 <Shell_Loop+0x34a>
					}
					else{
						int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Motor is already off\r\n");
 800256a:	4a18      	ldr	r2, [pc, #96]	; (80025cc <Shell_Loop+0x380>)
 800256c:	2140      	movs	r1, #64	; 0x40
 800256e:	4815      	ldr	r0, [pc, #84]	; (80025c4 <Shell_Loop+0x378>)
 8002570:	f007 fe1e 	bl	800a1b0 <sniprintf>
 8002574:	6278      	str	r0, [r7, #36]	; 0x24
						HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	b29a      	uxth	r2, r3
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
 800257e:	4911      	ldr	r1, [pc, #68]	; (80025c4 <Shell_Loop+0x378>)
 8002580:	4811      	ldr	r0, [pc, #68]	; (80025c8 <Shell_Loop+0x37c>)
 8002582:	f005 fcaf 	bl	8007ee4 <HAL_UART_Transmit>
 8002586:	e006      	b.n	8002596 <Shell_Loop+0x34a>
					}
				}

		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8002588:	f04f 33ff 	mov.w	r3, #4294967295
 800258c:	2214      	movs	r2, #20
 800258e:	4910      	ldr	r1, [pc, #64]	; (80025d0 <Shell_Loop+0x384>)
 8002590:	480d      	ldr	r0, [pc, #52]	; (80025c8 <Shell_Loop+0x37c>)
 8002592:	f005 fca7 	bl	8007ee4 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8002596:	f04f 33ff 	mov.w	r3, #4294967295
 800259a:	221c      	movs	r2, #28
 800259c:	490d      	ldr	r1, [pc, #52]	; (80025d4 <Shell_Loop+0x388>)
 800259e:	480a      	ldr	r0, [pc, #40]	; (80025c8 <Shell_Loop+0x37c>)
 80025a0:	f005 fca0 	bl	8007ee4 <HAL_UART_Transmit>
		newCmdReady = 0;
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <Shell_Loop+0x38c>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
	}
}
 80025aa:	bf00      	nop
 80025ac:	3728      	adds	r7, #40	; 0x28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000538 	.word	0x20000538
 80025b8:	0800b554 	.word	0x0800b554
 80025bc:	20000568 	.word	0x20000568
 80025c0:	0800b55c 	.word	0x0800b55c
 80025c4:	200004b4 	.word	0x200004b4
 80025c8:	2000037c 	.word	0x2000037c
 80025cc:	0800b56c 	.word	0x0800b56c
 80025d0:	2000009c 	.word	0x2000009c
 80025d4:	20000010 	.word	0x20000010
 80025d8:	20000564 	.word	0x20000564

080025dc <HAL_UART_RxCpltCallback>:

/**
 * @brief Fonction Callback appelée lors de la réception d'un nouveau caractère
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <HAL_UART_RxCpltCallback+0x20>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80025ea:	2201      	movs	r2, #1
 80025ec:	4904      	ldr	r1, [pc, #16]	; (8002600 <HAL_UART_RxCpltCallback+0x24>)
 80025ee:	4805      	ldr	r0, [pc, #20]	; (8002604 <HAL_UART_RxCpltCallback+0x28>)
 80025f0:	f005 fd0e 	bl	8008010 <HAL_UART_Receive_IT>
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	200004ac 	.word	0x200004ac
 8002600:	200004b0 	.word	0x200004b0
 8002604:	2000037c 	.word	0x2000037c

08002608 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002608:	480d      	ldr	r0, [pc, #52]	; (8002640 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800260a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800260c:	480d      	ldr	r0, [pc, #52]	; (8002644 <LoopForever+0x6>)
  ldr r1, =_edata
 800260e:	490e      	ldr	r1, [pc, #56]	; (8002648 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002610:	4a0e      	ldr	r2, [pc, #56]	; (800264c <LoopForever+0xe>)
  movs r3, #0
 8002612:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002614:	e002      	b.n	800261c <LoopCopyDataInit>

08002616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800261a:	3304      	adds	r3, #4

0800261c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800261c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800261e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002620:	d3f9      	bcc.n	8002616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002622:	4a0b      	ldr	r2, [pc, #44]	; (8002650 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002624:	4c0b      	ldr	r4, [pc, #44]	; (8002654 <LoopForever+0x16>)
  movs r3, #0
 8002626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002628:	e001      	b.n	800262e <LoopFillZerobss>

0800262a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800262a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800262c:	3204      	adds	r2, #4

0800262e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800262e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002630:	d3fb      	bcc.n	800262a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002632:	f7ff f969 	bl	8001908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002636:	f007 fee3 	bl	800a400 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800263a:	f7fe fec7 	bl	80013cc <main>

0800263e <LoopForever>:

LoopForever:
    b LoopForever
 800263e:	e7fe      	b.n	800263e <LoopForever>
  ldr   r0, =_estack
 8002640:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002648:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 800264c:	0800b7b8 	.word	0x0800b7b8
  ldr r2, =_sbss
 8002650:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8002654:	200006bc 	.word	0x200006bc

08002658 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002658:	e7fe      	b.n	8002658 <ADC3_IRQHandler>

0800265a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002664:	2003      	movs	r0, #3
 8002666:	f001 feec 	bl	8004442 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800266a:	200f      	movs	r0, #15
 800266c:	f7fe ff96 	bl	800159c <HAL_InitTick>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	71fb      	strb	r3, [r7, #7]
 800267a:	e001      	b.n	8002680 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800267c:	f7fe ff6a 	bl	8001554 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002680:	79fb      	ldrb	r3, [r7, #7]

}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <HAL_IncTick+0x1c>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_IncTick+0x20>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4413      	add	r3, r2
 800269a:	4a03      	ldr	r2, [pc, #12]	; (80026a8 <HAL_IncTick+0x1c>)
 800269c:	6013      	str	r3, [r2, #0]
}
 800269e:	bf00      	nop
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	2000056c 	.word	0x2000056c
 80026ac:	200000d0 	.word	0x200000d0

080026b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return uwTick;
 80026b4:	4b03      	ldr	r3, [pc, #12]	; (80026c4 <HAL_GetTick+0x14>)
 80026b6:	681b      	ldr	r3, [r3, #0]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	2000056c 	.word	0x2000056c

080026c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026d0:	f7ff ffee 	bl	80026b0 <HAL_GetTick>
 80026d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e0:	d004      	beq.n	80026ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <HAL_Delay+0x40>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	4413      	add	r3, r2
 80026ea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026ec:	bf00      	nop
 80026ee:	f7ff ffdf 	bl	80026b0 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d8f7      	bhi.n	80026ee <HAL_Delay+0x26>
  {
  }
}
 80026fe:	bf00      	nop
 8002700:	bf00      	nop
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	200000d0 	.word	0x200000d0

0800270c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	609a      	str	r2, [r3, #8]
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	609a      	str	r2, [r3, #8]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002768:	4618      	mov	r0, r3
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
 8002780:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	3360      	adds	r3, #96	; 0x60
 8002786:	461a      	mov	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <LL_ADC_SetOffset+0x44>)
 8002796:	4013      	ands	r3, r2
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80027ac:	bf00      	nop
 80027ae:	371c      	adds	r7, #28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	03fff000 	.word	0x03fff000

080027bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3360      	adds	r3, #96	; 0x60
 80027ca:	461a      	mov	r2, r3
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	3360      	adds	r3, #96	; 0x60
 80027f8:	461a      	mov	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	431a      	orrs	r2, r3
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002812:	bf00      	nop
 8002814:	371c      	adds	r7, #28
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800281e:	b480      	push	{r7}
 8002820:	b087      	sub	sp, #28
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3360      	adds	r3, #96	; 0x60
 800282e:	461a      	mov	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	431a      	orrs	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002848:	bf00      	nop
 800284a:	371c      	adds	r7, #28
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	3360      	adds	r3, #96	; 0x60
 8002864:	461a      	mov	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	431a      	orrs	r2, r3
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800287e:	bf00      	nop
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	615a      	str	r2, [r3, #20]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80028c4:	2301      	movs	r3, #1
 80028c6:	e000      	b.n	80028ca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b087      	sub	sp, #28
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	3330      	adds	r3, #48	; 0x30
 80028e6:	461a      	mov	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	0a1b      	lsrs	r3, r3, #8
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	4413      	add	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	211f      	movs	r1, #31
 8002902:	fa01 f303 	lsl.w	r3, r1, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	401a      	ands	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	0e9b      	lsrs	r3, r3, #26
 800290e:	f003 011f 	and.w	r1, r3, #31
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	fa01 f303 	lsl.w	r3, r1, r3
 800291c:	431a      	orrs	r2, r3
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002922:	bf00      	nop
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	3314      	adds	r3, #20
 8002964:	461a      	mov	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	0e5b      	lsrs	r3, r3, #25
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	4413      	add	r3, r2
 8002972:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	0d1b      	lsrs	r3, r3, #20
 800297c:	f003 031f 	and.w	r3, r3, #31
 8002980:	2107      	movs	r1, #7
 8002982:	fa01 f303 	lsl.w	r3, r1, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	401a      	ands	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	0d1b      	lsrs	r3, r3, #20
 800298e:	f003 031f 	and.w	r3, r3, #31
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	fa01 f303 	lsl.w	r3, r1, r3
 8002998:	431a      	orrs	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a0f      	ldr	r2, [pc, #60]	; (80029f8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d10a      	bne.n	80029d6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029cc:	431a      	orrs	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80029d4:	e00a      	b.n	80029ec <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e2:	43db      	mvns	r3, r3
 80029e4:	401a      	ands	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	407f0000 	.word	0x407f0000

080029fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 031f 	and.w	r3, r3, #31
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002a44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6093      	str	r3, [r2, #8]
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a6c:	d101      	bne.n	8002a72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002abc:	d101      	bne.n	8002ac2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ae0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ae4:	f043 0201 	orr.w	r2, r3, #1
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <LL_ADC_IsEnabled+0x18>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <LL_ADC_IsEnabled+0x1a>
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b2e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b32:	f043 0204 	orr.w	r2, r3, #4
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d101      	bne.n	8002b5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d101      	bne.n	8002b84 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b089      	sub	sp, #36	; 0x24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e1af      	b.n	8002f0e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d109      	bne.n	8002bd0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7fe f9e3 	bl	8000f88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ff3f 	bl	8002a58 <LL_ADC_IsDeepPowerDownEnabled>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d004      	beq.n	8002bea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff25 	bl	8002a34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff ff5a 	bl	8002aa8 <LL_ADC_IsInternalRegulatorEnabled>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d115      	bne.n	8002c26 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff ff3e 	bl	8002a80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c04:	4b9f      	ldr	r3, [pc, #636]	; (8002e84 <HAL_ADC_Init+0x2f0>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	099b      	lsrs	r3, r3, #6
 8002c0a:	4a9f      	ldr	r2, [pc, #636]	; (8002e88 <HAL_ADC_Init+0x2f4>)
 8002c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c10:	099b      	lsrs	r3, r3, #6
 8002c12:	3301      	adds	r3, #1
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c18:	e002      	b.n	8002c20 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f9      	bne.n	8002c1a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff ff3c 	bl	8002aa8 <LL_ADC_IsInternalRegulatorEnabled>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10d      	bne.n	8002c52 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3a:	f043 0210 	orr.w	r2, r3, #16
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c46:	f043 0201 	orr.w	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff ff75 	bl	8002b46 <LL_ADC_REG_IsConversionOngoing>
 8002c5c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f040 8148 	bne.w	8002efc <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f040 8144 	bne.w	8002efc <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c78:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c7c:	f043 0202 	orr.w	r2, r3, #2
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff35 	bl	8002af8 <LL_ADC_IsEnabled>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d141      	bne.n	8002d18 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c9c:	d004      	beq.n	8002ca8 <HAL_ADC_Init+0x114>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a7a      	ldr	r2, [pc, #488]	; (8002e8c <HAL_ADC_Init+0x2f8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d10f      	bne.n	8002cc8 <HAL_ADC_Init+0x134>
 8002ca8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002cac:	f7ff ff24 	bl	8002af8 <LL_ADC_IsEnabled>
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	4876      	ldr	r0, [pc, #472]	; (8002e8c <HAL_ADC_Init+0x2f8>)
 8002cb4:	f7ff ff20 	bl	8002af8 <LL_ADC_IsEnabled>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	4323      	orrs	r3, r4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	bf0c      	ite	eq
 8002cc0:	2301      	moveq	r3, #1
 8002cc2:	2300      	movne	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	e012      	b.n	8002cee <HAL_ADC_Init+0x15a>
 8002cc8:	4871      	ldr	r0, [pc, #452]	; (8002e90 <HAL_ADC_Init+0x2fc>)
 8002cca:	f7ff ff15 	bl	8002af8 <LL_ADC_IsEnabled>
 8002cce:	4604      	mov	r4, r0
 8002cd0:	4870      	ldr	r0, [pc, #448]	; (8002e94 <HAL_ADC_Init+0x300>)
 8002cd2:	f7ff ff11 	bl	8002af8 <LL_ADC_IsEnabled>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	431c      	orrs	r4, r3
 8002cda:	486f      	ldr	r0, [pc, #444]	; (8002e98 <HAL_ADC_Init+0x304>)
 8002cdc:	f7ff ff0c 	bl	8002af8 <LL_ADC_IsEnabled>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	4323      	orrs	r3, r4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	bf0c      	ite	eq
 8002ce8:	2301      	moveq	r3, #1
 8002cea:	2300      	movne	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d012      	beq.n	8002d18 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cfa:	d004      	beq.n	8002d06 <HAL_ADC_Init+0x172>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a62      	ldr	r2, [pc, #392]	; (8002e8c <HAL_ADC_Init+0x2f8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d101      	bne.n	8002d0a <HAL_ADC_Init+0x176>
 8002d06:	4a65      	ldr	r2, [pc, #404]	; (8002e9c <HAL_ADC_Init+0x308>)
 8002d08:	e000      	b.n	8002d0c <HAL_ADC_Init+0x178>
 8002d0a:	4a65      	ldr	r2, [pc, #404]	; (8002ea0 <HAL_ADC_Init+0x30c>)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	4619      	mov	r1, r3
 8002d12:	4610      	mov	r0, r2
 8002d14:	f7ff fcfa 	bl	800270c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	7f5b      	ldrb	r3, [r3, #29]
 8002d1c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d22:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002d28:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002d2e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d36:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d106      	bne.n	8002d54 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	045b      	lsls	r3, r3, #17
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d009      	beq.n	8002d70 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d60:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	4b4b      	ldr	r3, [pc, #300]	; (8002ea4 <HAL_ADC_Init+0x310>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	69b9      	ldr	r1, [r7, #24]
 8002d80:	430b      	orrs	r3, r1
 8002d82:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fed1 	bl	8002b46 <LL_ADC_REG_IsConversionOngoing>
 8002da4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fede 	bl	8002b6c <LL_ADC_INJ_IsConversionOngoing>
 8002db0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d17f      	bne.n	8002eb8 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d17c      	bne.n	8002eb8 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dc2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dca:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dda:	f023 0302 	bic.w	r3, r3, #2
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6812      	ldr	r2, [r2, #0]
 8002de2:	69b9      	ldr	r1, [r7, #24]
 8002de4:	430b      	orrs	r3, r1
 8002de6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d017      	beq.n	8002e20 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691a      	ldr	r2, [r3, #16]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002dfe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e08:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6911      	ldr	r1, [r2, #16]
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002e1e:	e013      	b.n	8002e48 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e2e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e44:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d12a      	bne.n	8002ea8 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e5c:	f023 0304 	bic.w	r3, r3, #4
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e68:	4311      	orrs	r1, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002e6e:	4311      	orrs	r1, r2
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e74:	430a      	orrs	r2, r1
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0201 	orr.w	r2, r2, #1
 8002e80:	611a      	str	r2, [r3, #16]
 8002e82:	e019      	b.n	8002eb8 <HAL_ADC_Init+0x324>
 8002e84:	20000000 	.word	0x20000000
 8002e88:	053e2d63 	.word	0x053e2d63
 8002e8c:	50000100 	.word	0x50000100
 8002e90:	50000400 	.word	0x50000400
 8002e94:	50000500 	.word	0x50000500
 8002e98:	50000600 	.word	0x50000600
 8002e9c:	50000300 	.word	0x50000300
 8002ea0:	50000700 	.word	0x50000700
 8002ea4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691a      	ldr	r2, [r3, #16]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0201 	bic.w	r2, r2, #1
 8002eb6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d10c      	bne.n	8002eda <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	f023 010f 	bic.w	r1, r3, #15
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	1e5a      	subs	r2, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ed8:	e007      	b.n	8002eea <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 020f 	bic.w	r2, r2, #15
 8002ee8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eee:	f023 0303 	bic.w	r3, r3, #3
 8002ef2:	f043 0201 	orr.w	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002efa:	e007      	b.n	8002f0c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f00:	f043 0210 	orr.w	r2, r3, #16
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3724      	adds	r7, #36	; 0x24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd90      	pop	{r4, r7, pc}
 8002f16:	bf00      	nop

08002f18 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f2c:	d004      	beq.n	8002f38 <HAL_ADC_Start_DMA+0x20>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a5a      	ldr	r2, [pc, #360]	; (800309c <HAL_ADC_Start_DMA+0x184>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d101      	bne.n	8002f3c <HAL_ADC_Start_DMA+0x24>
 8002f38:	4b59      	ldr	r3, [pc, #356]	; (80030a0 <HAL_ADC_Start_DMA+0x188>)
 8002f3a:	e000      	b.n	8002f3e <HAL_ADC_Start_DMA+0x26>
 8002f3c:	4b59      	ldr	r3, [pc, #356]	; (80030a4 <HAL_ADC_Start_DMA+0x18c>)
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fd5c 	bl	80029fc <LL_ADC_GetMultimode>
 8002f44:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fdfb 	bl	8002b46 <LL_ADC_REG_IsConversionOngoing>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f040 809b 	bne.w	800308e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_ADC_Start_DMA+0x4e>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e096      	b.n	8003094 <HAL_ADC_Start_DMA+0x17c>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a4d      	ldr	r2, [pc, #308]	; (80030a8 <HAL_ADC_Start_DMA+0x190>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d008      	beq.n	8002f8a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d005      	beq.n	8002f8a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	2b05      	cmp	r3, #5
 8002f82:	d002      	beq.n	8002f8a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	2b09      	cmp	r3, #9
 8002f88:	d17a      	bne.n	8003080 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 ff56 	bl	8003e3c <ADC_Enable>
 8002f90:	4603      	mov	r3, r0
 8002f92:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002f94:	7dfb      	ldrb	r3, [r7, #23]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d16d      	bne.n	8003076 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fa2:	f023 0301 	bic.w	r3, r3, #1
 8002fa6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a3a      	ldr	r2, [pc, #232]	; (800309c <HAL_ADC_Start_DMA+0x184>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d009      	beq.n	8002fcc <HAL_ADC_Start_DMA+0xb4>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a3b      	ldr	r2, [pc, #236]	; (80030ac <HAL_ADC_Start_DMA+0x194>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d002      	beq.n	8002fc8 <HAL_ADC_Start_DMA+0xb0>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	e003      	b.n	8002fd0 <HAL_ADC_Start_DMA+0xb8>
 8002fc8:	4b39      	ldr	r3, [pc, #228]	; (80030b0 <HAL_ADC_Start_DMA+0x198>)
 8002fca:	e001      	b.n	8002fd0 <HAL_ADC_Start_DMA+0xb8>
 8002fcc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d002      	beq.n	8002fde <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d105      	bne.n	8002fea <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d006      	beq.n	8003004 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffa:	f023 0206 	bic.w	r2, r3, #6
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	661a      	str	r2, [r3, #96]	; 0x60
 8003002:	e002      	b.n	800300a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300e:	4a29      	ldr	r2, [pc, #164]	; (80030b4 <HAL_ADC_Start_DMA+0x19c>)
 8003010:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003016:	4a28      	ldr	r2, [pc, #160]	; (80030b8 <HAL_ADC_Start_DMA+0x1a0>)
 8003018:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301e:	4a27      	ldr	r2, [pc, #156]	; (80030bc <HAL_ADC_Start_DMA+0x1a4>)
 8003020:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	221c      	movs	r2, #28
 8003028:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0210 	orr.w	r2, r2, #16
 8003040:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f042 0201 	orr.w	r2, r2, #1
 8003050:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3340      	adds	r3, #64	; 0x40
 800305c:	4619      	mov	r1, r3
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f001 fac9 	bl	80045f8 <HAL_DMA_Start_IT>
 8003066:	4603      	mov	r3, r0
 8003068:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fd55 	bl	8002b1e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003074:	e00d      	b.n	8003092 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800307e:	e008      	b.n	8003092 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800308c:	e001      	b.n	8003092 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800308e:	2302      	movs	r3, #2
 8003090:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003092:	7dfb      	ldrb	r3, [r7, #23]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	50000100 	.word	0x50000100
 80030a0:	50000300 	.word	0x50000300
 80030a4:	50000700 	.word	0x50000700
 80030a8:	50000600 	.word	0x50000600
 80030ac:	50000500 	.word	0x50000500
 80030b0:	50000400 	.word	0x50000400
 80030b4:	08003f01 	.word	0x08003f01
 80030b8:	08003fd9 	.word	0x08003fd9
 80030bc:	08003ff5 	.word	0x08003ff5

080030c0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08a      	sub	sp, #40	; 0x28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80030c8:	2300      	movs	r3, #0
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030e4:	d004      	beq.n	80030f0 <HAL_ADC_IRQHandler+0x30>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a8e      	ldr	r2, [pc, #568]	; (8003324 <HAL_ADC_IRQHandler+0x264>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d101      	bne.n	80030f4 <HAL_ADC_IRQHandler+0x34>
 80030f0:	4b8d      	ldr	r3, [pc, #564]	; (8003328 <HAL_ADC_IRQHandler+0x268>)
 80030f2:	e000      	b.n	80030f6 <HAL_ADC_IRQHandler+0x36>
 80030f4:	4b8d      	ldr	r3, [pc, #564]	; (800332c <HAL_ADC_IRQHandler+0x26c>)
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff fc80 	bl	80029fc <LL_ADC_GetMultimode>
 80030fc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d017      	beq.n	8003138 <HAL_ADC_IRQHandler+0x78>
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d012      	beq.n	8003138 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	2b00      	cmp	r3, #0
 800311c:	d105      	bne.n	800312a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003122:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 ffca 	bl	80040c4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2202      	movs	r2, #2
 8003136:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b00      	cmp	r3, #0
 8003140:	d004      	beq.n	800314c <HAL_ADC_IRQHandler+0x8c>
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10b      	bne.n	8003164 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 8094 	beq.w	8003280 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 808e 	beq.w	8003280 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	2b00      	cmp	r3, #0
 800316e:	d105      	bne.n	800317c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003174:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fb95 	bl	80028b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d072      	beq.n	8003272 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a64      	ldr	r2, [pc, #400]	; (8003324 <HAL_ADC_IRQHandler+0x264>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d009      	beq.n	80031aa <HAL_ADC_IRQHandler+0xea>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a65      	ldr	r2, [pc, #404]	; (8003330 <HAL_ADC_IRQHandler+0x270>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d002      	beq.n	80031a6 <HAL_ADC_IRQHandler+0xe6>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	e003      	b.n	80031ae <HAL_ADC_IRQHandler+0xee>
 80031a6:	4b63      	ldr	r3, [pc, #396]	; (8003334 <HAL_ADC_IRQHandler+0x274>)
 80031a8:	e001      	b.n	80031ae <HAL_ADC_IRQHandler+0xee>
 80031aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6812      	ldr	r2, [r2, #0]
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d008      	beq.n	80031c8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	2b05      	cmp	r3, #5
 80031c0:	d002      	beq.n	80031c8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2b09      	cmp	r3, #9
 80031c6:	d104      	bne.n	80031d2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	623b      	str	r3, [r7, #32]
 80031d0:	e014      	b.n	80031fc <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a53      	ldr	r2, [pc, #332]	; (8003324 <HAL_ADC_IRQHandler+0x264>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d009      	beq.n	80031f0 <HAL_ADC_IRQHandler+0x130>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a53      	ldr	r2, [pc, #332]	; (8003330 <HAL_ADC_IRQHandler+0x270>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d002      	beq.n	80031ec <HAL_ADC_IRQHandler+0x12c>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	e003      	b.n	80031f4 <HAL_ADC_IRQHandler+0x134>
 80031ec:	4b51      	ldr	r3, [pc, #324]	; (8003334 <HAL_ADC_IRQHandler+0x274>)
 80031ee:	e001      	b.n	80031f4 <HAL_ADC_IRQHandler+0x134>
 80031f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031f4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d135      	bne.n	8003272 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b08      	cmp	r3, #8
 8003212:	d12e      	bne.n	8003272 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fc94 	bl	8002b46 <LL_ADC_REG_IsConversionOngoing>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d11a      	bne.n	800325a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 020c 	bic.w	r2, r2, #12
 8003232:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003238:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003244:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d112      	bne.n	8003272 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003250:	f043 0201 	orr.w	r2, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	65da      	str	r2, [r3, #92]	; 0x5c
 8003258:	e00b      	b.n	8003272 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325e:	f043 0210 	orr.w	r2, r3, #16
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326a:	f043 0201 	orr.w	r2, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fe f87c 	bl	8001370 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	220c      	movs	r2, #12
 800327e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f003 0320 	and.w	r3, r3, #32
 8003286:	2b00      	cmp	r3, #0
 8003288:	d004      	beq.n	8003294 <HAL_ADC_IRQHandler+0x1d4>
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	f003 0320 	and.w	r3, r3, #32
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10b      	bne.n	80032ac <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 80b3 	beq.w	8003406 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 80ad 	beq.w	8003406 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d105      	bne.n	80032c4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032bc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff fb30 	bl	800292e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80032ce:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff faeb 	bl	80028b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032da:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a10      	ldr	r2, [pc, #64]	; (8003324 <HAL_ADC_IRQHandler+0x264>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d009      	beq.n	80032fa <HAL_ADC_IRQHandler+0x23a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a11      	ldr	r2, [pc, #68]	; (8003330 <HAL_ADC_IRQHandler+0x270>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d002      	beq.n	80032f6 <HAL_ADC_IRQHandler+0x236>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	e003      	b.n	80032fe <HAL_ADC_IRQHandler+0x23e>
 80032f6:	4b0f      	ldr	r3, [pc, #60]	; (8003334 <HAL_ADC_IRQHandler+0x274>)
 80032f8:	e001      	b.n	80032fe <HAL_ADC_IRQHandler+0x23e>
 80032fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	4293      	cmp	r3, r2
 8003304:	d008      	beq.n	8003318 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2b06      	cmp	r3, #6
 8003310:	d002      	beq.n	8003318 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b07      	cmp	r3, #7
 8003316:	d10f      	bne.n	8003338 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	623b      	str	r3, [r7, #32]
 8003320:	e01f      	b.n	8003362 <HAL_ADC_IRQHandler+0x2a2>
 8003322:	bf00      	nop
 8003324:	50000100 	.word	0x50000100
 8003328:	50000300 	.word	0x50000300
 800332c:	50000700 	.word	0x50000700
 8003330:	50000500 	.word	0x50000500
 8003334:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a8b      	ldr	r2, [pc, #556]	; (800356c <HAL_ADC_IRQHandler+0x4ac>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d009      	beq.n	8003356 <HAL_ADC_IRQHandler+0x296>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a8a      	ldr	r2, [pc, #552]	; (8003570 <HAL_ADC_IRQHandler+0x4b0>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d002      	beq.n	8003352 <HAL_ADC_IRQHandler+0x292>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	e003      	b.n	800335a <HAL_ADC_IRQHandler+0x29a>
 8003352:	4b88      	ldr	r3, [pc, #544]	; (8003574 <HAL_ADC_IRQHandler+0x4b4>)
 8003354:	e001      	b.n	800335a <HAL_ADC_IRQHandler+0x29a>
 8003356:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800335a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d047      	beq.n	80033f8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d007      	beq.n	8003382 <HAL_ADC_IRQHandler+0x2c2>
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d03f      	beq.n	80033f8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800337e:	2b00      	cmp	r3, #0
 8003380:	d13a      	bne.n	80033f8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338c:	2b40      	cmp	r3, #64	; 0x40
 800338e:	d133      	bne.n	80033f8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d12e      	bne.n	80033f8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff fbe4 	bl	8002b6c <LL_ADC_INJ_IsConversionOngoing>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d11a      	bne.n	80033e0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033b8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d112      	bne.n	80033f8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d6:	f043 0201 	orr.w	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80033de:	e00b      	b.n	80033f8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e4:	f043 0210 	orr.w	r2, r3, #16
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f0:	f043 0201 	orr.w	r2, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 fe3b 	bl	8004074 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2260      	movs	r2, #96	; 0x60
 8003404:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340c:	2b00      	cmp	r3, #0
 800340e:	d011      	beq.n	8003434 <HAL_ADC_IRQHandler+0x374>
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00c      	beq.n	8003434 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f8b4 	bl	8003594 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2280      	movs	r2, #128	; 0x80
 8003432:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343a:	2b00      	cmp	r3, #0
 800343c:	d012      	beq.n	8003464 <HAL_ADC_IRQHandler+0x3a4>
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00d      	beq.n	8003464 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fe21 	bl	800409c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003462:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800346a:	2b00      	cmp	r3, #0
 800346c:	d012      	beq.n	8003494 <HAL_ADC_IRQHandler+0x3d4>
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00d      	beq.n	8003494 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fe13 	bl	80040b0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003492:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f003 0310 	and.w	r3, r3, #16
 800349a:	2b00      	cmp	r3, #0
 800349c:	d043      	beq.n	8003526 <HAL_ADC_IRQHandler+0x466>
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	f003 0310 	and.w	r3, r3, #16
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d03e      	beq.n	8003526 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d102      	bne.n	80034b6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80034b0:	2301      	movs	r3, #1
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
 80034b4:	e021      	b.n	80034fa <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d015      	beq.n	80034e8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034c4:	d004      	beq.n	80034d0 <HAL_ADC_IRQHandler+0x410>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a28      	ldr	r2, [pc, #160]	; (800356c <HAL_ADC_IRQHandler+0x4ac>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d101      	bne.n	80034d4 <HAL_ADC_IRQHandler+0x414>
 80034d0:	4b29      	ldr	r3, [pc, #164]	; (8003578 <HAL_ADC_IRQHandler+0x4b8>)
 80034d2:	e000      	b.n	80034d6 <HAL_ADC_IRQHandler+0x416>
 80034d4:	4b29      	ldr	r3, [pc, #164]	; (800357c <HAL_ADC_IRQHandler+0x4bc>)
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff fa9e 	bl	8002a18 <LL_ADC_GetMultiDMATransfer>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00b      	beq.n	80034fa <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80034e2:	2301      	movs	r3, #1
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
 80034e6:	e008      	b.n	80034fa <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80034f6:	2301      	movs	r3, #1
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d10e      	bne.n	800351e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003504:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003510:	f043 0202 	orr.w	r2, r3, #2
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f845 	bl	80035a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2210      	movs	r2, #16
 8003524:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352c:	2b00      	cmp	r3, #0
 800352e:	d018      	beq.n	8003562 <HAL_ADC_IRQHandler+0x4a2>
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003536:	2b00      	cmp	r3, #0
 8003538:	d013      	beq.n	8003562 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800354a:	f043 0208 	orr.w	r2, r3, #8
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800355a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fd93 	bl	8004088 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003562:	bf00      	nop
 8003564:	3728      	adds	r7, #40	; 0x28
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	50000100 	.word	0x50000100
 8003570:	50000500 	.word	0x50000500
 8003574:	50000400 	.word	0x50000400
 8003578:	50000300 	.word	0x50000300
 800357c:	50000700 	.word	0x50000700

08003580 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b0b6      	sub	sp, #216	; 0xd8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80035cc:	2300      	movs	r3, #0
 80035ce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d102      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x24>
 80035da:	2302      	movs	r3, #2
 80035dc:	f000 bc13 	b.w	8003e06 <HAL_ADC_ConfigChannel+0x84a>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff faaa 	bl	8002b46 <LL_ADC_REG_IsConversionOngoing>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f040 83f3 	bne.w	8003de0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	6859      	ldr	r1, [r3, #4]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	f7ff f965 	bl	80028d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff fa98 	bl	8002b46 <LL_ADC_REG_IsConversionOngoing>
 8003616:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff faa4 	bl	8002b6c <LL_ADC_INJ_IsConversionOngoing>
 8003624:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003628:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800362c:	2b00      	cmp	r3, #0
 800362e:	f040 81d9 	bne.w	80039e4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003632:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003636:	2b00      	cmp	r3, #0
 8003638:	f040 81d4 	bne.w	80039e4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003644:	d10f      	bne.n	8003666 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2200      	movs	r2, #0
 8003650:	4619      	mov	r1, r3
 8003652:	f7ff f97f 	bl	8002954 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff f913 	bl	800288a <LL_ADC_SetSamplingTimeCommonConfig>
 8003664:	e00e      	b.n	8003684 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6818      	ldr	r0, [r3, #0]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	6819      	ldr	r1, [r3, #0]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	461a      	mov	r2, r3
 8003674:	f7ff f96e 	bl	8002954 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2100      	movs	r1, #0
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff f903 	bl	800288a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	695a      	ldr	r2, [r3, #20]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	08db      	lsrs	r3, r3, #3
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d022      	beq.n	80036ec <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6818      	ldr	r0, [r3, #0]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	6919      	ldr	r1, [r3, #16]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80036b6:	f7ff f85d 	bl	8002774 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	6919      	ldr	r1, [r3, #16]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	461a      	mov	r2, r3
 80036c8:	f7ff f8a9 	bl	800281e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	6919      	ldr	r1, [r3, #16]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	7f1b      	ldrb	r3, [r3, #28]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d102      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x126>
 80036dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036e0:	e000      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x128>
 80036e2:	2300      	movs	r3, #0
 80036e4:	461a      	mov	r2, r3
 80036e6:	f7ff f8b5 	bl	8002854 <LL_ADC_SetOffsetSaturation>
 80036ea:	e17b      	b.n	80039e4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2100      	movs	r1, #0
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff f862 	bl	80027bc <LL_ADC_GetOffsetChannel>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10a      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x15c>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2100      	movs	r1, #0
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff f857 	bl	80027bc <LL_ADC_GetOffsetChannel>
 800370e:	4603      	mov	r3, r0
 8003710:	0e9b      	lsrs	r3, r3, #26
 8003712:	f003 021f 	and.w	r2, r3, #31
 8003716:	e01e      	b.n	8003756 <HAL_ADC_ConfigChannel+0x19a>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2100      	movs	r1, #0
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff f84c 	bl	80027bc <LL_ADC_GetOffsetChannel>
 8003724:	4603      	mov	r3, r0
 8003726:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800372e:	fa93 f3a3 	rbit	r3, r3
 8003732:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003736:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800373a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800373e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003746:	2320      	movs	r3, #32
 8003748:	e004      	b.n	8003754 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800374a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800374e:	fab3 f383 	clz	r3, r3
 8003752:	b2db      	uxtb	r3, r3
 8003754:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800375e:	2b00      	cmp	r3, #0
 8003760:	d105      	bne.n	800376e <HAL_ADC_ConfigChannel+0x1b2>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	0e9b      	lsrs	r3, r3, #26
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	e018      	b.n	80037a0 <HAL_ADC_ConfigChannel+0x1e4>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003776:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800377a:	fa93 f3a3 	rbit	r3, r3
 800377e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003786:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800378a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003792:	2320      	movs	r3, #32
 8003794:	e004      	b.n	80037a0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003796:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800379a:	fab3 f383 	clz	r3, r3
 800379e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d106      	bne.n	80037b2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2200      	movs	r2, #0
 80037aa:	2100      	movs	r1, #0
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff f81b 	bl	80027e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2101      	movs	r1, #1
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fe ffff 	bl	80027bc <LL_ADC_GetOffsetChannel>
 80037be:	4603      	mov	r3, r0
 80037c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10a      	bne.n	80037de <HAL_ADC_ConfigChannel+0x222>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2101      	movs	r1, #1
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fe fff4 	bl	80027bc <LL_ADC_GetOffsetChannel>
 80037d4:	4603      	mov	r3, r0
 80037d6:	0e9b      	lsrs	r3, r3, #26
 80037d8:	f003 021f 	and.w	r2, r3, #31
 80037dc:	e01e      	b.n	800381c <HAL_ADC_ConfigChannel+0x260>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2101      	movs	r1, #1
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fe ffe9 	bl	80027bc <LL_ADC_GetOffsetChannel>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80037f4:	fa93 f3a3 	rbit	r3, r3
 80037f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80037fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003800:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800380c:	2320      	movs	r3, #32
 800380e:	e004      	b.n	800381a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003810:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003814:	fab3 f383 	clz	r3, r3
 8003818:	b2db      	uxtb	r3, r3
 800381a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003824:	2b00      	cmp	r3, #0
 8003826:	d105      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x278>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	0e9b      	lsrs	r3, r3, #26
 800382e:	f003 031f 	and.w	r3, r3, #31
 8003832:	e018      	b.n	8003866 <HAL_ADC_ConfigChannel+0x2aa>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003840:	fa93 f3a3 	rbit	r3, r3
 8003844:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003848:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800384c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003850:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003858:	2320      	movs	r3, #32
 800385a:	e004      	b.n	8003866 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800385c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003860:	fab3 f383 	clz	r3, r3
 8003864:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003866:	429a      	cmp	r2, r3
 8003868:	d106      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2200      	movs	r2, #0
 8003870:	2101      	movs	r1, #1
 8003872:	4618      	mov	r0, r3
 8003874:	f7fe ffb8 	bl	80027e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2102      	movs	r1, #2
 800387e:	4618      	mov	r0, r3
 8003880:	f7fe ff9c 	bl	80027bc <LL_ADC_GetOffsetChannel>
 8003884:	4603      	mov	r3, r0
 8003886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10a      	bne.n	80038a4 <HAL_ADC_ConfigChannel+0x2e8>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2102      	movs	r1, #2
 8003894:	4618      	mov	r0, r3
 8003896:	f7fe ff91 	bl	80027bc <LL_ADC_GetOffsetChannel>
 800389a:	4603      	mov	r3, r0
 800389c:	0e9b      	lsrs	r3, r3, #26
 800389e:	f003 021f 	and.w	r2, r3, #31
 80038a2:	e01e      	b.n	80038e2 <HAL_ADC_ConfigChannel+0x326>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2102      	movs	r1, #2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe ff86 	bl	80027bc <LL_ADC_GetOffsetChannel>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038ba:	fa93 f3a3 	rbit	r3, r3
 80038be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80038c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80038ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80038d2:	2320      	movs	r3, #32
 80038d4:	e004      	b.n	80038e0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80038d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038da:	fab3 f383 	clz	r3, r3
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d105      	bne.n	80038fa <HAL_ADC_ConfigChannel+0x33e>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	0e9b      	lsrs	r3, r3, #26
 80038f4:	f003 031f 	and.w	r3, r3, #31
 80038f8:	e016      	b.n	8003928 <HAL_ADC_ConfigChannel+0x36c>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003902:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003906:	fa93 f3a3 	rbit	r3, r3
 800390a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800390c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800390e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003912:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800391a:	2320      	movs	r3, #32
 800391c:	e004      	b.n	8003928 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800391e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003922:	fab3 f383 	clz	r3, r3
 8003926:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003928:	429a      	cmp	r2, r3
 800392a:	d106      	bne.n	800393a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2200      	movs	r2, #0
 8003932:	2102      	movs	r1, #2
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe ff57 	bl	80027e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2103      	movs	r1, #3
 8003940:	4618      	mov	r0, r3
 8003942:	f7fe ff3b 	bl	80027bc <LL_ADC_GetOffsetChannel>
 8003946:	4603      	mov	r3, r0
 8003948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10a      	bne.n	8003966 <HAL_ADC_ConfigChannel+0x3aa>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2103      	movs	r1, #3
 8003956:	4618      	mov	r0, r3
 8003958:	f7fe ff30 	bl	80027bc <LL_ADC_GetOffsetChannel>
 800395c:	4603      	mov	r3, r0
 800395e:	0e9b      	lsrs	r3, r3, #26
 8003960:	f003 021f 	and.w	r2, r3, #31
 8003964:	e017      	b.n	8003996 <HAL_ADC_ConfigChannel+0x3da>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2103      	movs	r1, #3
 800396c:	4618      	mov	r0, r3
 800396e:	f7fe ff25 	bl	80027bc <LL_ADC_GetOffsetChannel>
 8003972:	4603      	mov	r3, r0
 8003974:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003976:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003978:	fa93 f3a3 	rbit	r3, r3
 800397c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800397e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003980:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003982:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003988:	2320      	movs	r3, #32
 800398a:	e003      	b.n	8003994 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800398c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800398e:	fab3 f383 	clz	r3, r3
 8003992:	b2db      	uxtb	r3, r3
 8003994:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d105      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x3f2>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	0e9b      	lsrs	r3, r3, #26
 80039a8:	f003 031f 	and.w	r3, r3, #31
 80039ac:	e011      	b.n	80039d2 <HAL_ADC_ConfigChannel+0x416>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039b6:	fa93 f3a3 	rbit	r3, r3
 80039ba:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80039bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039be:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80039c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80039c6:	2320      	movs	r3, #32
 80039c8:	e003      	b.n	80039d2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80039ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039cc:	fab3 f383 	clz	r3, r3
 80039d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d106      	bne.n	80039e4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2200      	movs	r2, #0
 80039dc:	2103      	movs	r1, #3
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fe ff02 	bl	80027e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff f885 	bl	8002af8 <LL_ADC_IsEnabled>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f040 813d 	bne.w	8003c70 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	6819      	ldr	r1, [r3, #0]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	461a      	mov	r2, r3
 8003a04:	f7fe ffd2 	bl	80029ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4aa2      	ldr	r2, [pc, #648]	; (8003c98 <HAL_ADC_ConfigChannel+0x6dc>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	f040 812e 	bne.w	8003c70 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10b      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x480>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	0e9b      	lsrs	r3, r3, #26
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	f003 031f 	and.w	r3, r3, #31
 8003a30:	2b09      	cmp	r3, #9
 8003a32:	bf94      	ite	ls
 8003a34:	2301      	movls	r3, #1
 8003a36:	2300      	movhi	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	e019      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x4b4>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a44:	fa93 f3a3 	rbit	r3, r3
 8003a48:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a4c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003a4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003a54:	2320      	movs	r3, #32
 8003a56:	e003      	b.n	8003a60 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003a58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a5a:	fab3 f383 	clz	r3, r3
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	3301      	adds	r3, #1
 8003a62:	f003 031f 	and.w	r3, r3, #31
 8003a66:	2b09      	cmp	r3, #9
 8003a68:	bf94      	ite	ls
 8003a6a:	2301      	movls	r3, #1
 8003a6c:	2300      	movhi	r3, #0
 8003a6e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d079      	beq.n	8003b68 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d107      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x4d4>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	0e9b      	lsrs	r3, r3, #26
 8003a86:	3301      	adds	r3, #1
 8003a88:	069b      	lsls	r3, r3, #26
 8003a8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a8e:	e015      	b.n	8003abc <HAL_ADC_ConfigChannel+0x500>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a98:	fa93 f3a3 	rbit	r3, r3
 8003a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003aa8:	2320      	movs	r3, #32
 8003aaa:	e003      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aae:	fab3 f383 	clz	r3, r3
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	069b      	lsls	r3, r3, #26
 8003ab8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d109      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x520>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	0e9b      	lsrs	r3, r3, #26
 8003ace:	3301      	adds	r3, #1
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ada:	e017      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x550>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ae4:	fa93 f3a3 	rbit	r3, r3
 8003ae8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003af4:	2320      	movs	r3, #32
 8003af6:	e003      	b.n	8003b00 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003afa:	fab3 f383 	clz	r3, r3
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	3301      	adds	r3, #1
 8003b02:	f003 031f 	and.w	r3, r3, #31
 8003b06:	2101      	movs	r1, #1
 8003b08:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0c:	ea42 0103 	orr.w	r1, r2, r3
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10a      	bne.n	8003b32 <HAL_ADC_ConfigChannel+0x576>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	0e9b      	lsrs	r3, r3, #26
 8003b22:	3301      	adds	r3, #1
 8003b24:	f003 021f 	and.w	r2, r3, #31
 8003b28:	4613      	mov	r3, r2
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	4413      	add	r3, r2
 8003b2e:	051b      	lsls	r3, r3, #20
 8003b30:	e018      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x5a8>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3a:	fa93 f3a3 	rbit	r3, r3
 8003b3e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003b4a:	2320      	movs	r3, #32
 8003b4c:	e003      	b.n	8003b56 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b50:	fab3 f383 	clz	r3, r3
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	3301      	adds	r3, #1
 8003b58:	f003 021f 	and.w	r2, r3, #31
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	4413      	add	r3, r2
 8003b62:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b64:	430b      	orrs	r3, r1
 8003b66:	e07e      	b.n	8003c66 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d107      	bne.n	8003b84 <HAL_ADC_ConfigChannel+0x5c8>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	0e9b      	lsrs	r3, r3, #26
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	069b      	lsls	r3, r3, #26
 8003b7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b82:	e015      	b.n	8003bb0 <HAL_ADC_ConfigChannel+0x5f4>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	fa93 f3a3 	rbit	r3, r3
 8003b90:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b94:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003b9c:	2320      	movs	r3, #32
 8003b9e:	e003      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba2:	fab3 f383 	clz	r3, r3
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	3301      	adds	r3, #1
 8003baa:	069b      	lsls	r3, r3, #26
 8003bac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d109      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x614>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	0e9b      	lsrs	r3, r3, #26
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	2101      	movs	r1, #1
 8003bca:	fa01 f303 	lsl.w	r3, r1, r3
 8003bce:	e017      	b.n	8003c00 <HAL_ADC_ConfigChannel+0x644>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	fa93 f3a3 	rbit	r3, r3
 8003bdc:	61fb      	str	r3, [r7, #28]
  return result;
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003be8:	2320      	movs	r3, #32
 8003bea:	e003      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	fab3 f383 	clz	r3, r3
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	f003 031f 	and.w	r3, r3, #31
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003c00:	ea42 0103 	orr.w	r1, r2, r3
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10d      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0x670>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	0e9b      	lsrs	r3, r3, #26
 8003c16:	3301      	adds	r3, #1
 8003c18:	f003 021f 	and.w	r2, r3, #31
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	4413      	add	r3, r2
 8003c22:	3b1e      	subs	r3, #30
 8003c24:	051b      	lsls	r3, r3, #20
 8003c26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c2a:	e01b      	b.n	8003c64 <HAL_ADC_ConfigChannel+0x6a8>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	fa93 f3a3 	rbit	r3, r3
 8003c38:	613b      	str	r3, [r7, #16]
  return result;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003c44:	2320      	movs	r3, #32
 8003c46:	e003      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	fab3 f383 	clz	r3, r3
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	3301      	adds	r3, #1
 8003c52:	f003 021f 	and.w	r2, r3, #31
 8003c56:	4613      	mov	r3, r2
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3b1e      	subs	r3, #30
 8003c5e:	051b      	lsls	r3, r3, #20
 8003c60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c64:	430b      	orrs	r3, r1
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	6892      	ldr	r2, [r2, #8]
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	f7fe fe72 	bl	8002954 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <HAL_ADC_ConfigChannel+0x6e0>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80be 	beq.w	8003dfa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c86:	d004      	beq.n	8003c92 <HAL_ADC_ConfigChannel+0x6d6>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a04      	ldr	r2, [pc, #16]	; (8003ca0 <HAL_ADC_ConfigChannel+0x6e4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d10a      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x6ec>
 8003c92:	4b04      	ldr	r3, [pc, #16]	; (8003ca4 <HAL_ADC_ConfigChannel+0x6e8>)
 8003c94:	e009      	b.n	8003caa <HAL_ADC_ConfigChannel+0x6ee>
 8003c96:	bf00      	nop
 8003c98:	407f0000 	.word	0x407f0000
 8003c9c:	80080000 	.word	0x80080000
 8003ca0:	50000100 	.word	0x50000100
 8003ca4:	50000300 	.word	0x50000300
 8003ca8:	4b59      	ldr	r3, [pc, #356]	; (8003e10 <HAL_ADC_ConfigChannel+0x854>)
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fe fd54 	bl	8002758 <LL_ADC_GetCommonPathInternalCh>
 8003cb0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a56      	ldr	r2, [pc, #344]	; (8003e14 <HAL_ADC_ConfigChannel+0x858>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d004      	beq.n	8003cc8 <HAL_ADC_ConfigChannel+0x70c>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a55      	ldr	r2, [pc, #340]	; (8003e18 <HAL_ADC_ConfigChannel+0x85c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d13a      	bne.n	8003d3e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003cc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ccc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d134      	bne.n	8003d3e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cdc:	d005      	beq.n	8003cea <HAL_ADC_ConfigChannel+0x72e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a4e      	ldr	r2, [pc, #312]	; (8003e1c <HAL_ADC_ConfigChannel+0x860>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	f040 8085 	bne.w	8003df4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cf2:	d004      	beq.n	8003cfe <HAL_ADC_ConfigChannel+0x742>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a49      	ldr	r2, [pc, #292]	; (8003e20 <HAL_ADC_ConfigChannel+0x864>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d101      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0x746>
 8003cfe:	4a49      	ldr	r2, [pc, #292]	; (8003e24 <HAL_ADC_ConfigChannel+0x868>)
 8003d00:	e000      	b.n	8003d04 <HAL_ADC_ConfigChannel+0x748>
 8003d02:	4a43      	ldr	r2, [pc, #268]	; (8003e10 <HAL_ADC_ConfigChannel+0x854>)
 8003d04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4610      	mov	r0, r2
 8003d10:	f7fe fd0f 	bl	8002732 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d14:	4b44      	ldr	r3, [pc, #272]	; (8003e28 <HAL_ADC_ConfigChannel+0x86c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	099b      	lsrs	r3, r3, #6
 8003d1a:	4a44      	ldr	r2, [pc, #272]	; (8003e2c <HAL_ADC_ConfigChannel+0x870>)
 8003d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d20:	099b      	lsrs	r3, r3, #6
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	4613      	mov	r3, r2
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d2e:	e002      	b.n	8003d36 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1f9      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d3c:	e05a      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a3b      	ldr	r2, [pc, #236]	; (8003e30 <HAL_ADC_ConfigChannel+0x874>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d125      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x7d8>
 8003d48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d11f      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a31      	ldr	r2, [pc, #196]	; (8003e20 <HAL_ADC_ConfigChannel+0x864>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d104      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x7ac>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a34      	ldr	r2, [pc, #208]	; (8003e34 <HAL_ADC_ConfigChannel+0x878>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d047      	beq.n	8003df8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d70:	d004      	beq.n	8003d7c <HAL_ADC_ConfigChannel+0x7c0>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a2a      	ldr	r2, [pc, #168]	; (8003e20 <HAL_ADC_ConfigChannel+0x864>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d101      	bne.n	8003d80 <HAL_ADC_ConfigChannel+0x7c4>
 8003d7c:	4a29      	ldr	r2, [pc, #164]	; (8003e24 <HAL_ADC_ConfigChannel+0x868>)
 8003d7e:	e000      	b.n	8003d82 <HAL_ADC_ConfigChannel+0x7c6>
 8003d80:	4a23      	ldr	r2, [pc, #140]	; (8003e10 <HAL_ADC_ConfigChannel+0x854>)
 8003d82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4610      	mov	r0, r2
 8003d8e:	f7fe fcd0 	bl	8002732 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d92:	e031      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a27      	ldr	r2, [pc, #156]	; (8003e38 <HAL_ADC_ConfigChannel+0x87c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d12d      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d127      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1c      	ldr	r2, [pc, #112]	; (8003e20 <HAL_ADC_ConfigChannel+0x864>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d022      	beq.n	8003dfa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dbc:	d004      	beq.n	8003dc8 <HAL_ADC_ConfigChannel+0x80c>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a17      	ldr	r2, [pc, #92]	; (8003e20 <HAL_ADC_ConfigChannel+0x864>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d101      	bne.n	8003dcc <HAL_ADC_ConfigChannel+0x810>
 8003dc8:	4a16      	ldr	r2, [pc, #88]	; (8003e24 <HAL_ADC_ConfigChannel+0x868>)
 8003dca:	e000      	b.n	8003dce <HAL_ADC_ConfigChannel+0x812>
 8003dcc:	4a10      	ldr	r2, [pc, #64]	; (8003e10 <HAL_ADC_ConfigChannel+0x854>)
 8003dce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4610      	mov	r0, r2
 8003dda:	f7fe fcaa 	bl	8002732 <LL_ADC_SetCommonPathInternalCh>
 8003dde:	e00c      	b.n	8003dfa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de4:	f043 0220 	orr.w	r2, r3, #32
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003df2:	e002      	b.n	8003dfa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003df4:	bf00      	nop
 8003df6:	e000      	b.n	8003dfa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003df8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e02:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	37d8      	adds	r7, #216	; 0xd8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	50000700 	.word	0x50000700
 8003e14:	c3210000 	.word	0xc3210000
 8003e18:	90c00010 	.word	0x90c00010
 8003e1c:	50000600 	.word	0x50000600
 8003e20:	50000100 	.word	0x50000100
 8003e24:	50000300 	.word	0x50000300
 8003e28:	20000000 	.word	0x20000000
 8003e2c:	053e2d63 	.word	0x053e2d63
 8003e30:	c7520000 	.word	0xc7520000
 8003e34:	50000500 	.word	0x50000500
 8003e38:	cb840000 	.word	0xcb840000

08003e3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fe fe55 	bl	8002af8 <LL_ADC_IsEnabled>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d14d      	bne.n	8003ef0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	4b28      	ldr	r3, [pc, #160]	; (8003efc <ADC_Enable+0xc0>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00d      	beq.n	8003e7e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e66:	f043 0210 	orr.w	r2, r3, #16
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e72:	f043 0201 	orr.w	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e039      	b.n	8003ef2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fe fe24 	bl	8002ad0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003e88:	f7fe fc12 	bl	80026b0 <HAL_GetTick>
 8003e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e8e:	e028      	b.n	8003ee2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fe fe2f 	bl	8002af8 <LL_ADC_IsEnabled>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d104      	bne.n	8003eaa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7fe fe13 	bl	8002ad0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003eaa:	f7fe fc01 	bl	80026b0 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d914      	bls.n	8003ee2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d00d      	beq.n	8003ee2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eca:	f043 0210 	orr.w	r2, r3, #16
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed6:	f043 0201 	orr.w	r2, r3, #1
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e007      	b.n	8003ef2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d1cf      	bne.n	8003e90 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	8000003f 	.word	0x8000003f

08003f00 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d14b      	bne.n	8003fb2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d021      	beq.n	8003f78 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7fe fcb9 	bl	80028b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d032      	beq.n	8003faa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d12b      	bne.n	8003faa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d11f      	bne.n	8003faa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6e:	f043 0201 	orr.w	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f76:	e018      	b.n	8003faa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d111      	bne.n	8003faa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d105      	bne.n	8003faa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa2:	f043 0201 	orr.w	r2, r3, #1
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f7fd f9e0 	bl	8001370 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003fb0:	e00e      	b.n	8003fd0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb6:	f003 0310 	and.w	r3, r3, #16
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f7ff faf2 	bl	80035a8 <HAL_ADC_ErrorCallback>
}
 8003fc4:	e004      	b.n	8003fd0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	4798      	blx	r3
}
 8003fd0:	bf00      	nop
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f7ff faca 	bl	8003580 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fec:	bf00      	nop
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004000:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004006:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004012:	f043 0204 	orr.w	r2, r3, #4
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f7ff fac4 	bl	80035a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004020:	bf00      	nop
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <LL_ADC_IsEnabled>:
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b01      	cmp	r3, #1
 800403a:	d101      	bne.n	8004040 <LL_ADC_IsEnabled+0x18>
 800403c:	2301      	movs	r3, #1
 800403e:	e000      	b.n	8004042 <LL_ADC_IsEnabled+0x1a>
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <LL_ADC_REG_IsConversionOngoing>:
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b04      	cmp	r3, #4
 8004060:	d101      	bne.n	8004066 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80040d8:	b590      	push	{r4, r7, lr}
 80040da:	b0a1      	sub	sp, #132	; 0x84
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e0e7      	b.n	80042c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80040fe:	2300      	movs	r3, #0
 8004100:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004102:	2300      	movs	r3, #0
 8004104:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800410e:	d102      	bne.n	8004116 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004110:	4b6f      	ldr	r3, [pc, #444]	; (80042d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004112:	60bb      	str	r3, [r7, #8]
 8004114:	e009      	b.n	800412a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a6e      	ldr	r2, [pc, #440]	; (80042d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d102      	bne.n	8004126 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004120:	4b6d      	ldr	r3, [pc, #436]	; (80042d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004122:	60bb      	str	r3, [r7, #8]
 8004124:	e001      	b.n	800412a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004126:	2300      	movs	r3, #0
 8004128:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10b      	bne.n	8004148 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004134:	f043 0220 	orr.w	r2, r3, #32
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0be      	b.n	80042c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff ff7f 	bl	800404e <LL_ADC_REG_IsConversionOngoing>
 8004150:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff ff79 	bl	800404e <LL_ADC_REG_IsConversionOngoing>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	f040 80a0 	bne.w	80042a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004166:	2b00      	cmp	r3, #0
 8004168:	f040 809c 	bne.w	80042a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004174:	d004      	beq.n	8004180 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a55      	ldr	r2, [pc, #340]	; (80042d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d101      	bne.n	8004184 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004180:	4b56      	ldr	r3, [pc, #344]	; (80042dc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004182:	e000      	b.n	8004186 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004184:	4b56      	ldr	r3, [pc, #344]	; (80042e0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004186:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d04b      	beq.n	8004228 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004190:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	6859      	ldr	r1, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041a2:	035b      	lsls	r3, r3, #13
 80041a4:	430b      	orrs	r3, r1
 80041a6:	431a      	orrs	r2, r3
 80041a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041b4:	d004      	beq.n	80041c0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a45      	ldr	r2, [pc, #276]	; (80042d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d10f      	bne.n	80041e0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80041c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80041c4:	f7ff ff30 	bl	8004028 <LL_ADC_IsEnabled>
 80041c8:	4604      	mov	r4, r0
 80041ca:	4841      	ldr	r0, [pc, #260]	; (80042d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80041cc:	f7ff ff2c 	bl	8004028 <LL_ADC_IsEnabled>
 80041d0:	4603      	mov	r3, r0
 80041d2:	4323      	orrs	r3, r4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	bf0c      	ite	eq
 80041d8:	2301      	moveq	r3, #1
 80041da:	2300      	movne	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	e012      	b.n	8004206 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80041e0:	483c      	ldr	r0, [pc, #240]	; (80042d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80041e2:	f7ff ff21 	bl	8004028 <LL_ADC_IsEnabled>
 80041e6:	4604      	mov	r4, r0
 80041e8:	483b      	ldr	r0, [pc, #236]	; (80042d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80041ea:	f7ff ff1d 	bl	8004028 <LL_ADC_IsEnabled>
 80041ee:	4603      	mov	r3, r0
 80041f0:	431c      	orrs	r4, r3
 80041f2:	483c      	ldr	r0, [pc, #240]	; (80042e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80041f4:	f7ff ff18 	bl	8004028 <LL_ADC_IsEnabled>
 80041f8:	4603      	mov	r3, r0
 80041fa:	4323      	orrs	r3, r4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bf0c      	ite	eq
 8004200:	2301      	moveq	r3, #1
 8004202:	2300      	movne	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d056      	beq.n	80042b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800420a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004212:	f023 030f 	bic.w	r3, r3, #15
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	6811      	ldr	r1, [r2, #0]
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	6892      	ldr	r2, [r2, #8]
 800421e:	430a      	orrs	r2, r1
 8004220:	431a      	orrs	r2, r3
 8004222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004224:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004226:	e047      	b.n	80042b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004228:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004230:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004232:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800423c:	d004      	beq.n	8004248 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a23      	ldr	r2, [pc, #140]	; (80042d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d10f      	bne.n	8004268 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004248:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800424c:	f7ff feec 	bl	8004028 <LL_ADC_IsEnabled>
 8004250:	4604      	mov	r4, r0
 8004252:	481f      	ldr	r0, [pc, #124]	; (80042d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004254:	f7ff fee8 	bl	8004028 <LL_ADC_IsEnabled>
 8004258:	4603      	mov	r3, r0
 800425a:	4323      	orrs	r3, r4
 800425c:	2b00      	cmp	r3, #0
 800425e:	bf0c      	ite	eq
 8004260:	2301      	moveq	r3, #1
 8004262:	2300      	movne	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	e012      	b.n	800428e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004268:	481a      	ldr	r0, [pc, #104]	; (80042d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800426a:	f7ff fedd 	bl	8004028 <LL_ADC_IsEnabled>
 800426e:	4604      	mov	r4, r0
 8004270:	4819      	ldr	r0, [pc, #100]	; (80042d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004272:	f7ff fed9 	bl	8004028 <LL_ADC_IsEnabled>
 8004276:	4603      	mov	r3, r0
 8004278:	431c      	orrs	r4, r3
 800427a:	481a      	ldr	r0, [pc, #104]	; (80042e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800427c:	f7ff fed4 	bl	8004028 <LL_ADC_IsEnabled>
 8004280:	4603      	mov	r3, r0
 8004282:	4323      	orrs	r3, r4
 8004284:	2b00      	cmp	r3, #0
 8004286:	bf0c      	ite	eq
 8004288:	2301      	moveq	r3, #1
 800428a:	2300      	movne	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d012      	beq.n	80042b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800429a:	f023 030f 	bic.w	r3, r3, #15
 800429e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80042a0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80042a2:	e009      	b.n	80042b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a8:	f043 0220 	orr.w	r2, r3, #32
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80042b6:	e000      	b.n	80042ba <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80042b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80042c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3784      	adds	r7, #132	; 0x84
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd90      	pop	{r4, r7, pc}
 80042ce:	bf00      	nop
 80042d0:	50000100 	.word	0x50000100
 80042d4:	50000400 	.word	0x50000400
 80042d8:	50000500 	.word	0x50000500
 80042dc:	50000300 	.word	0x50000300
 80042e0:	50000700 	.word	0x50000700
 80042e4:	50000600 	.word	0x50000600

080042e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042f8:	4b0c      	ldr	r3, [pc, #48]	; (800432c <__NVIC_SetPriorityGrouping+0x44>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004304:	4013      	ands	r3, r2
 8004306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800431a:	4a04      	ldr	r2, [pc, #16]	; (800432c <__NVIC_SetPriorityGrouping+0x44>)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	60d3      	str	r3, [r2, #12]
}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	e000ed00 	.word	0xe000ed00

08004330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004334:	4b04      	ldr	r3, [pc, #16]	; (8004348 <__NVIC_GetPriorityGrouping+0x18>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	0a1b      	lsrs	r3, r3, #8
 800433a:	f003 0307 	and.w	r3, r3, #7
}
 800433e:	4618      	mov	r0, r3
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	e000ed00 	.word	0xe000ed00

0800434c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435a:	2b00      	cmp	r3, #0
 800435c:	db0b      	blt.n	8004376 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	f003 021f 	and.w	r2, r3, #31
 8004364:	4907      	ldr	r1, [pc, #28]	; (8004384 <__NVIC_EnableIRQ+0x38>)
 8004366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	2001      	movs	r0, #1
 800436e:	fa00 f202 	lsl.w	r2, r0, r2
 8004372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	e000e100 	.word	0xe000e100

08004388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	6039      	str	r1, [r7, #0]
 8004392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004398:	2b00      	cmp	r3, #0
 800439a:	db0a      	blt.n	80043b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	490c      	ldr	r1, [pc, #48]	; (80043d4 <__NVIC_SetPriority+0x4c>)
 80043a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a6:	0112      	lsls	r2, r2, #4
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	440b      	add	r3, r1
 80043ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043b0:	e00a      	b.n	80043c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	4908      	ldr	r1, [pc, #32]	; (80043d8 <__NVIC_SetPriority+0x50>)
 80043b8:	79fb      	ldrb	r3, [r7, #7]
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	3b04      	subs	r3, #4
 80043c0:	0112      	lsls	r2, r2, #4
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	440b      	add	r3, r1
 80043c6:	761a      	strb	r2, [r3, #24]
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	e000e100 	.word	0xe000e100
 80043d8:	e000ed00 	.word	0xe000ed00

080043dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043dc:	b480      	push	{r7}
 80043de:	b089      	sub	sp, #36	; 0x24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f1c3 0307 	rsb	r3, r3, #7
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	bf28      	it	cs
 80043fa:	2304      	movcs	r3, #4
 80043fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	3304      	adds	r3, #4
 8004402:	2b06      	cmp	r3, #6
 8004404:	d902      	bls.n	800440c <NVIC_EncodePriority+0x30>
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	3b03      	subs	r3, #3
 800440a:	e000      	b.n	800440e <NVIC_EncodePriority+0x32>
 800440c:	2300      	movs	r3, #0
 800440e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004410:	f04f 32ff 	mov.w	r2, #4294967295
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	43da      	mvns	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	401a      	ands	r2, r3
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004424:	f04f 31ff 	mov.w	r1, #4294967295
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	fa01 f303 	lsl.w	r3, r1, r3
 800442e:	43d9      	mvns	r1, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004434:	4313      	orrs	r3, r2
         );
}
 8004436:	4618      	mov	r0, r3
 8004438:	3724      	adds	r7, #36	; 0x24
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b082      	sub	sp, #8
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff ff4c 	bl	80042e8 <__NVIC_SetPriorityGrouping>
}
 8004450:	bf00      	nop
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	4603      	mov	r3, r0
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004466:	f7ff ff63 	bl	8004330 <__NVIC_GetPriorityGrouping>
 800446a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	68b9      	ldr	r1, [r7, #8]
 8004470:	6978      	ldr	r0, [r7, #20]
 8004472:	f7ff ffb3 	bl	80043dc <NVIC_EncodePriority>
 8004476:	4602      	mov	r2, r0
 8004478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800447c:	4611      	mov	r1, r2
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff ff82 	bl	8004388 <__NVIC_SetPriority>
}
 8004484:	bf00      	nop
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff ff56 	bl	800434c <__NVIC_EnableIRQ>
}
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e08d      	b.n	80045d6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	4b47      	ldr	r3, [pc, #284]	; (80045e0 <HAL_DMA_Init+0x138>)
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d80f      	bhi.n	80044e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	4b45      	ldr	r3, [pc, #276]	; (80045e4 <HAL_DMA_Init+0x13c>)
 80044ce:	4413      	add	r3, r2
 80044d0:	4a45      	ldr	r2, [pc, #276]	; (80045e8 <HAL_DMA_Init+0x140>)
 80044d2:	fba2 2303 	umull	r2, r3, r2, r3
 80044d6:	091b      	lsrs	r3, r3, #4
 80044d8:	009a      	lsls	r2, r3, #2
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a42      	ldr	r2, [pc, #264]	; (80045ec <HAL_DMA_Init+0x144>)
 80044e2:	641a      	str	r2, [r3, #64]	; 0x40
 80044e4:	e00e      	b.n	8004504 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	4b40      	ldr	r3, [pc, #256]	; (80045f0 <HAL_DMA_Init+0x148>)
 80044ee:	4413      	add	r3, r2
 80044f0:	4a3d      	ldr	r2, [pc, #244]	; (80045e8 <HAL_DMA_Init+0x140>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	091b      	lsrs	r3, r3, #4
 80044f8:	009a      	lsls	r2, r3, #2
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a3c      	ldr	r2, [pc, #240]	; (80045f4 <HAL_DMA_Init+0x14c>)
 8004502:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800451a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004528:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004534:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004540:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fa76 	bl	8004a48 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004564:	d102      	bne.n	800456c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004580:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d010      	beq.n	80045ac <HAL_DMA_Init+0x104>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b04      	cmp	r3, #4
 8004590:	d80c      	bhi.n	80045ac <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 fa96 	bl	8004ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80045a8:	605a      	str	r2, [r3, #4]
 80045aa:	e008      	b.n	80045be <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40020407 	.word	0x40020407
 80045e4:	bffdfff8 	.word	0xbffdfff8
 80045e8:	cccccccd 	.word	0xcccccccd
 80045ec:	40020000 	.word	0x40020000
 80045f0:	bffdfbf8 	.word	0xbffdfbf8
 80045f4:	40020400 	.word	0x40020400

080045f8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
 8004604:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_DMA_Start_IT+0x20>
 8004614:	2302      	movs	r3, #2
 8004616:	e066      	b.n	80046e6 <HAL_DMA_Start_IT+0xee>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b01      	cmp	r3, #1
 800462a:	d155      	bne.n	80046d8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0201 	bic.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	68b9      	ldr	r1, [r7, #8]
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 f9bb 	bl	80049cc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	2b00      	cmp	r3, #0
 800465c:	d008      	beq.n	8004670 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 020e 	orr.w	r2, r2, #14
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	e00f      	b.n	8004690 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0204 	bic.w	r2, r2, #4
 800467e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 020a 	orr.w	r2, r2, #10
 800468e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d007      	beq.n	80046ae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d007      	beq.n	80046c6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046c4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f042 0201 	orr.w	r2, r2, #1
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	e005      	b.n	80046e4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80046e0:	2302      	movs	r3, #2
 80046e2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80046e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b085      	sub	sp, #20
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d005      	beq.n	8004712 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2204      	movs	r2, #4
 800470a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	73fb      	strb	r3, [r7, #15]
 8004710:	e037      	b.n	8004782 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 020e 	bic.w	r2, r2, #14
 8004720:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800472c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004730:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0201 	bic.w	r2, r2, #1
 8004740:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004746:	f003 021f 	and.w	r2, r3, #31
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	2101      	movs	r1, #1
 8004750:	fa01 f202 	lsl.w	r2, r1, r2
 8004754:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800475e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00c      	beq.n	8004782 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004772:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004776:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004780:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004792:	7bfb      	ldrb	r3, [r7, #15]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047a8:	2300      	movs	r3, #0
 80047aa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d00d      	beq.n	80047d4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2204      	movs	r2, #4
 80047bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	73fb      	strb	r3, [r7, #15]
 80047d2:	e047      	b.n	8004864 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 020e 	bic.w	r2, r2, #14
 80047e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0201 	bic.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004802:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004808:	f003 021f 	and.w	r2, r3, #31
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	2101      	movs	r1, #1
 8004812:	fa01 f202 	lsl.w	r2, r1, r2
 8004816:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004820:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00c      	beq.n	8004844 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004834:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004838:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004842:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	4798      	blx	r3
    }
  }
  return status;
 8004864:	7bfb      	ldrb	r3, [r7, #15]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488a:	f003 031f 	and.w	r3, r3, #31
 800488e:	2204      	movs	r2, #4
 8004890:	409a      	lsls	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	4013      	ands	r3, r2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d026      	beq.n	80048e8 <HAL_DMA_IRQHandler+0x7a>
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d021      	beq.n	80048e8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d107      	bne.n	80048c2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0204 	bic.w	r2, r2, #4
 80048c0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c6:	f003 021f 	and.w	r2, r3, #31
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	2104      	movs	r1, #4
 80048d0:	fa01 f202 	lsl.w	r2, r1, r2
 80048d4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d071      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80048e6:	e06c      	b.n	80049c2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ec:	f003 031f 	and.w	r3, r3, #31
 80048f0:	2202      	movs	r2, #2
 80048f2:	409a      	lsls	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4013      	ands	r3, r2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d02e      	beq.n	800495a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d029      	beq.n	800495a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0320 	and.w	r3, r3, #32
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10b      	bne.n	800492c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 020a 	bic.w	r2, r2, #10
 8004922:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004930:	f003 021f 	and.w	r2, r3, #31
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004938:	2102      	movs	r1, #2
 800493a:	fa01 f202 	lsl.w	r2, r1, r2
 800493e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494c:	2b00      	cmp	r3, #0
 800494e:	d038      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004958:	e033      	b.n	80049c2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495e:	f003 031f 	and.w	r3, r3, #31
 8004962:	2208      	movs	r2, #8
 8004964:	409a      	lsls	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4013      	ands	r3, r2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d02a      	beq.n	80049c4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b00      	cmp	r3, #0
 8004976:	d025      	beq.n	80049c4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 020e 	bic.w	r2, r2, #14
 8004986:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498c:	f003 021f 	and.w	r2, r3, #31
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	2101      	movs	r1, #1
 8004996:	fa01 f202 	lsl.w	r2, r1, r2
 800499a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d004      	beq.n	80049c4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80049c2:	bf00      	nop
 80049c4:	bf00      	nop
}
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80049e2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d004      	beq.n	80049f6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80049f4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fa:	f003 021f 	and.w	r2, r3, #31
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	2101      	movs	r1, #1
 8004a04:	fa01 f202 	lsl.w	r2, r1, r2
 8004a08:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2b10      	cmp	r3, #16
 8004a18:	d108      	bne.n	8004a2c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a2a:	e007      	b.n	8004a3c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	60da      	str	r2, [r3, #12]
}
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	4b16      	ldr	r3, [pc, #88]	; (8004ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d802      	bhi.n	8004a62 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004a5c:	4b15      	ldr	r3, [pc, #84]	; (8004ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	e001      	b.n	8004a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004a62:	4b15      	ldr	r3, [pc, #84]	; (8004ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004a64:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	3b08      	subs	r3, #8
 8004a72:	4a12      	ldr	r2, [pc, #72]	; (8004abc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004a74:	fba2 2303 	umull	r2, r3, r2, r3
 8004a78:	091b      	lsrs	r3, r3, #4
 8004a7a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a80:	089b      	lsrs	r3, r3, #2
 8004a82:	009a      	lsls	r2, r3, #2
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	4413      	add	r3, r2
 8004a88:	461a      	mov	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a0b      	ldr	r2, [pc, #44]	; (8004ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004a92:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 031f 	and.w	r3, r3, #31
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	409a      	lsls	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004aa2:	bf00      	nop
 8004aa4:	371c      	adds	r7, #28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40020407 	.word	0x40020407
 8004ab4:	40020800 	.word	0x40020800
 8004ab8:	40020820 	.word	0x40020820
 8004abc:	cccccccd 	.word	0xcccccccd
 8004ac0:	40020880 	.word	0x40020880

08004ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004ad8:	4413      	add	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	461a      	mov	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a08      	ldr	r2, [pc, #32]	; (8004b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004ae6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	f003 031f 	and.w	r3, r3, #31
 8004af0:	2201      	movs	r2, #1
 8004af2:	409a      	lsls	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004af8:	bf00      	nop
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	1000823f 	.word	0x1000823f
 8004b08:	40020940 	.word	0x40020940

08004b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b1a:	e15a      	b.n	8004dd2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	2101      	movs	r1, #1
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	fa01 f303 	lsl.w	r3, r1, r3
 8004b28:	4013      	ands	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 814c 	beq.w	8004dcc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f003 0303 	and.w	r3, r3, #3
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d005      	beq.n	8004b4c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d130      	bne.n	8004bae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	2203      	movs	r2, #3
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4013      	ands	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b82:	2201      	movs	r2, #1
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8a:	43db      	mvns	r3, r3
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	091b      	lsrs	r3, r3, #4
 8004b98:	f003 0201 	and.w	r2, r3, #1
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d017      	beq.n	8004bea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	2203      	movs	r2, #3
 8004bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bca:	43db      	mvns	r3, r3
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	fa02 f303 	lsl.w	r3, r2, r3
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d123      	bne.n	8004c3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	08da      	lsrs	r2, r3, #3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	3208      	adds	r2, #8
 8004bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	220f      	movs	r2, #15
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	43db      	mvns	r3, r3
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4013      	ands	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	08da      	lsrs	r2, r3, #3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3208      	adds	r2, #8
 8004c38:	6939      	ldr	r1, [r7, #16]
 8004c3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	2203      	movs	r2, #3
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	43db      	mvns	r3, r3
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4013      	ands	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f003 0203 	and.w	r2, r3, #3
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 80a6 	beq.w	8004dcc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c80:	4b5b      	ldr	r3, [pc, #364]	; (8004df0 <HAL_GPIO_Init+0x2e4>)
 8004c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c84:	4a5a      	ldr	r2, [pc, #360]	; (8004df0 <HAL_GPIO_Init+0x2e4>)
 8004c86:	f043 0301 	orr.w	r3, r3, #1
 8004c8a:	6613      	str	r3, [r2, #96]	; 0x60
 8004c8c:	4b58      	ldr	r3, [pc, #352]	; (8004df0 <HAL_GPIO_Init+0x2e4>)
 8004c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	60bb      	str	r3, [r7, #8]
 8004c96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c98:	4a56      	ldr	r2, [pc, #344]	; (8004df4 <HAL_GPIO_Init+0x2e8>)
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	089b      	lsrs	r3, r3, #2
 8004c9e:	3302      	adds	r3, #2
 8004ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f003 0303 	and.w	r3, r3, #3
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	220f      	movs	r2, #15
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004cc2:	d01f      	beq.n	8004d04 <HAL_GPIO_Init+0x1f8>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a4c      	ldr	r2, [pc, #304]	; (8004df8 <HAL_GPIO_Init+0x2ec>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d019      	beq.n	8004d00 <HAL_GPIO_Init+0x1f4>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a4b      	ldr	r2, [pc, #300]	; (8004dfc <HAL_GPIO_Init+0x2f0>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d013      	beq.n	8004cfc <HAL_GPIO_Init+0x1f0>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a4a      	ldr	r2, [pc, #296]	; (8004e00 <HAL_GPIO_Init+0x2f4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d00d      	beq.n	8004cf8 <HAL_GPIO_Init+0x1ec>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a49      	ldr	r2, [pc, #292]	; (8004e04 <HAL_GPIO_Init+0x2f8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d007      	beq.n	8004cf4 <HAL_GPIO_Init+0x1e8>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a48      	ldr	r2, [pc, #288]	; (8004e08 <HAL_GPIO_Init+0x2fc>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d101      	bne.n	8004cf0 <HAL_GPIO_Init+0x1e4>
 8004cec:	2305      	movs	r3, #5
 8004cee:	e00a      	b.n	8004d06 <HAL_GPIO_Init+0x1fa>
 8004cf0:	2306      	movs	r3, #6
 8004cf2:	e008      	b.n	8004d06 <HAL_GPIO_Init+0x1fa>
 8004cf4:	2304      	movs	r3, #4
 8004cf6:	e006      	b.n	8004d06 <HAL_GPIO_Init+0x1fa>
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e004      	b.n	8004d06 <HAL_GPIO_Init+0x1fa>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e002      	b.n	8004d06 <HAL_GPIO_Init+0x1fa>
 8004d00:	2301      	movs	r3, #1
 8004d02:	e000      	b.n	8004d06 <HAL_GPIO_Init+0x1fa>
 8004d04:	2300      	movs	r3, #0
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	f002 0203 	and.w	r2, r2, #3
 8004d0c:	0092      	lsls	r2, r2, #2
 8004d0e:	4093      	lsls	r3, r2
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d16:	4937      	ldr	r1, [pc, #220]	; (8004df4 <HAL_GPIO_Init+0x2e8>)
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	089b      	lsrs	r3, r3, #2
 8004d1c:	3302      	adds	r3, #2
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d24:	4b39      	ldr	r3, [pc, #228]	; (8004e0c <HAL_GPIO_Init+0x300>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	43db      	mvns	r3, r3
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	4013      	ands	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d48:	4a30      	ldr	r2, [pc, #192]	; (8004e0c <HAL_GPIO_Init+0x300>)
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004d4e:	4b2f      	ldr	r3, [pc, #188]	; (8004e0c <HAL_GPIO_Init+0x300>)
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	43db      	mvns	r3, r3
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d72:	4a26      	ldr	r2, [pc, #152]	; (8004e0c <HAL_GPIO_Init+0x300>)
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004d78:	4b24      	ldr	r3, [pc, #144]	; (8004e0c <HAL_GPIO_Init+0x300>)
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	43db      	mvns	r3, r3
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4013      	ands	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d9c:	4a1b      	ldr	r2, [pc, #108]	; (8004e0c <HAL_GPIO_Init+0x300>)
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004da2:	4b1a      	ldr	r3, [pc, #104]	; (8004e0c <HAL_GPIO_Init+0x300>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	43db      	mvns	r3, r3
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	4013      	ands	r3, r2
 8004db0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004dc6:	4a11      	ldr	r2, [pc, #68]	; (8004e0c <HAL_GPIO_Init+0x300>)
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f47f ae9d 	bne.w	8004b1c <HAL_GPIO_Init+0x10>
  }
}
 8004de2:	bf00      	nop
 8004de4:	bf00      	nop
 8004de6:	371c      	adds	r7, #28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	40021000 	.word	0x40021000
 8004df4:	40010000 	.word	0x40010000
 8004df8:	48000400 	.word	0x48000400
 8004dfc:	48000800 	.word	0x48000800
 8004e00:	48000c00 	.word	0x48000c00
 8004e04:	48001000 	.word	0x48001000
 8004e08:	48001400 	.word	0x48001400
 8004e0c:	40010400 	.word	0x40010400

08004e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	807b      	strh	r3, [r7, #2]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e20:	787b      	ldrb	r3, [r7, #1]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e26:	887a      	ldrh	r2, [r7, #2]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e2c:	e002      	b.n	8004e34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e2e:	887a      	ldrh	r2, [r7, #2]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	4603      	mov	r3, r0
 8004e48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e4a:	4b08      	ldr	r3, [pc, #32]	; (8004e6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e4c:	695a      	ldr	r2, [r3, #20]
 8004e4e:	88fb      	ldrh	r3, [r7, #6]
 8004e50:	4013      	ands	r3, r2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d006      	beq.n	8004e64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e56:	4a05      	ldr	r2, [pc, #20]	; (8004e6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e58:	88fb      	ldrh	r3, [r7, #6]
 8004e5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e5c:	88fb      	ldrh	r3, [r7, #6]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 f806 	bl	8004e70 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e64:	bf00      	nop
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	40010400 	.word	0x40010400

08004e70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	4603      	mov	r3, r0
 8004e78:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
	...

08004e88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d141      	bne.n	8004f1a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e96:	4b4b      	ldr	r3, [pc, #300]	; (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea2:	d131      	bne.n	8004f08 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ea4:	4b47      	ldr	r3, [pc, #284]	; (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eaa:	4a46      	ldr	r2, [pc, #280]	; (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004eb4:	4b43      	ldr	r3, [pc, #268]	; (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ebc:	4a41      	ldr	r2, [pc, #260]	; (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ebe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ec2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ec4:	4b40      	ldr	r3, [pc, #256]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2232      	movs	r2, #50	; 0x32
 8004eca:	fb02 f303 	mul.w	r3, r2, r3
 8004ece:	4a3f      	ldr	r2, [pc, #252]	; (8004fcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed4:	0c9b      	lsrs	r3, r3, #18
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004eda:	e002      	b.n	8004ee2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ee2:	4b38      	ldr	r3, [pc, #224]	; (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eee:	d102      	bne.n	8004ef6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1f2      	bne.n	8004edc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ef6:	4b33      	ldr	r3, [pc, #204]	; (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f02:	d158      	bne.n	8004fb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e057      	b.n	8004fb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f08:	4b2e      	ldr	r3, [pc, #184]	; (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f0e:	4a2d      	ldr	r2, [pc, #180]	; (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004f18:	e04d      	b.n	8004fb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f20:	d141      	bne.n	8004fa6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f22:	4b28      	ldr	r3, [pc, #160]	; (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f2e:	d131      	bne.n	8004f94 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f30:	4b24      	ldr	r3, [pc, #144]	; (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f36:	4a23      	ldr	r2, [pc, #140]	; (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f40:	4b20      	ldr	r3, [pc, #128]	; (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f48:	4a1e      	ldr	r2, [pc, #120]	; (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f50:	4b1d      	ldr	r3, [pc, #116]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2232      	movs	r2, #50	; 0x32
 8004f56:	fb02 f303 	mul.w	r3, r2, r3
 8004f5a:	4a1c      	ldr	r2, [pc, #112]	; (8004fcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f60:	0c9b      	lsrs	r3, r3, #18
 8004f62:	3301      	adds	r3, #1
 8004f64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f66:	e002      	b.n	8004f6e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f6e:	4b15      	ldr	r3, [pc, #84]	; (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f7a:	d102      	bne.n	8004f82 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1f2      	bne.n	8004f68 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f82:	4b10      	ldr	r3, [pc, #64]	; (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f8e:	d112      	bne.n	8004fb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e011      	b.n	8004fb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f94:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f9a:	4a0a      	ldr	r2, [pc, #40]	; (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004fa4:	e007      	b.n	8004fb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004fa6:	4b07      	ldr	r3, [pc, #28]	; (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fae:	4a05      	ldr	r2, [pc, #20]	; (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fb4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	40007000 	.word	0x40007000
 8004fc8:	20000000 	.word	0x20000000
 8004fcc:	431bde83 	.word	0x431bde83

08004fd0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004fd4:	4b05      	ldr	r3, [pc, #20]	; (8004fec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	4a04      	ldr	r2, [pc, #16]	; (8004fec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004fda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fde:	6093      	str	r3, [r2, #8]
}
 8004fe0:	bf00      	nop
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40007000 	.word	0x40007000

08004ff0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e306      	b.n	8005610 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d075      	beq.n	80050fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800500e:	4b97      	ldr	r3, [pc, #604]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 030c 	and.w	r3, r3, #12
 8005016:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005018:	4b94      	ldr	r3, [pc, #592]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f003 0303 	and.w	r3, r3, #3
 8005020:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	2b0c      	cmp	r3, #12
 8005026:	d102      	bne.n	800502e <HAL_RCC_OscConfig+0x3e>
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	2b03      	cmp	r3, #3
 800502c:	d002      	beq.n	8005034 <HAL_RCC_OscConfig+0x44>
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	2b08      	cmp	r3, #8
 8005032:	d10b      	bne.n	800504c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005034:	4b8d      	ldr	r3, [pc, #564]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d05b      	beq.n	80050f8 <HAL_RCC_OscConfig+0x108>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d157      	bne.n	80050f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e2e1      	b.n	8005610 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005054:	d106      	bne.n	8005064 <HAL_RCC_OscConfig+0x74>
 8005056:	4b85      	ldr	r3, [pc, #532]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a84      	ldr	r2, [pc, #528]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 800505c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	e01d      	b.n	80050a0 <HAL_RCC_OscConfig+0xb0>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800506c:	d10c      	bne.n	8005088 <HAL_RCC_OscConfig+0x98>
 800506e:	4b7f      	ldr	r3, [pc, #508]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a7e      	ldr	r2, [pc, #504]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 8005074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	4b7c      	ldr	r3, [pc, #496]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a7b      	ldr	r2, [pc, #492]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 8005080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	e00b      	b.n	80050a0 <HAL_RCC_OscConfig+0xb0>
 8005088:	4b78      	ldr	r3, [pc, #480]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a77      	ldr	r2, [pc, #476]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 800508e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005092:	6013      	str	r3, [r2, #0]
 8005094:	4b75      	ldr	r3, [pc, #468]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a74      	ldr	r2, [pc, #464]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 800509a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800509e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d013      	beq.n	80050d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a8:	f7fd fb02 	bl	80026b0 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050b0:	f7fd fafe 	bl	80026b0 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b64      	cmp	r3, #100	; 0x64
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e2a6      	b.n	8005610 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050c2:	4b6a      	ldr	r3, [pc, #424]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0f0      	beq.n	80050b0 <HAL_RCC_OscConfig+0xc0>
 80050ce:	e014      	b.n	80050fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d0:	f7fd faee 	bl	80026b0 <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d8:	f7fd faea 	bl	80026b0 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b64      	cmp	r3, #100	; 0x64
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e292      	b.n	8005610 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050ea:	4b60      	ldr	r3, [pc, #384]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f0      	bne.n	80050d8 <HAL_RCC_OscConfig+0xe8>
 80050f6:	e000      	b.n	80050fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d075      	beq.n	80051f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005106:	4b59      	ldr	r3, [pc, #356]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 030c 	and.w	r3, r3, #12
 800510e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005110:	4b56      	ldr	r3, [pc, #344]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f003 0303 	and.w	r3, r3, #3
 8005118:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	2b0c      	cmp	r3, #12
 800511e:	d102      	bne.n	8005126 <HAL_RCC_OscConfig+0x136>
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	2b02      	cmp	r3, #2
 8005124:	d002      	beq.n	800512c <HAL_RCC_OscConfig+0x13c>
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	2b04      	cmp	r3, #4
 800512a:	d11f      	bne.n	800516c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800512c:	4b4f      	ldr	r3, [pc, #316]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <HAL_RCC_OscConfig+0x154>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e265      	b.n	8005610 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005144:	4b49      	ldr	r3, [pc, #292]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	061b      	lsls	r3, r3, #24
 8005152:	4946      	ldr	r1, [pc, #280]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 8005154:	4313      	orrs	r3, r2
 8005156:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005158:	4b45      	ldr	r3, [pc, #276]	; (8005270 <HAL_RCC_OscConfig+0x280>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4618      	mov	r0, r3
 800515e:	f7fc fa1d 	bl	800159c <HAL_InitTick>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d043      	beq.n	80051f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e251      	b.n	8005610 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d023      	beq.n	80051bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005174:	4b3d      	ldr	r3, [pc, #244]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a3c      	ldr	r2, [pc, #240]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 800517a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800517e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005180:	f7fd fa96 	bl	80026b0 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005188:	f7fd fa92 	bl	80026b0 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e23a      	b.n	8005610 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800519a:	4b34      	ldr	r3, [pc, #208]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0f0      	beq.n	8005188 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051a6:	4b31      	ldr	r3, [pc, #196]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	061b      	lsls	r3, r3, #24
 80051b4:	492d      	ldr	r1, [pc, #180]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	604b      	str	r3, [r1, #4]
 80051ba:	e01a      	b.n	80051f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051bc:	4b2b      	ldr	r3, [pc, #172]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a2a      	ldr	r2, [pc, #168]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 80051c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c8:	f7fd fa72 	bl	80026b0 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051d0:	f7fd fa6e 	bl	80026b0 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e216      	b.n	8005610 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051e2:	4b22      	ldr	r3, [pc, #136]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1f0      	bne.n	80051d0 <HAL_RCC_OscConfig+0x1e0>
 80051ee:	e000      	b.n	80051f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d041      	beq.n	8005282 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d01c      	beq.n	8005240 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005206:	4b19      	ldr	r3, [pc, #100]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 8005208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800520c:	4a17      	ldr	r2, [pc, #92]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 800520e:	f043 0301 	orr.w	r3, r3, #1
 8005212:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005216:	f7fd fa4b 	bl	80026b0 <HAL_GetTick>
 800521a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800521c:	e008      	b.n	8005230 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800521e:	f7fd fa47 	bl	80026b0 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d901      	bls.n	8005230 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e1ef      	b.n	8005610 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005230:	4b0e      	ldr	r3, [pc, #56]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 8005232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0ef      	beq.n	800521e <HAL_RCC_OscConfig+0x22e>
 800523e:	e020      	b.n	8005282 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005240:	4b0a      	ldr	r3, [pc, #40]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 8005242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005246:	4a09      	ldr	r2, [pc, #36]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 8005248:	f023 0301 	bic.w	r3, r3, #1
 800524c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005250:	f7fd fa2e 	bl	80026b0 <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005256:	e00d      	b.n	8005274 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005258:	f7fd fa2a 	bl	80026b0 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d906      	bls.n	8005274 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e1d2      	b.n	8005610 <HAL_RCC_OscConfig+0x620>
 800526a:	bf00      	nop
 800526c:	40021000 	.word	0x40021000
 8005270:	200000cc 	.word	0x200000cc
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005274:	4b8c      	ldr	r3, [pc, #560]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 8005276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1ea      	bne.n	8005258 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0304 	and.w	r3, r3, #4
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 80a6 	beq.w	80053dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005290:	2300      	movs	r3, #0
 8005292:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005294:	4b84      	ldr	r3, [pc, #528]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 8005296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <HAL_RCC_OscConfig+0x2b4>
 80052a0:	2301      	movs	r3, #1
 80052a2:	e000      	b.n	80052a6 <HAL_RCC_OscConfig+0x2b6>
 80052a4:	2300      	movs	r3, #0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00d      	beq.n	80052c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052aa:	4b7f      	ldr	r3, [pc, #508]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 80052ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ae:	4a7e      	ldr	r2, [pc, #504]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 80052b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b4:	6593      	str	r3, [r2, #88]	; 0x58
 80052b6:	4b7c      	ldr	r3, [pc, #496]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 80052b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80052c2:	2301      	movs	r3, #1
 80052c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052c6:	4b79      	ldr	r3, [pc, #484]	; (80054ac <HAL_RCC_OscConfig+0x4bc>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d118      	bne.n	8005304 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052d2:	4b76      	ldr	r3, [pc, #472]	; (80054ac <HAL_RCC_OscConfig+0x4bc>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a75      	ldr	r2, [pc, #468]	; (80054ac <HAL_RCC_OscConfig+0x4bc>)
 80052d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052de:	f7fd f9e7 	bl	80026b0 <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052e4:	e008      	b.n	80052f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052e6:	f7fd f9e3 	bl	80026b0 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e18b      	b.n	8005610 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052f8:	4b6c      	ldr	r3, [pc, #432]	; (80054ac <HAL_RCC_OscConfig+0x4bc>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0f0      	beq.n	80052e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d108      	bne.n	800531e <HAL_RCC_OscConfig+0x32e>
 800530c:	4b66      	ldr	r3, [pc, #408]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 800530e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005312:	4a65      	ldr	r2, [pc, #404]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 8005314:	f043 0301 	orr.w	r3, r3, #1
 8005318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800531c:	e024      	b.n	8005368 <HAL_RCC_OscConfig+0x378>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	2b05      	cmp	r3, #5
 8005324:	d110      	bne.n	8005348 <HAL_RCC_OscConfig+0x358>
 8005326:	4b60      	ldr	r3, [pc, #384]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 8005328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532c:	4a5e      	ldr	r2, [pc, #376]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 800532e:	f043 0304 	orr.w	r3, r3, #4
 8005332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005336:	4b5c      	ldr	r3, [pc, #368]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 8005338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533c:	4a5a      	ldr	r2, [pc, #360]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 800533e:	f043 0301 	orr.w	r3, r3, #1
 8005342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005346:	e00f      	b.n	8005368 <HAL_RCC_OscConfig+0x378>
 8005348:	4b57      	ldr	r3, [pc, #348]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 800534a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534e:	4a56      	ldr	r2, [pc, #344]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 8005350:	f023 0301 	bic.w	r3, r3, #1
 8005354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005358:	4b53      	ldr	r3, [pc, #332]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 800535a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535e:	4a52      	ldr	r2, [pc, #328]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 8005360:	f023 0304 	bic.w	r3, r3, #4
 8005364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d016      	beq.n	800539e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005370:	f7fd f99e 	bl	80026b0 <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005376:	e00a      	b.n	800538e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005378:	f7fd f99a 	bl	80026b0 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	f241 3288 	movw	r2, #5000	; 0x1388
 8005386:	4293      	cmp	r3, r2
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e140      	b.n	8005610 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800538e:	4b46      	ldr	r3, [pc, #280]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 8005390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0ed      	beq.n	8005378 <HAL_RCC_OscConfig+0x388>
 800539c:	e015      	b.n	80053ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800539e:	f7fd f987 	bl	80026b0 <HAL_GetTick>
 80053a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053a4:	e00a      	b.n	80053bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053a6:	f7fd f983 	bl	80026b0 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e129      	b.n	8005610 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053bc:	4b3a      	ldr	r3, [pc, #232]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 80053be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1ed      	bne.n	80053a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053ca:	7ffb      	ldrb	r3, [r7, #31]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d105      	bne.n	80053dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053d0:	4b35      	ldr	r3, [pc, #212]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 80053d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d4:	4a34      	ldr	r2, [pc, #208]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 80053d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0320 	and.w	r3, r3, #32
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d03c      	beq.n	8005462 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01c      	beq.n	800542a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053f0:	4b2d      	ldr	r3, [pc, #180]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 80053f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053f6:	4a2c      	ldr	r2, [pc, #176]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 80053f8:	f043 0301 	orr.w	r3, r3, #1
 80053fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005400:	f7fd f956 	bl	80026b0 <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005408:	f7fd f952 	bl	80026b0 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e0fa      	b.n	8005610 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800541a:	4b23      	ldr	r3, [pc, #140]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 800541c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0ef      	beq.n	8005408 <HAL_RCC_OscConfig+0x418>
 8005428:	e01b      	b.n	8005462 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800542a:	4b1f      	ldr	r3, [pc, #124]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 800542c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005430:	4a1d      	ldr	r2, [pc, #116]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 8005432:	f023 0301 	bic.w	r3, r3, #1
 8005436:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800543a:	f7fd f939 	bl	80026b0 <HAL_GetTick>
 800543e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005440:	e008      	b.n	8005454 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005442:	f7fd f935 	bl	80026b0 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e0dd      	b.n	8005610 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005454:	4b14      	ldr	r3, [pc, #80]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 8005456:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1ef      	bne.n	8005442 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 80d1 	beq.w	800560e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800546c:	4b0e      	ldr	r3, [pc, #56]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f003 030c 	and.w	r3, r3, #12
 8005474:	2b0c      	cmp	r3, #12
 8005476:	f000 808b 	beq.w	8005590 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	2b02      	cmp	r3, #2
 8005480:	d15e      	bne.n	8005540 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005482:	4b09      	ldr	r3, [pc, #36]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a08      	ldr	r2, [pc, #32]	; (80054a8 <HAL_RCC_OscConfig+0x4b8>)
 8005488:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800548c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548e:	f7fd f90f 	bl	80026b0 <HAL_GetTick>
 8005492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005494:	e00c      	b.n	80054b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005496:	f7fd f90b 	bl	80026b0 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d905      	bls.n	80054b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e0b3      	b.n	8005610 <HAL_RCC_OscConfig+0x620>
 80054a8:	40021000 	.word	0x40021000
 80054ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054b0:	4b59      	ldr	r3, [pc, #356]	; (8005618 <HAL_RCC_OscConfig+0x628>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1ec      	bne.n	8005496 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054bc:	4b56      	ldr	r3, [pc, #344]	; (8005618 <HAL_RCC_OscConfig+0x628>)
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	4b56      	ldr	r3, [pc, #344]	; (800561c <HAL_RCC_OscConfig+0x62c>)
 80054c2:	4013      	ands	r3, r2
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	6a11      	ldr	r1, [r2, #32]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054cc:	3a01      	subs	r2, #1
 80054ce:	0112      	lsls	r2, r2, #4
 80054d0:	4311      	orrs	r1, r2
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80054d6:	0212      	lsls	r2, r2, #8
 80054d8:	4311      	orrs	r1, r2
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054de:	0852      	lsrs	r2, r2, #1
 80054e0:	3a01      	subs	r2, #1
 80054e2:	0552      	lsls	r2, r2, #21
 80054e4:	4311      	orrs	r1, r2
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054ea:	0852      	lsrs	r2, r2, #1
 80054ec:	3a01      	subs	r2, #1
 80054ee:	0652      	lsls	r2, r2, #25
 80054f0:	4311      	orrs	r1, r2
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054f6:	06d2      	lsls	r2, r2, #27
 80054f8:	430a      	orrs	r2, r1
 80054fa:	4947      	ldr	r1, [pc, #284]	; (8005618 <HAL_RCC_OscConfig+0x628>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005500:	4b45      	ldr	r3, [pc, #276]	; (8005618 <HAL_RCC_OscConfig+0x628>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a44      	ldr	r2, [pc, #272]	; (8005618 <HAL_RCC_OscConfig+0x628>)
 8005506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800550a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800550c:	4b42      	ldr	r3, [pc, #264]	; (8005618 <HAL_RCC_OscConfig+0x628>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	4a41      	ldr	r2, [pc, #260]	; (8005618 <HAL_RCC_OscConfig+0x628>)
 8005512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005516:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005518:	f7fd f8ca 	bl	80026b0 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005520:	f7fd f8c6 	bl	80026b0 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e06e      	b.n	8005610 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005532:	4b39      	ldr	r3, [pc, #228]	; (8005618 <HAL_RCC_OscConfig+0x628>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0f0      	beq.n	8005520 <HAL_RCC_OscConfig+0x530>
 800553e:	e066      	b.n	800560e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005540:	4b35      	ldr	r3, [pc, #212]	; (8005618 <HAL_RCC_OscConfig+0x628>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a34      	ldr	r2, [pc, #208]	; (8005618 <HAL_RCC_OscConfig+0x628>)
 8005546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800554a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800554c:	4b32      	ldr	r3, [pc, #200]	; (8005618 <HAL_RCC_OscConfig+0x628>)
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	4a31      	ldr	r2, [pc, #196]	; (8005618 <HAL_RCC_OscConfig+0x628>)
 8005552:	f023 0303 	bic.w	r3, r3, #3
 8005556:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005558:	4b2f      	ldr	r3, [pc, #188]	; (8005618 <HAL_RCC_OscConfig+0x628>)
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	4a2e      	ldr	r2, [pc, #184]	; (8005618 <HAL_RCC_OscConfig+0x628>)
 800555e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005566:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005568:	f7fd f8a2 	bl	80026b0 <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005570:	f7fd f89e 	bl	80026b0 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e046      	b.n	8005610 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005582:	4b25      	ldr	r3, [pc, #148]	; (8005618 <HAL_RCC_OscConfig+0x628>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1f0      	bne.n	8005570 <HAL_RCC_OscConfig+0x580>
 800558e:	e03e      	b.n	800560e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d101      	bne.n	800559c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e039      	b.n	8005610 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800559c:	4b1e      	ldr	r3, [pc, #120]	; (8005618 <HAL_RCC_OscConfig+0x628>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f003 0203 	and.w	r2, r3, #3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d12c      	bne.n	800560a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ba:	3b01      	subs	r3, #1
 80055bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055be:	429a      	cmp	r2, r3
 80055c0:	d123      	bne.n	800560a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d11b      	bne.n	800560a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055de:	429a      	cmp	r2, r3
 80055e0:	d113      	bne.n	800560a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ec:	085b      	lsrs	r3, r3, #1
 80055ee:	3b01      	subs	r3, #1
 80055f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d109      	bne.n	800560a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005600:	085b      	lsrs	r3, r3, #1
 8005602:	3b01      	subs	r3, #1
 8005604:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005606:	429a      	cmp	r2, r3
 8005608:	d001      	beq.n	800560e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3720      	adds	r7, #32
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40021000 	.word	0x40021000
 800561c:	019f800c 	.word	0x019f800c

08005620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800562a:	2300      	movs	r3, #0
 800562c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e11e      	b.n	8005876 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005638:	4b91      	ldr	r3, [pc, #580]	; (8005880 <HAL_RCC_ClockConfig+0x260>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 030f 	and.w	r3, r3, #15
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d910      	bls.n	8005668 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005646:	4b8e      	ldr	r3, [pc, #568]	; (8005880 <HAL_RCC_ClockConfig+0x260>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f023 020f 	bic.w	r2, r3, #15
 800564e:	498c      	ldr	r1, [pc, #560]	; (8005880 <HAL_RCC_ClockConfig+0x260>)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	4313      	orrs	r3, r2
 8005654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005656:	4b8a      	ldr	r3, [pc, #552]	; (8005880 <HAL_RCC_ClockConfig+0x260>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	429a      	cmp	r2, r3
 8005662:	d001      	beq.n	8005668 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e106      	b.n	8005876 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	d073      	beq.n	800575c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2b03      	cmp	r3, #3
 800567a:	d129      	bne.n	80056d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800567c:	4b81      	ldr	r3, [pc, #516]	; (8005884 <HAL_RCC_ClockConfig+0x264>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e0f4      	b.n	8005876 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800568c:	f000 f9d0 	bl	8005a30 <RCC_GetSysClockFreqFromPLLSource>
 8005690:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	4a7c      	ldr	r2, [pc, #496]	; (8005888 <HAL_RCC_ClockConfig+0x268>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d93f      	bls.n	800571a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800569a:	4b7a      	ldr	r3, [pc, #488]	; (8005884 <HAL_RCC_ClockConfig+0x264>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d009      	beq.n	80056ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d033      	beq.n	800571a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d12f      	bne.n	800571a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056ba:	4b72      	ldr	r3, [pc, #456]	; (8005884 <HAL_RCC_ClockConfig+0x264>)
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056c2:	4a70      	ldr	r2, [pc, #448]	; (8005884 <HAL_RCC_ClockConfig+0x264>)
 80056c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80056ca:	2380      	movs	r3, #128	; 0x80
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	e024      	b.n	800571a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d107      	bne.n	80056e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056d8:	4b6a      	ldr	r3, [pc, #424]	; (8005884 <HAL_RCC_ClockConfig+0x264>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d109      	bne.n	80056f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e0c6      	b.n	8005876 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056e8:	4b66      	ldr	r3, [pc, #408]	; (8005884 <HAL_RCC_ClockConfig+0x264>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e0be      	b.n	8005876 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80056f8:	f000 f8ce 	bl	8005898 <HAL_RCC_GetSysClockFreq>
 80056fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	4a61      	ldr	r2, [pc, #388]	; (8005888 <HAL_RCC_ClockConfig+0x268>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d909      	bls.n	800571a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005706:	4b5f      	ldr	r3, [pc, #380]	; (8005884 <HAL_RCC_ClockConfig+0x264>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800570e:	4a5d      	ldr	r2, [pc, #372]	; (8005884 <HAL_RCC_ClockConfig+0x264>)
 8005710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005714:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005716:	2380      	movs	r3, #128	; 0x80
 8005718:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800571a:	4b5a      	ldr	r3, [pc, #360]	; (8005884 <HAL_RCC_ClockConfig+0x264>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f023 0203 	bic.w	r2, r3, #3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	4957      	ldr	r1, [pc, #348]	; (8005884 <HAL_RCC_ClockConfig+0x264>)
 8005728:	4313      	orrs	r3, r2
 800572a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800572c:	f7fc ffc0 	bl	80026b0 <HAL_GetTick>
 8005730:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005732:	e00a      	b.n	800574a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005734:	f7fc ffbc 	bl	80026b0 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005742:	4293      	cmp	r3, r2
 8005744:	d901      	bls.n	800574a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e095      	b.n	8005876 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800574a:	4b4e      	ldr	r3, [pc, #312]	; (8005884 <HAL_RCC_ClockConfig+0x264>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 020c 	and.w	r2, r3, #12
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	429a      	cmp	r2, r3
 800575a:	d1eb      	bne.n	8005734 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d023      	beq.n	80057b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0304 	and.w	r3, r3, #4
 8005770:	2b00      	cmp	r3, #0
 8005772:	d005      	beq.n	8005780 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005774:	4b43      	ldr	r3, [pc, #268]	; (8005884 <HAL_RCC_ClockConfig+0x264>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	4a42      	ldr	r2, [pc, #264]	; (8005884 <HAL_RCC_ClockConfig+0x264>)
 800577a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800577e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b00      	cmp	r3, #0
 800578a:	d007      	beq.n	800579c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800578c:	4b3d      	ldr	r3, [pc, #244]	; (8005884 <HAL_RCC_ClockConfig+0x264>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005794:	4a3b      	ldr	r2, [pc, #236]	; (8005884 <HAL_RCC_ClockConfig+0x264>)
 8005796:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800579a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800579c:	4b39      	ldr	r3, [pc, #228]	; (8005884 <HAL_RCC_ClockConfig+0x264>)
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	4936      	ldr	r1, [pc, #216]	; (8005884 <HAL_RCC_ClockConfig+0x264>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	608b      	str	r3, [r1, #8]
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	2b80      	cmp	r3, #128	; 0x80
 80057b4:	d105      	bne.n	80057c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80057b6:	4b33      	ldr	r3, [pc, #204]	; (8005884 <HAL_RCC_ClockConfig+0x264>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	4a32      	ldr	r2, [pc, #200]	; (8005884 <HAL_RCC_ClockConfig+0x264>)
 80057bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057c2:	4b2f      	ldr	r3, [pc, #188]	; (8005880 <HAL_RCC_ClockConfig+0x260>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 030f 	and.w	r3, r3, #15
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d21d      	bcs.n	800580c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057d0:	4b2b      	ldr	r3, [pc, #172]	; (8005880 <HAL_RCC_ClockConfig+0x260>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f023 020f 	bic.w	r2, r3, #15
 80057d8:	4929      	ldr	r1, [pc, #164]	; (8005880 <HAL_RCC_ClockConfig+0x260>)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	4313      	orrs	r3, r2
 80057de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057e0:	f7fc ff66 	bl	80026b0 <HAL_GetTick>
 80057e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057e6:	e00a      	b.n	80057fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057e8:	f7fc ff62 	bl	80026b0 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e03b      	b.n	8005876 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057fe:	4b20      	ldr	r3, [pc, #128]	; (8005880 <HAL_RCC_ClockConfig+0x260>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 030f 	and.w	r3, r3, #15
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d1ed      	bne.n	80057e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b00      	cmp	r3, #0
 8005816:	d008      	beq.n	800582a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005818:	4b1a      	ldr	r3, [pc, #104]	; (8005884 <HAL_RCC_ClockConfig+0x264>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	4917      	ldr	r1, [pc, #92]	; (8005884 <HAL_RCC_ClockConfig+0x264>)
 8005826:	4313      	orrs	r3, r2
 8005828:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0308 	and.w	r3, r3, #8
 8005832:	2b00      	cmp	r3, #0
 8005834:	d009      	beq.n	800584a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005836:	4b13      	ldr	r3, [pc, #76]	; (8005884 <HAL_RCC_ClockConfig+0x264>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	490f      	ldr	r1, [pc, #60]	; (8005884 <HAL_RCC_ClockConfig+0x264>)
 8005846:	4313      	orrs	r3, r2
 8005848:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800584a:	f000 f825 	bl	8005898 <HAL_RCC_GetSysClockFreq>
 800584e:	4602      	mov	r2, r0
 8005850:	4b0c      	ldr	r3, [pc, #48]	; (8005884 <HAL_RCC_ClockConfig+0x264>)
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	091b      	lsrs	r3, r3, #4
 8005856:	f003 030f 	and.w	r3, r3, #15
 800585a:	490c      	ldr	r1, [pc, #48]	; (800588c <HAL_RCC_ClockConfig+0x26c>)
 800585c:	5ccb      	ldrb	r3, [r1, r3]
 800585e:	f003 031f 	and.w	r3, r3, #31
 8005862:	fa22 f303 	lsr.w	r3, r2, r3
 8005866:	4a0a      	ldr	r2, [pc, #40]	; (8005890 <HAL_RCC_ClockConfig+0x270>)
 8005868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800586a:	4b0a      	ldr	r3, [pc, #40]	; (8005894 <HAL_RCC_ClockConfig+0x274>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4618      	mov	r0, r3
 8005870:	f7fb fe94 	bl	800159c <HAL_InitTick>
 8005874:	4603      	mov	r3, r0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	40022000 	.word	0x40022000
 8005884:	40021000 	.word	0x40021000
 8005888:	04c4b400 	.word	0x04c4b400
 800588c:	0800b584 	.word	0x0800b584
 8005890:	20000000 	.word	0x20000000
 8005894:	200000cc 	.word	0x200000cc

08005898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800589e:	4b2c      	ldr	r3, [pc, #176]	; (8005950 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f003 030c 	and.w	r3, r3, #12
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	d102      	bne.n	80058b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058aa:	4b2a      	ldr	r3, [pc, #168]	; (8005954 <HAL_RCC_GetSysClockFreq+0xbc>)
 80058ac:	613b      	str	r3, [r7, #16]
 80058ae:	e047      	b.n	8005940 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80058b0:	4b27      	ldr	r3, [pc, #156]	; (8005950 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f003 030c 	and.w	r3, r3, #12
 80058b8:	2b08      	cmp	r3, #8
 80058ba:	d102      	bne.n	80058c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058bc:	4b26      	ldr	r3, [pc, #152]	; (8005958 <HAL_RCC_GetSysClockFreq+0xc0>)
 80058be:	613b      	str	r3, [r7, #16]
 80058c0:	e03e      	b.n	8005940 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80058c2:	4b23      	ldr	r3, [pc, #140]	; (8005950 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 030c 	and.w	r3, r3, #12
 80058ca:	2b0c      	cmp	r3, #12
 80058cc:	d136      	bne.n	800593c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058ce:	4b20      	ldr	r3, [pc, #128]	; (8005950 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058d8:	4b1d      	ldr	r3, [pc, #116]	; (8005950 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	091b      	lsrs	r3, r3, #4
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	3301      	adds	r3, #1
 80058e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	d10c      	bne.n	8005906 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058ec:	4a1a      	ldr	r2, [pc, #104]	; (8005958 <HAL_RCC_GetSysClockFreq+0xc0>)
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f4:	4a16      	ldr	r2, [pc, #88]	; (8005950 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058f6:	68d2      	ldr	r2, [r2, #12]
 80058f8:	0a12      	lsrs	r2, r2, #8
 80058fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80058fe:	fb02 f303 	mul.w	r3, r2, r3
 8005902:	617b      	str	r3, [r7, #20]
      break;
 8005904:	e00c      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005906:	4a13      	ldr	r2, [pc, #76]	; (8005954 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	fbb2 f3f3 	udiv	r3, r2, r3
 800590e:	4a10      	ldr	r2, [pc, #64]	; (8005950 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005910:	68d2      	ldr	r2, [r2, #12]
 8005912:	0a12      	lsrs	r2, r2, #8
 8005914:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005918:	fb02 f303 	mul.w	r3, r2, r3
 800591c:	617b      	str	r3, [r7, #20]
      break;
 800591e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005920:	4b0b      	ldr	r3, [pc, #44]	; (8005950 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	0e5b      	lsrs	r3, r3, #25
 8005926:	f003 0303 	and.w	r3, r3, #3
 800592a:	3301      	adds	r3, #1
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	fbb2 f3f3 	udiv	r3, r2, r3
 8005938:	613b      	str	r3, [r7, #16]
 800593a:	e001      	b.n	8005940 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005940:	693b      	ldr	r3, [r7, #16]
}
 8005942:	4618      	mov	r0, r3
 8005944:	371c      	adds	r7, #28
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	40021000 	.word	0x40021000
 8005954:	00f42400 	.word	0x00f42400
 8005958:	016e3600 	.word	0x016e3600

0800595c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800595c:	b480      	push	{r7}
 800595e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005960:	4b03      	ldr	r3, [pc, #12]	; (8005970 <HAL_RCC_GetHCLKFreq+0x14>)
 8005962:	681b      	ldr	r3, [r3, #0]
}
 8005964:	4618      	mov	r0, r3
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	20000000 	.word	0x20000000

08005974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005978:	f7ff fff0 	bl	800595c <HAL_RCC_GetHCLKFreq>
 800597c:	4602      	mov	r2, r0
 800597e:	4b06      	ldr	r3, [pc, #24]	; (8005998 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	0a1b      	lsrs	r3, r3, #8
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	4904      	ldr	r1, [pc, #16]	; (800599c <HAL_RCC_GetPCLK1Freq+0x28>)
 800598a:	5ccb      	ldrb	r3, [r1, r3]
 800598c:	f003 031f 	and.w	r3, r3, #31
 8005990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005994:	4618      	mov	r0, r3
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40021000 	.word	0x40021000
 800599c:	0800b594 	.word	0x0800b594

080059a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059a4:	f7ff ffda 	bl	800595c <HAL_RCC_GetHCLKFreq>
 80059a8:	4602      	mov	r2, r0
 80059aa:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	0adb      	lsrs	r3, r3, #11
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	4904      	ldr	r1, [pc, #16]	; (80059c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059b6:	5ccb      	ldrb	r3, [r1, r3]
 80059b8:	f003 031f 	and.w	r3, r3, #31
 80059bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	40021000 	.word	0x40021000
 80059c8:	0800b594 	.word	0x0800b594

080059cc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	220f      	movs	r2, #15
 80059da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80059dc:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <HAL_RCC_GetClockConfig+0x5c>)
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f003 0203 	and.w	r2, r3, #3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80059e8:	4b0f      	ldr	r3, [pc, #60]	; (8005a28 <HAL_RCC_GetClockConfig+0x5c>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80059f4:	4b0c      	ldr	r3, [pc, #48]	; (8005a28 <HAL_RCC_GetClockConfig+0x5c>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005a00:	4b09      	ldr	r3, [pc, #36]	; (8005a28 <HAL_RCC_GetClockConfig+0x5c>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	08db      	lsrs	r3, r3, #3
 8005a06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005a0e:	4b07      	ldr	r3, [pc, #28]	; (8005a2c <HAL_RCC_GetClockConfig+0x60>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 020f 	and.w	r2, r3, #15
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	601a      	str	r2, [r3, #0]
}
 8005a1a:	bf00      	nop
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	40021000 	.word	0x40021000
 8005a2c:	40022000 	.word	0x40022000

08005a30 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a36:	4b1e      	ldr	r3, [pc, #120]	; (8005ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f003 0303 	and.w	r3, r3, #3
 8005a3e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a40:	4b1b      	ldr	r3, [pc, #108]	; (8005ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	091b      	lsrs	r3, r3, #4
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	d10c      	bne.n	8005a6e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a54:	4a17      	ldr	r2, [pc, #92]	; (8005ab4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5c:	4a14      	ldr	r2, [pc, #80]	; (8005ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a5e:	68d2      	ldr	r2, [r2, #12]
 8005a60:	0a12      	lsrs	r2, r2, #8
 8005a62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a66:	fb02 f303 	mul.w	r3, r2, r3
 8005a6a:	617b      	str	r3, [r7, #20]
    break;
 8005a6c:	e00c      	b.n	8005a88 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a6e:	4a12      	ldr	r2, [pc, #72]	; (8005ab8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a76:	4a0e      	ldr	r2, [pc, #56]	; (8005ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a78:	68d2      	ldr	r2, [r2, #12]
 8005a7a:	0a12      	lsrs	r2, r2, #8
 8005a7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a80:	fb02 f303 	mul.w	r3, r2, r3
 8005a84:	617b      	str	r3, [r7, #20]
    break;
 8005a86:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a88:	4b09      	ldr	r3, [pc, #36]	; (8005ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	0e5b      	lsrs	r3, r3, #25
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	3301      	adds	r3, #1
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005aa2:	687b      	ldr	r3, [r7, #4]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	371c      	adds	r7, #28
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	40021000 	.word	0x40021000
 8005ab4:	016e3600 	.word	0x016e3600
 8005ab8:	00f42400 	.word	0x00f42400

08005abc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ac8:	2300      	movs	r3, #0
 8005aca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 8098 	beq.w	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ada:	2300      	movs	r3, #0
 8005adc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ade:	4b43      	ldr	r3, [pc, #268]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10d      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aea:	4b40      	ldr	r3, [pc, #256]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aee:	4a3f      	ldr	r2, [pc, #252]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af4:	6593      	str	r3, [r2, #88]	; 0x58
 8005af6:	4b3d      	ldr	r3, [pc, #244]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005afe:	60bb      	str	r3, [r7, #8]
 8005b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b02:	2301      	movs	r3, #1
 8005b04:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b06:	4b3a      	ldr	r3, [pc, #232]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a39      	ldr	r2, [pc, #228]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b12:	f7fc fdcd 	bl	80026b0 <HAL_GetTick>
 8005b16:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b18:	e009      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b1a:	f7fc fdc9 	bl	80026b0 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d902      	bls.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	74fb      	strb	r3, [r7, #19]
        break;
 8005b2c:	e005      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b2e:	4b30      	ldr	r3, [pc, #192]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0ef      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005b3a:	7cfb      	ldrb	r3, [r7, #19]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d159      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b40:	4b2a      	ldr	r3, [pc, #168]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b4a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d01e      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d019      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b5c:	4b23      	ldr	r3, [pc, #140]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b68:	4b20      	ldr	r3, [pc, #128]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b6e:	4a1f      	ldr	r2, [pc, #124]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b78:	4b1c      	ldr	r3, [pc, #112]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b7e:	4a1b      	ldr	r2, [pc, #108]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b88:	4a18      	ldr	r2, [pc, #96]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d016      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b9a:	f7fc fd89 	bl	80026b0 <HAL_GetTick>
 8005b9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ba0:	e00b      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ba2:	f7fc fd85 	bl	80026b0 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d902      	bls.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	74fb      	strb	r3, [r7, #19]
            break;
 8005bb8:	e006      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bba:	4b0c      	ldr	r3, [pc, #48]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0ec      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005bc8:	7cfb      	ldrb	r3, [r7, #19]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10b      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bce:	4b07      	ldr	r3, [pc, #28]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bdc:	4903      	ldr	r1, [pc, #12]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005be4:	e008      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005be6:	7cfb      	ldrb	r3, [r7, #19]
 8005be8:	74bb      	strb	r3, [r7, #18]
 8005bea:	e005      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005bec:	40021000 	.word	0x40021000
 8005bf0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf4:	7cfb      	ldrb	r3, [r7, #19]
 8005bf6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bf8:	7c7b      	ldrb	r3, [r7, #17]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d105      	bne.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bfe:	4ba7      	ldr	r3, [pc, #668]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c02:	4aa6      	ldr	r2, [pc, #664]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c16:	4ba1      	ldr	r3, [pc, #644]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c1c:	f023 0203 	bic.w	r2, r3, #3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	499d      	ldr	r1, [pc, #628]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c38:	4b98      	ldr	r3, [pc, #608]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3e:	f023 020c 	bic.w	r2, r3, #12
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	4995      	ldr	r1, [pc, #596]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0304 	and.w	r3, r3, #4
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c5a:	4b90      	ldr	r3, [pc, #576]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	498c      	ldr	r1, [pc, #560]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0308 	and.w	r3, r3, #8
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00a      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c7c:	4b87      	ldr	r3, [pc, #540]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	4984      	ldr	r1, [pc, #528]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0310 	and.w	r3, r3, #16
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00a      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c9e:	4b7f      	ldr	r3, [pc, #508]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	497b      	ldr	r1, [pc, #492]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0320 	and.w	r3, r3, #32
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00a      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cc0:	4b76      	ldr	r3, [pc, #472]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	4973      	ldr	r1, [pc, #460]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00a      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ce2:	4b6e      	ldr	r3, [pc, #440]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	496a      	ldr	r1, [pc, #424]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00a      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d04:	4b65      	ldr	r3, [pc, #404]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	4962      	ldr	r1, [pc, #392]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00a      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d26:	4b5d      	ldr	r3, [pc, #372]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	4959      	ldr	r1, [pc, #356]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00a      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d48:	4b54      	ldr	r3, [pc, #336]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d4e:	f023 0203 	bic.w	r2, r3, #3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d56:	4951      	ldr	r1, [pc, #324]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d6a:	4b4c      	ldr	r3, [pc, #304]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d78:	4948      	ldr	r1, [pc, #288]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d015      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d8c:	4b43      	ldr	r3, [pc, #268]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9a:	4940      	ldr	r1, [pc, #256]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005daa:	d105      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dac:	4b3b      	ldr	r3, [pc, #236]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	4a3a      	ldr	r2, [pc, #232]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005db6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d015      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005dc4:	4b35      	ldr	r3, [pc, #212]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd2:	4932      	ldr	r1, [pc, #200]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005de2:	d105      	bne.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005de4:	4b2d      	ldr	r3, [pc, #180]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	4a2c      	ldr	r2, [pc, #176]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d015      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005dfc:	4b27      	ldr	r3, [pc, #156]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e02:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0a:	4924      	ldr	r1, [pc, #144]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e1a:	d105      	bne.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e1c:	4b1f      	ldr	r3, [pc, #124]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	4a1e      	ldr	r2, [pc, #120]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e26:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d015      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e34:	4b19      	ldr	r3, [pc, #100]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e42:	4916      	ldr	r1, [pc, #88]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e52:	d105      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e54:	4b11      	ldr	r3, [pc, #68]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	4a10      	ldr	r2, [pc, #64]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e5e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d019      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e6c:	4b0b      	ldr	r3, [pc, #44]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	4908      	ldr	r1, [pc, #32]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e8a:	d109      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e8c:	4b03      	ldr	r3, [pc, #12]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	4a02      	ldr	r2, [pc, #8]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e96:	60d3      	str	r3, [r2, #12]
 8005e98:	e002      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005e9a:	bf00      	nop
 8005e9c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d015      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005eac:	4b29      	ldr	r3, [pc, #164]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eba:	4926      	ldr	r1, [pc, #152]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eca:	d105      	bne.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ecc:	4b21      	ldr	r3, [pc, #132]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	4a20      	ldr	r2, [pc, #128]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ed6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d015      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005ee4:	4b1b      	ldr	r3, [pc, #108]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eea:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ef2:	4918      	ldr	r1, [pc, #96]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f02:	d105      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f04:	4b13      	ldr	r3, [pc, #76]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	4a12      	ldr	r2, [pc, #72]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f0e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d015      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005f1c:	4b0d      	ldr	r3, [pc, #52]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2a:	490a      	ldr	r1, [pc, #40]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f3a:	d105      	bne.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f3c:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	4a04      	ldr	r2, [pc, #16]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f46:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005f48:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3718      	adds	r7, #24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	40021000 	.word	0x40021000

08005f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e049      	b.n	8005ffe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7fb fdfa 	bl	8001b78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	3304      	adds	r3, #4
 8005f94:	4619      	mov	r1, r3
 8005f96:	4610      	mov	r0, r2
 8005f98:	f000 ffda 	bl	8006f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
	...

08006008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b01      	cmp	r3, #1
 800601a:	d001      	beq.n	8006020 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e054      	b.n	80060ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0201 	orr.w	r2, r2, #1
 8006036:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a26      	ldr	r2, [pc, #152]	; (80060d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d022      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604a:	d01d      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a22      	ldr	r2, [pc, #136]	; (80060dc <HAL_TIM_Base_Start_IT+0xd4>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d018      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a21      	ldr	r2, [pc, #132]	; (80060e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d013      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a1f      	ldr	r2, [pc, #124]	; (80060e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00e      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a1e      	ldr	r2, [pc, #120]	; (80060e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d009      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a1c      	ldr	r2, [pc, #112]	; (80060ec <HAL_TIM_Base_Start_IT+0xe4>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d004      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a1b      	ldr	r2, [pc, #108]	; (80060f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d115      	bne.n	80060b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	4b19      	ldr	r3, [pc, #100]	; (80060f4 <HAL_TIM_Base_Start_IT+0xec>)
 8006090:	4013      	ands	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2b06      	cmp	r3, #6
 8006098:	d015      	beq.n	80060c6 <HAL_TIM_Base_Start_IT+0xbe>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060a0:	d011      	beq.n	80060c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f042 0201 	orr.w	r2, r2, #1
 80060b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b2:	e008      	b.n	80060c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0201 	orr.w	r2, r2, #1
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	e000      	b.n	80060c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	40012c00 	.word	0x40012c00
 80060dc:	40000400 	.word	0x40000400
 80060e0:	40000800 	.word	0x40000800
 80060e4:	40000c00 	.word	0x40000c00
 80060e8:	40013400 	.word	0x40013400
 80060ec:	40014000 	.word	0x40014000
 80060f0:	40015000 	.word	0x40015000
 80060f4:	00010007 	.word	0x00010007

080060f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e049      	b.n	800619e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d106      	bne.n	8006124 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f841 	bl	80061a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3304      	adds	r3, #4
 8006134:	4619      	mov	r1, r3
 8006136:	4610      	mov	r0, r2
 8006138:	f000 ff0a 	bl	8006f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061ae:	bf00      	nop
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
	...

080061bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d109      	bne.n	80061e0 <HAL_TIM_PWM_Start+0x24>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	bf14      	ite	ne
 80061d8:	2301      	movne	r3, #1
 80061da:	2300      	moveq	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	e03c      	b.n	800625a <HAL_TIM_PWM_Start+0x9e>
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d109      	bne.n	80061fa <HAL_TIM_PWM_Start+0x3e>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	bf14      	ite	ne
 80061f2:	2301      	movne	r3, #1
 80061f4:	2300      	moveq	r3, #0
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	e02f      	b.n	800625a <HAL_TIM_PWM_Start+0x9e>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d109      	bne.n	8006214 <HAL_TIM_PWM_Start+0x58>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b01      	cmp	r3, #1
 800620a:	bf14      	ite	ne
 800620c:	2301      	movne	r3, #1
 800620e:	2300      	moveq	r3, #0
 8006210:	b2db      	uxtb	r3, r3
 8006212:	e022      	b.n	800625a <HAL_TIM_PWM_Start+0x9e>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2b0c      	cmp	r3, #12
 8006218:	d109      	bne.n	800622e <HAL_TIM_PWM_Start+0x72>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b01      	cmp	r3, #1
 8006224:	bf14      	ite	ne
 8006226:	2301      	movne	r3, #1
 8006228:	2300      	moveq	r3, #0
 800622a:	b2db      	uxtb	r3, r3
 800622c:	e015      	b.n	800625a <HAL_TIM_PWM_Start+0x9e>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b10      	cmp	r3, #16
 8006232:	d109      	bne.n	8006248 <HAL_TIM_PWM_Start+0x8c>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b01      	cmp	r3, #1
 800623e:	bf14      	ite	ne
 8006240:	2301      	movne	r3, #1
 8006242:	2300      	moveq	r3, #0
 8006244:	b2db      	uxtb	r3, r3
 8006246:	e008      	b.n	800625a <HAL_TIM_PWM_Start+0x9e>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b01      	cmp	r3, #1
 8006252:	bf14      	ite	ne
 8006254:	2301      	movne	r3, #1
 8006256:	2300      	moveq	r3, #0
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e0a6      	b.n	80063b0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d104      	bne.n	8006272 <HAL_TIM_PWM_Start+0xb6>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006270:	e023      	b.n	80062ba <HAL_TIM_PWM_Start+0xfe>
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b04      	cmp	r3, #4
 8006276:	d104      	bne.n	8006282 <HAL_TIM_PWM_Start+0xc6>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006280:	e01b      	b.n	80062ba <HAL_TIM_PWM_Start+0xfe>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b08      	cmp	r3, #8
 8006286:	d104      	bne.n	8006292 <HAL_TIM_PWM_Start+0xd6>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006290:	e013      	b.n	80062ba <HAL_TIM_PWM_Start+0xfe>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2b0c      	cmp	r3, #12
 8006296:	d104      	bne.n	80062a2 <HAL_TIM_PWM_Start+0xe6>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062a0:	e00b      	b.n	80062ba <HAL_TIM_PWM_Start+0xfe>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b10      	cmp	r3, #16
 80062a6:	d104      	bne.n	80062b2 <HAL_TIM_PWM_Start+0xf6>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2202      	movs	r2, #2
 80062ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062b0:	e003      	b.n	80062ba <HAL_TIM_PWM_Start+0xfe>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2202      	movs	r2, #2
 80062b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2201      	movs	r2, #1
 80062c0:	6839      	ldr	r1, [r7, #0]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f001 fab2 	bl	800782c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a3a      	ldr	r2, [pc, #232]	; (80063b8 <HAL_TIM_PWM_Start+0x1fc>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d018      	beq.n	8006304 <HAL_TIM_PWM_Start+0x148>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a39      	ldr	r2, [pc, #228]	; (80063bc <HAL_TIM_PWM_Start+0x200>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d013      	beq.n	8006304 <HAL_TIM_PWM_Start+0x148>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a37      	ldr	r2, [pc, #220]	; (80063c0 <HAL_TIM_PWM_Start+0x204>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d00e      	beq.n	8006304 <HAL_TIM_PWM_Start+0x148>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a36      	ldr	r2, [pc, #216]	; (80063c4 <HAL_TIM_PWM_Start+0x208>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d009      	beq.n	8006304 <HAL_TIM_PWM_Start+0x148>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a34      	ldr	r2, [pc, #208]	; (80063c8 <HAL_TIM_PWM_Start+0x20c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d004      	beq.n	8006304 <HAL_TIM_PWM_Start+0x148>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a33      	ldr	r2, [pc, #204]	; (80063cc <HAL_TIM_PWM_Start+0x210>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d101      	bne.n	8006308 <HAL_TIM_PWM_Start+0x14c>
 8006304:	2301      	movs	r3, #1
 8006306:	e000      	b.n	800630a <HAL_TIM_PWM_Start+0x14e>
 8006308:	2300      	movs	r3, #0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d007      	beq.n	800631e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800631c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a25      	ldr	r2, [pc, #148]	; (80063b8 <HAL_TIM_PWM_Start+0x1fc>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d022      	beq.n	800636e <HAL_TIM_PWM_Start+0x1b2>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006330:	d01d      	beq.n	800636e <HAL_TIM_PWM_Start+0x1b2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a26      	ldr	r2, [pc, #152]	; (80063d0 <HAL_TIM_PWM_Start+0x214>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d018      	beq.n	800636e <HAL_TIM_PWM_Start+0x1b2>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a24      	ldr	r2, [pc, #144]	; (80063d4 <HAL_TIM_PWM_Start+0x218>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d013      	beq.n	800636e <HAL_TIM_PWM_Start+0x1b2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a23      	ldr	r2, [pc, #140]	; (80063d8 <HAL_TIM_PWM_Start+0x21c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d00e      	beq.n	800636e <HAL_TIM_PWM_Start+0x1b2>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a19      	ldr	r2, [pc, #100]	; (80063bc <HAL_TIM_PWM_Start+0x200>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d009      	beq.n	800636e <HAL_TIM_PWM_Start+0x1b2>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a18      	ldr	r2, [pc, #96]	; (80063c0 <HAL_TIM_PWM_Start+0x204>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d004      	beq.n	800636e <HAL_TIM_PWM_Start+0x1b2>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a18      	ldr	r2, [pc, #96]	; (80063cc <HAL_TIM_PWM_Start+0x210>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d115      	bne.n	800639a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	689a      	ldr	r2, [r3, #8]
 8006374:	4b19      	ldr	r3, [pc, #100]	; (80063dc <HAL_TIM_PWM_Start+0x220>)
 8006376:	4013      	ands	r3, r2
 8006378:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b06      	cmp	r3, #6
 800637e:	d015      	beq.n	80063ac <HAL_TIM_PWM_Start+0x1f0>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006386:	d011      	beq.n	80063ac <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f042 0201 	orr.w	r2, r2, #1
 8006396:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006398:	e008      	b.n	80063ac <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f042 0201 	orr.w	r2, r2, #1
 80063a8:	601a      	str	r2, [r3, #0]
 80063aa:	e000      	b.n	80063ae <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	40012c00 	.word	0x40012c00
 80063bc:	40013400 	.word	0x40013400
 80063c0:	40014000 	.word	0x40014000
 80063c4:	40014400 	.word	0x40014400
 80063c8:	40014800 	.word	0x40014800
 80063cc:	40015000 	.word	0x40015000
 80063d0:	40000400 	.word	0x40000400
 80063d4:	40000800 	.word	0x40000800
 80063d8:	40000c00 	.word	0x40000c00
 80063dc:	00010007 	.word	0x00010007

080063e0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2200      	movs	r2, #0
 80063f0:	6839      	ldr	r1, [r7, #0]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f001 fa1a 	bl	800782c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a40      	ldr	r2, [pc, #256]	; (8006500 <HAL_TIM_PWM_Stop+0x120>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d018      	beq.n	8006434 <HAL_TIM_PWM_Stop+0x54>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a3f      	ldr	r2, [pc, #252]	; (8006504 <HAL_TIM_PWM_Stop+0x124>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d013      	beq.n	8006434 <HAL_TIM_PWM_Stop+0x54>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a3d      	ldr	r2, [pc, #244]	; (8006508 <HAL_TIM_PWM_Stop+0x128>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d00e      	beq.n	8006434 <HAL_TIM_PWM_Stop+0x54>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a3c      	ldr	r2, [pc, #240]	; (800650c <HAL_TIM_PWM_Stop+0x12c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d009      	beq.n	8006434 <HAL_TIM_PWM_Stop+0x54>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a3a      	ldr	r2, [pc, #232]	; (8006510 <HAL_TIM_PWM_Stop+0x130>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d004      	beq.n	8006434 <HAL_TIM_PWM_Stop+0x54>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a39      	ldr	r2, [pc, #228]	; (8006514 <HAL_TIM_PWM_Stop+0x134>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d101      	bne.n	8006438 <HAL_TIM_PWM_Stop+0x58>
 8006434:	2301      	movs	r3, #1
 8006436:	e000      	b.n	800643a <HAL_TIM_PWM_Stop+0x5a>
 8006438:	2300      	movs	r3, #0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d017      	beq.n	800646e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6a1a      	ldr	r2, [r3, #32]
 8006444:	f241 1311 	movw	r3, #4369	; 0x1111
 8006448:	4013      	ands	r3, r2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10f      	bne.n	800646e <HAL_TIM_PWM_Stop+0x8e>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6a1a      	ldr	r2, [r3, #32]
 8006454:	f244 4344 	movw	r3, #17476	; 0x4444
 8006458:	4013      	ands	r3, r2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d107      	bne.n	800646e <HAL_TIM_PWM_Stop+0x8e>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800646c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6a1a      	ldr	r2, [r3, #32]
 8006474:	f241 1311 	movw	r3, #4369	; 0x1111
 8006478:	4013      	ands	r3, r2
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10f      	bne.n	800649e <HAL_TIM_PWM_Stop+0xbe>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	6a1a      	ldr	r2, [r3, #32]
 8006484:	f244 4344 	movw	r3, #17476	; 0x4444
 8006488:	4013      	ands	r3, r2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d107      	bne.n	800649e <HAL_TIM_PWM_Stop+0xbe>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0201 	bic.w	r2, r2, #1
 800649c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d104      	bne.n	80064ae <HAL_TIM_PWM_Stop+0xce>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064ac:	e023      	b.n	80064f6 <HAL_TIM_PWM_Stop+0x116>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b04      	cmp	r3, #4
 80064b2:	d104      	bne.n	80064be <HAL_TIM_PWM_Stop+0xde>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064bc:	e01b      	b.n	80064f6 <HAL_TIM_PWM_Stop+0x116>
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d104      	bne.n	80064ce <HAL_TIM_PWM_Stop+0xee>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064cc:	e013      	b.n	80064f6 <HAL_TIM_PWM_Stop+0x116>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b0c      	cmp	r3, #12
 80064d2:	d104      	bne.n	80064de <HAL_TIM_PWM_Stop+0xfe>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064dc:	e00b      	b.n	80064f6 <HAL_TIM_PWM_Stop+0x116>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b10      	cmp	r3, #16
 80064e2:	d104      	bne.n	80064ee <HAL_TIM_PWM_Stop+0x10e>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064ec:	e003      	b.n	80064f6 <HAL_TIM_PWM_Stop+0x116>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	40012c00 	.word	0x40012c00
 8006504:	40013400 	.word	0x40013400
 8006508:	40014000 	.word	0x40014000
 800650c:	40014400 	.word	0x40014400
 8006510:	40014800 	.word	0x40014800
 8006514:	40015000 	.word	0x40015000

08006518 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e097      	b.n	800665c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	d106      	bne.n	8006546 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7fb fb39 	bl	8001bb8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2202      	movs	r2, #2
 800654a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	6812      	ldr	r2, [r2, #0]
 8006558:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800655c:	f023 0307 	bic.w	r3, r3, #7
 8006560:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	3304      	adds	r3, #4
 800656a:	4619      	mov	r1, r3
 800656c:	4610      	mov	r0, r2
 800656e:	f000 fcef 	bl	8006f50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	4313      	orrs	r3, r2
 8006592:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800659a:	f023 0303 	bic.w	r3, r3, #3
 800659e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	021b      	lsls	r3, r3, #8
 80065aa:	4313      	orrs	r3, r2
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80065b8:	f023 030c 	bic.w	r3, r3, #12
 80065bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68da      	ldr	r2, [r3, #12]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	021b      	lsls	r3, r3, #8
 80065d4:	4313      	orrs	r3, r2
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	4313      	orrs	r3, r2
 80065da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	011a      	lsls	r2, r3, #4
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	031b      	lsls	r3, r3, #12
 80065e8:	4313      	orrs	r3, r2
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80065f6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80065fe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	4313      	orrs	r3, r2
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	4313      	orrs	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3718      	adds	r7, #24
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006674:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800667c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006684:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800668c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d110      	bne.n	80066b6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006694:	7bfb      	ldrb	r3, [r7, #15]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d102      	bne.n	80066a0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800669a:	7b7b      	ldrb	r3, [r7, #13]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d001      	beq.n	80066a4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e089      	b.n	80067b8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2202      	movs	r2, #2
 80066a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2202      	movs	r2, #2
 80066b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066b4:	e031      	b.n	800671a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	2b04      	cmp	r3, #4
 80066ba:	d110      	bne.n	80066de <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80066bc:	7bbb      	ldrb	r3, [r7, #14]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d102      	bne.n	80066c8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80066c2:	7b3b      	ldrb	r3, [r7, #12]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d001      	beq.n	80066cc <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e075      	b.n	80067b8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2202      	movs	r2, #2
 80066d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2202      	movs	r2, #2
 80066d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066dc:	e01d      	b.n	800671a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066de:	7bfb      	ldrb	r3, [r7, #15]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d108      	bne.n	80066f6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80066e4:	7bbb      	ldrb	r3, [r7, #14]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d105      	bne.n	80066f6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066ea:	7b7b      	ldrb	r3, [r7, #13]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d102      	bne.n	80066f6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80066f0:	7b3b      	ldrb	r3, [r7, #12]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d001      	beq.n	80066fa <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e05e      	b.n	80067b8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2202      	movs	r2, #2
 80066fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2202      	movs	r2, #2
 8006706:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2202      	movs	r2, #2
 800670e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2202      	movs	r2, #2
 8006716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d003      	beq.n	8006728 <HAL_TIM_Encoder_Start_IT+0xc4>
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	2b04      	cmp	r3, #4
 8006724:	d010      	beq.n	8006748 <HAL_TIM_Encoder_Start_IT+0xe4>
 8006726:	e01f      	b.n	8006768 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2201      	movs	r2, #1
 800672e:	2100      	movs	r1, #0
 8006730:	4618      	mov	r0, r3
 8006732:	f001 f87b 	bl	800782c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68da      	ldr	r2, [r3, #12]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f042 0202 	orr.w	r2, r2, #2
 8006744:	60da      	str	r2, [r3, #12]
      break;
 8006746:	e02e      	b.n	80067a6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2201      	movs	r2, #1
 800674e:	2104      	movs	r1, #4
 8006750:	4618      	mov	r0, r3
 8006752:	f001 f86b 	bl	800782c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68da      	ldr	r2, [r3, #12]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f042 0204 	orr.w	r2, r2, #4
 8006764:	60da      	str	r2, [r3, #12]
      break;
 8006766:	e01e      	b.n	80067a6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2201      	movs	r2, #1
 800676e:	2100      	movs	r1, #0
 8006770:	4618      	mov	r0, r3
 8006772:	f001 f85b 	bl	800782c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2201      	movs	r2, #1
 800677c:	2104      	movs	r1, #4
 800677e:	4618      	mov	r0, r3
 8006780:	f001 f854 	bl	800782c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68da      	ldr	r2, [r3, #12]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f042 0202 	orr.w	r2, r2, #2
 8006792:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68da      	ldr	r2, [r3, #12]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 0204 	orr.w	r2, r2, #4
 80067a2:	60da      	str	r2, [r3, #12]
      break;
 80067a4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f042 0201 	orr.w	r2, r2, #1
 80067b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d122      	bne.n	800681c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	f003 0302 	and.w	r3, r3, #2
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d11b      	bne.n	800681c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f06f 0202 	mvn.w	r2, #2
 80067ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	f003 0303 	and.w	r3, r3, #3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7fb fbf4 	bl	8001ff0 <HAL_TIM_IC_CaptureCallback>
 8006808:	e005      	b.n	8006816 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fb82 	bl	8006f14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fb89 	bl	8006f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	f003 0304 	and.w	r3, r3, #4
 8006826:	2b04      	cmp	r3, #4
 8006828:	d122      	bne.n	8006870 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b04      	cmp	r3, #4
 8006836:	d11b      	bne.n	8006870 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f06f 0204 	mvn.w	r2, #4
 8006840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2202      	movs	r2, #2
 8006846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7fb fbca 	bl	8001ff0 <HAL_TIM_IC_CaptureCallback>
 800685c:	e005      	b.n	800686a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fb58 	bl	8006f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fb5f 	bl	8006f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f003 0308 	and.w	r3, r3, #8
 800687a:	2b08      	cmp	r3, #8
 800687c:	d122      	bne.n	80068c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f003 0308 	and.w	r3, r3, #8
 8006888:	2b08      	cmp	r3, #8
 800688a:	d11b      	bne.n	80068c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f06f 0208 	mvn.w	r2, #8
 8006894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2204      	movs	r2, #4
 800689a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f7fb fba0 	bl	8001ff0 <HAL_TIM_IC_CaptureCallback>
 80068b0:	e005      	b.n	80068be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fb2e 	bl	8006f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 fb35 	bl	8006f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	f003 0310 	and.w	r3, r3, #16
 80068ce:	2b10      	cmp	r3, #16
 80068d0:	d122      	bne.n	8006918 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f003 0310 	and.w	r3, r3, #16
 80068dc:	2b10      	cmp	r3, #16
 80068de:	d11b      	bne.n	8006918 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f06f 0210 	mvn.w	r2, #16
 80068e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2208      	movs	r2, #8
 80068ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d003      	beq.n	8006906 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7fb fb76 	bl	8001ff0 <HAL_TIM_IC_CaptureCallback>
 8006904:	e005      	b.n	8006912 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fb04 	bl	8006f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fb0b 	bl	8006f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b01      	cmp	r3, #1
 8006924:	d10e      	bne.n	8006944 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b01      	cmp	r3, #1
 8006932:	d107      	bne.n	8006944 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f06f 0201 	mvn.w	r2, #1
 800693c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7fa fdf0 	bl	8001524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694e:	2b80      	cmp	r3, #128	; 0x80
 8006950:	d10e      	bne.n	8006970 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800695c:	2b80      	cmp	r3, #128	; 0x80
 800695e:	d107      	bne.n	8006970 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f001 fa09 	bl	8007d82 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800697a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800697e:	d10e      	bne.n	800699e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800698a:	2b80      	cmp	r3, #128	; 0x80
 800698c:	d107      	bne.n	800699e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f001 f9fc 	bl	8007d96 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a8:	2b40      	cmp	r3, #64	; 0x40
 80069aa:	d10e      	bne.n	80069ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b6:	2b40      	cmp	r3, #64	; 0x40
 80069b8:	d107      	bne.n	80069ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fab9 	bl	8006f3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	f003 0320 	and.w	r3, r3, #32
 80069d4:	2b20      	cmp	r3, #32
 80069d6:	d10e      	bne.n	80069f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	f003 0320 	and.w	r3, r3, #32
 80069e2:	2b20      	cmp	r3, #32
 80069e4:	d107      	bne.n	80069f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f06f 0220 	mvn.w	r2, #32
 80069ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 f9bc 	bl	8007d6e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a04:	d10f      	bne.n	8006a26 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a14:	d107      	bne.n	8006a26 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f001 f9c2 	bl	8007daa <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a34:	d10f      	bne.n	8006a56 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a44:	d107      	bne.n	8006a56 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f001 f9b4 	bl	8007dbe <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a64:	d10f      	bne.n	8006a86 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a74:	d107      	bne.n	8006a86 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f001 f9a6 	bl	8007dd2 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a94:	d10f      	bne.n	8006ab6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006aa0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006aa4:	d107      	bne.n	8006ab6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f001 f998 	bl	8007de6 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ab6:	bf00      	nop
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
	...

08006ac0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d101      	bne.n	8006ade <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ada:	2302      	movs	r3, #2
 8006adc:	e0ff      	b.n	8006cde <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b14      	cmp	r3, #20
 8006aea:	f200 80f0 	bhi.w	8006cce <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006aee:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af4:	08006b49 	.word	0x08006b49
 8006af8:	08006ccf 	.word	0x08006ccf
 8006afc:	08006ccf 	.word	0x08006ccf
 8006b00:	08006ccf 	.word	0x08006ccf
 8006b04:	08006b89 	.word	0x08006b89
 8006b08:	08006ccf 	.word	0x08006ccf
 8006b0c:	08006ccf 	.word	0x08006ccf
 8006b10:	08006ccf 	.word	0x08006ccf
 8006b14:	08006bcb 	.word	0x08006bcb
 8006b18:	08006ccf 	.word	0x08006ccf
 8006b1c:	08006ccf 	.word	0x08006ccf
 8006b20:	08006ccf 	.word	0x08006ccf
 8006b24:	08006c0b 	.word	0x08006c0b
 8006b28:	08006ccf 	.word	0x08006ccf
 8006b2c:	08006ccf 	.word	0x08006ccf
 8006b30:	08006ccf 	.word	0x08006ccf
 8006b34:	08006c4d 	.word	0x08006c4d
 8006b38:	08006ccf 	.word	0x08006ccf
 8006b3c:	08006ccf 	.word	0x08006ccf
 8006b40:	08006ccf 	.word	0x08006ccf
 8006b44:	08006c8d 	.word	0x08006c8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68b9      	ldr	r1, [r7, #8]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 faa6 	bl	80070a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	699a      	ldr	r2, [r3, #24]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f042 0208 	orr.w	r2, r2, #8
 8006b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	699a      	ldr	r2, [r3, #24]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 0204 	bic.w	r2, r2, #4
 8006b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6999      	ldr	r1, [r3, #24]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	691a      	ldr	r2, [r3, #16]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	619a      	str	r2, [r3, #24]
      break;
 8006b86:	e0a5      	b.n	8006cd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68b9      	ldr	r1, [r7, #8]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 fb20 	bl	80071d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	699a      	ldr	r2, [r3, #24]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	699a      	ldr	r2, [r3, #24]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6999      	ldr	r1, [r3, #24]
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	021a      	lsls	r2, r3, #8
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	619a      	str	r2, [r3, #24]
      break;
 8006bc8:	e084      	b.n	8006cd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68b9      	ldr	r1, [r7, #8]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 fb93 	bl	80072fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	69da      	ldr	r2, [r3, #28]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f042 0208 	orr.w	r2, r2, #8
 8006be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	69da      	ldr	r2, [r3, #28]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f022 0204 	bic.w	r2, r2, #4
 8006bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	69d9      	ldr	r1, [r3, #28]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	691a      	ldr	r2, [r3, #16]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	430a      	orrs	r2, r1
 8006c06:	61da      	str	r2, [r3, #28]
      break;
 8006c08:	e064      	b.n	8006cd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68b9      	ldr	r1, [r7, #8]
 8006c10:	4618      	mov	r0, r3
 8006c12:	f000 fc05 	bl	8007420 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	69da      	ldr	r2, [r3, #28]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	69da      	ldr	r2, [r3, #28]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	69d9      	ldr	r1, [r3, #28]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	021a      	lsls	r2, r3, #8
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	61da      	str	r2, [r3, #28]
      break;
 8006c4a:	e043      	b.n	8006cd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68b9      	ldr	r1, [r7, #8]
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 fc78 	bl	8007548 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f042 0208 	orr.w	r2, r2, #8
 8006c66:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 0204 	bic.w	r2, r2, #4
 8006c76:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	691a      	ldr	r2, [r3, #16]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006c8a:	e023      	b.n	8006cd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68b9      	ldr	r1, [r7, #8]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 fcc2 	bl	800761c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ca6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cb6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	021a      	lsls	r2, r3, #8
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	430a      	orrs	r2, r1
 8006cca:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006ccc:	e002      	b.n	8006cd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	75fb      	strb	r3, [r7, #23]
      break;
 8006cd2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3718      	adds	r7, #24
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop

08006ce8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d101      	bne.n	8006d04 <HAL_TIM_ConfigClockSource+0x1c>
 8006d00:	2302      	movs	r3, #2
 8006d02:	e0f6      	b.n	8006ef2 <HAL_TIM_ConfigClockSource+0x20a>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006d22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a6f      	ldr	r2, [pc, #444]	; (8006efc <HAL_TIM_ConfigClockSource+0x214>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	f000 80c1 	beq.w	8006ec6 <HAL_TIM_ConfigClockSource+0x1de>
 8006d44:	4a6d      	ldr	r2, [pc, #436]	; (8006efc <HAL_TIM_ConfigClockSource+0x214>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	f200 80c6 	bhi.w	8006ed8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d4c:	4a6c      	ldr	r2, [pc, #432]	; (8006f00 <HAL_TIM_ConfigClockSource+0x218>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	f000 80b9 	beq.w	8006ec6 <HAL_TIM_ConfigClockSource+0x1de>
 8006d54:	4a6a      	ldr	r2, [pc, #424]	; (8006f00 <HAL_TIM_ConfigClockSource+0x218>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	f200 80be 	bhi.w	8006ed8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d5c:	4a69      	ldr	r2, [pc, #420]	; (8006f04 <HAL_TIM_ConfigClockSource+0x21c>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	f000 80b1 	beq.w	8006ec6 <HAL_TIM_ConfigClockSource+0x1de>
 8006d64:	4a67      	ldr	r2, [pc, #412]	; (8006f04 <HAL_TIM_ConfigClockSource+0x21c>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	f200 80b6 	bhi.w	8006ed8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d6c:	4a66      	ldr	r2, [pc, #408]	; (8006f08 <HAL_TIM_ConfigClockSource+0x220>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	f000 80a9 	beq.w	8006ec6 <HAL_TIM_ConfigClockSource+0x1de>
 8006d74:	4a64      	ldr	r2, [pc, #400]	; (8006f08 <HAL_TIM_ConfigClockSource+0x220>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	f200 80ae 	bhi.w	8006ed8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d7c:	4a63      	ldr	r2, [pc, #396]	; (8006f0c <HAL_TIM_ConfigClockSource+0x224>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	f000 80a1 	beq.w	8006ec6 <HAL_TIM_ConfigClockSource+0x1de>
 8006d84:	4a61      	ldr	r2, [pc, #388]	; (8006f0c <HAL_TIM_ConfigClockSource+0x224>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	f200 80a6 	bhi.w	8006ed8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d8c:	4a60      	ldr	r2, [pc, #384]	; (8006f10 <HAL_TIM_ConfigClockSource+0x228>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	f000 8099 	beq.w	8006ec6 <HAL_TIM_ConfigClockSource+0x1de>
 8006d94:	4a5e      	ldr	r2, [pc, #376]	; (8006f10 <HAL_TIM_ConfigClockSource+0x228>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	f200 809e 	bhi.w	8006ed8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d9c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006da0:	f000 8091 	beq.w	8006ec6 <HAL_TIM_ConfigClockSource+0x1de>
 8006da4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006da8:	f200 8096 	bhi.w	8006ed8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006db0:	f000 8089 	beq.w	8006ec6 <HAL_TIM_ConfigClockSource+0x1de>
 8006db4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006db8:	f200 808e 	bhi.w	8006ed8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dc0:	d03e      	beq.n	8006e40 <HAL_TIM_ConfigClockSource+0x158>
 8006dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dc6:	f200 8087 	bhi.w	8006ed8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dce:	f000 8086 	beq.w	8006ede <HAL_TIM_ConfigClockSource+0x1f6>
 8006dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dd6:	d87f      	bhi.n	8006ed8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dd8:	2b70      	cmp	r3, #112	; 0x70
 8006dda:	d01a      	beq.n	8006e12 <HAL_TIM_ConfigClockSource+0x12a>
 8006ddc:	2b70      	cmp	r3, #112	; 0x70
 8006dde:	d87b      	bhi.n	8006ed8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006de0:	2b60      	cmp	r3, #96	; 0x60
 8006de2:	d050      	beq.n	8006e86 <HAL_TIM_ConfigClockSource+0x19e>
 8006de4:	2b60      	cmp	r3, #96	; 0x60
 8006de6:	d877      	bhi.n	8006ed8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006de8:	2b50      	cmp	r3, #80	; 0x50
 8006dea:	d03c      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x17e>
 8006dec:	2b50      	cmp	r3, #80	; 0x50
 8006dee:	d873      	bhi.n	8006ed8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006df0:	2b40      	cmp	r3, #64	; 0x40
 8006df2:	d058      	beq.n	8006ea6 <HAL_TIM_ConfigClockSource+0x1be>
 8006df4:	2b40      	cmp	r3, #64	; 0x40
 8006df6:	d86f      	bhi.n	8006ed8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006df8:	2b30      	cmp	r3, #48	; 0x30
 8006dfa:	d064      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x1de>
 8006dfc:	2b30      	cmp	r3, #48	; 0x30
 8006dfe:	d86b      	bhi.n	8006ed8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e00:	2b20      	cmp	r3, #32
 8006e02:	d060      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x1de>
 8006e04:	2b20      	cmp	r3, #32
 8006e06:	d867      	bhi.n	8006ed8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d05c      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x1de>
 8006e0c:	2b10      	cmp	r3, #16
 8006e0e:	d05a      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x1de>
 8006e10:	e062      	b.n	8006ed8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6818      	ldr	r0, [r3, #0]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	6899      	ldr	r1, [r3, #8]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	f000 fce3 	bl	80077ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	609a      	str	r2, [r3, #8]
      break;
 8006e3e:	e04f      	b.n	8006ee0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6818      	ldr	r0, [r3, #0]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	6899      	ldr	r1, [r3, #8]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f000 fccc 	bl	80077ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689a      	ldr	r2, [r3, #8]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e62:	609a      	str	r2, [r3, #8]
      break;
 8006e64:	e03c      	b.n	8006ee0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6818      	ldr	r0, [r3, #0]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	6859      	ldr	r1, [r3, #4]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	461a      	mov	r2, r3
 8006e74:	f000 fc3e 	bl	80076f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2150      	movs	r1, #80	; 0x50
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 fc97 	bl	80077b2 <TIM_ITRx_SetConfig>
      break;
 8006e84:	e02c      	b.n	8006ee0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6818      	ldr	r0, [r3, #0]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	6859      	ldr	r1, [r3, #4]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	461a      	mov	r2, r3
 8006e94:	f000 fc5d 	bl	8007752 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2160      	movs	r1, #96	; 0x60
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 fc87 	bl	80077b2 <TIM_ITRx_SetConfig>
      break;
 8006ea4:	e01c      	b.n	8006ee0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6818      	ldr	r0, [r3, #0]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	6859      	ldr	r1, [r3, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f000 fc1e 	bl	80076f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2140      	movs	r1, #64	; 0x40
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fc77 	bl	80077b2 <TIM_ITRx_SetConfig>
      break;
 8006ec4:	e00c      	b.n	8006ee0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4619      	mov	r1, r3
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	f000 fc6e 	bl	80077b2 <TIM_ITRx_SetConfig>
      break;
 8006ed6:	e003      	b.n	8006ee0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	73fb      	strb	r3, [r7, #15]
      break;
 8006edc:	e000      	b.n	8006ee0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006ede:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	00100070 	.word	0x00100070
 8006f00:	00100060 	.word	0x00100060
 8006f04:	00100050 	.word	0x00100050
 8006f08:	00100040 	.word	0x00100040
 8006f0c:	00100030 	.word	0x00100030
 8006f10:	00100020 	.word	0x00100020

08006f14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a46      	ldr	r2, [pc, #280]	; (800707c <TIM_Base_SetConfig+0x12c>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d017      	beq.n	8006f98 <TIM_Base_SetConfig+0x48>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f6e:	d013      	beq.n	8006f98 <TIM_Base_SetConfig+0x48>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a43      	ldr	r2, [pc, #268]	; (8007080 <TIM_Base_SetConfig+0x130>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d00f      	beq.n	8006f98 <TIM_Base_SetConfig+0x48>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a42      	ldr	r2, [pc, #264]	; (8007084 <TIM_Base_SetConfig+0x134>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d00b      	beq.n	8006f98 <TIM_Base_SetConfig+0x48>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a41      	ldr	r2, [pc, #260]	; (8007088 <TIM_Base_SetConfig+0x138>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d007      	beq.n	8006f98 <TIM_Base_SetConfig+0x48>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a40      	ldr	r2, [pc, #256]	; (800708c <TIM_Base_SetConfig+0x13c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d003      	beq.n	8006f98 <TIM_Base_SetConfig+0x48>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a3f      	ldr	r2, [pc, #252]	; (8007090 <TIM_Base_SetConfig+0x140>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d108      	bne.n	8006faa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a33      	ldr	r2, [pc, #204]	; (800707c <TIM_Base_SetConfig+0x12c>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d023      	beq.n	8006ffa <TIM_Base_SetConfig+0xaa>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fb8:	d01f      	beq.n	8006ffa <TIM_Base_SetConfig+0xaa>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a30      	ldr	r2, [pc, #192]	; (8007080 <TIM_Base_SetConfig+0x130>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d01b      	beq.n	8006ffa <TIM_Base_SetConfig+0xaa>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a2f      	ldr	r2, [pc, #188]	; (8007084 <TIM_Base_SetConfig+0x134>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d017      	beq.n	8006ffa <TIM_Base_SetConfig+0xaa>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a2e      	ldr	r2, [pc, #184]	; (8007088 <TIM_Base_SetConfig+0x138>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d013      	beq.n	8006ffa <TIM_Base_SetConfig+0xaa>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a2d      	ldr	r2, [pc, #180]	; (800708c <TIM_Base_SetConfig+0x13c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d00f      	beq.n	8006ffa <TIM_Base_SetConfig+0xaa>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a2d      	ldr	r2, [pc, #180]	; (8007094 <TIM_Base_SetConfig+0x144>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d00b      	beq.n	8006ffa <TIM_Base_SetConfig+0xaa>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a2c      	ldr	r2, [pc, #176]	; (8007098 <TIM_Base_SetConfig+0x148>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d007      	beq.n	8006ffa <TIM_Base_SetConfig+0xaa>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a2b      	ldr	r2, [pc, #172]	; (800709c <TIM_Base_SetConfig+0x14c>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d003      	beq.n	8006ffa <TIM_Base_SetConfig+0xaa>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a26      	ldr	r2, [pc, #152]	; (8007090 <TIM_Base_SetConfig+0x140>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d108      	bne.n	800700c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	4313      	orrs	r3, r2
 800700a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	4313      	orrs	r3, r2
 8007018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a12      	ldr	r2, [pc, #72]	; (800707c <TIM_Base_SetConfig+0x12c>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d013      	beq.n	8007060 <TIM_Base_SetConfig+0x110>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a14      	ldr	r2, [pc, #80]	; (800708c <TIM_Base_SetConfig+0x13c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d00f      	beq.n	8007060 <TIM_Base_SetConfig+0x110>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a14      	ldr	r2, [pc, #80]	; (8007094 <TIM_Base_SetConfig+0x144>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d00b      	beq.n	8007060 <TIM_Base_SetConfig+0x110>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a13      	ldr	r2, [pc, #76]	; (8007098 <TIM_Base_SetConfig+0x148>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d007      	beq.n	8007060 <TIM_Base_SetConfig+0x110>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a12      	ldr	r2, [pc, #72]	; (800709c <TIM_Base_SetConfig+0x14c>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d003      	beq.n	8007060 <TIM_Base_SetConfig+0x110>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a0d      	ldr	r2, [pc, #52]	; (8007090 <TIM_Base_SetConfig+0x140>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d103      	bne.n	8007068 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	691a      	ldr	r2, [r3, #16]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	615a      	str	r2, [r3, #20]
}
 800706e:	bf00      	nop
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	40012c00 	.word	0x40012c00
 8007080:	40000400 	.word	0x40000400
 8007084:	40000800 	.word	0x40000800
 8007088:	40000c00 	.word	0x40000c00
 800708c:	40013400 	.word	0x40013400
 8007090:	40015000 	.word	0x40015000
 8007094:	40014000 	.word	0x40014000
 8007098:	40014400 	.word	0x40014400
 800709c:	40014800 	.word	0x40014800

080070a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	f023 0201 	bic.w	r2, r3, #1
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f023 0303 	bic.w	r3, r3, #3
 80070da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f023 0302 	bic.w	r3, r3, #2
 80070ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a30      	ldr	r2, [pc, #192]	; (80071bc <TIM_OC1_SetConfig+0x11c>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d013      	beq.n	8007128 <TIM_OC1_SetConfig+0x88>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a2f      	ldr	r2, [pc, #188]	; (80071c0 <TIM_OC1_SetConfig+0x120>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d00f      	beq.n	8007128 <TIM_OC1_SetConfig+0x88>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a2e      	ldr	r2, [pc, #184]	; (80071c4 <TIM_OC1_SetConfig+0x124>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d00b      	beq.n	8007128 <TIM_OC1_SetConfig+0x88>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a2d      	ldr	r2, [pc, #180]	; (80071c8 <TIM_OC1_SetConfig+0x128>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d007      	beq.n	8007128 <TIM_OC1_SetConfig+0x88>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a2c      	ldr	r2, [pc, #176]	; (80071cc <TIM_OC1_SetConfig+0x12c>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d003      	beq.n	8007128 <TIM_OC1_SetConfig+0x88>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a2b      	ldr	r2, [pc, #172]	; (80071d0 <TIM_OC1_SetConfig+0x130>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d10c      	bne.n	8007142 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	f023 0308 	bic.w	r3, r3, #8
 800712e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	4313      	orrs	r3, r2
 8007138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f023 0304 	bic.w	r3, r3, #4
 8007140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a1d      	ldr	r2, [pc, #116]	; (80071bc <TIM_OC1_SetConfig+0x11c>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d013      	beq.n	8007172 <TIM_OC1_SetConfig+0xd2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a1c      	ldr	r2, [pc, #112]	; (80071c0 <TIM_OC1_SetConfig+0x120>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d00f      	beq.n	8007172 <TIM_OC1_SetConfig+0xd2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a1b      	ldr	r2, [pc, #108]	; (80071c4 <TIM_OC1_SetConfig+0x124>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d00b      	beq.n	8007172 <TIM_OC1_SetConfig+0xd2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a1a      	ldr	r2, [pc, #104]	; (80071c8 <TIM_OC1_SetConfig+0x128>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d007      	beq.n	8007172 <TIM_OC1_SetConfig+0xd2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a19      	ldr	r2, [pc, #100]	; (80071cc <TIM_OC1_SetConfig+0x12c>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d003      	beq.n	8007172 <TIM_OC1_SetConfig+0xd2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a18      	ldr	r2, [pc, #96]	; (80071d0 <TIM_OC1_SetConfig+0x130>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d111      	bne.n	8007196 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	4313      	orrs	r3, r2
 800718a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	4313      	orrs	r3, r2
 8007194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	685a      	ldr	r2, [r3, #4]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	621a      	str	r2, [r3, #32]
}
 80071b0:	bf00      	nop
 80071b2:	371c      	adds	r7, #28
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	40012c00 	.word	0x40012c00
 80071c0:	40013400 	.word	0x40013400
 80071c4:	40014000 	.word	0x40014000
 80071c8:	40014400 	.word	0x40014400
 80071cc:	40014800 	.word	0x40014800
 80071d0:	40015000 	.word	0x40015000

080071d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	f023 0210 	bic.w	r2, r3, #16
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800720e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	021b      	lsls	r3, r3, #8
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	4313      	orrs	r3, r2
 800721a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	f023 0320 	bic.w	r3, r3, #32
 8007222:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	011b      	lsls	r3, r3, #4
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	4313      	orrs	r3, r2
 800722e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a2c      	ldr	r2, [pc, #176]	; (80072e4 <TIM_OC2_SetConfig+0x110>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d007      	beq.n	8007248 <TIM_OC2_SetConfig+0x74>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a2b      	ldr	r2, [pc, #172]	; (80072e8 <TIM_OC2_SetConfig+0x114>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d003      	beq.n	8007248 <TIM_OC2_SetConfig+0x74>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a2a      	ldr	r2, [pc, #168]	; (80072ec <TIM_OC2_SetConfig+0x118>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d10d      	bne.n	8007264 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800724e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	011b      	lsls	r3, r3, #4
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	4313      	orrs	r3, r2
 800725a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007262:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a1f      	ldr	r2, [pc, #124]	; (80072e4 <TIM_OC2_SetConfig+0x110>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d013      	beq.n	8007294 <TIM_OC2_SetConfig+0xc0>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a1e      	ldr	r2, [pc, #120]	; (80072e8 <TIM_OC2_SetConfig+0x114>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d00f      	beq.n	8007294 <TIM_OC2_SetConfig+0xc0>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a1e      	ldr	r2, [pc, #120]	; (80072f0 <TIM_OC2_SetConfig+0x11c>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d00b      	beq.n	8007294 <TIM_OC2_SetConfig+0xc0>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a1d      	ldr	r2, [pc, #116]	; (80072f4 <TIM_OC2_SetConfig+0x120>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d007      	beq.n	8007294 <TIM_OC2_SetConfig+0xc0>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a1c      	ldr	r2, [pc, #112]	; (80072f8 <TIM_OC2_SetConfig+0x124>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d003      	beq.n	8007294 <TIM_OC2_SetConfig+0xc0>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a17      	ldr	r2, [pc, #92]	; (80072ec <TIM_OC2_SetConfig+0x118>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d113      	bne.n	80072bc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800729a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	695b      	ldr	r3, [r3, #20]
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	621a      	str	r2, [r3, #32]
}
 80072d6:	bf00      	nop
 80072d8:	371c      	adds	r7, #28
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	40012c00 	.word	0x40012c00
 80072e8:	40013400 	.word	0x40013400
 80072ec:	40015000 	.word	0x40015000
 80072f0:	40014000 	.word	0x40014000
 80072f4:	40014400 	.word	0x40014400
 80072f8:	40014800 	.word	0x40014800

080072fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800732a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800732e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f023 0303 	bic.w	r3, r3, #3
 8007336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	4313      	orrs	r3, r2
 8007340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	021b      	lsls	r3, r3, #8
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	4313      	orrs	r3, r2
 8007354:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a2b      	ldr	r2, [pc, #172]	; (8007408 <TIM_OC3_SetConfig+0x10c>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d007      	beq.n	800736e <TIM_OC3_SetConfig+0x72>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a2a      	ldr	r2, [pc, #168]	; (800740c <TIM_OC3_SetConfig+0x110>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d003      	beq.n	800736e <TIM_OC3_SetConfig+0x72>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a29      	ldr	r2, [pc, #164]	; (8007410 <TIM_OC3_SetConfig+0x114>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d10d      	bne.n	800738a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007374:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	021b      	lsls	r3, r3, #8
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	4313      	orrs	r3, r2
 8007380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a1e      	ldr	r2, [pc, #120]	; (8007408 <TIM_OC3_SetConfig+0x10c>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d013      	beq.n	80073ba <TIM_OC3_SetConfig+0xbe>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a1d      	ldr	r2, [pc, #116]	; (800740c <TIM_OC3_SetConfig+0x110>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d00f      	beq.n	80073ba <TIM_OC3_SetConfig+0xbe>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a1d      	ldr	r2, [pc, #116]	; (8007414 <TIM_OC3_SetConfig+0x118>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d00b      	beq.n	80073ba <TIM_OC3_SetConfig+0xbe>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a1c      	ldr	r2, [pc, #112]	; (8007418 <TIM_OC3_SetConfig+0x11c>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d007      	beq.n	80073ba <TIM_OC3_SetConfig+0xbe>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a1b      	ldr	r2, [pc, #108]	; (800741c <TIM_OC3_SetConfig+0x120>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d003      	beq.n	80073ba <TIM_OC3_SetConfig+0xbe>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a16      	ldr	r2, [pc, #88]	; (8007410 <TIM_OC3_SetConfig+0x114>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d113      	bne.n	80073e2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	011b      	lsls	r3, r3, #4
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	011b      	lsls	r3, r3, #4
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	4313      	orrs	r3, r2
 80073e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	697a      	ldr	r2, [r7, #20]
 80073fa:	621a      	str	r2, [r3, #32]
}
 80073fc:	bf00      	nop
 80073fe:	371c      	adds	r7, #28
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	40012c00 	.word	0x40012c00
 800740c:	40013400 	.word	0x40013400
 8007410:	40015000 	.word	0x40015000
 8007414:	40014000 	.word	0x40014000
 8007418:	40014400 	.word	0x40014400
 800741c:	40014800 	.word	0x40014800

08007420 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007420:	b480      	push	{r7}
 8007422:	b087      	sub	sp, #28
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800744e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800745a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	021b      	lsls	r3, r3, #8
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	4313      	orrs	r3, r2
 8007466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800746e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	031b      	lsls	r3, r3, #12
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	4313      	orrs	r3, r2
 800747a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a2c      	ldr	r2, [pc, #176]	; (8007530 <TIM_OC4_SetConfig+0x110>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d007      	beq.n	8007494 <TIM_OC4_SetConfig+0x74>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a2b      	ldr	r2, [pc, #172]	; (8007534 <TIM_OC4_SetConfig+0x114>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d003      	beq.n	8007494 <TIM_OC4_SetConfig+0x74>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a2a      	ldr	r2, [pc, #168]	; (8007538 <TIM_OC4_SetConfig+0x118>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d10d      	bne.n	80074b0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800749a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	031b      	lsls	r3, r3, #12
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a1f      	ldr	r2, [pc, #124]	; (8007530 <TIM_OC4_SetConfig+0x110>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d013      	beq.n	80074e0 <TIM_OC4_SetConfig+0xc0>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a1e      	ldr	r2, [pc, #120]	; (8007534 <TIM_OC4_SetConfig+0x114>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d00f      	beq.n	80074e0 <TIM_OC4_SetConfig+0xc0>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a1e      	ldr	r2, [pc, #120]	; (800753c <TIM_OC4_SetConfig+0x11c>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d00b      	beq.n	80074e0 <TIM_OC4_SetConfig+0xc0>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a1d      	ldr	r2, [pc, #116]	; (8007540 <TIM_OC4_SetConfig+0x120>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d007      	beq.n	80074e0 <TIM_OC4_SetConfig+0xc0>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a1c      	ldr	r2, [pc, #112]	; (8007544 <TIM_OC4_SetConfig+0x124>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d003      	beq.n	80074e0 <TIM_OC4_SetConfig+0xc0>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a17      	ldr	r2, [pc, #92]	; (8007538 <TIM_OC4_SetConfig+0x118>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d113      	bne.n	8007508 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074e6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074ee:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	019b      	lsls	r3, r3, #6
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	019b      	lsls	r3, r3, #6
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	4313      	orrs	r3, r2
 8007506:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	621a      	str	r2, [r3, #32]
}
 8007522:	bf00      	nop
 8007524:	371c      	adds	r7, #28
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	40012c00 	.word	0x40012c00
 8007534:	40013400 	.word	0x40013400
 8007538:	40015000 	.word	0x40015000
 800753c:	40014000 	.word	0x40014000
 8007540:	40014400 	.word	0x40014400
 8007544:	40014800 	.word	0x40014800

08007548 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007548:	b480      	push	{r7}
 800754a:	b087      	sub	sp, #28
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800756e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800757a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	4313      	orrs	r3, r2
 8007584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800758c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	041b      	lsls	r3, r3, #16
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	4313      	orrs	r3, r2
 8007598:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a19      	ldr	r2, [pc, #100]	; (8007604 <TIM_OC5_SetConfig+0xbc>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d013      	beq.n	80075ca <TIM_OC5_SetConfig+0x82>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a18      	ldr	r2, [pc, #96]	; (8007608 <TIM_OC5_SetConfig+0xc0>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d00f      	beq.n	80075ca <TIM_OC5_SetConfig+0x82>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a17      	ldr	r2, [pc, #92]	; (800760c <TIM_OC5_SetConfig+0xc4>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d00b      	beq.n	80075ca <TIM_OC5_SetConfig+0x82>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a16      	ldr	r2, [pc, #88]	; (8007610 <TIM_OC5_SetConfig+0xc8>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d007      	beq.n	80075ca <TIM_OC5_SetConfig+0x82>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a15      	ldr	r2, [pc, #84]	; (8007614 <TIM_OC5_SetConfig+0xcc>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d003      	beq.n	80075ca <TIM_OC5_SetConfig+0x82>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a14      	ldr	r2, [pc, #80]	; (8007618 <TIM_OC5_SetConfig+0xd0>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d109      	bne.n	80075de <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	021b      	lsls	r3, r3, #8
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	4313      	orrs	r3, r2
 80075dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	621a      	str	r2, [r3, #32]
}
 80075f8:	bf00      	nop
 80075fa:	371c      	adds	r7, #28
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	40012c00 	.word	0x40012c00
 8007608:	40013400 	.word	0x40013400
 800760c:	40014000 	.word	0x40014000
 8007610:	40014400 	.word	0x40014400
 8007614:	40014800 	.word	0x40014800
 8007618:	40015000 	.word	0x40015000

0800761c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800761c:	b480      	push	{r7}
 800761e:	b087      	sub	sp, #28
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800764a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800764e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	021b      	lsls	r3, r3, #8
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	4313      	orrs	r3, r2
 800765a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007662:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	051b      	lsls	r3, r3, #20
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	4313      	orrs	r3, r2
 800766e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a1a      	ldr	r2, [pc, #104]	; (80076dc <TIM_OC6_SetConfig+0xc0>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d013      	beq.n	80076a0 <TIM_OC6_SetConfig+0x84>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a19      	ldr	r2, [pc, #100]	; (80076e0 <TIM_OC6_SetConfig+0xc4>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d00f      	beq.n	80076a0 <TIM_OC6_SetConfig+0x84>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a18      	ldr	r2, [pc, #96]	; (80076e4 <TIM_OC6_SetConfig+0xc8>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d00b      	beq.n	80076a0 <TIM_OC6_SetConfig+0x84>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a17      	ldr	r2, [pc, #92]	; (80076e8 <TIM_OC6_SetConfig+0xcc>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d007      	beq.n	80076a0 <TIM_OC6_SetConfig+0x84>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a16      	ldr	r2, [pc, #88]	; (80076ec <TIM_OC6_SetConfig+0xd0>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d003      	beq.n	80076a0 <TIM_OC6_SetConfig+0x84>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a15      	ldr	r2, [pc, #84]	; (80076f0 <TIM_OC6_SetConfig+0xd4>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d109      	bne.n	80076b4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	029b      	lsls	r3, r3, #10
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	621a      	str	r2, [r3, #32]
}
 80076ce:	bf00      	nop
 80076d0:	371c      	adds	r7, #28
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	40012c00 	.word	0x40012c00
 80076e0:	40013400 	.word	0x40013400
 80076e4:	40014000 	.word	0x40014000
 80076e8:	40014400 	.word	0x40014400
 80076ec:	40014800 	.word	0x40014800
 80076f0:	40015000 	.word	0x40015000

080076f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6a1b      	ldr	r3, [r3, #32]
 800770a:	f023 0201 	bic.w	r2, r3, #1
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800771e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	011b      	lsls	r3, r3, #4
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	4313      	orrs	r3, r2
 8007728:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	f023 030a 	bic.w	r3, r3, #10
 8007730:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	4313      	orrs	r3, r2
 8007738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	621a      	str	r2, [r3, #32]
}
 8007746:	bf00      	nop
 8007748:	371c      	adds	r7, #28
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007752:	b480      	push	{r7}
 8007754:	b087      	sub	sp, #28
 8007756:	af00      	add	r7, sp, #0
 8007758:	60f8      	str	r0, [r7, #12]
 800775a:	60b9      	str	r1, [r7, #8]
 800775c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	f023 0210 	bic.w	r2, r3, #16
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6a1b      	ldr	r3, [r3, #32]
 8007774:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800777c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	031b      	lsls	r3, r3, #12
 8007782:	697a      	ldr	r2, [r7, #20]
 8007784:	4313      	orrs	r3, r2
 8007786:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800778e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	011b      	lsls	r3, r3, #4
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	4313      	orrs	r3, r2
 8007798:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	621a      	str	r2, [r3, #32]
}
 80077a6:	bf00      	nop
 80077a8:	371c      	adds	r7, #28
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b085      	sub	sp, #20
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80077c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	f043 0307 	orr.w	r3, r3, #7
 80077d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	609a      	str	r2, [r3, #8]
}
 80077e0:	bf00      	nop
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
 80077f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007806:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	021a      	lsls	r2, r3, #8
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	431a      	orrs	r2, r3
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	4313      	orrs	r3, r2
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	4313      	orrs	r3, r2
 8007818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	609a      	str	r2, [r3, #8]
}
 8007820:	bf00      	nop
 8007822:	371c      	adds	r7, #28
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f003 031f 	and.w	r3, r3, #31
 800783e:	2201      	movs	r2, #1
 8007840:	fa02 f303 	lsl.w	r3, r2, r3
 8007844:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6a1a      	ldr	r2, [r3, #32]
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	43db      	mvns	r3, r3
 800784e:	401a      	ands	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6a1a      	ldr	r2, [r3, #32]
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	f003 031f 	and.w	r3, r3, #31
 800785e:	6879      	ldr	r1, [r7, #4]
 8007860:	fa01 f303 	lsl.w	r3, r1, r3
 8007864:	431a      	orrs	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	621a      	str	r2, [r3, #32]
}
 800786a:	bf00      	nop
 800786c:	371c      	adds	r7, #28
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
	...

08007878 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d109      	bne.n	800789c <HAL_TIMEx_PWMN_Start+0x24>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b01      	cmp	r3, #1
 8007892:	bf14      	ite	ne
 8007894:	2301      	movne	r3, #1
 8007896:	2300      	moveq	r3, #0
 8007898:	b2db      	uxtb	r3, r3
 800789a:	e022      	b.n	80078e2 <HAL_TIMEx_PWMN_Start+0x6a>
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d109      	bne.n	80078b6 <HAL_TIMEx_PWMN_Start+0x3e>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	bf14      	ite	ne
 80078ae:	2301      	movne	r3, #1
 80078b0:	2300      	moveq	r3, #0
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	e015      	b.n	80078e2 <HAL_TIMEx_PWMN_Start+0x6a>
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b08      	cmp	r3, #8
 80078ba:	d109      	bne.n	80078d0 <HAL_TIMEx_PWMN_Start+0x58>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	bf14      	ite	ne
 80078c8:	2301      	movne	r3, #1
 80078ca:	2300      	moveq	r3, #0
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	e008      	b.n	80078e2 <HAL_TIMEx_PWMN_Start+0x6a>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b01      	cmp	r3, #1
 80078da:	bf14      	ite	ne
 80078dc:	2301      	movne	r3, #1
 80078de:	2300      	moveq	r3, #0
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e073      	b.n	80079d2 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d104      	bne.n	80078fa <HAL_TIMEx_PWMN_Start+0x82>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2202      	movs	r2, #2
 80078f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078f8:	e013      	b.n	8007922 <HAL_TIMEx_PWMN_Start+0xaa>
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2b04      	cmp	r3, #4
 80078fe:	d104      	bne.n	800790a <HAL_TIMEx_PWMN_Start+0x92>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007908:	e00b      	b.n	8007922 <HAL_TIMEx_PWMN_Start+0xaa>
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	2b08      	cmp	r3, #8
 800790e:	d104      	bne.n	800791a <HAL_TIMEx_PWMN_Start+0xa2>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2202      	movs	r2, #2
 8007914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007918:	e003      	b.n	8007922 <HAL_TIMEx_PWMN_Start+0xaa>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2202      	movs	r2, #2
 800791e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2204      	movs	r2, #4
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	4618      	mov	r0, r3
 800792c:	f000 fa65 	bl	8007dfa <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800793e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a25      	ldr	r2, [pc, #148]	; (80079dc <HAL_TIMEx_PWMN_Start+0x164>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d022      	beq.n	8007990 <HAL_TIMEx_PWMN_Start+0x118>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007952:	d01d      	beq.n	8007990 <HAL_TIMEx_PWMN_Start+0x118>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a21      	ldr	r2, [pc, #132]	; (80079e0 <HAL_TIMEx_PWMN_Start+0x168>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d018      	beq.n	8007990 <HAL_TIMEx_PWMN_Start+0x118>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a20      	ldr	r2, [pc, #128]	; (80079e4 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d013      	beq.n	8007990 <HAL_TIMEx_PWMN_Start+0x118>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a1e      	ldr	r2, [pc, #120]	; (80079e8 <HAL_TIMEx_PWMN_Start+0x170>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d00e      	beq.n	8007990 <HAL_TIMEx_PWMN_Start+0x118>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a1d      	ldr	r2, [pc, #116]	; (80079ec <HAL_TIMEx_PWMN_Start+0x174>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d009      	beq.n	8007990 <HAL_TIMEx_PWMN_Start+0x118>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a1b      	ldr	r2, [pc, #108]	; (80079f0 <HAL_TIMEx_PWMN_Start+0x178>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d004      	beq.n	8007990 <HAL_TIMEx_PWMN_Start+0x118>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a1a      	ldr	r2, [pc, #104]	; (80079f4 <HAL_TIMEx_PWMN_Start+0x17c>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d115      	bne.n	80079bc <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689a      	ldr	r2, [r3, #8]
 8007996:	4b18      	ldr	r3, [pc, #96]	; (80079f8 <HAL_TIMEx_PWMN_Start+0x180>)
 8007998:	4013      	ands	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b06      	cmp	r3, #6
 80079a0:	d015      	beq.n	80079ce <HAL_TIMEx_PWMN_Start+0x156>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079a8:	d011      	beq.n	80079ce <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f042 0201 	orr.w	r2, r2, #1
 80079b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ba:	e008      	b.n	80079ce <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f042 0201 	orr.w	r2, r2, #1
 80079ca:	601a      	str	r2, [r3, #0]
 80079cc:	e000      	b.n	80079d0 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	40012c00 	.word	0x40012c00
 80079e0:	40000400 	.word	0x40000400
 80079e4:	40000800 	.word	0x40000800
 80079e8:	40000c00 	.word	0x40000c00
 80079ec:	40013400 	.word	0x40013400
 80079f0:	40014000 	.word	0x40014000
 80079f4:	40015000 	.word	0x40015000
 80079f8:	00010007 	.word	0x00010007

080079fc <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 f9f3 	bl	8007dfa <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6a1a      	ldr	r2, [r3, #32]
 8007a1a:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a1e:	4013      	ands	r3, r2
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10f      	bne.n	8007a44 <HAL_TIMEx_PWMN_Stop+0x48>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	6a1a      	ldr	r2, [r3, #32]
 8007a2a:	f244 4344 	movw	r3, #17476	; 0x4444
 8007a2e:	4013      	ands	r3, r2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d107      	bne.n	8007a44 <HAL_TIMEx_PWMN_Stop+0x48>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a42:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	6a1a      	ldr	r2, [r3, #32]
 8007a4a:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a4e:	4013      	ands	r3, r2
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d10f      	bne.n	8007a74 <HAL_TIMEx_PWMN_Stop+0x78>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	6a1a      	ldr	r2, [r3, #32]
 8007a5a:	f244 4344 	movw	r3, #17476	; 0x4444
 8007a5e:	4013      	ands	r3, r2
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d107      	bne.n	8007a74 <HAL_TIMEx_PWMN_Stop+0x78>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f022 0201 	bic.w	r2, r2, #1
 8007a72:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d104      	bne.n	8007a84 <HAL_TIMEx_PWMN_Stop+0x88>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a82:	e013      	b.n	8007aac <HAL_TIMEx_PWMN_Stop+0xb0>
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	2b04      	cmp	r3, #4
 8007a88:	d104      	bne.n	8007a94 <HAL_TIMEx_PWMN_Stop+0x98>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a92:	e00b      	b.n	8007aac <HAL_TIMEx_PWMN_Stop+0xb0>
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2b08      	cmp	r3, #8
 8007a98:	d104      	bne.n	8007aa4 <HAL_TIMEx_PWMN_Stop+0xa8>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007aa2:	e003      	b.n	8007aac <HAL_TIMEx_PWMN_Stop+0xb0>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
	...

08007ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d101      	bne.n	8007ad0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007acc:	2302      	movs	r3, #2
 8007ace:	e074      	b.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2202      	movs	r2, #2
 8007adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a34      	ldr	r2, [pc, #208]	; (8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d009      	beq.n	8007b0e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a33      	ldr	r2, [pc, #204]	; (8007bcc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d004      	beq.n	8007b0e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a31      	ldr	r2, [pc, #196]	; (8007bd0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d108      	bne.n	8007b20 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b14:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a21      	ldr	r2, [pc, #132]	; (8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d022      	beq.n	8007b8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b50:	d01d      	beq.n	8007b8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a1f      	ldr	r2, [pc, #124]	; (8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d018      	beq.n	8007b8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a1d      	ldr	r2, [pc, #116]	; (8007bd8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d013      	beq.n	8007b8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a1c      	ldr	r2, [pc, #112]	; (8007bdc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d00e      	beq.n	8007b8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a15      	ldr	r2, [pc, #84]	; (8007bcc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d009      	beq.n	8007b8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a18      	ldr	r2, [pc, #96]	; (8007be0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d004      	beq.n	8007b8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a11      	ldr	r2, [pc, #68]	; (8007bd0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d10c      	bne.n	8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3714      	adds	r7, #20
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	40012c00 	.word	0x40012c00
 8007bcc:	40013400 	.word	0x40013400
 8007bd0:	40015000 	.word	0x40015000
 8007bd4:	40000400 	.word	0x40000400
 8007bd8:	40000800 	.word	0x40000800
 8007bdc:	40000c00 	.word	0x40000c00
 8007be0:	40014000 	.word	0x40014000

08007be4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d101      	bne.n	8007c00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	e096      	b.n	8007d2e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	695b      	ldr	r3, [r3, #20]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c66:	4313      	orrs	r3, r2
 8007c68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	041b      	lsls	r3, r3, #16
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a2f      	ldr	r2, [pc, #188]	; (8007d3c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d009      	beq.n	8007c98 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a2d      	ldr	r2, [pc, #180]	; (8007d40 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d004      	beq.n	8007c98 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a2c      	ldr	r2, [pc, #176]	; (8007d44 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d106      	bne.n	8007ca6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a24      	ldr	r2, [pc, #144]	; (8007d3c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d009      	beq.n	8007cc4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a22      	ldr	r2, [pc, #136]	; (8007d40 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d004      	beq.n	8007cc4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a21      	ldr	r2, [pc, #132]	; (8007d44 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d12b      	bne.n	8007d1c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cce:	051b      	lsls	r3, r3, #20
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cec:	4313      	orrs	r3, r2
 8007cee:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a11      	ldr	r2, [pc, #68]	; (8007d3c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d009      	beq.n	8007d0e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a10      	ldr	r2, [pc, #64]	; (8007d40 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d004      	beq.n	8007d0e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a0e      	ldr	r2, [pc, #56]	; (8007d44 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d106      	bne.n	8007d1c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3714      	adds	r7, #20
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	40012c00 	.word	0x40012c00
 8007d40:	40013400 	.word	0x40013400
 8007d44:	40015000 	.word	0x40015000

08007d48 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007d5e:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d76:	bf00      	nop
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b083      	sub	sp, #12
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d8a:	bf00      	nop
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d96:	b480      	push	{r7}
 8007d98:	b083      	sub	sp, #12
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d9e:	bf00      	nop
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007daa:	b480      	push	{r7}
 8007dac:	b083      	sub	sp, #12
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007db2:	bf00      	nop
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b083      	sub	sp, #12
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007dc6:	bf00      	nop
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b083      	sub	sp, #12
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007dda:	bf00      	nop
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b083      	sub	sp, #12
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007dee:	bf00      	nop
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b087      	sub	sp, #28
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	60b9      	str	r1, [r7, #8]
 8007e04:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	f003 031f 	and.w	r3, r3, #31
 8007e0c:	2204      	movs	r2, #4
 8007e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e12:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6a1a      	ldr	r2, [r3, #32]
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	43db      	mvns	r3, r3
 8007e1c:	401a      	ands	r2, r3
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6a1a      	ldr	r2, [r3, #32]
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	f003 031f 	and.w	r3, r3, #31
 8007e2c:	6879      	ldr	r1, [r7, #4]
 8007e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e32:	431a      	orrs	r2, r3
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	621a      	str	r2, [r3, #32]
}
 8007e38:	bf00      	nop
 8007e3a:	371c      	adds	r7, #28
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e042      	b.n	8007edc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d106      	bne.n	8007e6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7fa f80f 	bl	8001e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2224      	movs	r2, #36	; 0x24
 8007e72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 0201 	bic.w	r2, r2, #1
 8007e84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fc50 	bl	800872c <UART_SetConfig>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d101      	bne.n	8007e96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e022      	b.n	8007edc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d002      	beq.n	8007ea4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 ff40 	bl	8008d24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007eb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689a      	ldr	r2, [r3, #8]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ec2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f042 0201 	orr.w	r2, r2, #1
 8007ed2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 ffc7 	bl	8008e68 <UART_CheckIdleState>
 8007eda:	4603      	mov	r3, r0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b08a      	sub	sp, #40	; 0x28
 8007ee8:	af02      	add	r7, sp, #8
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	603b      	str	r3, [r7, #0]
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007efa:	2b20      	cmp	r3, #32
 8007efc:	f040 8083 	bne.w	8008006 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d002      	beq.n	8007f0c <HAL_UART_Transmit+0x28>
 8007f06:	88fb      	ldrh	r3, [r7, #6]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e07b      	b.n	8008008 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d101      	bne.n	8007f1e <HAL_UART_Transmit+0x3a>
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	e074      	b.n	8008008 <HAL_UART_Transmit+0x124>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2221      	movs	r2, #33	; 0x21
 8007f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f36:	f7fa fbbb 	bl	80026b0 <HAL_GetTick>
 8007f3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	88fa      	ldrh	r2, [r7, #6]
 8007f40:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	88fa      	ldrh	r2, [r7, #6]
 8007f48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f54:	d108      	bne.n	8007f68 <HAL_UART_Transmit+0x84>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d104      	bne.n	8007f68 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	61bb      	str	r3, [r7, #24]
 8007f66:	e003      	b.n	8007f70 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007f78:	e02c      	b.n	8007fd4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	9300      	str	r3, [sp, #0]
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2200      	movs	r2, #0
 8007f82:	2180      	movs	r1, #128	; 0x80
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f000 ffba 	bl	8008efe <UART_WaitOnFlagUntilTimeout>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d001      	beq.n	8007f94 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e039      	b.n	8008008 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10b      	bne.n	8007fb2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	881b      	ldrh	r3, [r3, #0]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fa8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	3302      	adds	r3, #2
 8007fae:	61bb      	str	r3, [r7, #24]
 8007fb0:	e007      	b.n	8007fc2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	781a      	ldrb	r2, [r3, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1cc      	bne.n	8007f7a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	2140      	movs	r1, #64	; 0x40
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f000 ff87 	bl	8008efe <UART_WaitOnFlagUntilTimeout>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d001      	beq.n	8007ffa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e006      	b.n	8008008 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2220      	movs	r2, #32
 8007ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008002:	2300      	movs	r3, #0
 8008004:	e000      	b.n	8008008 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008006:	2302      	movs	r3, #2
  }
}
 8008008:	4618      	mov	r0, r3
 800800a:	3720      	adds	r7, #32
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08a      	sub	sp, #40	; 0x28
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	4613      	mov	r3, r2
 800801c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008024:	2b20      	cmp	r3, #32
 8008026:	d142      	bne.n	80080ae <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d002      	beq.n	8008034 <HAL_UART_Receive_IT+0x24>
 800802e:	88fb      	ldrh	r3, [r7, #6]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d101      	bne.n	8008038 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e03b      	b.n	80080b0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800803e:	2b01      	cmp	r3, #1
 8008040:	d101      	bne.n	8008046 <HAL_UART_Receive_IT+0x36>
 8008042:	2302      	movs	r3, #2
 8008044:	e034      	b.n	80080b0 <HAL_UART_Receive_IT+0xa0>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a17      	ldr	r2, [pc, #92]	; (80080b8 <HAL_UART_Receive_IT+0xa8>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d01f      	beq.n	800809e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d018      	beq.n	800809e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	e853 3f00 	ldrex	r3, [r3]
 8008078:	613b      	str	r3, [r7, #16]
   return(result);
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008080:	627b      	str	r3, [r7, #36]	; 0x24
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808a:	623b      	str	r3, [r7, #32]
 800808c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808e:	69f9      	ldr	r1, [r7, #28]
 8008090:	6a3a      	ldr	r2, [r7, #32]
 8008092:	e841 2300 	strex	r3, r2, [r1]
 8008096:	61bb      	str	r3, [r7, #24]
   return(result);
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1e6      	bne.n	800806c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800809e:	88fb      	ldrh	r3, [r7, #6]
 80080a0:	461a      	mov	r2, r3
 80080a2:	68b9      	ldr	r1, [r7, #8]
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 fff3 	bl	8009090 <UART_Start_Receive_IT>
 80080aa:	4603      	mov	r3, r0
 80080ac:	e000      	b.n	80080b0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80080ae:	2302      	movs	r3, #2
  }
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3728      	adds	r7, #40	; 0x28
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	40008000 	.word	0x40008000

080080bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b0ba      	sub	sp, #232	; 0xe8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	69db      	ldr	r3, [r3, #28]
 80080ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80080e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80080e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80080ea:	4013      	ands	r3, r2
 80080ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80080f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d11b      	bne.n	8008130 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080fc:	f003 0320 	and.w	r3, r3, #32
 8008100:	2b00      	cmp	r3, #0
 8008102:	d015      	beq.n	8008130 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008108:	f003 0320 	and.w	r3, r3, #32
 800810c:	2b00      	cmp	r3, #0
 800810e:	d105      	bne.n	800811c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d009      	beq.n	8008130 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008120:	2b00      	cmp	r3, #0
 8008122:	f000 82d6 	beq.w	80086d2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	4798      	blx	r3
      }
      return;
 800812e:	e2d0      	b.n	80086d2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008130:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008134:	2b00      	cmp	r3, #0
 8008136:	f000 811f 	beq.w	8008378 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800813a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800813e:	4b8b      	ldr	r3, [pc, #556]	; (800836c <HAL_UART_IRQHandler+0x2b0>)
 8008140:	4013      	ands	r3, r2
 8008142:	2b00      	cmp	r3, #0
 8008144:	d106      	bne.n	8008154 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008146:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800814a:	4b89      	ldr	r3, [pc, #548]	; (8008370 <HAL_UART_IRQHandler+0x2b4>)
 800814c:	4013      	ands	r3, r2
 800814e:	2b00      	cmp	r3, #0
 8008150:	f000 8112 	beq.w	8008378 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b00      	cmp	r3, #0
 800815e:	d011      	beq.n	8008184 <HAL_UART_IRQHandler+0xc8>
 8008160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00b      	beq.n	8008184 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2201      	movs	r2, #1
 8008172:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800817a:	f043 0201 	orr.w	r2, r3, #1
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008188:	f003 0302 	and.w	r3, r3, #2
 800818c:	2b00      	cmp	r3, #0
 800818e:	d011      	beq.n	80081b4 <HAL_UART_IRQHandler+0xf8>
 8008190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00b      	beq.n	80081b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2202      	movs	r2, #2
 80081a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081aa:	f043 0204 	orr.w	r2, r3, #4
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b8:	f003 0304 	and.w	r3, r3, #4
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d011      	beq.n	80081e4 <HAL_UART_IRQHandler+0x128>
 80081c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00b      	beq.n	80081e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2204      	movs	r2, #4
 80081d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081da:	f043 0202 	orr.w	r2, r3, #2
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80081e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081e8:	f003 0308 	and.w	r3, r3, #8
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d017      	beq.n	8008220 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081f4:	f003 0320 	and.w	r3, r3, #32
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d105      	bne.n	8008208 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80081fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008200:	4b5a      	ldr	r3, [pc, #360]	; (800836c <HAL_UART_IRQHandler+0x2b0>)
 8008202:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00b      	beq.n	8008220 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2208      	movs	r2, #8
 800820e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008216:	f043 0208 	orr.w	r2, r3, #8
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008228:	2b00      	cmp	r3, #0
 800822a:	d012      	beq.n	8008252 <HAL_UART_IRQHandler+0x196>
 800822c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008230:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00c      	beq.n	8008252 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008240:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008248:	f043 0220 	orr.w	r2, r3, #32
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008258:	2b00      	cmp	r3, #0
 800825a:	f000 823c 	beq.w	80086d6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800825e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008262:	f003 0320 	and.w	r3, r3, #32
 8008266:	2b00      	cmp	r3, #0
 8008268:	d013      	beq.n	8008292 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800826a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800826e:	f003 0320 	and.w	r3, r3, #32
 8008272:	2b00      	cmp	r3, #0
 8008274:	d105      	bne.n	8008282 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800827a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d007      	beq.n	8008292 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008298:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a6:	2b40      	cmp	r3, #64	; 0x40
 80082a8:	d005      	beq.n	80082b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80082aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d04f      	beq.n	8008356 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f001 f814 	bl	80092e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c6:	2b40      	cmp	r3, #64	; 0x40
 80082c8:	d141      	bne.n	800834e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	3308      	adds	r3, #8
 80082d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082d8:	e853 3f00 	ldrex	r3, [r3]
 80082dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80082e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	3308      	adds	r3, #8
 80082f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80082f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80082fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008302:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008306:	e841 2300 	strex	r3, r2, [r1]
 800830a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800830e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1d9      	bne.n	80082ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800831a:	2b00      	cmp	r3, #0
 800831c:	d013      	beq.n	8008346 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008322:	4a14      	ldr	r2, [pc, #80]	; (8008374 <HAL_UART_IRQHandler+0x2b8>)
 8008324:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800832a:	4618      	mov	r0, r3
 800832c:	f7fc fa38 	bl	80047a0 <HAL_DMA_Abort_IT>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d017      	beq.n	8008366 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800833a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008340:	4610      	mov	r0, r2
 8008342:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008344:	e00f      	b.n	8008366 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f9da 	bl	8008700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800834c:	e00b      	b.n	8008366 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f9d6 	bl	8008700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008354:	e007      	b.n	8008366 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f9d2 	bl	8008700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008364:	e1b7      	b.n	80086d6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008366:	bf00      	nop
    return;
 8008368:	e1b5      	b.n	80086d6 <HAL_UART_IRQHandler+0x61a>
 800836a:	bf00      	nop
 800836c:	10000001 	.word	0x10000001
 8008370:	04000120 	.word	0x04000120
 8008374:	080093b1 	.word	0x080093b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800837c:	2b01      	cmp	r3, #1
 800837e:	f040 814a 	bne.w	8008616 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008386:	f003 0310 	and.w	r3, r3, #16
 800838a:	2b00      	cmp	r3, #0
 800838c:	f000 8143 	beq.w	8008616 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008394:	f003 0310 	and.w	r3, r3, #16
 8008398:	2b00      	cmp	r3, #0
 800839a:	f000 813c 	beq.w	8008616 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2210      	movs	r2, #16
 80083a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b0:	2b40      	cmp	r3, #64	; 0x40
 80083b2:	f040 80b5 	bne.w	8008520 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f000 8187 	beq.w	80086da <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80083d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083d6:	429a      	cmp	r2, r3
 80083d8:	f080 817f 	bcs.w	80086da <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0320 	and.w	r3, r3, #32
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f040 8086 	bne.w	8008504 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008400:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008404:	e853 3f00 	ldrex	r3, [r3]
 8008408:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800840c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008414:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	461a      	mov	r2, r3
 800841e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008422:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008426:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800842e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008432:	e841 2300 	strex	r3, r2, [r1]
 8008436:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800843a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1da      	bne.n	80083f8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	3308      	adds	r3, #8
 8008448:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800844c:	e853 3f00 	ldrex	r3, [r3]
 8008450:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008452:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008454:	f023 0301 	bic.w	r3, r3, #1
 8008458:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	3308      	adds	r3, #8
 8008462:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008466:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800846a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800846e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008472:	e841 2300 	strex	r3, r2, [r1]
 8008476:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008478:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1e1      	bne.n	8008442 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	3308      	adds	r3, #8
 8008484:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008488:	e853 3f00 	ldrex	r3, [r3]
 800848c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800848e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008494:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3308      	adds	r3, #8
 800849e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80084a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80084a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084aa:	e841 2300 	strex	r3, r2, [r1]
 80084ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80084b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1e3      	bne.n	800847e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2220      	movs	r2, #32
 80084ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084cc:	e853 3f00 	ldrex	r3, [r3]
 80084d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084d4:	f023 0310 	bic.w	r3, r3, #16
 80084d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	461a      	mov	r2, r3
 80084e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80084e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084ee:	e841 2300 	strex	r3, r2, [r1]
 80084f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e4      	bne.n	80084c4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084fe:	4618      	mov	r0, r3
 8008500:	f7fc f8f5 	bl	80046ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008510:	b29b      	uxth	r3, r3
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	b29b      	uxth	r3, r3
 8008516:	4619      	mov	r1, r3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f8fb 	bl	8008714 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800851e:	e0dc      	b.n	80086da <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800852c:	b29b      	uxth	r3, r3
 800852e:	1ad3      	subs	r3, r2, r3
 8008530:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800853a:	b29b      	uxth	r3, r3
 800853c:	2b00      	cmp	r3, #0
 800853e:	f000 80ce 	beq.w	80086de <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8008542:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008546:	2b00      	cmp	r3, #0
 8008548:	f000 80c9 	beq.w	80086de <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008554:	e853 3f00 	ldrex	r3, [r3]
 8008558:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800855a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800855c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008560:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	461a      	mov	r2, r3
 800856a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800856e:	647b      	str	r3, [r7, #68]	; 0x44
 8008570:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008572:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008574:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008576:	e841 2300 	strex	r3, r2, [r1]
 800857a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800857c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1e4      	bne.n	800854c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3308      	adds	r3, #8
 8008588:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858c:	e853 3f00 	ldrex	r3, [r3]
 8008590:	623b      	str	r3, [r7, #32]
   return(result);
 8008592:	6a3b      	ldr	r3, [r7, #32]
 8008594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008598:	f023 0301 	bic.w	r3, r3, #1
 800859c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	3308      	adds	r3, #8
 80085a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80085aa:	633a      	str	r2, [r7, #48]	; 0x30
 80085ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085b2:	e841 2300 	strex	r3, r2, [r1]
 80085b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1e1      	bne.n	8008582 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2220      	movs	r2, #32
 80085c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	e853 3f00 	ldrex	r3, [r3]
 80085de:	60fb      	str	r3, [r7, #12]
   return(result);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f023 0310 	bic.w	r3, r3, #16
 80085e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	461a      	mov	r2, r3
 80085f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80085f4:	61fb      	str	r3, [r7, #28]
 80085f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f8:	69b9      	ldr	r1, [r7, #24]
 80085fa:	69fa      	ldr	r2, [r7, #28]
 80085fc:	e841 2300 	strex	r3, r2, [r1]
 8008600:	617b      	str	r3, [r7, #20]
   return(result);
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1e4      	bne.n	80085d2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008608:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f880 	bl	8008714 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008614:	e063      	b.n	80086de <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800861a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00e      	beq.n	8008640 <HAL_UART_IRQHandler+0x584>
 8008622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800862a:	2b00      	cmp	r3, #0
 800862c:	d008      	beq.n	8008640 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008636:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f001 fb57 	bl	8009cec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800863e:	e051      	b.n	80086e4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008648:	2b00      	cmp	r3, #0
 800864a:	d014      	beq.n	8008676 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800864c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008654:	2b00      	cmp	r3, #0
 8008656:	d105      	bne.n	8008664 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800865c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d008      	beq.n	8008676 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008668:	2b00      	cmp	r3, #0
 800866a:	d03a      	beq.n	80086e2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	4798      	blx	r3
    }
    return;
 8008674:	e035      	b.n	80086e2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800867a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800867e:	2b00      	cmp	r3, #0
 8008680:	d009      	beq.n	8008696 <HAL_UART_IRQHandler+0x5da>
 8008682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fea4 	bl	80093dc <UART_EndTransmit_IT>
    return;
 8008694:	e026      	b.n	80086e4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800869a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d009      	beq.n	80086b6 <HAL_UART_IRQHandler+0x5fa>
 80086a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d003      	beq.n	80086b6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f001 fb30 	bl	8009d14 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086b4:	e016      	b.n	80086e4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80086b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d010      	beq.n	80086e4 <HAL_UART_IRQHandler+0x628>
 80086c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	da0c      	bge.n	80086e4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f001 fb18 	bl	8009d00 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086d0:	e008      	b.n	80086e4 <HAL_UART_IRQHandler+0x628>
      return;
 80086d2:	bf00      	nop
 80086d4:	e006      	b.n	80086e4 <HAL_UART_IRQHandler+0x628>
    return;
 80086d6:	bf00      	nop
 80086d8:	e004      	b.n	80086e4 <HAL_UART_IRQHandler+0x628>
      return;
 80086da:	bf00      	nop
 80086dc:	e002      	b.n	80086e4 <HAL_UART_IRQHandler+0x628>
      return;
 80086de:	bf00      	nop
 80086e0:	e000      	b.n	80086e4 <HAL_UART_IRQHandler+0x628>
    return;
 80086e2:	bf00      	nop
  }
}
 80086e4:	37e8      	adds	r7, #232	; 0xe8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop

080086ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800872c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008730:	b08c      	sub	sp, #48	; 0x30
 8008732:	af00      	add	r7, sp, #0
 8008734:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008736:	2300      	movs	r3, #0
 8008738:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	689a      	ldr	r2, [r3, #8]
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	431a      	orrs	r2, r3
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	695b      	ldr	r3, [r3, #20]
 800874a:	431a      	orrs	r2, r3
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	69db      	ldr	r3, [r3, #28]
 8008750:	4313      	orrs	r3, r2
 8008752:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	4baa      	ldr	r3, [pc, #680]	; (8008a04 <UART_SetConfig+0x2d8>)
 800875c:	4013      	ands	r3, r2
 800875e:	697a      	ldr	r2, [r7, #20]
 8008760:	6812      	ldr	r2, [r2, #0]
 8008762:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008764:	430b      	orrs	r3, r1
 8008766:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	68da      	ldr	r2, [r3, #12]
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	430a      	orrs	r2, r1
 800877c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	699b      	ldr	r3, [r3, #24]
 8008782:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a9f      	ldr	r2, [pc, #636]	; (8008a08 <UART_SetConfig+0x2dc>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d004      	beq.n	8008798 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008794:	4313      	orrs	r3, r2
 8008796:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80087a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	6812      	ldr	r2, [r2, #0]
 80087aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087ac:	430b      	orrs	r3, r1
 80087ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b6:	f023 010f 	bic.w	r1, r3, #15
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	430a      	orrs	r2, r1
 80087c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a90      	ldr	r2, [pc, #576]	; (8008a0c <UART_SetConfig+0x2e0>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d125      	bne.n	800881c <UART_SetConfig+0xf0>
 80087d0:	4b8f      	ldr	r3, [pc, #572]	; (8008a10 <UART_SetConfig+0x2e4>)
 80087d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087d6:	f003 0303 	and.w	r3, r3, #3
 80087da:	2b03      	cmp	r3, #3
 80087dc:	d81a      	bhi.n	8008814 <UART_SetConfig+0xe8>
 80087de:	a201      	add	r2, pc, #4	; (adr r2, 80087e4 <UART_SetConfig+0xb8>)
 80087e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e4:	080087f5 	.word	0x080087f5
 80087e8:	08008805 	.word	0x08008805
 80087ec:	080087fd 	.word	0x080087fd
 80087f0:	0800880d 	.word	0x0800880d
 80087f4:	2301      	movs	r3, #1
 80087f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087fa:	e116      	b.n	8008a2a <UART_SetConfig+0x2fe>
 80087fc:	2302      	movs	r3, #2
 80087fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008802:	e112      	b.n	8008a2a <UART_SetConfig+0x2fe>
 8008804:	2304      	movs	r3, #4
 8008806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800880a:	e10e      	b.n	8008a2a <UART_SetConfig+0x2fe>
 800880c:	2308      	movs	r3, #8
 800880e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008812:	e10a      	b.n	8008a2a <UART_SetConfig+0x2fe>
 8008814:	2310      	movs	r3, #16
 8008816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800881a:	e106      	b.n	8008a2a <UART_SetConfig+0x2fe>
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a7c      	ldr	r2, [pc, #496]	; (8008a14 <UART_SetConfig+0x2e8>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d138      	bne.n	8008898 <UART_SetConfig+0x16c>
 8008826:	4b7a      	ldr	r3, [pc, #488]	; (8008a10 <UART_SetConfig+0x2e4>)
 8008828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800882c:	f003 030c 	and.w	r3, r3, #12
 8008830:	2b0c      	cmp	r3, #12
 8008832:	d82d      	bhi.n	8008890 <UART_SetConfig+0x164>
 8008834:	a201      	add	r2, pc, #4	; (adr r2, 800883c <UART_SetConfig+0x110>)
 8008836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883a:	bf00      	nop
 800883c:	08008871 	.word	0x08008871
 8008840:	08008891 	.word	0x08008891
 8008844:	08008891 	.word	0x08008891
 8008848:	08008891 	.word	0x08008891
 800884c:	08008881 	.word	0x08008881
 8008850:	08008891 	.word	0x08008891
 8008854:	08008891 	.word	0x08008891
 8008858:	08008891 	.word	0x08008891
 800885c:	08008879 	.word	0x08008879
 8008860:	08008891 	.word	0x08008891
 8008864:	08008891 	.word	0x08008891
 8008868:	08008891 	.word	0x08008891
 800886c:	08008889 	.word	0x08008889
 8008870:	2300      	movs	r3, #0
 8008872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008876:	e0d8      	b.n	8008a2a <UART_SetConfig+0x2fe>
 8008878:	2302      	movs	r3, #2
 800887a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800887e:	e0d4      	b.n	8008a2a <UART_SetConfig+0x2fe>
 8008880:	2304      	movs	r3, #4
 8008882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008886:	e0d0      	b.n	8008a2a <UART_SetConfig+0x2fe>
 8008888:	2308      	movs	r3, #8
 800888a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800888e:	e0cc      	b.n	8008a2a <UART_SetConfig+0x2fe>
 8008890:	2310      	movs	r3, #16
 8008892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008896:	e0c8      	b.n	8008a2a <UART_SetConfig+0x2fe>
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a5e      	ldr	r2, [pc, #376]	; (8008a18 <UART_SetConfig+0x2ec>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d125      	bne.n	80088ee <UART_SetConfig+0x1c2>
 80088a2:	4b5b      	ldr	r3, [pc, #364]	; (8008a10 <UART_SetConfig+0x2e4>)
 80088a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80088ac:	2b30      	cmp	r3, #48	; 0x30
 80088ae:	d016      	beq.n	80088de <UART_SetConfig+0x1b2>
 80088b0:	2b30      	cmp	r3, #48	; 0x30
 80088b2:	d818      	bhi.n	80088e6 <UART_SetConfig+0x1ba>
 80088b4:	2b20      	cmp	r3, #32
 80088b6:	d00a      	beq.n	80088ce <UART_SetConfig+0x1a2>
 80088b8:	2b20      	cmp	r3, #32
 80088ba:	d814      	bhi.n	80088e6 <UART_SetConfig+0x1ba>
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d002      	beq.n	80088c6 <UART_SetConfig+0x19a>
 80088c0:	2b10      	cmp	r3, #16
 80088c2:	d008      	beq.n	80088d6 <UART_SetConfig+0x1aa>
 80088c4:	e00f      	b.n	80088e6 <UART_SetConfig+0x1ba>
 80088c6:	2300      	movs	r3, #0
 80088c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088cc:	e0ad      	b.n	8008a2a <UART_SetConfig+0x2fe>
 80088ce:	2302      	movs	r3, #2
 80088d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088d4:	e0a9      	b.n	8008a2a <UART_SetConfig+0x2fe>
 80088d6:	2304      	movs	r3, #4
 80088d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088dc:	e0a5      	b.n	8008a2a <UART_SetConfig+0x2fe>
 80088de:	2308      	movs	r3, #8
 80088e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088e4:	e0a1      	b.n	8008a2a <UART_SetConfig+0x2fe>
 80088e6:	2310      	movs	r3, #16
 80088e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ec:	e09d      	b.n	8008a2a <UART_SetConfig+0x2fe>
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a4a      	ldr	r2, [pc, #296]	; (8008a1c <UART_SetConfig+0x2f0>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d125      	bne.n	8008944 <UART_SetConfig+0x218>
 80088f8:	4b45      	ldr	r3, [pc, #276]	; (8008a10 <UART_SetConfig+0x2e4>)
 80088fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008902:	2bc0      	cmp	r3, #192	; 0xc0
 8008904:	d016      	beq.n	8008934 <UART_SetConfig+0x208>
 8008906:	2bc0      	cmp	r3, #192	; 0xc0
 8008908:	d818      	bhi.n	800893c <UART_SetConfig+0x210>
 800890a:	2b80      	cmp	r3, #128	; 0x80
 800890c:	d00a      	beq.n	8008924 <UART_SetConfig+0x1f8>
 800890e:	2b80      	cmp	r3, #128	; 0x80
 8008910:	d814      	bhi.n	800893c <UART_SetConfig+0x210>
 8008912:	2b00      	cmp	r3, #0
 8008914:	d002      	beq.n	800891c <UART_SetConfig+0x1f0>
 8008916:	2b40      	cmp	r3, #64	; 0x40
 8008918:	d008      	beq.n	800892c <UART_SetConfig+0x200>
 800891a:	e00f      	b.n	800893c <UART_SetConfig+0x210>
 800891c:	2300      	movs	r3, #0
 800891e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008922:	e082      	b.n	8008a2a <UART_SetConfig+0x2fe>
 8008924:	2302      	movs	r3, #2
 8008926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800892a:	e07e      	b.n	8008a2a <UART_SetConfig+0x2fe>
 800892c:	2304      	movs	r3, #4
 800892e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008932:	e07a      	b.n	8008a2a <UART_SetConfig+0x2fe>
 8008934:	2308      	movs	r3, #8
 8008936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800893a:	e076      	b.n	8008a2a <UART_SetConfig+0x2fe>
 800893c:	2310      	movs	r3, #16
 800893e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008942:	e072      	b.n	8008a2a <UART_SetConfig+0x2fe>
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a35      	ldr	r2, [pc, #212]	; (8008a20 <UART_SetConfig+0x2f4>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d12a      	bne.n	80089a4 <UART_SetConfig+0x278>
 800894e:	4b30      	ldr	r3, [pc, #192]	; (8008a10 <UART_SetConfig+0x2e4>)
 8008950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008958:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800895c:	d01a      	beq.n	8008994 <UART_SetConfig+0x268>
 800895e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008962:	d81b      	bhi.n	800899c <UART_SetConfig+0x270>
 8008964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008968:	d00c      	beq.n	8008984 <UART_SetConfig+0x258>
 800896a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800896e:	d815      	bhi.n	800899c <UART_SetConfig+0x270>
 8008970:	2b00      	cmp	r3, #0
 8008972:	d003      	beq.n	800897c <UART_SetConfig+0x250>
 8008974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008978:	d008      	beq.n	800898c <UART_SetConfig+0x260>
 800897a:	e00f      	b.n	800899c <UART_SetConfig+0x270>
 800897c:	2300      	movs	r3, #0
 800897e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008982:	e052      	b.n	8008a2a <UART_SetConfig+0x2fe>
 8008984:	2302      	movs	r3, #2
 8008986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800898a:	e04e      	b.n	8008a2a <UART_SetConfig+0x2fe>
 800898c:	2304      	movs	r3, #4
 800898e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008992:	e04a      	b.n	8008a2a <UART_SetConfig+0x2fe>
 8008994:	2308      	movs	r3, #8
 8008996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800899a:	e046      	b.n	8008a2a <UART_SetConfig+0x2fe>
 800899c:	2310      	movs	r3, #16
 800899e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089a2:	e042      	b.n	8008a2a <UART_SetConfig+0x2fe>
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a17      	ldr	r2, [pc, #92]	; (8008a08 <UART_SetConfig+0x2dc>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d13a      	bne.n	8008a24 <UART_SetConfig+0x2f8>
 80089ae:	4b18      	ldr	r3, [pc, #96]	; (8008a10 <UART_SetConfig+0x2e4>)
 80089b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80089b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089bc:	d01a      	beq.n	80089f4 <UART_SetConfig+0x2c8>
 80089be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089c2:	d81b      	bhi.n	80089fc <UART_SetConfig+0x2d0>
 80089c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089c8:	d00c      	beq.n	80089e4 <UART_SetConfig+0x2b8>
 80089ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089ce:	d815      	bhi.n	80089fc <UART_SetConfig+0x2d0>
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d003      	beq.n	80089dc <UART_SetConfig+0x2b0>
 80089d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089d8:	d008      	beq.n	80089ec <UART_SetConfig+0x2c0>
 80089da:	e00f      	b.n	80089fc <UART_SetConfig+0x2d0>
 80089dc:	2300      	movs	r3, #0
 80089de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089e2:	e022      	b.n	8008a2a <UART_SetConfig+0x2fe>
 80089e4:	2302      	movs	r3, #2
 80089e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089ea:	e01e      	b.n	8008a2a <UART_SetConfig+0x2fe>
 80089ec:	2304      	movs	r3, #4
 80089ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089f2:	e01a      	b.n	8008a2a <UART_SetConfig+0x2fe>
 80089f4:	2308      	movs	r3, #8
 80089f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089fa:	e016      	b.n	8008a2a <UART_SetConfig+0x2fe>
 80089fc:	2310      	movs	r3, #16
 80089fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a02:	e012      	b.n	8008a2a <UART_SetConfig+0x2fe>
 8008a04:	cfff69f3 	.word	0xcfff69f3
 8008a08:	40008000 	.word	0x40008000
 8008a0c:	40013800 	.word	0x40013800
 8008a10:	40021000 	.word	0x40021000
 8008a14:	40004400 	.word	0x40004400
 8008a18:	40004800 	.word	0x40004800
 8008a1c:	40004c00 	.word	0x40004c00
 8008a20:	40005000 	.word	0x40005000
 8008a24:	2310      	movs	r3, #16
 8008a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4aae      	ldr	r2, [pc, #696]	; (8008ce8 <UART_SetConfig+0x5bc>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	f040 8097 	bne.w	8008b64 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a3a:	2b08      	cmp	r3, #8
 8008a3c:	d823      	bhi.n	8008a86 <UART_SetConfig+0x35a>
 8008a3e:	a201      	add	r2, pc, #4	; (adr r2, 8008a44 <UART_SetConfig+0x318>)
 8008a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a44:	08008a69 	.word	0x08008a69
 8008a48:	08008a87 	.word	0x08008a87
 8008a4c:	08008a71 	.word	0x08008a71
 8008a50:	08008a87 	.word	0x08008a87
 8008a54:	08008a77 	.word	0x08008a77
 8008a58:	08008a87 	.word	0x08008a87
 8008a5c:	08008a87 	.word	0x08008a87
 8008a60:	08008a87 	.word	0x08008a87
 8008a64:	08008a7f 	.word	0x08008a7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a68:	f7fc ff84 	bl	8005974 <HAL_RCC_GetPCLK1Freq>
 8008a6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a6e:	e010      	b.n	8008a92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a70:	4b9e      	ldr	r3, [pc, #632]	; (8008cec <UART_SetConfig+0x5c0>)
 8008a72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a74:	e00d      	b.n	8008a92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a76:	f7fc ff0f 	bl	8005898 <HAL_RCC_GetSysClockFreq>
 8008a7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a7c:	e009      	b.n	8008a92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a84:	e005      	b.n	8008a92 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008a86:	2300      	movs	r3, #0
 8008a88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f000 8130 	beq.w	8008cfa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9e:	4a94      	ldr	r2, [pc, #592]	; (8008cf0 <UART_SetConfig+0x5c4>)
 8008aa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008aac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	685a      	ldr	r2, [r3, #4]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	005b      	lsls	r3, r3, #1
 8008ab6:	4413      	add	r3, r2
 8008ab8:	69ba      	ldr	r2, [r7, #24]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d305      	bcc.n	8008aca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ac4:	69ba      	ldr	r2, [r7, #24]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d903      	bls.n	8008ad2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008ad0:	e113      	b.n	8008cfa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	60bb      	str	r3, [r7, #8]
 8008ad8:	60fa      	str	r2, [r7, #12]
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ade:	4a84      	ldr	r2, [pc, #528]	; (8008cf0 <UART_SetConfig+0x5c4>)
 8008ae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	603b      	str	r3, [r7, #0]
 8008aea:	607a      	str	r2, [r7, #4]
 8008aec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008af0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008af4:	f7f7 ffea 	bl	8000acc <__aeabi_uldivmod>
 8008af8:	4602      	mov	r2, r0
 8008afa:	460b      	mov	r3, r1
 8008afc:	4610      	mov	r0, r2
 8008afe:	4619      	mov	r1, r3
 8008b00:	f04f 0200 	mov.w	r2, #0
 8008b04:	f04f 0300 	mov.w	r3, #0
 8008b08:	020b      	lsls	r3, r1, #8
 8008b0a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b0e:	0202      	lsls	r2, r0, #8
 8008b10:	6979      	ldr	r1, [r7, #20]
 8008b12:	6849      	ldr	r1, [r1, #4]
 8008b14:	0849      	lsrs	r1, r1, #1
 8008b16:	2000      	movs	r0, #0
 8008b18:	460c      	mov	r4, r1
 8008b1a:	4605      	mov	r5, r0
 8008b1c:	eb12 0804 	adds.w	r8, r2, r4
 8008b20:	eb43 0905 	adc.w	r9, r3, r5
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	469a      	mov	sl, r3
 8008b2c:	4693      	mov	fp, r2
 8008b2e:	4652      	mov	r2, sl
 8008b30:	465b      	mov	r3, fp
 8008b32:	4640      	mov	r0, r8
 8008b34:	4649      	mov	r1, r9
 8008b36:	f7f7 ffc9 	bl	8000acc <__aeabi_uldivmod>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	4613      	mov	r3, r2
 8008b40:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b42:	6a3b      	ldr	r3, [r7, #32]
 8008b44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b48:	d308      	bcc.n	8008b5c <UART_SetConfig+0x430>
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b50:	d204      	bcs.n	8008b5c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	6a3a      	ldr	r2, [r7, #32]
 8008b58:	60da      	str	r2, [r3, #12]
 8008b5a:	e0ce      	b.n	8008cfa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008b62:	e0ca      	b.n	8008cfa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	69db      	ldr	r3, [r3, #28]
 8008b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b6c:	d166      	bne.n	8008c3c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008b6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b72:	2b08      	cmp	r3, #8
 8008b74:	d827      	bhi.n	8008bc6 <UART_SetConfig+0x49a>
 8008b76:	a201      	add	r2, pc, #4	; (adr r2, 8008b7c <UART_SetConfig+0x450>)
 8008b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7c:	08008ba1 	.word	0x08008ba1
 8008b80:	08008ba9 	.word	0x08008ba9
 8008b84:	08008bb1 	.word	0x08008bb1
 8008b88:	08008bc7 	.word	0x08008bc7
 8008b8c:	08008bb7 	.word	0x08008bb7
 8008b90:	08008bc7 	.word	0x08008bc7
 8008b94:	08008bc7 	.word	0x08008bc7
 8008b98:	08008bc7 	.word	0x08008bc7
 8008b9c:	08008bbf 	.word	0x08008bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ba0:	f7fc fee8 	bl	8005974 <HAL_RCC_GetPCLK1Freq>
 8008ba4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ba6:	e014      	b.n	8008bd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ba8:	f7fc fefa 	bl	80059a0 <HAL_RCC_GetPCLK2Freq>
 8008bac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008bae:	e010      	b.n	8008bd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bb0:	4b4e      	ldr	r3, [pc, #312]	; (8008cec <UART_SetConfig+0x5c0>)
 8008bb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008bb4:	e00d      	b.n	8008bd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bb6:	f7fc fe6f 	bl	8005898 <HAL_RCC_GetSysClockFreq>
 8008bba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008bbc:	e009      	b.n	8008bd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008bc4:	e005      	b.n	8008bd2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008bd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f000 8090 	beq.w	8008cfa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bde:	4a44      	ldr	r2, [pc, #272]	; (8008cf0 <UART_SetConfig+0x5c4>)
 8008be0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008be4:	461a      	mov	r2, r3
 8008be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bec:	005a      	lsls	r2, r3, #1
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	085b      	lsrs	r3, r3, #1
 8008bf4:	441a      	add	r2, r3
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bfe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c00:	6a3b      	ldr	r3, [r7, #32]
 8008c02:	2b0f      	cmp	r3, #15
 8008c04:	d916      	bls.n	8008c34 <UART_SetConfig+0x508>
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c0c:	d212      	bcs.n	8008c34 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c0e:	6a3b      	ldr	r3, [r7, #32]
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	f023 030f 	bic.w	r3, r3, #15
 8008c16:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	085b      	lsrs	r3, r3, #1
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	f003 0307 	and.w	r3, r3, #7
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	8bfb      	ldrh	r3, [r7, #30]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	8bfa      	ldrh	r2, [r7, #30]
 8008c30:	60da      	str	r2, [r3, #12]
 8008c32:	e062      	b.n	8008cfa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008c3a:	e05e      	b.n	8008cfa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c40:	2b08      	cmp	r3, #8
 8008c42:	d828      	bhi.n	8008c96 <UART_SetConfig+0x56a>
 8008c44:	a201      	add	r2, pc, #4	; (adr r2, 8008c4c <UART_SetConfig+0x520>)
 8008c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4a:	bf00      	nop
 8008c4c:	08008c71 	.word	0x08008c71
 8008c50:	08008c79 	.word	0x08008c79
 8008c54:	08008c81 	.word	0x08008c81
 8008c58:	08008c97 	.word	0x08008c97
 8008c5c:	08008c87 	.word	0x08008c87
 8008c60:	08008c97 	.word	0x08008c97
 8008c64:	08008c97 	.word	0x08008c97
 8008c68:	08008c97 	.word	0x08008c97
 8008c6c:	08008c8f 	.word	0x08008c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c70:	f7fc fe80 	bl	8005974 <HAL_RCC_GetPCLK1Freq>
 8008c74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c76:	e014      	b.n	8008ca2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c78:	f7fc fe92 	bl	80059a0 <HAL_RCC_GetPCLK2Freq>
 8008c7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c7e:	e010      	b.n	8008ca2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c80:	4b1a      	ldr	r3, [pc, #104]	; (8008cec <UART_SetConfig+0x5c0>)
 8008c82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c84:	e00d      	b.n	8008ca2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c86:	f7fc fe07 	bl	8005898 <HAL_RCC_GetSysClockFreq>
 8008c8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c8c:	e009      	b.n	8008ca2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c94:	e005      	b.n	8008ca2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008c96:	2300      	movs	r3, #0
 8008c98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008ca0:	bf00      	nop
    }

    if (pclk != 0U)
 8008ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d028      	beq.n	8008cfa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cac:	4a10      	ldr	r2, [pc, #64]	; (8008cf0 <UART_SetConfig+0x5c4>)
 8008cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	085b      	lsrs	r3, r3, #1
 8008cc0:	441a      	add	r2, r3
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ccc:	6a3b      	ldr	r3, [r7, #32]
 8008cce:	2b0f      	cmp	r3, #15
 8008cd0:	d910      	bls.n	8008cf4 <UART_SetConfig+0x5c8>
 8008cd2:	6a3b      	ldr	r3, [r7, #32]
 8008cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cd8:	d20c      	bcs.n	8008cf4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008cda:	6a3b      	ldr	r3, [r7, #32]
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	60da      	str	r2, [r3, #12]
 8008ce4:	e009      	b.n	8008cfa <UART_SetConfig+0x5ce>
 8008ce6:	bf00      	nop
 8008ce8:	40008000 	.word	0x40008000
 8008cec:	00f42400 	.word	0x00f42400
 8008cf0:	0800b59c 	.word	0x0800b59c
      }
      else
      {
        ret = HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	2200      	movs	r2, #0
 8008d14:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008d16:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3730      	adds	r7, #48	; 0x30
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008d24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d30:	f003 0301 	and.w	r3, r3, #1
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00a      	beq.n	8008d4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	430a      	orrs	r2, r1
 8008d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d52:	f003 0302 	and.w	r3, r3, #2
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00a      	beq.n	8008d70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	430a      	orrs	r2, r1
 8008d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d74:	f003 0304 	and.w	r3, r3, #4
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00a      	beq.n	8008d92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	430a      	orrs	r2, r1
 8008d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d96:	f003 0308 	and.w	r3, r3, #8
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00a      	beq.n	8008db4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	430a      	orrs	r2, r1
 8008db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db8:	f003 0310 	and.w	r3, r3, #16
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00a      	beq.n	8008dd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	430a      	orrs	r2, r1
 8008dd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dda:	f003 0320 	and.w	r3, r3, #32
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00a      	beq.n	8008df8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	430a      	orrs	r2, r1
 8008df6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d01a      	beq.n	8008e3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	430a      	orrs	r2, r1
 8008e18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e22:	d10a      	bne.n	8008e3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	430a      	orrs	r2, r1
 8008e38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00a      	beq.n	8008e5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	430a      	orrs	r2, r1
 8008e5a:	605a      	str	r2, [r3, #4]
  }
}
 8008e5c:	bf00      	nop
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	af02      	add	r7, sp, #8
 8008e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e78:	f7f9 fc1a 	bl	80026b0 <HAL_GetTick>
 8008e7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 0308 	and.w	r3, r3, #8
 8008e88:	2b08      	cmp	r3, #8
 8008e8a:	d10e      	bne.n	8008eaa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e90:	9300      	str	r3, [sp, #0]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2200      	movs	r2, #0
 8008e96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 f82f 	bl	8008efe <UART_WaitOnFlagUntilTimeout>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d001      	beq.n	8008eaa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	e025      	b.n	8008ef6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 0304 	and.w	r3, r3, #4
 8008eb4:	2b04      	cmp	r3, #4
 8008eb6:	d10e      	bne.n	8008ed6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008eb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f819 	bl	8008efe <UART_WaitOnFlagUntilTimeout>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d001      	beq.n	8008ed6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	e00f      	b.n	8008ef6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b09c      	sub	sp, #112	; 0x70
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	60f8      	str	r0, [r7, #12]
 8008f06:	60b9      	str	r1, [r7, #8]
 8008f08:	603b      	str	r3, [r7, #0]
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f0e:	e0a9      	b.n	8009064 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f16:	f000 80a5 	beq.w	8009064 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f1a:	f7f9 fbc9 	bl	80026b0 <HAL_GetTick>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d302      	bcc.n	8008f30 <UART_WaitOnFlagUntilTimeout+0x32>
 8008f2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d140      	bne.n	8008fb2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f38:	e853 3f00 	ldrex	r3, [r3]
 8008f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f44:	667b      	str	r3, [r7, #100]	; 0x64
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f50:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f56:	e841 2300 	strex	r3, r2, [r1]
 8008f5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1e6      	bne.n	8008f30 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	3308      	adds	r3, #8
 8008f68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f6c:	e853 3f00 	ldrex	r3, [r3]
 8008f70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f74:	f023 0301 	bic.w	r3, r3, #1
 8008f78:	663b      	str	r3, [r7, #96]	; 0x60
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	3308      	adds	r3, #8
 8008f80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f82:	64ba      	str	r2, [r7, #72]	; 0x48
 8008f84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f8a:	e841 2300 	strex	r3, r2, [r1]
 8008f8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d1e5      	bne.n	8008f62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2220      	movs	r2, #32
 8008f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2220      	movs	r2, #32
 8008fa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e069      	b.n	8009086 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 0304 	and.w	r3, r3, #4
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d051      	beq.n	8009064 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	69db      	ldr	r3, [r3, #28]
 8008fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fce:	d149      	bne.n	8009064 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fd8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe2:	e853 3f00 	ldrex	r3, [r3]
 8008fe6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008fee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8008ffa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009000:	e841 2300 	strex	r3, r2, [r1]
 8009004:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1e6      	bne.n	8008fda <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	3308      	adds	r3, #8
 8009012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	e853 3f00 	ldrex	r3, [r3]
 800901a:	613b      	str	r3, [r7, #16]
   return(result);
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	f023 0301 	bic.w	r3, r3, #1
 8009022:	66bb      	str	r3, [r7, #104]	; 0x68
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	3308      	adds	r3, #8
 800902a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800902c:	623a      	str	r2, [r7, #32]
 800902e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009030:	69f9      	ldr	r1, [r7, #28]
 8009032:	6a3a      	ldr	r2, [r7, #32]
 8009034:	e841 2300 	strex	r3, r2, [r1]
 8009038:	61bb      	str	r3, [r7, #24]
   return(result);
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1e5      	bne.n	800900c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2220      	movs	r2, #32
 8009044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2220      	movs	r2, #32
 800904c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2220      	movs	r2, #32
 8009054:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009060:	2303      	movs	r3, #3
 8009062:	e010      	b.n	8009086 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	69da      	ldr	r2, [r3, #28]
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	4013      	ands	r3, r2
 800906e:	68ba      	ldr	r2, [r7, #8]
 8009070:	429a      	cmp	r2, r3
 8009072:	bf0c      	ite	eq
 8009074:	2301      	moveq	r3, #1
 8009076:	2300      	movne	r3, #0
 8009078:	b2db      	uxtb	r3, r3
 800907a:	461a      	mov	r2, r3
 800907c:	79fb      	ldrb	r3, [r7, #7]
 800907e:	429a      	cmp	r2, r3
 8009080:	f43f af46 	beq.w	8008f10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	3770      	adds	r7, #112	; 0x70
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
	...

08009090 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009090:	b480      	push	{r7}
 8009092:	b0a3      	sub	sp, #140	; 0x8c
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	4613      	mov	r3, r2
 800909c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	88fa      	ldrh	r2, [r7, #6]
 80090a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	88fa      	ldrh	r2, [r7, #6]
 80090b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2200      	movs	r2, #0
 80090b8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090c2:	d10e      	bne.n	80090e2 <UART_Start_Receive_IT+0x52>
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d105      	bne.n	80090d8 <UART_Start_Receive_IT+0x48>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80090d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090d6:	e02d      	b.n	8009134 <UART_Start_Receive_IT+0xa4>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	22ff      	movs	r2, #255	; 0xff
 80090dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090e0:	e028      	b.n	8009134 <UART_Start_Receive_IT+0xa4>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10d      	bne.n	8009106 <UART_Start_Receive_IT+0x76>
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d104      	bne.n	80090fc <UART_Start_Receive_IT+0x6c>
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	22ff      	movs	r2, #255	; 0xff
 80090f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090fa:	e01b      	b.n	8009134 <UART_Start_Receive_IT+0xa4>
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	227f      	movs	r2, #127	; 0x7f
 8009100:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009104:	e016      	b.n	8009134 <UART_Start_Receive_IT+0xa4>
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800910e:	d10d      	bne.n	800912c <UART_Start_Receive_IT+0x9c>
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d104      	bne.n	8009122 <UART_Start_Receive_IT+0x92>
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	227f      	movs	r2, #127	; 0x7f
 800911c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009120:	e008      	b.n	8009134 <UART_Start_Receive_IT+0xa4>
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	223f      	movs	r2, #63	; 0x3f
 8009126:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800912a:	e003      	b.n	8009134 <UART_Start_Receive_IT+0xa4>
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2200      	movs	r2, #0
 8009130:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2200      	movs	r2, #0
 8009138:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2222      	movs	r2, #34	; 0x22
 8009140:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	3308      	adds	r3, #8
 800914a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800914e:	e853 3f00 	ldrex	r3, [r3]
 8009152:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009154:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009156:	f043 0301 	orr.w	r3, r3, #1
 800915a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	3308      	adds	r3, #8
 8009164:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009168:	673a      	str	r2, [r7, #112]	; 0x70
 800916a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800916e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009170:	e841 2300 	strex	r3, r2, [r1]
 8009174:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8009176:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1e3      	bne.n	8009144 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009184:	d153      	bne.n	800922e <UART_Start_Receive_IT+0x19e>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800918c:	88fa      	ldrh	r2, [r7, #6]
 800918e:	429a      	cmp	r2, r3
 8009190:	d34d      	bcc.n	800922e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800919a:	d107      	bne.n	80091ac <UART_Start_Receive_IT+0x11c>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d103      	bne.n	80091ac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	4a4b      	ldr	r2, [pc, #300]	; (80092d4 <UART_Start_Receive_IT+0x244>)
 80091a8:	671a      	str	r2, [r3, #112]	; 0x70
 80091aa:	e002      	b.n	80091b2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	4a4a      	ldr	r2, [pc, #296]	; (80092d8 <UART_Start_Receive_IT+0x248>)
 80091b0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d01a      	beq.n	80091f8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091ca:	e853 3f00 	ldrex	r3, [r3]
 80091ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80091d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	461a      	mov	r2, r3
 80091e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80091e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091e6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80091ec:	e841 2300 	strex	r3, r2, [r1]
 80091f0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80091f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1e4      	bne.n	80091c2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	3308      	adds	r3, #8
 80091fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009202:	e853 3f00 	ldrex	r3, [r3]
 8009206:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800920e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	3308      	adds	r3, #8
 8009216:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009218:	64ba      	str	r2, [r7, #72]	; 0x48
 800921a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800921e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009220:	e841 2300 	strex	r3, r2, [r1]
 8009224:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1e5      	bne.n	80091f8 <UART_Start_Receive_IT+0x168>
 800922c:	e04a      	b.n	80092c4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009236:	d107      	bne.n	8009248 <UART_Start_Receive_IT+0x1b8>
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	691b      	ldr	r3, [r3, #16]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d103      	bne.n	8009248 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	4a26      	ldr	r2, [pc, #152]	; (80092dc <UART_Start_Receive_IT+0x24c>)
 8009244:	671a      	str	r2, [r3, #112]	; 0x70
 8009246:	e002      	b.n	800924e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	4a25      	ldr	r2, [pc, #148]	; (80092e0 <UART_Start_Receive_IT+0x250>)
 800924c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d019      	beq.n	8009292 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009266:	e853 3f00 	ldrex	r3, [r3]
 800926a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800926c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009272:	677b      	str	r3, [r7, #116]	; 0x74
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	461a      	mov	r2, r3
 800927a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800927c:	637b      	str	r3, [r7, #52]	; 0x34
 800927e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009280:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009284:	e841 2300 	strex	r3, r2, [r1]
 8009288:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800928a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928c:	2b00      	cmp	r3, #0
 800928e:	d1e6      	bne.n	800925e <UART_Start_Receive_IT+0x1ce>
 8009290:	e018      	b.n	80092c4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	e853 3f00 	ldrex	r3, [r3]
 800929e:	613b      	str	r3, [r7, #16]
   return(result);
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	f043 0320 	orr.w	r3, r3, #32
 80092a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	461a      	mov	r2, r3
 80092ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092b0:	623b      	str	r3, [r7, #32]
 80092b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b4:	69f9      	ldr	r1, [r7, #28]
 80092b6:	6a3a      	ldr	r2, [r7, #32]
 80092b8:	e841 2300 	strex	r3, r2, [r1]
 80092bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d1e6      	bne.n	8009292 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	378c      	adds	r7, #140	; 0x8c
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	080099ed 	.word	0x080099ed
 80092d8:	080096f5 	.word	0x080096f5
 80092dc:	08009593 	.word	0x08009593
 80092e0:	08009433 	.word	0x08009433

080092e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b095      	sub	sp, #84	; 0x54
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f4:	e853 3f00 	ldrex	r3, [r3]
 80092f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009300:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	461a      	mov	r2, r3
 8009308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800930a:	643b      	str	r3, [r7, #64]	; 0x40
 800930c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009310:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009312:	e841 2300 	strex	r3, r2, [r1]
 8009316:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1e6      	bne.n	80092ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	3308      	adds	r3, #8
 8009324:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009326:	6a3b      	ldr	r3, [r7, #32]
 8009328:	e853 3f00 	ldrex	r3, [r3]
 800932c:	61fb      	str	r3, [r7, #28]
   return(result);
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009334:	f023 0301 	bic.w	r3, r3, #1
 8009338:	64bb      	str	r3, [r7, #72]	; 0x48
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	3308      	adds	r3, #8
 8009340:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009342:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009344:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009346:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800934a:	e841 2300 	strex	r3, r2, [r1]
 800934e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1e3      	bne.n	800931e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800935a:	2b01      	cmp	r3, #1
 800935c:	d118      	bne.n	8009390 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	e853 3f00 	ldrex	r3, [r3]
 800936a:	60bb      	str	r3, [r7, #8]
   return(result);
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	f023 0310 	bic.w	r3, r3, #16
 8009372:	647b      	str	r3, [r7, #68]	; 0x44
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	461a      	mov	r2, r3
 800937a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800937c:	61bb      	str	r3, [r7, #24]
 800937e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009380:	6979      	ldr	r1, [r7, #20]
 8009382:	69ba      	ldr	r2, [r7, #24]
 8009384:	e841 2300 	strex	r3, r2, [r1]
 8009388:	613b      	str	r3, [r7, #16]
   return(result);
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1e6      	bne.n	800935e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2220      	movs	r2, #32
 8009394:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80093a4:	bf00      	nop
 80093a6:	3754      	adds	r7, #84	; 0x54
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f7ff f996 	bl	8008700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093d4:	bf00      	nop
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b088      	sub	sp, #32
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	e853 3f00 	ldrex	r3, [r3]
 80093f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093f8:	61fb      	str	r3, [r7, #28]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	461a      	mov	r2, r3
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	61bb      	str	r3, [r7, #24]
 8009404:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009406:	6979      	ldr	r1, [r7, #20]
 8009408:	69ba      	ldr	r2, [r7, #24]
 800940a:	e841 2300 	strex	r3, r2, [r1]
 800940e:	613b      	str	r3, [r7, #16]
   return(result);
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d1e6      	bne.n	80093e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2220      	movs	r2, #32
 800941a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7ff f961 	bl	80086ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800942a:	bf00      	nop
 800942c:	3720      	adds	r7, #32
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b096      	sub	sp, #88	; 0x58
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009440:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800944a:	2b22      	cmp	r3, #34	; 0x22
 800944c:	f040 8095 	bne.w	800957a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009456:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800945a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800945e:	b2d9      	uxtb	r1, r3
 8009460:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009464:	b2da      	uxtb	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800946a:	400a      	ands	r2, r1
 800946c:	b2d2      	uxtb	r2, r2
 800946e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009474:	1c5a      	adds	r2, r3, #1
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009480:	b29b      	uxth	r3, r3
 8009482:	3b01      	subs	r3, #1
 8009484:	b29a      	uxth	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009492:	b29b      	uxth	r3, r3
 8009494:	2b00      	cmp	r3, #0
 8009496:	d178      	bne.n	800958a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a0:	e853 3f00 	ldrex	r3, [r3]
 80094a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094ac:	653b      	str	r3, [r7, #80]	; 0x50
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	461a      	mov	r2, r3
 80094b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094b6:	647b      	str	r3, [r7, #68]	; 0x44
 80094b8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094be:	e841 2300 	strex	r3, r2, [r1]
 80094c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1e6      	bne.n	8009498 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	3308      	adds	r3, #8
 80094d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d4:	e853 3f00 	ldrex	r3, [r3]
 80094d8:	623b      	str	r3, [r7, #32]
   return(result);
 80094da:	6a3b      	ldr	r3, [r7, #32]
 80094dc:	f023 0301 	bic.w	r3, r3, #1
 80094e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	3308      	adds	r3, #8
 80094e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094ea:	633a      	str	r2, [r7, #48]	; 0x30
 80094ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094f2:	e841 2300 	strex	r3, r2, [r1]
 80094f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d1e5      	bne.n	80094ca <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2220      	movs	r2, #32
 8009502:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009510:	2b01      	cmp	r3, #1
 8009512:	d12e      	bne.n	8009572 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	e853 3f00 	ldrex	r3, [r3]
 8009526:	60fb      	str	r3, [r7, #12]
   return(result);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f023 0310 	bic.w	r3, r3, #16
 800952e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	461a      	mov	r2, r3
 8009536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009538:	61fb      	str	r3, [r7, #28]
 800953a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953c:	69b9      	ldr	r1, [r7, #24]
 800953e:	69fa      	ldr	r2, [r7, #28]
 8009540:	e841 2300 	strex	r3, r2, [r1]
 8009544:	617b      	str	r3, [r7, #20]
   return(result);
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1e6      	bne.n	800951a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	69db      	ldr	r3, [r3, #28]
 8009552:	f003 0310 	and.w	r3, r3, #16
 8009556:	2b10      	cmp	r3, #16
 8009558:	d103      	bne.n	8009562 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2210      	movs	r2, #16
 8009560:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009568:	4619      	mov	r1, r3
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f7ff f8d2 	bl	8008714 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009570:	e00b      	b.n	800958a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7f9 f832 	bl	80025dc <HAL_UART_RxCpltCallback>
}
 8009578:	e007      	b.n	800958a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	699a      	ldr	r2, [r3, #24]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f042 0208 	orr.w	r2, r2, #8
 8009588:	619a      	str	r2, [r3, #24]
}
 800958a:	bf00      	nop
 800958c:	3758      	adds	r7, #88	; 0x58
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009592:	b580      	push	{r7, lr}
 8009594:	b096      	sub	sp, #88	; 0x58
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095a0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095aa:	2b22      	cmp	r3, #34	; 0x22
 80095ac:	f040 8095 	bne.w	80096da <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095be:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80095c0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80095c4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80095c8:	4013      	ands	r3, r2
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095ce:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095d4:	1c9a      	adds	r2, r3, #2
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	3b01      	subs	r3, #1
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d178      	bne.n	80096ea <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009600:	e853 3f00 	ldrex	r3, [r3]
 8009604:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009608:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800960c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	461a      	mov	r2, r3
 8009614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009616:	643b      	str	r3, [r7, #64]	; 0x40
 8009618:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800961c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800961e:	e841 2300 	strex	r3, r2, [r1]
 8009622:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1e6      	bne.n	80095f8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	3308      	adds	r3, #8
 8009630:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009632:	6a3b      	ldr	r3, [r7, #32]
 8009634:	e853 3f00 	ldrex	r3, [r3]
 8009638:	61fb      	str	r3, [r7, #28]
   return(result);
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	f023 0301 	bic.w	r3, r3, #1
 8009640:	64bb      	str	r3, [r7, #72]	; 0x48
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	3308      	adds	r3, #8
 8009648:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800964a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800964c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009652:	e841 2300 	strex	r3, r2, [r1]
 8009656:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1e5      	bne.n	800962a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2220      	movs	r2, #32
 8009662:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009670:	2b01      	cmp	r3, #1
 8009672:	d12e      	bne.n	80096d2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	e853 3f00 	ldrex	r3, [r3]
 8009686:	60bb      	str	r3, [r7, #8]
   return(result);
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	f023 0310 	bic.w	r3, r3, #16
 800968e:	647b      	str	r3, [r7, #68]	; 0x44
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	461a      	mov	r2, r3
 8009696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009698:	61bb      	str	r3, [r7, #24]
 800969a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969c:	6979      	ldr	r1, [r7, #20]
 800969e:	69ba      	ldr	r2, [r7, #24]
 80096a0:	e841 2300 	strex	r3, r2, [r1]
 80096a4:	613b      	str	r3, [r7, #16]
   return(result);
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1e6      	bne.n	800967a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	f003 0310 	and.w	r3, r3, #16
 80096b6:	2b10      	cmp	r3, #16
 80096b8:	d103      	bne.n	80096c2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2210      	movs	r2, #16
 80096c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096c8:	4619      	mov	r1, r3
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f7ff f822 	bl	8008714 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096d0:	e00b      	b.n	80096ea <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7f8 ff82 	bl	80025dc <HAL_UART_RxCpltCallback>
}
 80096d8:	e007      	b.n	80096ea <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	699a      	ldr	r2, [r3, #24]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f042 0208 	orr.w	r2, r2, #8
 80096e8:	619a      	str	r2, [r3, #24]
}
 80096ea:	bf00      	nop
 80096ec:	3758      	adds	r7, #88	; 0x58
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
	...

080096f4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b0a6      	sub	sp, #152	; 0x98
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009702:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	69db      	ldr	r3, [r3, #28]
 800970c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800972a:	2b22      	cmp	r3, #34	; 0x22
 800972c:	f040 814f 	bne.w	80099ce <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009736:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800973a:	e0f6      	b.n	800992a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009742:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009746:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800974a:	b2d9      	uxtb	r1, r3
 800974c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009750:	b2da      	uxtb	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009756:	400a      	ands	r2, r1
 8009758:	b2d2      	uxtb	r2, r2
 800975a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009760:	1c5a      	adds	r2, r3, #1
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800976c:	b29b      	uxth	r3, r3
 800976e:	3b01      	subs	r3, #1
 8009770:	b29a      	uxth	r2, r3
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	69db      	ldr	r3, [r3, #28]
 800977e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009782:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009786:	f003 0307 	and.w	r3, r3, #7
 800978a:	2b00      	cmp	r3, #0
 800978c:	d053      	beq.n	8009836 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800978e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009792:	f003 0301 	and.w	r3, r3, #1
 8009796:	2b00      	cmp	r3, #0
 8009798:	d011      	beq.n	80097be <UART_RxISR_8BIT_FIFOEN+0xca>
 800979a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800979e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00b      	beq.n	80097be <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2201      	movs	r2, #1
 80097ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097b4:	f043 0201 	orr.w	r2, r3, #1
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097c2:	f003 0302 	and.w	r3, r3, #2
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d011      	beq.n	80097ee <UART_RxISR_8BIT_FIFOEN+0xfa>
 80097ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097ce:	f003 0301 	and.w	r3, r3, #1
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00b      	beq.n	80097ee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2202      	movs	r2, #2
 80097dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097e4:	f043 0204 	orr.w	r2, r3, #4
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097f2:	f003 0304 	and.w	r3, r3, #4
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d011      	beq.n	800981e <UART_RxISR_8BIT_FIFOEN+0x12a>
 80097fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097fe:	f003 0301 	and.w	r3, r3, #1
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00b      	beq.n	800981e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2204      	movs	r2, #4
 800980c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009814:	f043 0202 	orr.w	r2, r3, #2
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009824:	2b00      	cmp	r3, #0
 8009826:	d006      	beq.n	8009836 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7fe ff69 	bl	8008700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800983c:	b29b      	uxth	r3, r3
 800983e:	2b00      	cmp	r3, #0
 8009840:	d173      	bne.n	800992a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009848:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800984a:	e853 3f00 	ldrex	r3, [r3]
 800984e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009850:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009852:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009856:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	461a      	mov	r2, r3
 8009860:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009864:	66bb      	str	r3, [r7, #104]	; 0x68
 8009866:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009868:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800986a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800986c:	e841 2300 	strex	r3, r2, [r1]
 8009870:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009872:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009874:	2b00      	cmp	r3, #0
 8009876:	d1e4      	bne.n	8009842 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	3308      	adds	r3, #8
 800987e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009882:	e853 3f00 	ldrex	r3, [r3]
 8009886:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800988a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800988e:	f023 0301 	bic.w	r3, r3, #1
 8009892:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	3308      	adds	r3, #8
 800989a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800989c:	657a      	str	r2, [r7, #84]	; 0x54
 800989e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80098a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098a4:	e841 2300 	strex	r3, r2, [r1]
 80098a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80098aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d1e3      	bne.n	8009878 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2220      	movs	r2, #32
 80098b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d12e      	bne.n	8009924 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098d4:	e853 3f00 	ldrex	r3, [r3]
 80098d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80098da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098dc:	f023 0310 	bic.w	r3, r3, #16
 80098e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	461a      	mov	r2, r3
 80098e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098ea:	643b      	str	r3, [r7, #64]	; 0x40
 80098ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098f2:	e841 2300 	strex	r3, r2, [r1]
 80098f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80098f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1e6      	bne.n	80098cc <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	69db      	ldr	r3, [r3, #28]
 8009904:	f003 0310 	and.w	r3, r3, #16
 8009908:	2b10      	cmp	r3, #16
 800990a:	d103      	bne.n	8009914 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2210      	movs	r2, #16
 8009912:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800991a:	4619      	mov	r1, r3
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f7fe fef9 	bl	8008714 <HAL_UARTEx_RxEventCallback>
 8009922:	e002      	b.n	800992a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f7f8 fe59 	bl	80025dc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800992a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800992e:	2b00      	cmp	r3, #0
 8009930:	d006      	beq.n	8009940 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009932:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009936:	f003 0320 	and.w	r3, r3, #32
 800993a:	2b00      	cmp	r3, #0
 800993c:	f47f aefe 	bne.w	800973c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009946:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800994a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800994e:	2b00      	cmp	r3, #0
 8009950:	d045      	beq.n	80099de <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009958:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800995c:	429a      	cmp	r2, r3
 800995e:	d23e      	bcs.n	80099de <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	3308      	adds	r3, #8
 8009966:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009968:	6a3b      	ldr	r3, [r7, #32]
 800996a:	e853 3f00 	ldrex	r3, [r3]
 800996e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009976:	673b      	str	r3, [r7, #112]	; 0x70
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	3308      	adds	r3, #8
 800997e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009980:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009982:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009984:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009988:	e841 2300 	strex	r3, r2, [r1]
 800998c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800998e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009990:	2b00      	cmp	r3, #0
 8009992:	d1e5      	bne.n	8009960 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4a14      	ldr	r2, [pc, #80]	; (80099e8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009998:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	e853 3f00 	ldrex	r3, [r3]
 80099a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	f043 0320 	orr.w	r3, r3, #32
 80099ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	461a      	mov	r2, r3
 80099b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099b8:	61bb      	str	r3, [r7, #24]
 80099ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099bc:	6979      	ldr	r1, [r7, #20]
 80099be:	69ba      	ldr	r2, [r7, #24]
 80099c0:	e841 2300 	strex	r3, r2, [r1]
 80099c4:	613b      	str	r3, [r7, #16]
   return(result);
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d1e6      	bne.n	800999a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099cc:	e007      	b.n	80099de <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	699a      	ldr	r2, [r3, #24]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f042 0208 	orr.w	r2, r2, #8
 80099dc:	619a      	str	r2, [r3, #24]
}
 80099de:	bf00      	nop
 80099e0:	3798      	adds	r7, #152	; 0x98
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	08009433 	.word	0x08009433

080099ec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b0a8      	sub	sp, #160	; 0xa0
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80099fa:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	69db      	ldr	r3, [r3, #28]
 8009a04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a22:	2b22      	cmp	r3, #34	; 0x22
 8009a24:	f040 8153 	bne.w	8009cce <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a2e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a32:	e0fa      	b.n	8009c2a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009a46:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009a4a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009a4e:	4013      	ands	r3, r2
 8009a50:	b29a      	uxth	r2, r3
 8009a52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a5c:	1c9a      	adds	r2, r3, #2
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	69db      	ldr	r3, [r3, #28]
 8009a7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009a7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a82:	f003 0307 	and.w	r3, r3, #7
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d053      	beq.n	8009b32 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a8e:	f003 0301 	and.w	r3, r3, #1
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d011      	beq.n	8009aba <UART_RxISR_16BIT_FIFOEN+0xce>
 8009a96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00b      	beq.n	8009aba <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ab0:	f043 0201 	orr.w	r2, r3, #1
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009aba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009abe:	f003 0302 	and.w	r3, r3, #2
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d011      	beq.n	8009aea <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009ac6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009aca:	f003 0301 	and.w	r3, r3, #1
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00b      	beq.n	8009aea <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2202      	movs	r2, #2
 8009ad8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ae0:	f043 0204 	orr.w	r2, r3, #4
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009aea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009aee:	f003 0304 	and.w	r3, r3, #4
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d011      	beq.n	8009b1a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009af6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009afa:	f003 0301 	and.w	r3, r3, #1
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d00b      	beq.n	8009b1a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2204      	movs	r2, #4
 8009b08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b10:	f043 0202 	orr.w	r2, r3, #2
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d006      	beq.n	8009b32 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f7fe fdeb 	bl	8008700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d175      	bne.n	8009c2a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b46:	e853 3f00 	ldrex	r3, [r3]
 8009b4a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b62:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b64:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009b66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009b68:	e841 2300 	strex	r3, r2, [r1]
 8009b6c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009b6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1e4      	bne.n	8009b3e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	3308      	adds	r3, #8
 8009b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b7e:	e853 3f00 	ldrex	r3, [r3]
 8009b82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b8a:	f023 0301 	bic.w	r3, r3, #1
 8009b8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	3308      	adds	r3, #8
 8009b98:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009b9c:	65ba      	str	r2, [r7, #88]	; 0x58
 8009b9e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ba2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ba4:	e841 2300 	strex	r3, r2, [r1]
 8009ba8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d1e1      	bne.n	8009b74 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2220      	movs	r2, #32
 8009bb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d12e      	bne.n	8009c24 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd4:	e853 3f00 	ldrex	r3, [r3]
 8009bd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bdc:	f023 0310 	bic.w	r3, r3, #16
 8009be0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	461a      	mov	r2, r3
 8009be8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009bea:	647b      	str	r3, [r7, #68]	; 0x44
 8009bec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009bf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bf2:	e841 2300 	strex	r3, r2, [r1]
 8009bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d1e6      	bne.n	8009bcc <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	69db      	ldr	r3, [r3, #28]
 8009c04:	f003 0310 	and.w	r3, r3, #16
 8009c08:	2b10      	cmp	r3, #16
 8009c0a:	d103      	bne.n	8009c14 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2210      	movs	r2, #16
 8009c12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f7fe fd79 	bl	8008714 <HAL_UARTEx_RxEventCallback>
 8009c22:	e002      	b.n	8009c2a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f7f8 fcd9 	bl	80025dc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c2a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d006      	beq.n	8009c40 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009c32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c36:	f003 0320 	and.w	r3, r3, #32
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f47f aefa 	bne.w	8009a34 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c46:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009c4a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d045      	beq.n	8009cde <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c58:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d23e      	bcs.n	8009cde <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	3308      	adds	r3, #8
 8009c66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6a:	e853 3f00 	ldrex	r3, [r3]
 8009c6e:	623b      	str	r3, [r7, #32]
   return(result);
 8009c70:	6a3b      	ldr	r3, [r7, #32]
 8009c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c76:	677b      	str	r3, [r7, #116]	; 0x74
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	3308      	adds	r3, #8
 8009c7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009c80:	633a      	str	r2, [r7, #48]	; 0x30
 8009c82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c88:	e841 2300 	strex	r3, r2, [r1]
 8009c8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d1e5      	bne.n	8009c60 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4a14      	ldr	r2, [pc, #80]	; (8009ce8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009c98:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	e853 3f00 	ldrex	r3, [r3]
 8009ca6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f043 0320 	orr.w	r3, r3, #32
 8009cae:	673b      	str	r3, [r7, #112]	; 0x70
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cb8:	61fb      	str	r3, [r7, #28]
 8009cba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cbc:	69b9      	ldr	r1, [r7, #24]
 8009cbe:	69fa      	ldr	r2, [r7, #28]
 8009cc0:	e841 2300 	strex	r3, r2, [r1]
 8009cc4:	617b      	str	r3, [r7, #20]
   return(result);
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1e6      	bne.n	8009c9a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ccc:	e007      	b.n	8009cde <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	699a      	ldr	r2, [r3, #24]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f042 0208 	orr.w	r2, r2, #8
 8009cdc:	619a      	str	r2, [r3, #24]
}
 8009cde:	bf00      	nop
 8009ce0:	37a0      	adds	r7, #160	; 0xa0
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	08009593 	.word	0x08009593

08009cec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009d1c:	bf00      	nop
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d101      	bne.n	8009d3e <HAL_UARTEx_DisableFifoMode+0x16>
 8009d3a:	2302      	movs	r3, #2
 8009d3c:	e027      	b.n	8009d8e <HAL_UARTEx_DisableFifoMode+0x66>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2201      	movs	r2, #1
 8009d42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2224      	movs	r2, #36	; 0x24
 8009d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f022 0201 	bic.w	r2, r2, #1
 8009d64:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2220      	movs	r2, #32
 8009d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d8c:	2300      	movs	r3, #0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr

08009d9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b084      	sub	sp, #16
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
 8009da2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d101      	bne.n	8009db2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009dae:	2302      	movs	r3, #2
 8009db0:	e02d      	b.n	8009e0e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2201      	movs	r2, #1
 8009db6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2224      	movs	r2, #36	; 0x24
 8009dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f022 0201 	bic.w	r2, r2, #1
 8009dd8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	683a      	ldr	r2, [r7, #0]
 8009dea:	430a      	orrs	r2, r1
 8009dec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 f850 	bl	8009e94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2220      	movs	r2, #32
 8009e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b084      	sub	sp, #16
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d101      	bne.n	8009e2e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009e2a:	2302      	movs	r3, #2
 8009e2c:	e02d      	b.n	8009e8a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2201      	movs	r2, #1
 8009e32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2224      	movs	r2, #36	; 0x24
 8009e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f022 0201 	bic.w	r2, r2, #1
 8009e54:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	683a      	ldr	r2, [r7, #0]
 8009e66:	430a      	orrs	r2, r1
 8009e68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 f812 	bl	8009e94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2220      	movs	r2, #32
 8009e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
	...

08009e94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b085      	sub	sp, #20
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d108      	bne.n	8009eb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009eb4:	e031      	b.n	8009f1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009eb6:	2308      	movs	r3, #8
 8009eb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009eba:	2308      	movs	r3, #8
 8009ebc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	0e5b      	lsrs	r3, r3, #25
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	f003 0307 	and.w	r3, r3, #7
 8009ecc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	0f5b      	lsrs	r3, r3, #29
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	f003 0307 	and.w	r3, r3, #7
 8009edc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ede:	7bbb      	ldrb	r3, [r7, #14]
 8009ee0:	7b3a      	ldrb	r2, [r7, #12]
 8009ee2:	4911      	ldr	r1, [pc, #68]	; (8009f28 <UARTEx_SetNbDataToProcess+0x94>)
 8009ee4:	5c8a      	ldrb	r2, [r1, r2]
 8009ee6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009eea:	7b3a      	ldrb	r2, [r7, #12]
 8009eec:	490f      	ldr	r1, [pc, #60]	; (8009f2c <UARTEx_SetNbDataToProcess+0x98>)
 8009eee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ef0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ef4:	b29a      	uxth	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009efc:	7bfb      	ldrb	r3, [r7, #15]
 8009efe:	7b7a      	ldrb	r2, [r7, #13]
 8009f00:	4909      	ldr	r1, [pc, #36]	; (8009f28 <UARTEx_SetNbDataToProcess+0x94>)
 8009f02:	5c8a      	ldrb	r2, [r1, r2]
 8009f04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f08:	7b7a      	ldrb	r2, [r7, #13]
 8009f0a:	4908      	ldr	r1, [pc, #32]	; (8009f2c <UARTEx_SetNbDataToProcess+0x98>)
 8009f0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009f1a:	bf00      	nop
 8009f1c:	3714      	adds	r7, #20
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	0800b5b4 	.word	0x0800b5b4
 8009f2c:	0800b5bc 	.word	0x0800b5bc

08009f30 <atoi>:
 8009f30:	220a      	movs	r2, #10
 8009f32:	2100      	movs	r1, #0
 8009f34:	f000 b882 	b.w	800a03c <strtol>

08009f38 <_strtol_l.constprop.0>:
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f3e:	d001      	beq.n	8009f44 <_strtol_l.constprop.0+0xc>
 8009f40:	2b24      	cmp	r3, #36	; 0x24
 8009f42:	d906      	bls.n	8009f52 <_strtol_l.constprop.0+0x1a>
 8009f44:	f000 fa56 	bl	800a3f4 <__errno>
 8009f48:	2316      	movs	r3, #22
 8009f4a:	6003      	str	r3, [r0, #0]
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f52:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a038 <_strtol_l.constprop.0+0x100>
 8009f56:	460d      	mov	r5, r1
 8009f58:	462e      	mov	r6, r5
 8009f5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f5e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009f62:	f017 0708 	ands.w	r7, r7, #8
 8009f66:	d1f7      	bne.n	8009f58 <_strtol_l.constprop.0+0x20>
 8009f68:	2c2d      	cmp	r4, #45	; 0x2d
 8009f6a:	d132      	bne.n	8009fd2 <_strtol_l.constprop.0+0x9a>
 8009f6c:	782c      	ldrb	r4, [r5, #0]
 8009f6e:	2701      	movs	r7, #1
 8009f70:	1cb5      	adds	r5, r6, #2
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d05b      	beq.n	800a02e <_strtol_l.constprop.0+0xf6>
 8009f76:	2b10      	cmp	r3, #16
 8009f78:	d109      	bne.n	8009f8e <_strtol_l.constprop.0+0x56>
 8009f7a:	2c30      	cmp	r4, #48	; 0x30
 8009f7c:	d107      	bne.n	8009f8e <_strtol_l.constprop.0+0x56>
 8009f7e:	782c      	ldrb	r4, [r5, #0]
 8009f80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009f84:	2c58      	cmp	r4, #88	; 0x58
 8009f86:	d14d      	bne.n	800a024 <_strtol_l.constprop.0+0xec>
 8009f88:	786c      	ldrb	r4, [r5, #1]
 8009f8a:	2310      	movs	r3, #16
 8009f8c:	3502      	adds	r5, #2
 8009f8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009f92:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f96:	f04f 0e00 	mov.w	lr, #0
 8009f9a:	fbb8 f9f3 	udiv	r9, r8, r3
 8009f9e:	4676      	mov	r6, lr
 8009fa0:	fb03 8a19 	mls	sl, r3, r9, r8
 8009fa4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009fa8:	f1bc 0f09 	cmp.w	ip, #9
 8009fac:	d816      	bhi.n	8009fdc <_strtol_l.constprop.0+0xa4>
 8009fae:	4664      	mov	r4, ip
 8009fb0:	42a3      	cmp	r3, r4
 8009fb2:	dd24      	ble.n	8009ffe <_strtol_l.constprop.0+0xc6>
 8009fb4:	f1be 3fff 	cmp.w	lr, #4294967295
 8009fb8:	d008      	beq.n	8009fcc <_strtol_l.constprop.0+0x94>
 8009fba:	45b1      	cmp	r9, r6
 8009fbc:	d31c      	bcc.n	8009ff8 <_strtol_l.constprop.0+0xc0>
 8009fbe:	d101      	bne.n	8009fc4 <_strtol_l.constprop.0+0x8c>
 8009fc0:	45a2      	cmp	sl, r4
 8009fc2:	db19      	blt.n	8009ff8 <_strtol_l.constprop.0+0xc0>
 8009fc4:	fb06 4603 	mla	r6, r6, r3, r4
 8009fc8:	f04f 0e01 	mov.w	lr, #1
 8009fcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fd0:	e7e8      	b.n	8009fa4 <_strtol_l.constprop.0+0x6c>
 8009fd2:	2c2b      	cmp	r4, #43	; 0x2b
 8009fd4:	bf04      	itt	eq
 8009fd6:	782c      	ldrbeq	r4, [r5, #0]
 8009fd8:	1cb5      	addeq	r5, r6, #2
 8009fda:	e7ca      	b.n	8009f72 <_strtol_l.constprop.0+0x3a>
 8009fdc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009fe0:	f1bc 0f19 	cmp.w	ip, #25
 8009fe4:	d801      	bhi.n	8009fea <_strtol_l.constprop.0+0xb2>
 8009fe6:	3c37      	subs	r4, #55	; 0x37
 8009fe8:	e7e2      	b.n	8009fb0 <_strtol_l.constprop.0+0x78>
 8009fea:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009fee:	f1bc 0f19 	cmp.w	ip, #25
 8009ff2:	d804      	bhi.n	8009ffe <_strtol_l.constprop.0+0xc6>
 8009ff4:	3c57      	subs	r4, #87	; 0x57
 8009ff6:	e7db      	b.n	8009fb0 <_strtol_l.constprop.0+0x78>
 8009ff8:	f04f 3eff 	mov.w	lr, #4294967295
 8009ffc:	e7e6      	b.n	8009fcc <_strtol_l.constprop.0+0x94>
 8009ffe:	f1be 3fff 	cmp.w	lr, #4294967295
 800a002:	d105      	bne.n	800a010 <_strtol_l.constprop.0+0xd8>
 800a004:	2322      	movs	r3, #34	; 0x22
 800a006:	6003      	str	r3, [r0, #0]
 800a008:	4646      	mov	r6, r8
 800a00a:	b942      	cbnz	r2, 800a01e <_strtol_l.constprop.0+0xe6>
 800a00c:	4630      	mov	r0, r6
 800a00e:	e79e      	b.n	8009f4e <_strtol_l.constprop.0+0x16>
 800a010:	b107      	cbz	r7, 800a014 <_strtol_l.constprop.0+0xdc>
 800a012:	4276      	negs	r6, r6
 800a014:	2a00      	cmp	r2, #0
 800a016:	d0f9      	beq.n	800a00c <_strtol_l.constprop.0+0xd4>
 800a018:	f1be 0f00 	cmp.w	lr, #0
 800a01c:	d000      	beq.n	800a020 <_strtol_l.constprop.0+0xe8>
 800a01e:	1e69      	subs	r1, r5, #1
 800a020:	6011      	str	r1, [r2, #0]
 800a022:	e7f3      	b.n	800a00c <_strtol_l.constprop.0+0xd4>
 800a024:	2430      	movs	r4, #48	; 0x30
 800a026:	2b00      	cmp	r3, #0
 800a028:	d1b1      	bne.n	8009f8e <_strtol_l.constprop.0+0x56>
 800a02a:	2308      	movs	r3, #8
 800a02c:	e7af      	b.n	8009f8e <_strtol_l.constprop.0+0x56>
 800a02e:	2c30      	cmp	r4, #48	; 0x30
 800a030:	d0a5      	beq.n	8009f7e <_strtol_l.constprop.0+0x46>
 800a032:	230a      	movs	r3, #10
 800a034:	e7ab      	b.n	8009f8e <_strtol_l.constprop.0+0x56>
 800a036:	bf00      	nop
 800a038:	0800b5c5 	.word	0x0800b5c5

0800a03c <strtol>:
 800a03c:	4613      	mov	r3, r2
 800a03e:	460a      	mov	r2, r1
 800a040:	4601      	mov	r1, r0
 800a042:	4802      	ldr	r0, [pc, #8]	; (800a04c <strtol+0x10>)
 800a044:	6800      	ldr	r0, [r0, #0]
 800a046:	f7ff bf77 	b.w	8009f38 <_strtol_l.constprop.0>
 800a04a:	bf00      	nop
 800a04c:	2000012c 	.word	0x2000012c

0800a050 <std>:
 800a050:	2300      	movs	r3, #0
 800a052:	b510      	push	{r4, lr}
 800a054:	4604      	mov	r4, r0
 800a056:	e9c0 3300 	strd	r3, r3, [r0]
 800a05a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a05e:	6083      	str	r3, [r0, #8]
 800a060:	8181      	strh	r1, [r0, #12]
 800a062:	6643      	str	r3, [r0, #100]	; 0x64
 800a064:	81c2      	strh	r2, [r0, #14]
 800a066:	6183      	str	r3, [r0, #24]
 800a068:	4619      	mov	r1, r3
 800a06a:	2208      	movs	r2, #8
 800a06c:	305c      	adds	r0, #92	; 0x5c
 800a06e:	f000 f916 	bl	800a29e <memset>
 800a072:	4b05      	ldr	r3, [pc, #20]	; (800a088 <std+0x38>)
 800a074:	6263      	str	r3, [r4, #36]	; 0x24
 800a076:	4b05      	ldr	r3, [pc, #20]	; (800a08c <std+0x3c>)
 800a078:	62a3      	str	r3, [r4, #40]	; 0x28
 800a07a:	4b05      	ldr	r3, [pc, #20]	; (800a090 <std+0x40>)
 800a07c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a07e:	4b05      	ldr	r3, [pc, #20]	; (800a094 <std+0x44>)
 800a080:	6224      	str	r4, [r4, #32]
 800a082:	6323      	str	r3, [r4, #48]	; 0x30
 800a084:	bd10      	pop	{r4, pc}
 800a086:	bf00      	nop
 800a088:	0800a219 	.word	0x0800a219
 800a08c:	0800a23b 	.word	0x0800a23b
 800a090:	0800a273 	.word	0x0800a273
 800a094:	0800a297 	.word	0x0800a297

0800a098 <stdio_exit_handler>:
 800a098:	4a02      	ldr	r2, [pc, #8]	; (800a0a4 <stdio_exit_handler+0xc>)
 800a09a:	4903      	ldr	r1, [pc, #12]	; (800a0a8 <stdio_exit_handler+0x10>)
 800a09c:	4803      	ldr	r0, [pc, #12]	; (800a0ac <stdio_exit_handler+0x14>)
 800a09e:	f000 b869 	b.w	800a174 <_fwalk_sglue>
 800a0a2:	bf00      	nop
 800a0a4:	200000d4 	.word	0x200000d4
 800a0a8:	0800ad65 	.word	0x0800ad65
 800a0ac:	200000e0 	.word	0x200000e0

0800a0b0 <cleanup_stdio>:
 800a0b0:	6841      	ldr	r1, [r0, #4]
 800a0b2:	4b0c      	ldr	r3, [pc, #48]	; (800a0e4 <cleanup_stdio+0x34>)
 800a0b4:	4299      	cmp	r1, r3
 800a0b6:	b510      	push	{r4, lr}
 800a0b8:	4604      	mov	r4, r0
 800a0ba:	d001      	beq.n	800a0c0 <cleanup_stdio+0x10>
 800a0bc:	f000 fe52 	bl	800ad64 <_fflush_r>
 800a0c0:	68a1      	ldr	r1, [r4, #8]
 800a0c2:	4b09      	ldr	r3, [pc, #36]	; (800a0e8 <cleanup_stdio+0x38>)
 800a0c4:	4299      	cmp	r1, r3
 800a0c6:	d002      	beq.n	800a0ce <cleanup_stdio+0x1e>
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	f000 fe4b 	bl	800ad64 <_fflush_r>
 800a0ce:	68e1      	ldr	r1, [r4, #12]
 800a0d0:	4b06      	ldr	r3, [pc, #24]	; (800a0ec <cleanup_stdio+0x3c>)
 800a0d2:	4299      	cmp	r1, r3
 800a0d4:	d004      	beq.n	800a0e0 <cleanup_stdio+0x30>
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0dc:	f000 be42 	b.w	800ad64 <_fflush_r>
 800a0e0:	bd10      	pop	{r4, pc}
 800a0e2:	bf00      	nop
 800a0e4:	20000570 	.word	0x20000570
 800a0e8:	200005d8 	.word	0x200005d8
 800a0ec:	20000640 	.word	0x20000640

0800a0f0 <global_stdio_init.part.0>:
 800a0f0:	b510      	push	{r4, lr}
 800a0f2:	4b0b      	ldr	r3, [pc, #44]	; (800a120 <global_stdio_init.part.0+0x30>)
 800a0f4:	4c0b      	ldr	r4, [pc, #44]	; (800a124 <global_stdio_init.part.0+0x34>)
 800a0f6:	4a0c      	ldr	r2, [pc, #48]	; (800a128 <global_stdio_init.part.0+0x38>)
 800a0f8:	601a      	str	r2, [r3, #0]
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	2104      	movs	r1, #4
 800a100:	f7ff ffa6 	bl	800a050 <std>
 800a104:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a108:	2201      	movs	r2, #1
 800a10a:	2109      	movs	r1, #9
 800a10c:	f7ff ffa0 	bl	800a050 <std>
 800a110:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a114:	2202      	movs	r2, #2
 800a116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a11a:	2112      	movs	r1, #18
 800a11c:	f7ff bf98 	b.w	800a050 <std>
 800a120:	200006a8 	.word	0x200006a8
 800a124:	20000570 	.word	0x20000570
 800a128:	0800a099 	.word	0x0800a099

0800a12c <__sfp_lock_acquire>:
 800a12c:	4801      	ldr	r0, [pc, #4]	; (800a134 <__sfp_lock_acquire+0x8>)
 800a12e:	f000 b98b 	b.w	800a448 <__retarget_lock_acquire_recursive>
 800a132:	bf00      	nop
 800a134:	200006b1 	.word	0x200006b1

0800a138 <__sfp_lock_release>:
 800a138:	4801      	ldr	r0, [pc, #4]	; (800a140 <__sfp_lock_release+0x8>)
 800a13a:	f000 b986 	b.w	800a44a <__retarget_lock_release_recursive>
 800a13e:	bf00      	nop
 800a140:	200006b1 	.word	0x200006b1

0800a144 <__sinit>:
 800a144:	b510      	push	{r4, lr}
 800a146:	4604      	mov	r4, r0
 800a148:	f7ff fff0 	bl	800a12c <__sfp_lock_acquire>
 800a14c:	6a23      	ldr	r3, [r4, #32]
 800a14e:	b11b      	cbz	r3, 800a158 <__sinit+0x14>
 800a150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a154:	f7ff bff0 	b.w	800a138 <__sfp_lock_release>
 800a158:	4b04      	ldr	r3, [pc, #16]	; (800a16c <__sinit+0x28>)
 800a15a:	6223      	str	r3, [r4, #32]
 800a15c:	4b04      	ldr	r3, [pc, #16]	; (800a170 <__sinit+0x2c>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d1f5      	bne.n	800a150 <__sinit+0xc>
 800a164:	f7ff ffc4 	bl	800a0f0 <global_stdio_init.part.0>
 800a168:	e7f2      	b.n	800a150 <__sinit+0xc>
 800a16a:	bf00      	nop
 800a16c:	0800a0b1 	.word	0x0800a0b1
 800a170:	200006a8 	.word	0x200006a8

0800a174 <_fwalk_sglue>:
 800a174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a178:	4607      	mov	r7, r0
 800a17a:	4688      	mov	r8, r1
 800a17c:	4614      	mov	r4, r2
 800a17e:	2600      	movs	r6, #0
 800a180:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a184:	f1b9 0901 	subs.w	r9, r9, #1
 800a188:	d505      	bpl.n	800a196 <_fwalk_sglue+0x22>
 800a18a:	6824      	ldr	r4, [r4, #0]
 800a18c:	2c00      	cmp	r4, #0
 800a18e:	d1f7      	bne.n	800a180 <_fwalk_sglue+0xc>
 800a190:	4630      	mov	r0, r6
 800a192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a196:	89ab      	ldrh	r3, [r5, #12]
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d907      	bls.n	800a1ac <_fwalk_sglue+0x38>
 800a19c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	d003      	beq.n	800a1ac <_fwalk_sglue+0x38>
 800a1a4:	4629      	mov	r1, r5
 800a1a6:	4638      	mov	r0, r7
 800a1a8:	47c0      	blx	r8
 800a1aa:	4306      	orrs	r6, r0
 800a1ac:	3568      	adds	r5, #104	; 0x68
 800a1ae:	e7e9      	b.n	800a184 <_fwalk_sglue+0x10>

0800a1b0 <sniprintf>:
 800a1b0:	b40c      	push	{r2, r3}
 800a1b2:	b530      	push	{r4, r5, lr}
 800a1b4:	4b17      	ldr	r3, [pc, #92]	; (800a214 <sniprintf+0x64>)
 800a1b6:	1e0c      	subs	r4, r1, #0
 800a1b8:	681d      	ldr	r5, [r3, #0]
 800a1ba:	b09d      	sub	sp, #116	; 0x74
 800a1bc:	da08      	bge.n	800a1d0 <sniprintf+0x20>
 800a1be:	238b      	movs	r3, #139	; 0x8b
 800a1c0:	602b      	str	r3, [r5, #0]
 800a1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c6:	b01d      	add	sp, #116	; 0x74
 800a1c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1cc:	b002      	add	sp, #8
 800a1ce:	4770      	bx	lr
 800a1d0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a1d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a1d8:	bf14      	ite	ne
 800a1da:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a1de:	4623      	moveq	r3, r4
 800a1e0:	9304      	str	r3, [sp, #16]
 800a1e2:	9307      	str	r3, [sp, #28]
 800a1e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a1e8:	9002      	str	r0, [sp, #8]
 800a1ea:	9006      	str	r0, [sp, #24]
 800a1ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a1f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a1f2:	ab21      	add	r3, sp, #132	; 0x84
 800a1f4:	a902      	add	r1, sp, #8
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	9301      	str	r3, [sp, #4]
 800a1fa:	f000 fa9f 	bl	800a73c <_svfiprintf_r>
 800a1fe:	1c43      	adds	r3, r0, #1
 800a200:	bfbc      	itt	lt
 800a202:	238b      	movlt	r3, #139	; 0x8b
 800a204:	602b      	strlt	r3, [r5, #0]
 800a206:	2c00      	cmp	r4, #0
 800a208:	d0dd      	beq.n	800a1c6 <sniprintf+0x16>
 800a20a:	9b02      	ldr	r3, [sp, #8]
 800a20c:	2200      	movs	r2, #0
 800a20e:	701a      	strb	r2, [r3, #0]
 800a210:	e7d9      	b.n	800a1c6 <sniprintf+0x16>
 800a212:	bf00      	nop
 800a214:	2000012c 	.word	0x2000012c

0800a218 <__sread>:
 800a218:	b510      	push	{r4, lr}
 800a21a:	460c      	mov	r4, r1
 800a21c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a220:	f000 f8c4 	bl	800a3ac <_read_r>
 800a224:	2800      	cmp	r0, #0
 800a226:	bfab      	itete	ge
 800a228:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a22a:	89a3      	ldrhlt	r3, [r4, #12]
 800a22c:	181b      	addge	r3, r3, r0
 800a22e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a232:	bfac      	ite	ge
 800a234:	6563      	strge	r3, [r4, #84]	; 0x54
 800a236:	81a3      	strhlt	r3, [r4, #12]
 800a238:	bd10      	pop	{r4, pc}

0800a23a <__swrite>:
 800a23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a23e:	461f      	mov	r7, r3
 800a240:	898b      	ldrh	r3, [r1, #12]
 800a242:	05db      	lsls	r3, r3, #23
 800a244:	4605      	mov	r5, r0
 800a246:	460c      	mov	r4, r1
 800a248:	4616      	mov	r6, r2
 800a24a:	d505      	bpl.n	800a258 <__swrite+0x1e>
 800a24c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a250:	2302      	movs	r3, #2
 800a252:	2200      	movs	r2, #0
 800a254:	f000 f898 	bl	800a388 <_lseek_r>
 800a258:	89a3      	ldrh	r3, [r4, #12]
 800a25a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a25e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a262:	81a3      	strh	r3, [r4, #12]
 800a264:	4632      	mov	r2, r6
 800a266:	463b      	mov	r3, r7
 800a268:	4628      	mov	r0, r5
 800a26a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a26e:	f000 b8af 	b.w	800a3d0 <_write_r>

0800a272 <__sseek>:
 800a272:	b510      	push	{r4, lr}
 800a274:	460c      	mov	r4, r1
 800a276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a27a:	f000 f885 	bl	800a388 <_lseek_r>
 800a27e:	1c43      	adds	r3, r0, #1
 800a280:	89a3      	ldrh	r3, [r4, #12]
 800a282:	bf15      	itete	ne
 800a284:	6560      	strne	r0, [r4, #84]	; 0x54
 800a286:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a28a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a28e:	81a3      	strheq	r3, [r4, #12]
 800a290:	bf18      	it	ne
 800a292:	81a3      	strhne	r3, [r4, #12]
 800a294:	bd10      	pop	{r4, pc}

0800a296 <__sclose>:
 800a296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a29a:	f000 b865 	b.w	800a368 <_close_r>

0800a29e <memset>:
 800a29e:	4402      	add	r2, r0
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d100      	bne.n	800a2a8 <memset+0xa>
 800a2a6:	4770      	bx	lr
 800a2a8:	f803 1b01 	strb.w	r1, [r3], #1
 800a2ac:	e7f9      	b.n	800a2a2 <memset+0x4>
	...

0800a2b0 <strtok>:
 800a2b0:	4b16      	ldr	r3, [pc, #88]	; (800a30c <strtok+0x5c>)
 800a2b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2b4:	681e      	ldr	r6, [r3, #0]
 800a2b6:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800a2b8:	4605      	mov	r5, r0
 800a2ba:	b9fc      	cbnz	r4, 800a2fc <strtok+0x4c>
 800a2bc:	2050      	movs	r0, #80	; 0x50
 800a2be:	9101      	str	r1, [sp, #4]
 800a2c0:	f000 f92e 	bl	800a520 <malloc>
 800a2c4:	9901      	ldr	r1, [sp, #4]
 800a2c6:	6470      	str	r0, [r6, #68]	; 0x44
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	b920      	cbnz	r0, 800a2d6 <strtok+0x26>
 800a2cc:	4b10      	ldr	r3, [pc, #64]	; (800a310 <strtok+0x60>)
 800a2ce:	4811      	ldr	r0, [pc, #68]	; (800a314 <strtok+0x64>)
 800a2d0:	215b      	movs	r1, #91	; 0x5b
 800a2d2:	f000 f8bb 	bl	800a44c <__assert_func>
 800a2d6:	e9c0 4400 	strd	r4, r4, [r0]
 800a2da:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a2de:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a2e2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a2e6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a2ea:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a2ee:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a2f2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a2f6:	6184      	str	r4, [r0, #24]
 800a2f8:	7704      	strb	r4, [r0, #28]
 800a2fa:	6244      	str	r4, [r0, #36]	; 0x24
 800a2fc:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800a2fe:	2301      	movs	r3, #1
 800a300:	4628      	mov	r0, r5
 800a302:	b002      	add	sp, #8
 800a304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a308:	f000 b806 	b.w	800a318 <__strtok_r>
 800a30c:	2000012c 	.word	0x2000012c
 800a310:	0800b6c5 	.word	0x0800b6c5
 800a314:	0800b6dc 	.word	0x0800b6dc

0800a318 <__strtok_r>:
 800a318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a31a:	b908      	cbnz	r0, 800a320 <__strtok_r+0x8>
 800a31c:	6810      	ldr	r0, [r2, #0]
 800a31e:	b188      	cbz	r0, 800a344 <__strtok_r+0x2c>
 800a320:	4604      	mov	r4, r0
 800a322:	4620      	mov	r0, r4
 800a324:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a328:	460f      	mov	r7, r1
 800a32a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a32e:	b91e      	cbnz	r6, 800a338 <__strtok_r+0x20>
 800a330:	b965      	cbnz	r5, 800a34c <__strtok_r+0x34>
 800a332:	6015      	str	r5, [r2, #0]
 800a334:	4628      	mov	r0, r5
 800a336:	e005      	b.n	800a344 <__strtok_r+0x2c>
 800a338:	42b5      	cmp	r5, r6
 800a33a:	d1f6      	bne.n	800a32a <__strtok_r+0x12>
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d1f0      	bne.n	800a322 <__strtok_r+0xa>
 800a340:	6014      	str	r4, [r2, #0]
 800a342:	7003      	strb	r3, [r0, #0]
 800a344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a346:	461c      	mov	r4, r3
 800a348:	e00c      	b.n	800a364 <__strtok_r+0x4c>
 800a34a:	b915      	cbnz	r5, 800a352 <__strtok_r+0x3a>
 800a34c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a350:	460e      	mov	r6, r1
 800a352:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a356:	42ab      	cmp	r3, r5
 800a358:	d1f7      	bne.n	800a34a <__strtok_r+0x32>
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d0f3      	beq.n	800a346 <__strtok_r+0x2e>
 800a35e:	2300      	movs	r3, #0
 800a360:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a364:	6014      	str	r4, [r2, #0]
 800a366:	e7ed      	b.n	800a344 <__strtok_r+0x2c>

0800a368 <_close_r>:
 800a368:	b538      	push	{r3, r4, r5, lr}
 800a36a:	4d06      	ldr	r5, [pc, #24]	; (800a384 <_close_r+0x1c>)
 800a36c:	2300      	movs	r3, #0
 800a36e:	4604      	mov	r4, r0
 800a370:	4608      	mov	r0, r1
 800a372:	602b      	str	r3, [r5, #0]
 800a374:	f7f7 fa5d 	bl	8001832 <_close>
 800a378:	1c43      	adds	r3, r0, #1
 800a37a:	d102      	bne.n	800a382 <_close_r+0x1a>
 800a37c:	682b      	ldr	r3, [r5, #0]
 800a37e:	b103      	cbz	r3, 800a382 <_close_r+0x1a>
 800a380:	6023      	str	r3, [r4, #0]
 800a382:	bd38      	pop	{r3, r4, r5, pc}
 800a384:	200006ac 	.word	0x200006ac

0800a388 <_lseek_r>:
 800a388:	b538      	push	{r3, r4, r5, lr}
 800a38a:	4d07      	ldr	r5, [pc, #28]	; (800a3a8 <_lseek_r+0x20>)
 800a38c:	4604      	mov	r4, r0
 800a38e:	4608      	mov	r0, r1
 800a390:	4611      	mov	r1, r2
 800a392:	2200      	movs	r2, #0
 800a394:	602a      	str	r2, [r5, #0]
 800a396:	461a      	mov	r2, r3
 800a398:	f7f7 fa72 	bl	8001880 <_lseek>
 800a39c:	1c43      	adds	r3, r0, #1
 800a39e:	d102      	bne.n	800a3a6 <_lseek_r+0x1e>
 800a3a0:	682b      	ldr	r3, [r5, #0]
 800a3a2:	b103      	cbz	r3, 800a3a6 <_lseek_r+0x1e>
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	bd38      	pop	{r3, r4, r5, pc}
 800a3a8:	200006ac 	.word	0x200006ac

0800a3ac <_read_r>:
 800a3ac:	b538      	push	{r3, r4, r5, lr}
 800a3ae:	4d07      	ldr	r5, [pc, #28]	; (800a3cc <_read_r+0x20>)
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	4608      	mov	r0, r1
 800a3b4:	4611      	mov	r1, r2
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	602a      	str	r2, [r5, #0]
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	f7f7 fa00 	bl	80017c0 <_read>
 800a3c0:	1c43      	adds	r3, r0, #1
 800a3c2:	d102      	bne.n	800a3ca <_read_r+0x1e>
 800a3c4:	682b      	ldr	r3, [r5, #0]
 800a3c6:	b103      	cbz	r3, 800a3ca <_read_r+0x1e>
 800a3c8:	6023      	str	r3, [r4, #0]
 800a3ca:	bd38      	pop	{r3, r4, r5, pc}
 800a3cc:	200006ac 	.word	0x200006ac

0800a3d0 <_write_r>:
 800a3d0:	b538      	push	{r3, r4, r5, lr}
 800a3d2:	4d07      	ldr	r5, [pc, #28]	; (800a3f0 <_write_r+0x20>)
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	4608      	mov	r0, r1
 800a3d8:	4611      	mov	r1, r2
 800a3da:	2200      	movs	r2, #0
 800a3dc:	602a      	str	r2, [r5, #0]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	f7f7 fa0b 	bl	80017fa <_write>
 800a3e4:	1c43      	adds	r3, r0, #1
 800a3e6:	d102      	bne.n	800a3ee <_write_r+0x1e>
 800a3e8:	682b      	ldr	r3, [r5, #0]
 800a3ea:	b103      	cbz	r3, 800a3ee <_write_r+0x1e>
 800a3ec:	6023      	str	r3, [r4, #0]
 800a3ee:	bd38      	pop	{r3, r4, r5, pc}
 800a3f0:	200006ac 	.word	0x200006ac

0800a3f4 <__errno>:
 800a3f4:	4b01      	ldr	r3, [pc, #4]	; (800a3fc <__errno+0x8>)
 800a3f6:	6818      	ldr	r0, [r3, #0]
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	2000012c 	.word	0x2000012c

0800a400 <__libc_init_array>:
 800a400:	b570      	push	{r4, r5, r6, lr}
 800a402:	4d0d      	ldr	r5, [pc, #52]	; (800a438 <__libc_init_array+0x38>)
 800a404:	4c0d      	ldr	r4, [pc, #52]	; (800a43c <__libc_init_array+0x3c>)
 800a406:	1b64      	subs	r4, r4, r5
 800a408:	10a4      	asrs	r4, r4, #2
 800a40a:	2600      	movs	r6, #0
 800a40c:	42a6      	cmp	r6, r4
 800a40e:	d109      	bne.n	800a424 <__libc_init_array+0x24>
 800a410:	4d0b      	ldr	r5, [pc, #44]	; (800a440 <__libc_init_array+0x40>)
 800a412:	4c0c      	ldr	r4, [pc, #48]	; (800a444 <__libc_init_array+0x44>)
 800a414:	f000 fff8 	bl	800b408 <_init>
 800a418:	1b64      	subs	r4, r4, r5
 800a41a:	10a4      	asrs	r4, r4, #2
 800a41c:	2600      	movs	r6, #0
 800a41e:	42a6      	cmp	r6, r4
 800a420:	d105      	bne.n	800a42e <__libc_init_array+0x2e>
 800a422:	bd70      	pop	{r4, r5, r6, pc}
 800a424:	f855 3b04 	ldr.w	r3, [r5], #4
 800a428:	4798      	blx	r3
 800a42a:	3601      	adds	r6, #1
 800a42c:	e7ee      	b.n	800a40c <__libc_init_array+0xc>
 800a42e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a432:	4798      	blx	r3
 800a434:	3601      	adds	r6, #1
 800a436:	e7f2      	b.n	800a41e <__libc_init_array+0x1e>
 800a438:	0800b7b0 	.word	0x0800b7b0
 800a43c:	0800b7b0 	.word	0x0800b7b0
 800a440:	0800b7b0 	.word	0x0800b7b0
 800a444:	0800b7b4 	.word	0x0800b7b4

0800a448 <__retarget_lock_acquire_recursive>:
 800a448:	4770      	bx	lr

0800a44a <__retarget_lock_release_recursive>:
 800a44a:	4770      	bx	lr

0800a44c <__assert_func>:
 800a44c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a44e:	4614      	mov	r4, r2
 800a450:	461a      	mov	r2, r3
 800a452:	4b09      	ldr	r3, [pc, #36]	; (800a478 <__assert_func+0x2c>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4605      	mov	r5, r0
 800a458:	68d8      	ldr	r0, [r3, #12]
 800a45a:	b14c      	cbz	r4, 800a470 <__assert_func+0x24>
 800a45c:	4b07      	ldr	r3, [pc, #28]	; (800a47c <__assert_func+0x30>)
 800a45e:	9100      	str	r1, [sp, #0]
 800a460:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a464:	4906      	ldr	r1, [pc, #24]	; (800a480 <__assert_func+0x34>)
 800a466:	462b      	mov	r3, r5
 800a468:	f000 fca4 	bl	800adb4 <fiprintf>
 800a46c:	f000 fcec 	bl	800ae48 <abort>
 800a470:	4b04      	ldr	r3, [pc, #16]	; (800a484 <__assert_func+0x38>)
 800a472:	461c      	mov	r4, r3
 800a474:	e7f3      	b.n	800a45e <__assert_func+0x12>
 800a476:	bf00      	nop
 800a478:	2000012c 	.word	0x2000012c
 800a47c:	0800b736 	.word	0x0800b736
 800a480:	0800b743 	.word	0x0800b743
 800a484:	0800b771 	.word	0x0800b771

0800a488 <_free_r>:
 800a488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a48a:	2900      	cmp	r1, #0
 800a48c:	d044      	beq.n	800a518 <_free_r+0x90>
 800a48e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a492:	9001      	str	r0, [sp, #4]
 800a494:	2b00      	cmp	r3, #0
 800a496:	f1a1 0404 	sub.w	r4, r1, #4
 800a49a:	bfb8      	it	lt
 800a49c:	18e4      	addlt	r4, r4, r3
 800a49e:	f000 f8e7 	bl	800a670 <__malloc_lock>
 800a4a2:	4a1e      	ldr	r2, [pc, #120]	; (800a51c <_free_r+0x94>)
 800a4a4:	9801      	ldr	r0, [sp, #4]
 800a4a6:	6813      	ldr	r3, [r2, #0]
 800a4a8:	b933      	cbnz	r3, 800a4b8 <_free_r+0x30>
 800a4aa:	6063      	str	r3, [r4, #4]
 800a4ac:	6014      	str	r4, [r2, #0]
 800a4ae:	b003      	add	sp, #12
 800a4b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4b4:	f000 b8e2 	b.w	800a67c <__malloc_unlock>
 800a4b8:	42a3      	cmp	r3, r4
 800a4ba:	d908      	bls.n	800a4ce <_free_r+0x46>
 800a4bc:	6825      	ldr	r5, [r4, #0]
 800a4be:	1961      	adds	r1, r4, r5
 800a4c0:	428b      	cmp	r3, r1
 800a4c2:	bf01      	itttt	eq
 800a4c4:	6819      	ldreq	r1, [r3, #0]
 800a4c6:	685b      	ldreq	r3, [r3, #4]
 800a4c8:	1949      	addeq	r1, r1, r5
 800a4ca:	6021      	streq	r1, [r4, #0]
 800a4cc:	e7ed      	b.n	800a4aa <_free_r+0x22>
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	b10b      	cbz	r3, 800a4d8 <_free_r+0x50>
 800a4d4:	42a3      	cmp	r3, r4
 800a4d6:	d9fa      	bls.n	800a4ce <_free_r+0x46>
 800a4d8:	6811      	ldr	r1, [r2, #0]
 800a4da:	1855      	adds	r5, r2, r1
 800a4dc:	42a5      	cmp	r5, r4
 800a4de:	d10b      	bne.n	800a4f8 <_free_r+0x70>
 800a4e0:	6824      	ldr	r4, [r4, #0]
 800a4e2:	4421      	add	r1, r4
 800a4e4:	1854      	adds	r4, r2, r1
 800a4e6:	42a3      	cmp	r3, r4
 800a4e8:	6011      	str	r1, [r2, #0]
 800a4ea:	d1e0      	bne.n	800a4ae <_free_r+0x26>
 800a4ec:	681c      	ldr	r4, [r3, #0]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	6053      	str	r3, [r2, #4]
 800a4f2:	440c      	add	r4, r1
 800a4f4:	6014      	str	r4, [r2, #0]
 800a4f6:	e7da      	b.n	800a4ae <_free_r+0x26>
 800a4f8:	d902      	bls.n	800a500 <_free_r+0x78>
 800a4fa:	230c      	movs	r3, #12
 800a4fc:	6003      	str	r3, [r0, #0]
 800a4fe:	e7d6      	b.n	800a4ae <_free_r+0x26>
 800a500:	6825      	ldr	r5, [r4, #0]
 800a502:	1961      	adds	r1, r4, r5
 800a504:	428b      	cmp	r3, r1
 800a506:	bf04      	itt	eq
 800a508:	6819      	ldreq	r1, [r3, #0]
 800a50a:	685b      	ldreq	r3, [r3, #4]
 800a50c:	6063      	str	r3, [r4, #4]
 800a50e:	bf04      	itt	eq
 800a510:	1949      	addeq	r1, r1, r5
 800a512:	6021      	streq	r1, [r4, #0]
 800a514:	6054      	str	r4, [r2, #4]
 800a516:	e7ca      	b.n	800a4ae <_free_r+0x26>
 800a518:	b003      	add	sp, #12
 800a51a:	bd30      	pop	{r4, r5, pc}
 800a51c:	200006b4 	.word	0x200006b4

0800a520 <malloc>:
 800a520:	4b02      	ldr	r3, [pc, #8]	; (800a52c <malloc+0xc>)
 800a522:	4601      	mov	r1, r0
 800a524:	6818      	ldr	r0, [r3, #0]
 800a526:	f000 b823 	b.w	800a570 <_malloc_r>
 800a52a:	bf00      	nop
 800a52c:	2000012c 	.word	0x2000012c

0800a530 <sbrk_aligned>:
 800a530:	b570      	push	{r4, r5, r6, lr}
 800a532:	4e0e      	ldr	r6, [pc, #56]	; (800a56c <sbrk_aligned+0x3c>)
 800a534:	460c      	mov	r4, r1
 800a536:	6831      	ldr	r1, [r6, #0]
 800a538:	4605      	mov	r5, r0
 800a53a:	b911      	cbnz	r1, 800a542 <sbrk_aligned+0x12>
 800a53c:	f000 fc66 	bl	800ae0c <_sbrk_r>
 800a540:	6030      	str	r0, [r6, #0]
 800a542:	4621      	mov	r1, r4
 800a544:	4628      	mov	r0, r5
 800a546:	f000 fc61 	bl	800ae0c <_sbrk_r>
 800a54a:	1c43      	adds	r3, r0, #1
 800a54c:	d00a      	beq.n	800a564 <sbrk_aligned+0x34>
 800a54e:	1cc4      	adds	r4, r0, #3
 800a550:	f024 0403 	bic.w	r4, r4, #3
 800a554:	42a0      	cmp	r0, r4
 800a556:	d007      	beq.n	800a568 <sbrk_aligned+0x38>
 800a558:	1a21      	subs	r1, r4, r0
 800a55a:	4628      	mov	r0, r5
 800a55c:	f000 fc56 	bl	800ae0c <_sbrk_r>
 800a560:	3001      	adds	r0, #1
 800a562:	d101      	bne.n	800a568 <sbrk_aligned+0x38>
 800a564:	f04f 34ff 	mov.w	r4, #4294967295
 800a568:	4620      	mov	r0, r4
 800a56a:	bd70      	pop	{r4, r5, r6, pc}
 800a56c:	200006b8 	.word	0x200006b8

0800a570 <_malloc_r>:
 800a570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a574:	1ccd      	adds	r5, r1, #3
 800a576:	f025 0503 	bic.w	r5, r5, #3
 800a57a:	3508      	adds	r5, #8
 800a57c:	2d0c      	cmp	r5, #12
 800a57e:	bf38      	it	cc
 800a580:	250c      	movcc	r5, #12
 800a582:	2d00      	cmp	r5, #0
 800a584:	4607      	mov	r7, r0
 800a586:	db01      	blt.n	800a58c <_malloc_r+0x1c>
 800a588:	42a9      	cmp	r1, r5
 800a58a:	d905      	bls.n	800a598 <_malloc_r+0x28>
 800a58c:	230c      	movs	r3, #12
 800a58e:	603b      	str	r3, [r7, #0]
 800a590:	2600      	movs	r6, #0
 800a592:	4630      	mov	r0, r6
 800a594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a598:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a66c <_malloc_r+0xfc>
 800a59c:	f000 f868 	bl	800a670 <__malloc_lock>
 800a5a0:	f8d8 3000 	ldr.w	r3, [r8]
 800a5a4:	461c      	mov	r4, r3
 800a5a6:	bb5c      	cbnz	r4, 800a600 <_malloc_r+0x90>
 800a5a8:	4629      	mov	r1, r5
 800a5aa:	4638      	mov	r0, r7
 800a5ac:	f7ff ffc0 	bl	800a530 <sbrk_aligned>
 800a5b0:	1c43      	adds	r3, r0, #1
 800a5b2:	4604      	mov	r4, r0
 800a5b4:	d155      	bne.n	800a662 <_malloc_r+0xf2>
 800a5b6:	f8d8 4000 	ldr.w	r4, [r8]
 800a5ba:	4626      	mov	r6, r4
 800a5bc:	2e00      	cmp	r6, #0
 800a5be:	d145      	bne.n	800a64c <_malloc_r+0xdc>
 800a5c0:	2c00      	cmp	r4, #0
 800a5c2:	d048      	beq.n	800a656 <_malloc_r+0xe6>
 800a5c4:	6823      	ldr	r3, [r4, #0]
 800a5c6:	4631      	mov	r1, r6
 800a5c8:	4638      	mov	r0, r7
 800a5ca:	eb04 0903 	add.w	r9, r4, r3
 800a5ce:	f000 fc1d 	bl	800ae0c <_sbrk_r>
 800a5d2:	4581      	cmp	r9, r0
 800a5d4:	d13f      	bne.n	800a656 <_malloc_r+0xe6>
 800a5d6:	6821      	ldr	r1, [r4, #0]
 800a5d8:	1a6d      	subs	r5, r5, r1
 800a5da:	4629      	mov	r1, r5
 800a5dc:	4638      	mov	r0, r7
 800a5de:	f7ff ffa7 	bl	800a530 <sbrk_aligned>
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	d037      	beq.n	800a656 <_malloc_r+0xe6>
 800a5e6:	6823      	ldr	r3, [r4, #0]
 800a5e8:	442b      	add	r3, r5
 800a5ea:	6023      	str	r3, [r4, #0]
 800a5ec:	f8d8 3000 	ldr.w	r3, [r8]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d038      	beq.n	800a666 <_malloc_r+0xf6>
 800a5f4:	685a      	ldr	r2, [r3, #4]
 800a5f6:	42a2      	cmp	r2, r4
 800a5f8:	d12b      	bne.n	800a652 <_malloc_r+0xe2>
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	605a      	str	r2, [r3, #4]
 800a5fe:	e00f      	b.n	800a620 <_malloc_r+0xb0>
 800a600:	6822      	ldr	r2, [r4, #0]
 800a602:	1b52      	subs	r2, r2, r5
 800a604:	d41f      	bmi.n	800a646 <_malloc_r+0xd6>
 800a606:	2a0b      	cmp	r2, #11
 800a608:	d917      	bls.n	800a63a <_malloc_r+0xca>
 800a60a:	1961      	adds	r1, r4, r5
 800a60c:	42a3      	cmp	r3, r4
 800a60e:	6025      	str	r5, [r4, #0]
 800a610:	bf18      	it	ne
 800a612:	6059      	strne	r1, [r3, #4]
 800a614:	6863      	ldr	r3, [r4, #4]
 800a616:	bf08      	it	eq
 800a618:	f8c8 1000 	streq.w	r1, [r8]
 800a61c:	5162      	str	r2, [r4, r5]
 800a61e:	604b      	str	r3, [r1, #4]
 800a620:	4638      	mov	r0, r7
 800a622:	f104 060b 	add.w	r6, r4, #11
 800a626:	f000 f829 	bl	800a67c <__malloc_unlock>
 800a62a:	f026 0607 	bic.w	r6, r6, #7
 800a62e:	1d23      	adds	r3, r4, #4
 800a630:	1af2      	subs	r2, r6, r3
 800a632:	d0ae      	beq.n	800a592 <_malloc_r+0x22>
 800a634:	1b9b      	subs	r3, r3, r6
 800a636:	50a3      	str	r3, [r4, r2]
 800a638:	e7ab      	b.n	800a592 <_malloc_r+0x22>
 800a63a:	42a3      	cmp	r3, r4
 800a63c:	6862      	ldr	r2, [r4, #4]
 800a63e:	d1dd      	bne.n	800a5fc <_malloc_r+0x8c>
 800a640:	f8c8 2000 	str.w	r2, [r8]
 800a644:	e7ec      	b.n	800a620 <_malloc_r+0xb0>
 800a646:	4623      	mov	r3, r4
 800a648:	6864      	ldr	r4, [r4, #4]
 800a64a:	e7ac      	b.n	800a5a6 <_malloc_r+0x36>
 800a64c:	4634      	mov	r4, r6
 800a64e:	6876      	ldr	r6, [r6, #4]
 800a650:	e7b4      	b.n	800a5bc <_malloc_r+0x4c>
 800a652:	4613      	mov	r3, r2
 800a654:	e7cc      	b.n	800a5f0 <_malloc_r+0x80>
 800a656:	230c      	movs	r3, #12
 800a658:	603b      	str	r3, [r7, #0]
 800a65a:	4638      	mov	r0, r7
 800a65c:	f000 f80e 	bl	800a67c <__malloc_unlock>
 800a660:	e797      	b.n	800a592 <_malloc_r+0x22>
 800a662:	6025      	str	r5, [r4, #0]
 800a664:	e7dc      	b.n	800a620 <_malloc_r+0xb0>
 800a666:	605b      	str	r3, [r3, #4]
 800a668:	deff      	udf	#255	; 0xff
 800a66a:	bf00      	nop
 800a66c:	200006b4 	.word	0x200006b4

0800a670 <__malloc_lock>:
 800a670:	4801      	ldr	r0, [pc, #4]	; (800a678 <__malloc_lock+0x8>)
 800a672:	f7ff bee9 	b.w	800a448 <__retarget_lock_acquire_recursive>
 800a676:	bf00      	nop
 800a678:	200006b0 	.word	0x200006b0

0800a67c <__malloc_unlock>:
 800a67c:	4801      	ldr	r0, [pc, #4]	; (800a684 <__malloc_unlock+0x8>)
 800a67e:	f7ff bee4 	b.w	800a44a <__retarget_lock_release_recursive>
 800a682:	bf00      	nop
 800a684:	200006b0 	.word	0x200006b0

0800a688 <__ssputs_r>:
 800a688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a68c:	688e      	ldr	r6, [r1, #8]
 800a68e:	461f      	mov	r7, r3
 800a690:	42be      	cmp	r6, r7
 800a692:	680b      	ldr	r3, [r1, #0]
 800a694:	4682      	mov	sl, r0
 800a696:	460c      	mov	r4, r1
 800a698:	4690      	mov	r8, r2
 800a69a:	d82c      	bhi.n	800a6f6 <__ssputs_r+0x6e>
 800a69c:	898a      	ldrh	r2, [r1, #12]
 800a69e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a6a2:	d026      	beq.n	800a6f2 <__ssputs_r+0x6a>
 800a6a4:	6965      	ldr	r5, [r4, #20]
 800a6a6:	6909      	ldr	r1, [r1, #16]
 800a6a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6ac:	eba3 0901 	sub.w	r9, r3, r1
 800a6b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6b4:	1c7b      	adds	r3, r7, #1
 800a6b6:	444b      	add	r3, r9
 800a6b8:	106d      	asrs	r5, r5, #1
 800a6ba:	429d      	cmp	r5, r3
 800a6bc:	bf38      	it	cc
 800a6be:	461d      	movcc	r5, r3
 800a6c0:	0553      	lsls	r3, r2, #21
 800a6c2:	d527      	bpl.n	800a714 <__ssputs_r+0x8c>
 800a6c4:	4629      	mov	r1, r5
 800a6c6:	f7ff ff53 	bl	800a570 <_malloc_r>
 800a6ca:	4606      	mov	r6, r0
 800a6cc:	b360      	cbz	r0, 800a728 <__ssputs_r+0xa0>
 800a6ce:	6921      	ldr	r1, [r4, #16]
 800a6d0:	464a      	mov	r2, r9
 800a6d2:	f000 fbab 	bl	800ae2c <memcpy>
 800a6d6:	89a3      	ldrh	r3, [r4, #12]
 800a6d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a6dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6e0:	81a3      	strh	r3, [r4, #12]
 800a6e2:	6126      	str	r6, [r4, #16]
 800a6e4:	6165      	str	r5, [r4, #20]
 800a6e6:	444e      	add	r6, r9
 800a6e8:	eba5 0509 	sub.w	r5, r5, r9
 800a6ec:	6026      	str	r6, [r4, #0]
 800a6ee:	60a5      	str	r5, [r4, #8]
 800a6f0:	463e      	mov	r6, r7
 800a6f2:	42be      	cmp	r6, r7
 800a6f4:	d900      	bls.n	800a6f8 <__ssputs_r+0x70>
 800a6f6:	463e      	mov	r6, r7
 800a6f8:	6820      	ldr	r0, [r4, #0]
 800a6fa:	4632      	mov	r2, r6
 800a6fc:	4641      	mov	r1, r8
 800a6fe:	f000 fb6b 	bl	800add8 <memmove>
 800a702:	68a3      	ldr	r3, [r4, #8]
 800a704:	1b9b      	subs	r3, r3, r6
 800a706:	60a3      	str	r3, [r4, #8]
 800a708:	6823      	ldr	r3, [r4, #0]
 800a70a:	4433      	add	r3, r6
 800a70c:	6023      	str	r3, [r4, #0]
 800a70e:	2000      	movs	r0, #0
 800a710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a714:	462a      	mov	r2, r5
 800a716:	f000 fb9e 	bl	800ae56 <_realloc_r>
 800a71a:	4606      	mov	r6, r0
 800a71c:	2800      	cmp	r0, #0
 800a71e:	d1e0      	bne.n	800a6e2 <__ssputs_r+0x5a>
 800a720:	6921      	ldr	r1, [r4, #16]
 800a722:	4650      	mov	r0, sl
 800a724:	f7ff feb0 	bl	800a488 <_free_r>
 800a728:	230c      	movs	r3, #12
 800a72a:	f8ca 3000 	str.w	r3, [sl]
 800a72e:	89a3      	ldrh	r3, [r4, #12]
 800a730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a734:	81a3      	strh	r3, [r4, #12]
 800a736:	f04f 30ff 	mov.w	r0, #4294967295
 800a73a:	e7e9      	b.n	800a710 <__ssputs_r+0x88>

0800a73c <_svfiprintf_r>:
 800a73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a740:	4698      	mov	r8, r3
 800a742:	898b      	ldrh	r3, [r1, #12]
 800a744:	061b      	lsls	r3, r3, #24
 800a746:	b09d      	sub	sp, #116	; 0x74
 800a748:	4607      	mov	r7, r0
 800a74a:	460d      	mov	r5, r1
 800a74c:	4614      	mov	r4, r2
 800a74e:	d50e      	bpl.n	800a76e <_svfiprintf_r+0x32>
 800a750:	690b      	ldr	r3, [r1, #16]
 800a752:	b963      	cbnz	r3, 800a76e <_svfiprintf_r+0x32>
 800a754:	2140      	movs	r1, #64	; 0x40
 800a756:	f7ff ff0b 	bl	800a570 <_malloc_r>
 800a75a:	6028      	str	r0, [r5, #0]
 800a75c:	6128      	str	r0, [r5, #16]
 800a75e:	b920      	cbnz	r0, 800a76a <_svfiprintf_r+0x2e>
 800a760:	230c      	movs	r3, #12
 800a762:	603b      	str	r3, [r7, #0]
 800a764:	f04f 30ff 	mov.w	r0, #4294967295
 800a768:	e0d0      	b.n	800a90c <_svfiprintf_r+0x1d0>
 800a76a:	2340      	movs	r3, #64	; 0x40
 800a76c:	616b      	str	r3, [r5, #20]
 800a76e:	2300      	movs	r3, #0
 800a770:	9309      	str	r3, [sp, #36]	; 0x24
 800a772:	2320      	movs	r3, #32
 800a774:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a778:	f8cd 800c 	str.w	r8, [sp, #12]
 800a77c:	2330      	movs	r3, #48	; 0x30
 800a77e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a924 <_svfiprintf_r+0x1e8>
 800a782:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a786:	f04f 0901 	mov.w	r9, #1
 800a78a:	4623      	mov	r3, r4
 800a78c:	469a      	mov	sl, r3
 800a78e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a792:	b10a      	cbz	r2, 800a798 <_svfiprintf_r+0x5c>
 800a794:	2a25      	cmp	r2, #37	; 0x25
 800a796:	d1f9      	bne.n	800a78c <_svfiprintf_r+0x50>
 800a798:	ebba 0b04 	subs.w	fp, sl, r4
 800a79c:	d00b      	beq.n	800a7b6 <_svfiprintf_r+0x7a>
 800a79e:	465b      	mov	r3, fp
 800a7a0:	4622      	mov	r2, r4
 800a7a2:	4629      	mov	r1, r5
 800a7a4:	4638      	mov	r0, r7
 800a7a6:	f7ff ff6f 	bl	800a688 <__ssputs_r>
 800a7aa:	3001      	adds	r0, #1
 800a7ac:	f000 80a9 	beq.w	800a902 <_svfiprintf_r+0x1c6>
 800a7b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7b2:	445a      	add	r2, fp
 800a7b4:	9209      	str	r2, [sp, #36]	; 0x24
 800a7b6:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f000 80a1 	beq.w	800a902 <_svfiprintf_r+0x1c6>
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a7c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7ca:	f10a 0a01 	add.w	sl, sl, #1
 800a7ce:	9304      	str	r3, [sp, #16]
 800a7d0:	9307      	str	r3, [sp, #28]
 800a7d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7d6:	931a      	str	r3, [sp, #104]	; 0x68
 800a7d8:	4654      	mov	r4, sl
 800a7da:	2205      	movs	r2, #5
 800a7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7e0:	4850      	ldr	r0, [pc, #320]	; (800a924 <_svfiprintf_r+0x1e8>)
 800a7e2:	f7f5 fd35 	bl	8000250 <memchr>
 800a7e6:	9a04      	ldr	r2, [sp, #16]
 800a7e8:	b9d8      	cbnz	r0, 800a822 <_svfiprintf_r+0xe6>
 800a7ea:	06d0      	lsls	r0, r2, #27
 800a7ec:	bf44      	itt	mi
 800a7ee:	2320      	movmi	r3, #32
 800a7f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7f4:	0711      	lsls	r1, r2, #28
 800a7f6:	bf44      	itt	mi
 800a7f8:	232b      	movmi	r3, #43	; 0x2b
 800a7fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7fe:	f89a 3000 	ldrb.w	r3, [sl]
 800a802:	2b2a      	cmp	r3, #42	; 0x2a
 800a804:	d015      	beq.n	800a832 <_svfiprintf_r+0xf6>
 800a806:	9a07      	ldr	r2, [sp, #28]
 800a808:	4654      	mov	r4, sl
 800a80a:	2000      	movs	r0, #0
 800a80c:	f04f 0c0a 	mov.w	ip, #10
 800a810:	4621      	mov	r1, r4
 800a812:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a816:	3b30      	subs	r3, #48	; 0x30
 800a818:	2b09      	cmp	r3, #9
 800a81a:	d94d      	bls.n	800a8b8 <_svfiprintf_r+0x17c>
 800a81c:	b1b0      	cbz	r0, 800a84c <_svfiprintf_r+0x110>
 800a81e:	9207      	str	r2, [sp, #28]
 800a820:	e014      	b.n	800a84c <_svfiprintf_r+0x110>
 800a822:	eba0 0308 	sub.w	r3, r0, r8
 800a826:	fa09 f303 	lsl.w	r3, r9, r3
 800a82a:	4313      	orrs	r3, r2
 800a82c:	9304      	str	r3, [sp, #16]
 800a82e:	46a2      	mov	sl, r4
 800a830:	e7d2      	b.n	800a7d8 <_svfiprintf_r+0x9c>
 800a832:	9b03      	ldr	r3, [sp, #12]
 800a834:	1d19      	adds	r1, r3, #4
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	9103      	str	r1, [sp, #12]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	bfbb      	ittet	lt
 800a83e:	425b      	neglt	r3, r3
 800a840:	f042 0202 	orrlt.w	r2, r2, #2
 800a844:	9307      	strge	r3, [sp, #28]
 800a846:	9307      	strlt	r3, [sp, #28]
 800a848:	bfb8      	it	lt
 800a84a:	9204      	strlt	r2, [sp, #16]
 800a84c:	7823      	ldrb	r3, [r4, #0]
 800a84e:	2b2e      	cmp	r3, #46	; 0x2e
 800a850:	d10c      	bne.n	800a86c <_svfiprintf_r+0x130>
 800a852:	7863      	ldrb	r3, [r4, #1]
 800a854:	2b2a      	cmp	r3, #42	; 0x2a
 800a856:	d134      	bne.n	800a8c2 <_svfiprintf_r+0x186>
 800a858:	9b03      	ldr	r3, [sp, #12]
 800a85a:	1d1a      	adds	r2, r3, #4
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	9203      	str	r2, [sp, #12]
 800a860:	2b00      	cmp	r3, #0
 800a862:	bfb8      	it	lt
 800a864:	f04f 33ff 	movlt.w	r3, #4294967295
 800a868:	3402      	adds	r4, #2
 800a86a:	9305      	str	r3, [sp, #20]
 800a86c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a934 <_svfiprintf_r+0x1f8>
 800a870:	7821      	ldrb	r1, [r4, #0]
 800a872:	2203      	movs	r2, #3
 800a874:	4650      	mov	r0, sl
 800a876:	f7f5 fceb 	bl	8000250 <memchr>
 800a87a:	b138      	cbz	r0, 800a88c <_svfiprintf_r+0x150>
 800a87c:	9b04      	ldr	r3, [sp, #16]
 800a87e:	eba0 000a 	sub.w	r0, r0, sl
 800a882:	2240      	movs	r2, #64	; 0x40
 800a884:	4082      	lsls	r2, r0
 800a886:	4313      	orrs	r3, r2
 800a888:	3401      	adds	r4, #1
 800a88a:	9304      	str	r3, [sp, #16]
 800a88c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a890:	4825      	ldr	r0, [pc, #148]	; (800a928 <_svfiprintf_r+0x1ec>)
 800a892:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a896:	2206      	movs	r2, #6
 800a898:	f7f5 fcda 	bl	8000250 <memchr>
 800a89c:	2800      	cmp	r0, #0
 800a89e:	d038      	beq.n	800a912 <_svfiprintf_r+0x1d6>
 800a8a0:	4b22      	ldr	r3, [pc, #136]	; (800a92c <_svfiprintf_r+0x1f0>)
 800a8a2:	bb1b      	cbnz	r3, 800a8ec <_svfiprintf_r+0x1b0>
 800a8a4:	9b03      	ldr	r3, [sp, #12]
 800a8a6:	3307      	adds	r3, #7
 800a8a8:	f023 0307 	bic.w	r3, r3, #7
 800a8ac:	3308      	adds	r3, #8
 800a8ae:	9303      	str	r3, [sp, #12]
 800a8b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8b2:	4433      	add	r3, r6
 800a8b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a8b6:	e768      	b.n	800a78a <_svfiprintf_r+0x4e>
 800a8b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8bc:	460c      	mov	r4, r1
 800a8be:	2001      	movs	r0, #1
 800a8c0:	e7a6      	b.n	800a810 <_svfiprintf_r+0xd4>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	3401      	adds	r4, #1
 800a8c6:	9305      	str	r3, [sp, #20]
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	f04f 0c0a 	mov.w	ip, #10
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8d4:	3a30      	subs	r2, #48	; 0x30
 800a8d6:	2a09      	cmp	r2, #9
 800a8d8:	d903      	bls.n	800a8e2 <_svfiprintf_r+0x1a6>
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d0c6      	beq.n	800a86c <_svfiprintf_r+0x130>
 800a8de:	9105      	str	r1, [sp, #20]
 800a8e0:	e7c4      	b.n	800a86c <_svfiprintf_r+0x130>
 800a8e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8e6:	4604      	mov	r4, r0
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e7f0      	b.n	800a8ce <_svfiprintf_r+0x192>
 800a8ec:	ab03      	add	r3, sp, #12
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	462a      	mov	r2, r5
 800a8f2:	4b0f      	ldr	r3, [pc, #60]	; (800a930 <_svfiprintf_r+0x1f4>)
 800a8f4:	a904      	add	r1, sp, #16
 800a8f6:	4638      	mov	r0, r7
 800a8f8:	f3af 8000 	nop.w
 800a8fc:	1c42      	adds	r2, r0, #1
 800a8fe:	4606      	mov	r6, r0
 800a900:	d1d6      	bne.n	800a8b0 <_svfiprintf_r+0x174>
 800a902:	89ab      	ldrh	r3, [r5, #12]
 800a904:	065b      	lsls	r3, r3, #25
 800a906:	f53f af2d 	bmi.w	800a764 <_svfiprintf_r+0x28>
 800a90a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a90c:	b01d      	add	sp, #116	; 0x74
 800a90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a912:	ab03      	add	r3, sp, #12
 800a914:	9300      	str	r3, [sp, #0]
 800a916:	462a      	mov	r2, r5
 800a918:	4b05      	ldr	r3, [pc, #20]	; (800a930 <_svfiprintf_r+0x1f4>)
 800a91a:	a904      	add	r1, sp, #16
 800a91c:	4638      	mov	r0, r7
 800a91e:	f000 f879 	bl	800aa14 <_printf_i>
 800a922:	e7eb      	b.n	800a8fc <_svfiprintf_r+0x1c0>
 800a924:	0800b772 	.word	0x0800b772
 800a928:	0800b77c 	.word	0x0800b77c
 800a92c:	00000000 	.word	0x00000000
 800a930:	0800a689 	.word	0x0800a689
 800a934:	0800b778 	.word	0x0800b778

0800a938 <_printf_common>:
 800a938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a93c:	4616      	mov	r6, r2
 800a93e:	4699      	mov	r9, r3
 800a940:	688a      	ldr	r2, [r1, #8]
 800a942:	690b      	ldr	r3, [r1, #16]
 800a944:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a948:	4293      	cmp	r3, r2
 800a94a:	bfb8      	it	lt
 800a94c:	4613      	movlt	r3, r2
 800a94e:	6033      	str	r3, [r6, #0]
 800a950:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a954:	4607      	mov	r7, r0
 800a956:	460c      	mov	r4, r1
 800a958:	b10a      	cbz	r2, 800a95e <_printf_common+0x26>
 800a95a:	3301      	adds	r3, #1
 800a95c:	6033      	str	r3, [r6, #0]
 800a95e:	6823      	ldr	r3, [r4, #0]
 800a960:	0699      	lsls	r1, r3, #26
 800a962:	bf42      	ittt	mi
 800a964:	6833      	ldrmi	r3, [r6, #0]
 800a966:	3302      	addmi	r3, #2
 800a968:	6033      	strmi	r3, [r6, #0]
 800a96a:	6825      	ldr	r5, [r4, #0]
 800a96c:	f015 0506 	ands.w	r5, r5, #6
 800a970:	d106      	bne.n	800a980 <_printf_common+0x48>
 800a972:	f104 0a19 	add.w	sl, r4, #25
 800a976:	68e3      	ldr	r3, [r4, #12]
 800a978:	6832      	ldr	r2, [r6, #0]
 800a97a:	1a9b      	subs	r3, r3, r2
 800a97c:	42ab      	cmp	r3, r5
 800a97e:	dc26      	bgt.n	800a9ce <_printf_common+0x96>
 800a980:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a984:	1e13      	subs	r3, r2, #0
 800a986:	6822      	ldr	r2, [r4, #0]
 800a988:	bf18      	it	ne
 800a98a:	2301      	movne	r3, #1
 800a98c:	0692      	lsls	r2, r2, #26
 800a98e:	d42b      	bmi.n	800a9e8 <_printf_common+0xb0>
 800a990:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a994:	4649      	mov	r1, r9
 800a996:	4638      	mov	r0, r7
 800a998:	47c0      	blx	r8
 800a99a:	3001      	adds	r0, #1
 800a99c:	d01e      	beq.n	800a9dc <_printf_common+0xa4>
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	6922      	ldr	r2, [r4, #16]
 800a9a2:	f003 0306 	and.w	r3, r3, #6
 800a9a6:	2b04      	cmp	r3, #4
 800a9a8:	bf02      	ittt	eq
 800a9aa:	68e5      	ldreq	r5, [r4, #12]
 800a9ac:	6833      	ldreq	r3, [r6, #0]
 800a9ae:	1aed      	subeq	r5, r5, r3
 800a9b0:	68a3      	ldr	r3, [r4, #8]
 800a9b2:	bf0c      	ite	eq
 800a9b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9b8:	2500      	movne	r5, #0
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	bfc4      	itt	gt
 800a9be:	1a9b      	subgt	r3, r3, r2
 800a9c0:	18ed      	addgt	r5, r5, r3
 800a9c2:	2600      	movs	r6, #0
 800a9c4:	341a      	adds	r4, #26
 800a9c6:	42b5      	cmp	r5, r6
 800a9c8:	d11a      	bne.n	800aa00 <_printf_common+0xc8>
 800a9ca:	2000      	movs	r0, #0
 800a9cc:	e008      	b.n	800a9e0 <_printf_common+0xa8>
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	4652      	mov	r2, sl
 800a9d2:	4649      	mov	r1, r9
 800a9d4:	4638      	mov	r0, r7
 800a9d6:	47c0      	blx	r8
 800a9d8:	3001      	adds	r0, #1
 800a9da:	d103      	bne.n	800a9e4 <_printf_common+0xac>
 800a9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9e4:	3501      	adds	r5, #1
 800a9e6:	e7c6      	b.n	800a976 <_printf_common+0x3e>
 800a9e8:	18e1      	adds	r1, r4, r3
 800a9ea:	1c5a      	adds	r2, r3, #1
 800a9ec:	2030      	movs	r0, #48	; 0x30
 800a9ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9f2:	4422      	add	r2, r4
 800a9f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9fc:	3302      	adds	r3, #2
 800a9fe:	e7c7      	b.n	800a990 <_printf_common+0x58>
 800aa00:	2301      	movs	r3, #1
 800aa02:	4622      	mov	r2, r4
 800aa04:	4649      	mov	r1, r9
 800aa06:	4638      	mov	r0, r7
 800aa08:	47c0      	blx	r8
 800aa0a:	3001      	adds	r0, #1
 800aa0c:	d0e6      	beq.n	800a9dc <_printf_common+0xa4>
 800aa0e:	3601      	adds	r6, #1
 800aa10:	e7d9      	b.n	800a9c6 <_printf_common+0x8e>
	...

0800aa14 <_printf_i>:
 800aa14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa18:	7e0f      	ldrb	r7, [r1, #24]
 800aa1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa1c:	2f78      	cmp	r7, #120	; 0x78
 800aa1e:	4691      	mov	r9, r2
 800aa20:	4680      	mov	r8, r0
 800aa22:	460c      	mov	r4, r1
 800aa24:	469a      	mov	sl, r3
 800aa26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa2a:	d807      	bhi.n	800aa3c <_printf_i+0x28>
 800aa2c:	2f62      	cmp	r7, #98	; 0x62
 800aa2e:	d80a      	bhi.n	800aa46 <_printf_i+0x32>
 800aa30:	2f00      	cmp	r7, #0
 800aa32:	f000 80d4 	beq.w	800abde <_printf_i+0x1ca>
 800aa36:	2f58      	cmp	r7, #88	; 0x58
 800aa38:	f000 80c0 	beq.w	800abbc <_printf_i+0x1a8>
 800aa3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa44:	e03a      	b.n	800aabc <_printf_i+0xa8>
 800aa46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa4a:	2b15      	cmp	r3, #21
 800aa4c:	d8f6      	bhi.n	800aa3c <_printf_i+0x28>
 800aa4e:	a101      	add	r1, pc, #4	; (adr r1, 800aa54 <_printf_i+0x40>)
 800aa50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa54:	0800aaad 	.word	0x0800aaad
 800aa58:	0800aac1 	.word	0x0800aac1
 800aa5c:	0800aa3d 	.word	0x0800aa3d
 800aa60:	0800aa3d 	.word	0x0800aa3d
 800aa64:	0800aa3d 	.word	0x0800aa3d
 800aa68:	0800aa3d 	.word	0x0800aa3d
 800aa6c:	0800aac1 	.word	0x0800aac1
 800aa70:	0800aa3d 	.word	0x0800aa3d
 800aa74:	0800aa3d 	.word	0x0800aa3d
 800aa78:	0800aa3d 	.word	0x0800aa3d
 800aa7c:	0800aa3d 	.word	0x0800aa3d
 800aa80:	0800abc5 	.word	0x0800abc5
 800aa84:	0800aaed 	.word	0x0800aaed
 800aa88:	0800ab7f 	.word	0x0800ab7f
 800aa8c:	0800aa3d 	.word	0x0800aa3d
 800aa90:	0800aa3d 	.word	0x0800aa3d
 800aa94:	0800abe7 	.word	0x0800abe7
 800aa98:	0800aa3d 	.word	0x0800aa3d
 800aa9c:	0800aaed 	.word	0x0800aaed
 800aaa0:	0800aa3d 	.word	0x0800aa3d
 800aaa4:	0800aa3d 	.word	0x0800aa3d
 800aaa8:	0800ab87 	.word	0x0800ab87
 800aaac:	682b      	ldr	r3, [r5, #0]
 800aaae:	1d1a      	adds	r2, r3, #4
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	602a      	str	r2, [r5, #0]
 800aab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aabc:	2301      	movs	r3, #1
 800aabe:	e09f      	b.n	800ac00 <_printf_i+0x1ec>
 800aac0:	6820      	ldr	r0, [r4, #0]
 800aac2:	682b      	ldr	r3, [r5, #0]
 800aac4:	0607      	lsls	r7, r0, #24
 800aac6:	f103 0104 	add.w	r1, r3, #4
 800aaca:	6029      	str	r1, [r5, #0]
 800aacc:	d501      	bpl.n	800aad2 <_printf_i+0xbe>
 800aace:	681e      	ldr	r6, [r3, #0]
 800aad0:	e003      	b.n	800aada <_printf_i+0xc6>
 800aad2:	0646      	lsls	r6, r0, #25
 800aad4:	d5fb      	bpl.n	800aace <_printf_i+0xba>
 800aad6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aada:	2e00      	cmp	r6, #0
 800aadc:	da03      	bge.n	800aae6 <_printf_i+0xd2>
 800aade:	232d      	movs	r3, #45	; 0x2d
 800aae0:	4276      	negs	r6, r6
 800aae2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aae6:	485a      	ldr	r0, [pc, #360]	; (800ac50 <_printf_i+0x23c>)
 800aae8:	230a      	movs	r3, #10
 800aaea:	e012      	b.n	800ab12 <_printf_i+0xfe>
 800aaec:	682b      	ldr	r3, [r5, #0]
 800aaee:	6820      	ldr	r0, [r4, #0]
 800aaf0:	1d19      	adds	r1, r3, #4
 800aaf2:	6029      	str	r1, [r5, #0]
 800aaf4:	0605      	lsls	r5, r0, #24
 800aaf6:	d501      	bpl.n	800aafc <_printf_i+0xe8>
 800aaf8:	681e      	ldr	r6, [r3, #0]
 800aafa:	e002      	b.n	800ab02 <_printf_i+0xee>
 800aafc:	0641      	lsls	r1, r0, #25
 800aafe:	d5fb      	bpl.n	800aaf8 <_printf_i+0xe4>
 800ab00:	881e      	ldrh	r6, [r3, #0]
 800ab02:	4853      	ldr	r0, [pc, #332]	; (800ac50 <_printf_i+0x23c>)
 800ab04:	2f6f      	cmp	r7, #111	; 0x6f
 800ab06:	bf0c      	ite	eq
 800ab08:	2308      	moveq	r3, #8
 800ab0a:	230a      	movne	r3, #10
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab12:	6865      	ldr	r5, [r4, #4]
 800ab14:	60a5      	str	r5, [r4, #8]
 800ab16:	2d00      	cmp	r5, #0
 800ab18:	bfa2      	ittt	ge
 800ab1a:	6821      	ldrge	r1, [r4, #0]
 800ab1c:	f021 0104 	bicge.w	r1, r1, #4
 800ab20:	6021      	strge	r1, [r4, #0]
 800ab22:	b90e      	cbnz	r6, 800ab28 <_printf_i+0x114>
 800ab24:	2d00      	cmp	r5, #0
 800ab26:	d04b      	beq.n	800abc0 <_printf_i+0x1ac>
 800ab28:	4615      	mov	r5, r2
 800ab2a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab2e:	fb03 6711 	mls	r7, r3, r1, r6
 800ab32:	5dc7      	ldrb	r7, [r0, r7]
 800ab34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab38:	4637      	mov	r7, r6
 800ab3a:	42bb      	cmp	r3, r7
 800ab3c:	460e      	mov	r6, r1
 800ab3e:	d9f4      	bls.n	800ab2a <_printf_i+0x116>
 800ab40:	2b08      	cmp	r3, #8
 800ab42:	d10b      	bne.n	800ab5c <_printf_i+0x148>
 800ab44:	6823      	ldr	r3, [r4, #0]
 800ab46:	07de      	lsls	r6, r3, #31
 800ab48:	d508      	bpl.n	800ab5c <_printf_i+0x148>
 800ab4a:	6923      	ldr	r3, [r4, #16]
 800ab4c:	6861      	ldr	r1, [r4, #4]
 800ab4e:	4299      	cmp	r1, r3
 800ab50:	bfde      	ittt	le
 800ab52:	2330      	movle	r3, #48	; 0x30
 800ab54:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab58:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab5c:	1b52      	subs	r2, r2, r5
 800ab5e:	6122      	str	r2, [r4, #16]
 800ab60:	f8cd a000 	str.w	sl, [sp]
 800ab64:	464b      	mov	r3, r9
 800ab66:	aa03      	add	r2, sp, #12
 800ab68:	4621      	mov	r1, r4
 800ab6a:	4640      	mov	r0, r8
 800ab6c:	f7ff fee4 	bl	800a938 <_printf_common>
 800ab70:	3001      	adds	r0, #1
 800ab72:	d14a      	bne.n	800ac0a <_printf_i+0x1f6>
 800ab74:	f04f 30ff 	mov.w	r0, #4294967295
 800ab78:	b004      	add	sp, #16
 800ab7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab7e:	6823      	ldr	r3, [r4, #0]
 800ab80:	f043 0320 	orr.w	r3, r3, #32
 800ab84:	6023      	str	r3, [r4, #0]
 800ab86:	4833      	ldr	r0, [pc, #204]	; (800ac54 <_printf_i+0x240>)
 800ab88:	2778      	movs	r7, #120	; 0x78
 800ab8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ab8e:	6823      	ldr	r3, [r4, #0]
 800ab90:	6829      	ldr	r1, [r5, #0]
 800ab92:	061f      	lsls	r7, r3, #24
 800ab94:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab98:	d402      	bmi.n	800aba0 <_printf_i+0x18c>
 800ab9a:	065f      	lsls	r7, r3, #25
 800ab9c:	bf48      	it	mi
 800ab9e:	b2b6      	uxthmi	r6, r6
 800aba0:	07df      	lsls	r7, r3, #31
 800aba2:	bf48      	it	mi
 800aba4:	f043 0320 	orrmi.w	r3, r3, #32
 800aba8:	6029      	str	r1, [r5, #0]
 800abaa:	bf48      	it	mi
 800abac:	6023      	strmi	r3, [r4, #0]
 800abae:	b91e      	cbnz	r6, 800abb8 <_printf_i+0x1a4>
 800abb0:	6823      	ldr	r3, [r4, #0]
 800abb2:	f023 0320 	bic.w	r3, r3, #32
 800abb6:	6023      	str	r3, [r4, #0]
 800abb8:	2310      	movs	r3, #16
 800abba:	e7a7      	b.n	800ab0c <_printf_i+0xf8>
 800abbc:	4824      	ldr	r0, [pc, #144]	; (800ac50 <_printf_i+0x23c>)
 800abbe:	e7e4      	b.n	800ab8a <_printf_i+0x176>
 800abc0:	4615      	mov	r5, r2
 800abc2:	e7bd      	b.n	800ab40 <_printf_i+0x12c>
 800abc4:	682b      	ldr	r3, [r5, #0]
 800abc6:	6826      	ldr	r6, [r4, #0]
 800abc8:	6961      	ldr	r1, [r4, #20]
 800abca:	1d18      	adds	r0, r3, #4
 800abcc:	6028      	str	r0, [r5, #0]
 800abce:	0635      	lsls	r5, r6, #24
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	d501      	bpl.n	800abd8 <_printf_i+0x1c4>
 800abd4:	6019      	str	r1, [r3, #0]
 800abd6:	e002      	b.n	800abde <_printf_i+0x1ca>
 800abd8:	0670      	lsls	r0, r6, #25
 800abda:	d5fb      	bpl.n	800abd4 <_printf_i+0x1c0>
 800abdc:	8019      	strh	r1, [r3, #0]
 800abde:	2300      	movs	r3, #0
 800abe0:	6123      	str	r3, [r4, #16]
 800abe2:	4615      	mov	r5, r2
 800abe4:	e7bc      	b.n	800ab60 <_printf_i+0x14c>
 800abe6:	682b      	ldr	r3, [r5, #0]
 800abe8:	1d1a      	adds	r2, r3, #4
 800abea:	602a      	str	r2, [r5, #0]
 800abec:	681d      	ldr	r5, [r3, #0]
 800abee:	6862      	ldr	r2, [r4, #4]
 800abf0:	2100      	movs	r1, #0
 800abf2:	4628      	mov	r0, r5
 800abf4:	f7f5 fb2c 	bl	8000250 <memchr>
 800abf8:	b108      	cbz	r0, 800abfe <_printf_i+0x1ea>
 800abfa:	1b40      	subs	r0, r0, r5
 800abfc:	6060      	str	r0, [r4, #4]
 800abfe:	6863      	ldr	r3, [r4, #4]
 800ac00:	6123      	str	r3, [r4, #16]
 800ac02:	2300      	movs	r3, #0
 800ac04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac08:	e7aa      	b.n	800ab60 <_printf_i+0x14c>
 800ac0a:	6923      	ldr	r3, [r4, #16]
 800ac0c:	462a      	mov	r2, r5
 800ac0e:	4649      	mov	r1, r9
 800ac10:	4640      	mov	r0, r8
 800ac12:	47d0      	blx	sl
 800ac14:	3001      	adds	r0, #1
 800ac16:	d0ad      	beq.n	800ab74 <_printf_i+0x160>
 800ac18:	6823      	ldr	r3, [r4, #0]
 800ac1a:	079b      	lsls	r3, r3, #30
 800ac1c:	d413      	bmi.n	800ac46 <_printf_i+0x232>
 800ac1e:	68e0      	ldr	r0, [r4, #12]
 800ac20:	9b03      	ldr	r3, [sp, #12]
 800ac22:	4298      	cmp	r0, r3
 800ac24:	bfb8      	it	lt
 800ac26:	4618      	movlt	r0, r3
 800ac28:	e7a6      	b.n	800ab78 <_printf_i+0x164>
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	4632      	mov	r2, r6
 800ac2e:	4649      	mov	r1, r9
 800ac30:	4640      	mov	r0, r8
 800ac32:	47d0      	blx	sl
 800ac34:	3001      	adds	r0, #1
 800ac36:	d09d      	beq.n	800ab74 <_printf_i+0x160>
 800ac38:	3501      	adds	r5, #1
 800ac3a:	68e3      	ldr	r3, [r4, #12]
 800ac3c:	9903      	ldr	r1, [sp, #12]
 800ac3e:	1a5b      	subs	r3, r3, r1
 800ac40:	42ab      	cmp	r3, r5
 800ac42:	dcf2      	bgt.n	800ac2a <_printf_i+0x216>
 800ac44:	e7eb      	b.n	800ac1e <_printf_i+0x20a>
 800ac46:	2500      	movs	r5, #0
 800ac48:	f104 0619 	add.w	r6, r4, #25
 800ac4c:	e7f5      	b.n	800ac3a <_printf_i+0x226>
 800ac4e:	bf00      	nop
 800ac50:	0800b783 	.word	0x0800b783
 800ac54:	0800b794 	.word	0x0800b794

0800ac58 <__sflush_r>:
 800ac58:	898a      	ldrh	r2, [r1, #12]
 800ac5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac5e:	4605      	mov	r5, r0
 800ac60:	0710      	lsls	r0, r2, #28
 800ac62:	460c      	mov	r4, r1
 800ac64:	d458      	bmi.n	800ad18 <__sflush_r+0xc0>
 800ac66:	684b      	ldr	r3, [r1, #4]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	dc05      	bgt.n	800ac78 <__sflush_r+0x20>
 800ac6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	dc02      	bgt.n	800ac78 <__sflush_r+0x20>
 800ac72:	2000      	movs	r0, #0
 800ac74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac7a:	2e00      	cmp	r6, #0
 800ac7c:	d0f9      	beq.n	800ac72 <__sflush_r+0x1a>
 800ac7e:	2300      	movs	r3, #0
 800ac80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac84:	682f      	ldr	r7, [r5, #0]
 800ac86:	6a21      	ldr	r1, [r4, #32]
 800ac88:	602b      	str	r3, [r5, #0]
 800ac8a:	d032      	beq.n	800acf2 <__sflush_r+0x9a>
 800ac8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac8e:	89a3      	ldrh	r3, [r4, #12]
 800ac90:	075a      	lsls	r2, r3, #29
 800ac92:	d505      	bpl.n	800aca0 <__sflush_r+0x48>
 800ac94:	6863      	ldr	r3, [r4, #4]
 800ac96:	1ac0      	subs	r0, r0, r3
 800ac98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac9a:	b10b      	cbz	r3, 800aca0 <__sflush_r+0x48>
 800ac9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac9e:	1ac0      	subs	r0, r0, r3
 800aca0:	2300      	movs	r3, #0
 800aca2:	4602      	mov	r2, r0
 800aca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aca6:	6a21      	ldr	r1, [r4, #32]
 800aca8:	4628      	mov	r0, r5
 800acaa:	47b0      	blx	r6
 800acac:	1c43      	adds	r3, r0, #1
 800acae:	89a3      	ldrh	r3, [r4, #12]
 800acb0:	d106      	bne.n	800acc0 <__sflush_r+0x68>
 800acb2:	6829      	ldr	r1, [r5, #0]
 800acb4:	291d      	cmp	r1, #29
 800acb6:	d82b      	bhi.n	800ad10 <__sflush_r+0xb8>
 800acb8:	4a29      	ldr	r2, [pc, #164]	; (800ad60 <__sflush_r+0x108>)
 800acba:	410a      	asrs	r2, r1
 800acbc:	07d6      	lsls	r6, r2, #31
 800acbe:	d427      	bmi.n	800ad10 <__sflush_r+0xb8>
 800acc0:	2200      	movs	r2, #0
 800acc2:	6062      	str	r2, [r4, #4]
 800acc4:	04d9      	lsls	r1, r3, #19
 800acc6:	6922      	ldr	r2, [r4, #16]
 800acc8:	6022      	str	r2, [r4, #0]
 800acca:	d504      	bpl.n	800acd6 <__sflush_r+0x7e>
 800accc:	1c42      	adds	r2, r0, #1
 800acce:	d101      	bne.n	800acd4 <__sflush_r+0x7c>
 800acd0:	682b      	ldr	r3, [r5, #0]
 800acd2:	b903      	cbnz	r3, 800acd6 <__sflush_r+0x7e>
 800acd4:	6560      	str	r0, [r4, #84]	; 0x54
 800acd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acd8:	602f      	str	r7, [r5, #0]
 800acda:	2900      	cmp	r1, #0
 800acdc:	d0c9      	beq.n	800ac72 <__sflush_r+0x1a>
 800acde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ace2:	4299      	cmp	r1, r3
 800ace4:	d002      	beq.n	800acec <__sflush_r+0x94>
 800ace6:	4628      	mov	r0, r5
 800ace8:	f7ff fbce 	bl	800a488 <_free_r>
 800acec:	2000      	movs	r0, #0
 800acee:	6360      	str	r0, [r4, #52]	; 0x34
 800acf0:	e7c0      	b.n	800ac74 <__sflush_r+0x1c>
 800acf2:	2301      	movs	r3, #1
 800acf4:	4628      	mov	r0, r5
 800acf6:	47b0      	blx	r6
 800acf8:	1c41      	adds	r1, r0, #1
 800acfa:	d1c8      	bne.n	800ac8e <__sflush_r+0x36>
 800acfc:	682b      	ldr	r3, [r5, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d0c5      	beq.n	800ac8e <__sflush_r+0x36>
 800ad02:	2b1d      	cmp	r3, #29
 800ad04:	d001      	beq.n	800ad0a <__sflush_r+0xb2>
 800ad06:	2b16      	cmp	r3, #22
 800ad08:	d101      	bne.n	800ad0e <__sflush_r+0xb6>
 800ad0a:	602f      	str	r7, [r5, #0]
 800ad0c:	e7b1      	b.n	800ac72 <__sflush_r+0x1a>
 800ad0e:	89a3      	ldrh	r3, [r4, #12]
 800ad10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad14:	81a3      	strh	r3, [r4, #12]
 800ad16:	e7ad      	b.n	800ac74 <__sflush_r+0x1c>
 800ad18:	690f      	ldr	r7, [r1, #16]
 800ad1a:	2f00      	cmp	r7, #0
 800ad1c:	d0a9      	beq.n	800ac72 <__sflush_r+0x1a>
 800ad1e:	0793      	lsls	r3, r2, #30
 800ad20:	680e      	ldr	r6, [r1, #0]
 800ad22:	bf08      	it	eq
 800ad24:	694b      	ldreq	r3, [r1, #20]
 800ad26:	600f      	str	r7, [r1, #0]
 800ad28:	bf18      	it	ne
 800ad2a:	2300      	movne	r3, #0
 800ad2c:	eba6 0807 	sub.w	r8, r6, r7
 800ad30:	608b      	str	r3, [r1, #8]
 800ad32:	f1b8 0f00 	cmp.w	r8, #0
 800ad36:	dd9c      	ble.n	800ac72 <__sflush_r+0x1a>
 800ad38:	6a21      	ldr	r1, [r4, #32]
 800ad3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad3c:	4643      	mov	r3, r8
 800ad3e:	463a      	mov	r2, r7
 800ad40:	4628      	mov	r0, r5
 800ad42:	47b0      	blx	r6
 800ad44:	2800      	cmp	r0, #0
 800ad46:	dc06      	bgt.n	800ad56 <__sflush_r+0xfe>
 800ad48:	89a3      	ldrh	r3, [r4, #12]
 800ad4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad4e:	81a3      	strh	r3, [r4, #12]
 800ad50:	f04f 30ff 	mov.w	r0, #4294967295
 800ad54:	e78e      	b.n	800ac74 <__sflush_r+0x1c>
 800ad56:	4407      	add	r7, r0
 800ad58:	eba8 0800 	sub.w	r8, r8, r0
 800ad5c:	e7e9      	b.n	800ad32 <__sflush_r+0xda>
 800ad5e:	bf00      	nop
 800ad60:	dfbffffe 	.word	0xdfbffffe

0800ad64 <_fflush_r>:
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	690b      	ldr	r3, [r1, #16]
 800ad68:	4605      	mov	r5, r0
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	b913      	cbnz	r3, 800ad74 <_fflush_r+0x10>
 800ad6e:	2500      	movs	r5, #0
 800ad70:	4628      	mov	r0, r5
 800ad72:	bd38      	pop	{r3, r4, r5, pc}
 800ad74:	b118      	cbz	r0, 800ad7e <_fflush_r+0x1a>
 800ad76:	6a03      	ldr	r3, [r0, #32]
 800ad78:	b90b      	cbnz	r3, 800ad7e <_fflush_r+0x1a>
 800ad7a:	f7ff f9e3 	bl	800a144 <__sinit>
 800ad7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d0f3      	beq.n	800ad6e <_fflush_r+0xa>
 800ad86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad88:	07d0      	lsls	r0, r2, #31
 800ad8a:	d404      	bmi.n	800ad96 <_fflush_r+0x32>
 800ad8c:	0599      	lsls	r1, r3, #22
 800ad8e:	d402      	bmi.n	800ad96 <_fflush_r+0x32>
 800ad90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad92:	f7ff fb59 	bl	800a448 <__retarget_lock_acquire_recursive>
 800ad96:	4628      	mov	r0, r5
 800ad98:	4621      	mov	r1, r4
 800ad9a:	f7ff ff5d 	bl	800ac58 <__sflush_r>
 800ad9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ada0:	07da      	lsls	r2, r3, #31
 800ada2:	4605      	mov	r5, r0
 800ada4:	d4e4      	bmi.n	800ad70 <_fflush_r+0xc>
 800ada6:	89a3      	ldrh	r3, [r4, #12]
 800ada8:	059b      	lsls	r3, r3, #22
 800adaa:	d4e1      	bmi.n	800ad70 <_fflush_r+0xc>
 800adac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adae:	f7ff fb4c 	bl	800a44a <__retarget_lock_release_recursive>
 800adb2:	e7dd      	b.n	800ad70 <_fflush_r+0xc>

0800adb4 <fiprintf>:
 800adb4:	b40e      	push	{r1, r2, r3}
 800adb6:	b503      	push	{r0, r1, lr}
 800adb8:	4601      	mov	r1, r0
 800adba:	ab03      	add	r3, sp, #12
 800adbc:	4805      	ldr	r0, [pc, #20]	; (800add4 <fiprintf+0x20>)
 800adbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800adc2:	6800      	ldr	r0, [r0, #0]
 800adc4:	9301      	str	r3, [sp, #4]
 800adc6:	f000 f89f 	bl	800af08 <_vfiprintf_r>
 800adca:	b002      	add	sp, #8
 800adcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800add0:	b003      	add	sp, #12
 800add2:	4770      	bx	lr
 800add4:	2000012c 	.word	0x2000012c

0800add8 <memmove>:
 800add8:	4288      	cmp	r0, r1
 800adda:	b510      	push	{r4, lr}
 800addc:	eb01 0402 	add.w	r4, r1, r2
 800ade0:	d902      	bls.n	800ade8 <memmove+0x10>
 800ade2:	4284      	cmp	r4, r0
 800ade4:	4623      	mov	r3, r4
 800ade6:	d807      	bhi.n	800adf8 <memmove+0x20>
 800ade8:	1e43      	subs	r3, r0, #1
 800adea:	42a1      	cmp	r1, r4
 800adec:	d008      	beq.n	800ae00 <memmove+0x28>
 800adee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adf6:	e7f8      	b.n	800adea <memmove+0x12>
 800adf8:	4402      	add	r2, r0
 800adfa:	4601      	mov	r1, r0
 800adfc:	428a      	cmp	r2, r1
 800adfe:	d100      	bne.n	800ae02 <memmove+0x2a>
 800ae00:	bd10      	pop	{r4, pc}
 800ae02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae0a:	e7f7      	b.n	800adfc <memmove+0x24>

0800ae0c <_sbrk_r>:
 800ae0c:	b538      	push	{r3, r4, r5, lr}
 800ae0e:	4d06      	ldr	r5, [pc, #24]	; (800ae28 <_sbrk_r+0x1c>)
 800ae10:	2300      	movs	r3, #0
 800ae12:	4604      	mov	r4, r0
 800ae14:	4608      	mov	r0, r1
 800ae16:	602b      	str	r3, [r5, #0]
 800ae18:	f7f6 fd40 	bl	800189c <_sbrk>
 800ae1c:	1c43      	adds	r3, r0, #1
 800ae1e:	d102      	bne.n	800ae26 <_sbrk_r+0x1a>
 800ae20:	682b      	ldr	r3, [r5, #0]
 800ae22:	b103      	cbz	r3, 800ae26 <_sbrk_r+0x1a>
 800ae24:	6023      	str	r3, [r4, #0]
 800ae26:	bd38      	pop	{r3, r4, r5, pc}
 800ae28:	200006ac 	.word	0x200006ac

0800ae2c <memcpy>:
 800ae2c:	440a      	add	r2, r1
 800ae2e:	4291      	cmp	r1, r2
 800ae30:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae34:	d100      	bne.n	800ae38 <memcpy+0xc>
 800ae36:	4770      	bx	lr
 800ae38:	b510      	push	{r4, lr}
 800ae3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae42:	4291      	cmp	r1, r2
 800ae44:	d1f9      	bne.n	800ae3a <memcpy+0xe>
 800ae46:	bd10      	pop	{r4, pc}

0800ae48 <abort>:
 800ae48:	b508      	push	{r3, lr}
 800ae4a:	2006      	movs	r0, #6
 800ae4c:	f000 fa34 	bl	800b2b8 <raise>
 800ae50:	2001      	movs	r0, #1
 800ae52:	f7f6 fcab 	bl	80017ac <_exit>

0800ae56 <_realloc_r>:
 800ae56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae5a:	4680      	mov	r8, r0
 800ae5c:	4614      	mov	r4, r2
 800ae5e:	460e      	mov	r6, r1
 800ae60:	b921      	cbnz	r1, 800ae6c <_realloc_r+0x16>
 800ae62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae66:	4611      	mov	r1, r2
 800ae68:	f7ff bb82 	b.w	800a570 <_malloc_r>
 800ae6c:	b92a      	cbnz	r2, 800ae7a <_realloc_r+0x24>
 800ae6e:	f7ff fb0b 	bl	800a488 <_free_r>
 800ae72:	4625      	mov	r5, r4
 800ae74:	4628      	mov	r0, r5
 800ae76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae7a:	f000 fa39 	bl	800b2f0 <_malloc_usable_size_r>
 800ae7e:	4284      	cmp	r4, r0
 800ae80:	4607      	mov	r7, r0
 800ae82:	d802      	bhi.n	800ae8a <_realloc_r+0x34>
 800ae84:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae88:	d812      	bhi.n	800aeb0 <_realloc_r+0x5a>
 800ae8a:	4621      	mov	r1, r4
 800ae8c:	4640      	mov	r0, r8
 800ae8e:	f7ff fb6f 	bl	800a570 <_malloc_r>
 800ae92:	4605      	mov	r5, r0
 800ae94:	2800      	cmp	r0, #0
 800ae96:	d0ed      	beq.n	800ae74 <_realloc_r+0x1e>
 800ae98:	42bc      	cmp	r4, r7
 800ae9a:	4622      	mov	r2, r4
 800ae9c:	4631      	mov	r1, r6
 800ae9e:	bf28      	it	cs
 800aea0:	463a      	movcs	r2, r7
 800aea2:	f7ff ffc3 	bl	800ae2c <memcpy>
 800aea6:	4631      	mov	r1, r6
 800aea8:	4640      	mov	r0, r8
 800aeaa:	f7ff faed 	bl	800a488 <_free_r>
 800aeae:	e7e1      	b.n	800ae74 <_realloc_r+0x1e>
 800aeb0:	4635      	mov	r5, r6
 800aeb2:	e7df      	b.n	800ae74 <_realloc_r+0x1e>

0800aeb4 <__sfputc_r>:
 800aeb4:	6893      	ldr	r3, [r2, #8]
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	b410      	push	{r4}
 800aebc:	6093      	str	r3, [r2, #8]
 800aebe:	da08      	bge.n	800aed2 <__sfputc_r+0x1e>
 800aec0:	6994      	ldr	r4, [r2, #24]
 800aec2:	42a3      	cmp	r3, r4
 800aec4:	db01      	blt.n	800aeca <__sfputc_r+0x16>
 800aec6:	290a      	cmp	r1, #10
 800aec8:	d103      	bne.n	800aed2 <__sfputc_r+0x1e>
 800aeca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aece:	f000 b935 	b.w	800b13c <__swbuf_r>
 800aed2:	6813      	ldr	r3, [r2, #0]
 800aed4:	1c58      	adds	r0, r3, #1
 800aed6:	6010      	str	r0, [r2, #0]
 800aed8:	7019      	strb	r1, [r3, #0]
 800aeda:	4608      	mov	r0, r1
 800aedc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aee0:	4770      	bx	lr

0800aee2 <__sfputs_r>:
 800aee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee4:	4606      	mov	r6, r0
 800aee6:	460f      	mov	r7, r1
 800aee8:	4614      	mov	r4, r2
 800aeea:	18d5      	adds	r5, r2, r3
 800aeec:	42ac      	cmp	r4, r5
 800aeee:	d101      	bne.n	800aef4 <__sfputs_r+0x12>
 800aef0:	2000      	movs	r0, #0
 800aef2:	e007      	b.n	800af04 <__sfputs_r+0x22>
 800aef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aef8:	463a      	mov	r2, r7
 800aefa:	4630      	mov	r0, r6
 800aefc:	f7ff ffda 	bl	800aeb4 <__sfputc_r>
 800af00:	1c43      	adds	r3, r0, #1
 800af02:	d1f3      	bne.n	800aeec <__sfputs_r+0xa>
 800af04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af08 <_vfiprintf_r>:
 800af08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af0c:	460d      	mov	r5, r1
 800af0e:	b09d      	sub	sp, #116	; 0x74
 800af10:	4614      	mov	r4, r2
 800af12:	4698      	mov	r8, r3
 800af14:	4606      	mov	r6, r0
 800af16:	b118      	cbz	r0, 800af20 <_vfiprintf_r+0x18>
 800af18:	6a03      	ldr	r3, [r0, #32]
 800af1a:	b90b      	cbnz	r3, 800af20 <_vfiprintf_r+0x18>
 800af1c:	f7ff f912 	bl	800a144 <__sinit>
 800af20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af22:	07d9      	lsls	r1, r3, #31
 800af24:	d405      	bmi.n	800af32 <_vfiprintf_r+0x2a>
 800af26:	89ab      	ldrh	r3, [r5, #12]
 800af28:	059a      	lsls	r2, r3, #22
 800af2a:	d402      	bmi.n	800af32 <_vfiprintf_r+0x2a>
 800af2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af2e:	f7ff fa8b 	bl	800a448 <__retarget_lock_acquire_recursive>
 800af32:	89ab      	ldrh	r3, [r5, #12]
 800af34:	071b      	lsls	r3, r3, #28
 800af36:	d501      	bpl.n	800af3c <_vfiprintf_r+0x34>
 800af38:	692b      	ldr	r3, [r5, #16]
 800af3a:	b99b      	cbnz	r3, 800af64 <_vfiprintf_r+0x5c>
 800af3c:	4629      	mov	r1, r5
 800af3e:	4630      	mov	r0, r6
 800af40:	f000 f93a 	bl	800b1b8 <__swsetup_r>
 800af44:	b170      	cbz	r0, 800af64 <_vfiprintf_r+0x5c>
 800af46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af48:	07dc      	lsls	r4, r3, #31
 800af4a:	d504      	bpl.n	800af56 <_vfiprintf_r+0x4e>
 800af4c:	f04f 30ff 	mov.w	r0, #4294967295
 800af50:	b01d      	add	sp, #116	; 0x74
 800af52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af56:	89ab      	ldrh	r3, [r5, #12]
 800af58:	0598      	lsls	r0, r3, #22
 800af5a:	d4f7      	bmi.n	800af4c <_vfiprintf_r+0x44>
 800af5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af5e:	f7ff fa74 	bl	800a44a <__retarget_lock_release_recursive>
 800af62:	e7f3      	b.n	800af4c <_vfiprintf_r+0x44>
 800af64:	2300      	movs	r3, #0
 800af66:	9309      	str	r3, [sp, #36]	; 0x24
 800af68:	2320      	movs	r3, #32
 800af6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800af72:	2330      	movs	r3, #48	; 0x30
 800af74:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b128 <_vfiprintf_r+0x220>
 800af78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af7c:	f04f 0901 	mov.w	r9, #1
 800af80:	4623      	mov	r3, r4
 800af82:	469a      	mov	sl, r3
 800af84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af88:	b10a      	cbz	r2, 800af8e <_vfiprintf_r+0x86>
 800af8a:	2a25      	cmp	r2, #37	; 0x25
 800af8c:	d1f9      	bne.n	800af82 <_vfiprintf_r+0x7a>
 800af8e:	ebba 0b04 	subs.w	fp, sl, r4
 800af92:	d00b      	beq.n	800afac <_vfiprintf_r+0xa4>
 800af94:	465b      	mov	r3, fp
 800af96:	4622      	mov	r2, r4
 800af98:	4629      	mov	r1, r5
 800af9a:	4630      	mov	r0, r6
 800af9c:	f7ff ffa1 	bl	800aee2 <__sfputs_r>
 800afa0:	3001      	adds	r0, #1
 800afa2:	f000 80a9 	beq.w	800b0f8 <_vfiprintf_r+0x1f0>
 800afa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afa8:	445a      	add	r2, fp
 800afaa:	9209      	str	r2, [sp, #36]	; 0x24
 800afac:	f89a 3000 	ldrb.w	r3, [sl]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f000 80a1 	beq.w	800b0f8 <_vfiprintf_r+0x1f0>
 800afb6:	2300      	movs	r3, #0
 800afb8:	f04f 32ff 	mov.w	r2, #4294967295
 800afbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afc0:	f10a 0a01 	add.w	sl, sl, #1
 800afc4:	9304      	str	r3, [sp, #16]
 800afc6:	9307      	str	r3, [sp, #28]
 800afc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afcc:	931a      	str	r3, [sp, #104]	; 0x68
 800afce:	4654      	mov	r4, sl
 800afd0:	2205      	movs	r2, #5
 800afd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afd6:	4854      	ldr	r0, [pc, #336]	; (800b128 <_vfiprintf_r+0x220>)
 800afd8:	f7f5 f93a 	bl	8000250 <memchr>
 800afdc:	9a04      	ldr	r2, [sp, #16]
 800afde:	b9d8      	cbnz	r0, 800b018 <_vfiprintf_r+0x110>
 800afe0:	06d1      	lsls	r1, r2, #27
 800afe2:	bf44      	itt	mi
 800afe4:	2320      	movmi	r3, #32
 800afe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afea:	0713      	lsls	r3, r2, #28
 800afec:	bf44      	itt	mi
 800afee:	232b      	movmi	r3, #43	; 0x2b
 800aff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aff4:	f89a 3000 	ldrb.w	r3, [sl]
 800aff8:	2b2a      	cmp	r3, #42	; 0x2a
 800affa:	d015      	beq.n	800b028 <_vfiprintf_r+0x120>
 800affc:	9a07      	ldr	r2, [sp, #28]
 800affe:	4654      	mov	r4, sl
 800b000:	2000      	movs	r0, #0
 800b002:	f04f 0c0a 	mov.w	ip, #10
 800b006:	4621      	mov	r1, r4
 800b008:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b00c:	3b30      	subs	r3, #48	; 0x30
 800b00e:	2b09      	cmp	r3, #9
 800b010:	d94d      	bls.n	800b0ae <_vfiprintf_r+0x1a6>
 800b012:	b1b0      	cbz	r0, 800b042 <_vfiprintf_r+0x13a>
 800b014:	9207      	str	r2, [sp, #28]
 800b016:	e014      	b.n	800b042 <_vfiprintf_r+0x13a>
 800b018:	eba0 0308 	sub.w	r3, r0, r8
 800b01c:	fa09 f303 	lsl.w	r3, r9, r3
 800b020:	4313      	orrs	r3, r2
 800b022:	9304      	str	r3, [sp, #16]
 800b024:	46a2      	mov	sl, r4
 800b026:	e7d2      	b.n	800afce <_vfiprintf_r+0xc6>
 800b028:	9b03      	ldr	r3, [sp, #12]
 800b02a:	1d19      	adds	r1, r3, #4
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	9103      	str	r1, [sp, #12]
 800b030:	2b00      	cmp	r3, #0
 800b032:	bfbb      	ittet	lt
 800b034:	425b      	neglt	r3, r3
 800b036:	f042 0202 	orrlt.w	r2, r2, #2
 800b03a:	9307      	strge	r3, [sp, #28]
 800b03c:	9307      	strlt	r3, [sp, #28]
 800b03e:	bfb8      	it	lt
 800b040:	9204      	strlt	r2, [sp, #16]
 800b042:	7823      	ldrb	r3, [r4, #0]
 800b044:	2b2e      	cmp	r3, #46	; 0x2e
 800b046:	d10c      	bne.n	800b062 <_vfiprintf_r+0x15a>
 800b048:	7863      	ldrb	r3, [r4, #1]
 800b04a:	2b2a      	cmp	r3, #42	; 0x2a
 800b04c:	d134      	bne.n	800b0b8 <_vfiprintf_r+0x1b0>
 800b04e:	9b03      	ldr	r3, [sp, #12]
 800b050:	1d1a      	adds	r2, r3, #4
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	9203      	str	r2, [sp, #12]
 800b056:	2b00      	cmp	r3, #0
 800b058:	bfb8      	it	lt
 800b05a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b05e:	3402      	adds	r4, #2
 800b060:	9305      	str	r3, [sp, #20]
 800b062:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b138 <_vfiprintf_r+0x230>
 800b066:	7821      	ldrb	r1, [r4, #0]
 800b068:	2203      	movs	r2, #3
 800b06a:	4650      	mov	r0, sl
 800b06c:	f7f5 f8f0 	bl	8000250 <memchr>
 800b070:	b138      	cbz	r0, 800b082 <_vfiprintf_r+0x17a>
 800b072:	9b04      	ldr	r3, [sp, #16]
 800b074:	eba0 000a 	sub.w	r0, r0, sl
 800b078:	2240      	movs	r2, #64	; 0x40
 800b07a:	4082      	lsls	r2, r0
 800b07c:	4313      	orrs	r3, r2
 800b07e:	3401      	adds	r4, #1
 800b080:	9304      	str	r3, [sp, #16]
 800b082:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b086:	4829      	ldr	r0, [pc, #164]	; (800b12c <_vfiprintf_r+0x224>)
 800b088:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b08c:	2206      	movs	r2, #6
 800b08e:	f7f5 f8df 	bl	8000250 <memchr>
 800b092:	2800      	cmp	r0, #0
 800b094:	d03f      	beq.n	800b116 <_vfiprintf_r+0x20e>
 800b096:	4b26      	ldr	r3, [pc, #152]	; (800b130 <_vfiprintf_r+0x228>)
 800b098:	bb1b      	cbnz	r3, 800b0e2 <_vfiprintf_r+0x1da>
 800b09a:	9b03      	ldr	r3, [sp, #12]
 800b09c:	3307      	adds	r3, #7
 800b09e:	f023 0307 	bic.w	r3, r3, #7
 800b0a2:	3308      	adds	r3, #8
 800b0a4:	9303      	str	r3, [sp, #12]
 800b0a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0a8:	443b      	add	r3, r7
 800b0aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b0ac:	e768      	b.n	800af80 <_vfiprintf_r+0x78>
 800b0ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0b2:	460c      	mov	r4, r1
 800b0b4:	2001      	movs	r0, #1
 800b0b6:	e7a6      	b.n	800b006 <_vfiprintf_r+0xfe>
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	3401      	adds	r4, #1
 800b0bc:	9305      	str	r3, [sp, #20]
 800b0be:	4619      	mov	r1, r3
 800b0c0:	f04f 0c0a 	mov.w	ip, #10
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0ca:	3a30      	subs	r2, #48	; 0x30
 800b0cc:	2a09      	cmp	r2, #9
 800b0ce:	d903      	bls.n	800b0d8 <_vfiprintf_r+0x1d0>
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d0c6      	beq.n	800b062 <_vfiprintf_r+0x15a>
 800b0d4:	9105      	str	r1, [sp, #20]
 800b0d6:	e7c4      	b.n	800b062 <_vfiprintf_r+0x15a>
 800b0d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0dc:	4604      	mov	r4, r0
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e7f0      	b.n	800b0c4 <_vfiprintf_r+0x1bc>
 800b0e2:	ab03      	add	r3, sp, #12
 800b0e4:	9300      	str	r3, [sp, #0]
 800b0e6:	462a      	mov	r2, r5
 800b0e8:	4b12      	ldr	r3, [pc, #72]	; (800b134 <_vfiprintf_r+0x22c>)
 800b0ea:	a904      	add	r1, sp, #16
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	f3af 8000 	nop.w
 800b0f2:	4607      	mov	r7, r0
 800b0f4:	1c78      	adds	r0, r7, #1
 800b0f6:	d1d6      	bne.n	800b0a6 <_vfiprintf_r+0x19e>
 800b0f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0fa:	07d9      	lsls	r1, r3, #31
 800b0fc:	d405      	bmi.n	800b10a <_vfiprintf_r+0x202>
 800b0fe:	89ab      	ldrh	r3, [r5, #12]
 800b100:	059a      	lsls	r2, r3, #22
 800b102:	d402      	bmi.n	800b10a <_vfiprintf_r+0x202>
 800b104:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b106:	f7ff f9a0 	bl	800a44a <__retarget_lock_release_recursive>
 800b10a:	89ab      	ldrh	r3, [r5, #12]
 800b10c:	065b      	lsls	r3, r3, #25
 800b10e:	f53f af1d 	bmi.w	800af4c <_vfiprintf_r+0x44>
 800b112:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b114:	e71c      	b.n	800af50 <_vfiprintf_r+0x48>
 800b116:	ab03      	add	r3, sp, #12
 800b118:	9300      	str	r3, [sp, #0]
 800b11a:	462a      	mov	r2, r5
 800b11c:	4b05      	ldr	r3, [pc, #20]	; (800b134 <_vfiprintf_r+0x22c>)
 800b11e:	a904      	add	r1, sp, #16
 800b120:	4630      	mov	r0, r6
 800b122:	f7ff fc77 	bl	800aa14 <_printf_i>
 800b126:	e7e4      	b.n	800b0f2 <_vfiprintf_r+0x1ea>
 800b128:	0800b772 	.word	0x0800b772
 800b12c:	0800b77c 	.word	0x0800b77c
 800b130:	00000000 	.word	0x00000000
 800b134:	0800aee3 	.word	0x0800aee3
 800b138:	0800b778 	.word	0x0800b778

0800b13c <__swbuf_r>:
 800b13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b13e:	460e      	mov	r6, r1
 800b140:	4614      	mov	r4, r2
 800b142:	4605      	mov	r5, r0
 800b144:	b118      	cbz	r0, 800b14e <__swbuf_r+0x12>
 800b146:	6a03      	ldr	r3, [r0, #32]
 800b148:	b90b      	cbnz	r3, 800b14e <__swbuf_r+0x12>
 800b14a:	f7fe fffb 	bl	800a144 <__sinit>
 800b14e:	69a3      	ldr	r3, [r4, #24]
 800b150:	60a3      	str	r3, [r4, #8]
 800b152:	89a3      	ldrh	r3, [r4, #12]
 800b154:	071a      	lsls	r2, r3, #28
 800b156:	d525      	bpl.n	800b1a4 <__swbuf_r+0x68>
 800b158:	6923      	ldr	r3, [r4, #16]
 800b15a:	b31b      	cbz	r3, 800b1a4 <__swbuf_r+0x68>
 800b15c:	6823      	ldr	r3, [r4, #0]
 800b15e:	6922      	ldr	r2, [r4, #16]
 800b160:	1a98      	subs	r0, r3, r2
 800b162:	6963      	ldr	r3, [r4, #20]
 800b164:	b2f6      	uxtb	r6, r6
 800b166:	4283      	cmp	r3, r0
 800b168:	4637      	mov	r7, r6
 800b16a:	dc04      	bgt.n	800b176 <__swbuf_r+0x3a>
 800b16c:	4621      	mov	r1, r4
 800b16e:	4628      	mov	r0, r5
 800b170:	f7ff fdf8 	bl	800ad64 <_fflush_r>
 800b174:	b9e0      	cbnz	r0, 800b1b0 <__swbuf_r+0x74>
 800b176:	68a3      	ldr	r3, [r4, #8]
 800b178:	3b01      	subs	r3, #1
 800b17a:	60a3      	str	r3, [r4, #8]
 800b17c:	6823      	ldr	r3, [r4, #0]
 800b17e:	1c5a      	adds	r2, r3, #1
 800b180:	6022      	str	r2, [r4, #0]
 800b182:	701e      	strb	r6, [r3, #0]
 800b184:	6962      	ldr	r2, [r4, #20]
 800b186:	1c43      	adds	r3, r0, #1
 800b188:	429a      	cmp	r2, r3
 800b18a:	d004      	beq.n	800b196 <__swbuf_r+0x5a>
 800b18c:	89a3      	ldrh	r3, [r4, #12]
 800b18e:	07db      	lsls	r3, r3, #31
 800b190:	d506      	bpl.n	800b1a0 <__swbuf_r+0x64>
 800b192:	2e0a      	cmp	r6, #10
 800b194:	d104      	bne.n	800b1a0 <__swbuf_r+0x64>
 800b196:	4621      	mov	r1, r4
 800b198:	4628      	mov	r0, r5
 800b19a:	f7ff fde3 	bl	800ad64 <_fflush_r>
 800b19e:	b938      	cbnz	r0, 800b1b0 <__swbuf_r+0x74>
 800b1a0:	4638      	mov	r0, r7
 800b1a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1a4:	4621      	mov	r1, r4
 800b1a6:	4628      	mov	r0, r5
 800b1a8:	f000 f806 	bl	800b1b8 <__swsetup_r>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d0d5      	beq.n	800b15c <__swbuf_r+0x20>
 800b1b0:	f04f 37ff 	mov.w	r7, #4294967295
 800b1b4:	e7f4      	b.n	800b1a0 <__swbuf_r+0x64>
	...

0800b1b8 <__swsetup_r>:
 800b1b8:	b538      	push	{r3, r4, r5, lr}
 800b1ba:	4b2a      	ldr	r3, [pc, #168]	; (800b264 <__swsetup_r+0xac>)
 800b1bc:	4605      	mov	r5, r0
 800b1be:	6818      	ldr	r0, [r3, #0]
 800b1c0:	460c      	mov	r4, r1
 800b1c2:	b118      	cbz	r0, 800b1cc <__swsetup_r+0x14>
 800b1c4:	6a03      	ldr	r3, [r0, #32]
 800b1c6:	b90b      	cbnz	r3, 800b1cc <__swsetup_r+0x14>
 800b1c8:	f7fe ffbc 	bl	800a144 <__sinit>
 800b1cc:	89a3      	ldrh	r3, [r4, #12]
 800b1ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1d2:	0718      	lsls	r0, r3, #28
 800b1d4:	d422      	bmi.n	800b21c <__swsetup_r+0x64>
 800b1d6:	06d9      	lsls	r1, r3, #27
 800b1d8:	d407      	bmi.n	800b1ea <__swsetup_r+0x32>
 800b1da:	2309      	movs	r3, #9
 800b1dc:	602b      	str	r3, [r5, #0]
 800b1de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b1e2:	81a3      	strh	r3, [r4, #12]
 800b1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e8:	e034      	b.n	800b254 <__swsetup_r+0x9c>
 800b1ea:	0758      	lsls	r0, r3, #29
 800b1ec:	d512      	bpl.n	800b214 <__swsetup_r+0x5c>
 800b1ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1f0:	b141      	cbz	r1, 800b204 <__swsetup_r+0x4c>
 800b1f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1f6:	4299      	cmp	r1, r3
 800b1f8:	d002      	beq.n	800b200 <__swsetup_r+0x48>
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	f7ff f944 	bl	800a488 <_free_r>
 800b200:	2300      	movs	r3, #0
 800b202:	6363      	str	r3, [r4, #52]	; 0x34
 800b204:	89a3      	ldrh	r3, [r4, #12]
 800b206:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b20a:	81a3      	strh	r3, [r4, #12]
 800b20c:	2300      	movs	r3, #0
 800b20e:	6063      	str	r3, [r4, #4]
 800b210:	6923      	ldr	r3, [r4, #16]
 800b212:	6023      	str	r3, [r4, #0]
 800b214:	89a3      	ldrh	r3, [r4, #12]
 800b216:	f043 0308 	orr.w	r3, r3, #8
 800b21a:	81a3      	strh	r3, [r4, #12]
 800b21c:	6923      	ldr	r3, [r4, #16]
 800b21e:	b94b      	cbnz	r3, 800b234 <__swsetup_r+0x7c>
 800b220:	89a3      	ldrh	r3, [r4, #12]
 800b222:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b22a:	d003      	beq.n	800b234 <__swsetup_r+0x7c>
 800b22c:	4621      	mov	r1, r4
 800b22e:	4628      	mov	r0, r5
 800b230:	f000 f88c 	bl	800b34c <__smakebuf_r>
 800b234:	89a0      	ldrh	r0, [r4, #12]
 800b236:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b23a:	f010 0301 	ands.w	r3, r0, #1
 800b23e:	d00a      	beq.n	800b256 <__swsetup_r+0x9e>
 800b240:	2300      	movs	r3, #0
 800b242:	60a3      	str	r3, [r4, #8]
 800b244:	6963      	ldr	r3, [r4, #20]
 800b246:	425b      	negs	r3, r3
 800b248:	61a3      	str	r3, [r4, #24]
 800b24a:	6923      	ldr	r3, [r4, #16]
 800b24c:	b943      	cbnz	r3, 800b260 <__swsetup_r+0xa8>
 800b24e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b252:	d1c4      	bne.n	800b1de <__swsetup_r+0x26>
 800b254:	bd38      	pop	{r3, r4, r5, pc}
 800b256:	0781      	lsls	r1, r0, #30
 800b258:	bf58      	it	pl
 800b25a:	6963      	ldrpl	r3, [r4, #20]
 800b25c:	60a3      	str	r3, [r4, #8]
 800b25e:	e7f4      	b.n	800b24a <__swsetup_r+0x92>
 800b260:	2000      	movs	r0, #0
 800b262:	e7f7      	b.n	800b254 <__swsetup_r+0x9c>
 800b264:	2000012c 	.word	0x2000012c

0800b268 <_raise_r>:
 800b268:	291f      	cmp	r1, #31
 800b26a:	b538      	push	{r3, r4, r5, lr}
 800b26c:	4604      	mov	r4, r0
 800b26e:	460d      	mov	r5, r1
 800b270:	d904      	bls.n	800b27c <_raise_r+0x14>
 800b272:	2316      	movs	r3, #22
 800b274:	6003      	str	r3, [r0, #0]
 800b276:	f04f 30ff 	mov.w	r0, #4294967295
 800b27a:	bd38      	pop	{r3, r4, r5, pc}
 800b27c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b27e:	b112      	cbz	r2, 800b286 <_raise_r+0x1e>
 800b280:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b284:	b94b      	cbnz	r3, 800b29a <_raise_r+0x32>
 800b286:	4620      	mov	r0, r4
 800b288:	f000 f830 	bl	800b2ec <_getpid_r>
 800b28c:	462a      	mov	r2, r5
 800b28e:	4601      	mov	r1, r0
 800b290:	4620      	mov	r0, r4
 800b292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b296:	f000 b817 	b.w	800b2c8 <_kill_r>
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d00a      	beq.n	800b2b4 <_raise_r+0x4c>
 800b29e:	1c59      	adds	r1, r3, #1
 800b2a0:	d103      	bne.n	800b2aa <_raise_r+0x42>
 800b2a2:	2316      	movs	r3, #22
 800b2a4:	6003      	str	r3, [r0, #0]
 800b2a6:	2001      	movs	r0, #1
 800b2a8:	e7e7      	b.n	800b27a <_raise_r+0x12>
 800b2aa:	2400      	movs	r4, #0
 800b2ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b2b0:	4628      	mov	r0, r5
 800b2b2:	4798      	blx	r3
 800b2b4:	2000      	movs	r0, #0
 800b2b6:	e7e0      	b.n	800b27a <_raise_r+0x12>

0800b2b8 <raise>:
 800b2b8:	4b02      	ldr	r3, [pc, #8]	; (800b2c4 <raise+0xc>)
 800b2ba:	4601      	mov	r1, r0
 800b2bc:	6818      	ldr	r0, [r3, #0]
 800b2be:	f7ff bfd3 	b.w	800b268 <_raise_r>
 800b2c2:	bf00      	nop
 800b2c4:	2000012c 	.word	0x2000012c

0800b2c8 <_kill_r>:
 800b2c8:	b538      	push	{r3, r4, r5, lr}
 800b2ca:	4d07      	ldr	r5, [pc, #28]	; (800b2e8 <_kill_r+0x20>)
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	4604      	mov	r4, r0
 800b2d0:	4608      	mov	r0, r1
 800b2d2:	4611      	mov	r1, r2
 800b2d4:	602b      	str	r3, [r5, #0]
 800b2d6:	f7f6 fa59 	bl	800178c <_kill>
 800b2da:	1c43      	adds	r3, r0, #1
 800b2dc:	d102      	bne.n	800b2e4 <_kill_r+0x1c>
 800b2de:	682b      	ldr	r3, [r5, #0]
 800b2e0:	b103      	cbz	r3, 800b2e4 <_kill_r+0x1c>
 800b2e2:	6023      	str	r3, [r4, #0]
 800b2e4:	bd38      	pop	{r3, r4, r5, pc}
 800b2e6:	bf00      	nop
 800b2e8:	200006ac 	.word	0x200006ac

0800b2ec <_getpid_r>:
 800b2ec:	f7f6 ba46 	b.w	800177c <_getpid>

0800b2f0 <_malloc_usable_size_r>:
 800b2f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2f4:	1f18      	subs	r0, r3, #4
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	bfbc      	itt	lt
 800b2fa:	580b      	ldrlt	r3, [r1, r0]
 800b2fc:	18c0      	addlt	r0, r0, r3
 800b2fe:	4770      	bx	lr

0800b300 <__swhatbuf_r>:
 800b300:	b570      	push	{r4, r5, r6, lr}
 800b302:	460c      	mov	r4, r1
 800b304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b308:	2900      	cmp	r1, #0
 800b30a:	b096      	sub	sp, #88	; 0x58
 800b30c:	4615      	mov	r5, r2
 800b30e:	461e      	mov	r6, r3
 800b310:	da0d      	bge.n	800b32e <__swhatbuf_r+0x2e>
 800b312:	89a3      	ldrh	r3, [r4, #12]
 800b314:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b318:	f04f 0100 	mov.w	r1, #0
 800b31c:	bf0c      	ite	eq
 800b31e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b322:	2340      	movne	r3, #64	; 0x40
 800b324:	2000      	movs	r0, #0
 800b326:	6031      	str	r1, [r6, #0]
 800b328:	602b      	str	r3, [r5, #0]
 800b32a:	b016      	add	sp, #88	; 0x58
 800b32c:	bd70      	pop	{r4, r5, r6, pc}
 800b32e:	466a      	mov	r2, sp
 800b330:	f000 f848 	bl	800b3c4 <_fstat_r>
 800b334:	2800      	cmp	r0, #0
 800b336:	dbec      	blt.n	800b312 <__swhatbuf_r+0x12>
 800b338:	9901      	ldr	r1, [sp, #4]
 800b33a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b33e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b342:	4259      	negs	r1, r3
 800b344:	4159      	adcs	r1, r3
 800b346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b34a:	e7eb      	b.n	800b324 <__swhatbuf_r+0x24>

0800b34c <__smakebuf_r>:
 800b34c:	898b      	ldrh	r3, [r1, #12]
 800b34e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b350:	079d      	lsls	r5, r3, #30
 800b352:	4606      	mov	r6, r0
 800b354:	460c      	mov	r4, r1
 800b356:	d507      	bpl.n	800b368 <__smakebuf_r+0x1c>
 800b358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b35c:	6023      	str	r3, [r4, #0]
 800b35e:	6123      	str	r3, [r4, #16]
 800b360:	2301      	movs	r3, #1
 800b362:	6163      	str	r3, [r4, #20]
 800b364:	b002      	add	sp, #8
 800b366:	bd70      	pop	{r4, r5, r6, pc}
 800b368:	ab01      	add	r3, sp, #4
 800b36a:	466a      	mov	r2, sp
 800b36c:	f7ff ffc8 	bl	800b300 <__swhatbuf_r>
 800b370:	9900      	ldr	r1, [sp, #0]
 800b372:	4605      	mov	r5, r0
 800b374:	4630      	mov	r0, r6
 800b376:	f7ff f8fb 	bl	800a570 <_malloc_r>
 800b37a:	b948      	cbnz	r0, 800b390 <__smakebuf_r+0x44>
 800b37c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b380:	059a      	lsls	r2, r3, #22
 800b382:	d4ef      	bmi.n	800b364 <__smakebuf_r+0x18>
 800b384:	f023 0303 	bic.w	r3, r3, #3
 800b388:	f043 0302 	orr.w	r3, r3, #2
 800b38c:	81a3      	strh	r3, [r4, #12]
 800b38e:	e7e3      	b.n	800b358 <__smakebuf_r+0xc>
 800b390:	89a3      	ldrh	r3, [r4, #12]
 800b392:	6020      	str	r0, [r4, #0]
 800b394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b398:	81a3      	strh	r3, [r4, #12]
 800b39a:	9b00      	ldr	r3, [sp, #0]
 800b39c:	6163      	str	r3, [r4, #20]
 800b39e:	9b01      	ldr	r3, [sp, #4]
 800b3a0:	6120      	str	r0, [r4, #16]
 800b3a2:	b15b      	cbz	r3, 800b3bc <__smakebuf_r+0x70>
 800b3a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	f000 f81d 	bl	800b3e8 <_isatty_r>
 800b3ae:	b128      	cbz	r0, 800b3bc <__smakebuf_r+0x70>
 800b3b0:	89a3      	ldrh	r3, [r4, #12]
 800b3b2:	f023 0303 	bic.w	r3, r3, #3
 800b3b6:	f043 0301 	orr.w	r3, r3, #1
 800b3ba:	81a3      	strh	r3, [r4, #12]
 800b3bc:	89a3      	ldrh	r3, [r4, #12]
 800b3be:	431d      	orrs	r5, r3
 800b3c0:	81a5      	strh	r5, [r4, #12]
 800b3c2:	e7cf      	b.n	800b364 <__smakebuf_r+0x18>

0800b3c4 <_fstat_r>:
 800b3c4:	b538      	push	{r3, r4, r5, lr}
 800b3c6:	4d07      	ldr	r5, [pc, #28]	; (800b3e4 <_fstat_r+0x20>)
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	4608      	mov	r0, r1
 800b3ce:	4611      	mov	r1, r2
 800b3d0:	602b      	str	r3, [r5, #0]
 800b3d2:	f7f6 fa3a 	bl	800184a <_fstat>
 800b3d6:	1c43      	adds	r3, r0, #1
 800b3d8:	d102      	bne.n	800b3e0 <_fstat_r+0x1c>
 800b3da:	682b      	ldr	r3, [r5, #0]
 800b3dc:	b103      	cbz	r3, 800b3e0 <_fstat_r+0x1c>
 800b3de:	6023      	str	r3, [r4, #0]
 800b3e0:	bd38      	pop	{r3, r4, r5, pc}
 800b3e2:	bf00      	nop
 800b3e4:	200006ac 	.word	0x200006ac

0800b3e8 <_isatty_r>:
 800b3e8:	b538      	push	{r3, r4, r5, lr}
 800b3ea:	4d06      	ldr	r5, [pc, #24]	; (800b404 <_isatty_r+0x1c>)
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	4608      	mov	r0, r1
 800b3f2:	602b      	str	r3, [r5, #0]
 800b3f4:	f7f6 fa39 	bl	800186a <_isatty>
 800b3f8:	1c43      	adds	r3, r0, #1
 800b3fa:	d102      	bne.n	800b402 <_isatty_r+0x1a>
 800b3fc:	682b      	ldr	r3, [r5, #0]
 800b3fe:	b103      	cbz	r3, 800b402 <_isatty_r+0x1a>
 800b400:	6023      	str	r3, [r4, #0]
 800b402:	bd38      	pop	{r3, r4, r5, pc}
 800b404:	200006ac 	.word	0x200006ac

0800b408 <_init>:
 800b408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b40a:	bf00      	nop
 800b40c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b40e:	bc08      	pop	{r3}
 800b410:	469e      	mov	lr, r3
 800b412:	4770      	bx	lr

0800b414 <_fini>:
 800b414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b416:	bf00      	nop
 800b418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b41a:	bc08      	pop	{r3}
 800b41c:	469e      	mov	lr, r3
 800b41e:	4770      	bx	lr
