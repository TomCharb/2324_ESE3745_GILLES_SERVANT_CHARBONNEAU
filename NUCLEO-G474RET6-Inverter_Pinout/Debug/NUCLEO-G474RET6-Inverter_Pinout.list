
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b818  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  0800b9f8  0800b9f8  0001b9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be4c  0800be4c  0002013c  2**0
                  CONTENTS
  4 .ARM          00000008  0800be4c  0800be4c  0001be4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be54  0800be54  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be54  0800be54  0001be54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be58  0800be58  0001be58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  0800be5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000063c  2000013c  0800bf98  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  0800bf98  00020778  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dff7  00000000  00000000  000201af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ee0  00000000  00000000  0003e1a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016f8  00000000  00000000  00042088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011ae  00000000  00000000  00043780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ab84  00000000  00000000  0004492e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d6a5  00000000  00000000  0006f4b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114862  00000000  00000000  0008cb57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006cdc  00000000  00000000  001a13bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009c  00000000  00000000  001a8098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000013c 	.word	0x2000013c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b9e0 	.word	0x0800b9e0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000140 	.word	0x20000140
 800021c:	0800b9e0 	.word	0x0800b9e0

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b970 	b.w	8000e24 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9e08      	ldr	r6, [sp, #32]
 8000b62:	460d      	mov	r5, r1
 8000b64:	4604      	mov	r4, r0
 8000b66:	460f      	mov	r7, r1
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d14a      	bne.n	8000c02 <__udivmoddi4+0xa6>
 8000b6c:	428a      	cmp	r2, r1
 8000b6e:	4694      	mov	ip, r2
 8000b70:	d965      	bls.n	8000c3e <__udivmoddi4+0xe2>
 8000b72:	fab2 f382 	clz	r3, r2
 8000b76:	b143      	cbz	r3, 8000b8a <__udivmoddi4+0x2e>
 8000b78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b7c:	f1c3 0220 	rsb	r2, r3, #32
 8000b80:	409f      	lsls	r7, r3
 8000b82:	fa20 f202 	lsr.w	r2, r0, r2
 8000b86:	4317      	orrs	r7, r2
 8000b88:	409c      	lsls	r4, r3
 8000b8a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b8e:	fa1f f58c 	uxth.w	r5, ip
 8000b92:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b96:	0c22      	lsrs	r2, r4, #16
 8000b98:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b9c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ba0:	fb01 f005 	mul.w	r0, r1, r5
 8000ba4:	4290      	cmp	r0, r2
 8000ba6:	d90a      	bls.n	8000bbe <__udivmoddi4+0x62>
 8000ba8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bac:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bb0:	f080 811c 	bcs.w	8000dec <__udivmoddi4+0x290>
 8000bb4:	4290      	cmp	r0, r2
 8000bb6:	f240 8119 	bls.w	8000dec <__udivmoddi4+0x290>
 8000bba:	3902      	subs	r1, #2
 8000bbc:	4462      	add	r2, ip
 8000bbe:	1a12      	subs	r2, r2, r0
 8000bc0:	b2a4      	uxth	r4, r4
 8000bc2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bc6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bce:	fb00 f505 	mul.w	r5, r0, r5
 8000bd2:	42a5      	cmp	r5, r4
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x90>
 8000bd6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bda:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bde:	f080 8107 	bcs.w	8000df0 <__udivmoddi4+0x294>
 8000be2:	42a5      	cmp	r5, r4
 8000be4:	f240 8104 	bls.w	8000df0 <__udivmoddi4+0x294>
 8000be8:	4464      	add	r4, ip
 8000bea:	3802      	subs	r0, #2
 8000bec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bf0:	1b64      	subs	r4, r4, r5
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	b11e      	cbz	r6, 8000bfe <__udivmoddi4+0xa2>
 8000bf6:	40dc      	lsrs	r4, r3
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	e9c6 4300 	strd	r4, r3, [r6]
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0xbc>
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	f000 80ed 	beq.w	8000de6 <__udivmoddi4+0x28a>
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c12:	4608      	mov	r0, r1
 8000c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c18:	fab3 f183 	clz	r1, r3
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d149      	bne.n	8000cb4 <__udivmoddi4+0x158>
 8000c20:	42ab      	cmp	r3, r5
 8000c22:	d302      	bcc.n	8000c2a <__udivmoddi4+0xce>
 8000c24:	4282      	cmp	r2, r0
 8000c26:	f200 80f8 	bhi.w	8000e1a <__udivmoddi4+0x2be>
 8000c2a:	1a84      	subs	r4, r0, r2
 8000c2c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c30:	2001      	movs	r0, #1
 8000c32:	4617      	mov	r7, r2
 8000c34:	2e00      	cmp	r6, #0
 8000c36:	d0e2      	beq.n	8000bfe <__udivmoddi4+0xa2>
 8000c38:	e9c6 4700 	strd	r4, r7, [r6]
 8000c3c:	e7df      	b.n	8000bfe <__udivmoddi4+0xa2>
 8000c3e:	b902      	cbnz	r2, 8000c42 <__udivmoddi4+0xe6>
 8000c40:	deff      	udf	#255	; 0xff
 8000c42:	fab2 f382 	clz	r3, r2
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f040 8090 	bne.w	8000d6c <__udivmoddi4+0x210>
 8000c4c:	1a8a      	subs	r2, r1, r2
 8000c4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c52:	fa1f fe8c 	uxth.w	lr, ip
 8000c56:	2101      	movs	r1, #1
 8000c58:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c5c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c60:	0c22      	lsrs	r2, r4, #16
 8000c62:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c66:	fb0e f005 	mul.w	r0, lr, r5
 8000c6a:	4290      	cmp	r0, r2
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x124>
 8000c6e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c72:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x122>
 8000c78:	4290      	cmp	r0, r2
 8000c7a:	f200 80cb 	bhi.w	8000e14 <__udivmoddi4+0x2b8>
 8000c7e:	4645      	mov	r5, r8
 8000c80:	1a12      	subs	r2, r2, r0
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c88:	fb07 2210 	mls	r2, r7, r0, r2
 8000c8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c90:	fb0e fe00 	mul.w	lr, lr, r0
 8000c94:	45a6      	cmp	lr, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x14e>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca0:	d202      	bcs.n	8000ca8 <__udivmoddi4+0x14c>
 8000ca2:	45a6      	cmp	lr, r4
 8000ca4:	f200 80bb 	bhi.w	8000e1e <__udivmoddi4+0x2c2>
 8000ca8:	4610      	mov	r0, r2
 8000caa:	eba4 040e 	sub.w	r4, r4, lr
 8000cae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cb2:	e79f      	b.n	8000bf4 <__udivmoddi4+0x98>
 8000cb4:	f1c1 0720 	rsb	r7, r1, #32
 8000cb8:	408b      	lsls	r3, r1
 8000cba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cbe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cc2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cc6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cca:	40fd      	lsrs	r5, r7
 8000ccc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cd0:	4323      	orrs	r3, r4
 8000cd2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	fb09 5518 	mls	r5, r9, r8, r5
 8000cde:	0c1c      	lsrs	r4, r3, #16
 8000ce0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ce4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ce8:	42a5      	cmp	r5, r4
 8000cea:	fa02 f201 	lsl.w	r2, r2, r1
 8000cee:	fa00 f001 	lsl.w	r0, r0, r1
 8000cf2:	d90b      	bls.n	8000d0c <__udivmoddi4+0x1b0>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cfc:	f080 8088 	bcs.w	8000e10 <__udivmoddi4+0x2b4>
 8000d00:	42a5      	cmp	r5, r4
 8000d02:	f240 8085 	bls.w	8000e10 <__udivmoddi4+0x2b4>
 8000d06:	f1a8 0802 	sub.w	r8, r8, #2
 8000d0a:	4464      	add	r4, ip
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	b29d      	uxth	r5, r3
 8000d10:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d14:	fb09 4413 	mls	r4, r9, r3, r4
 8000d18:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d1c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x1da>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d2c:	d26c      	bcs.n	8000e08 <__udivmoddi4+0x2ac>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	d96a      	bls.n	8000e08 <__udivmoddi4+0x2ac>
 8000d32:	3b02      	subs	r3, #2
 8000d34:	4464      	add	r4, ip
 8000d36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	42ac      	cmp	r4, r5
 8000d44:	46c8      	mov	r8, r9
 8000d46:	46ae      	mov	lr, r5
 8000d48:	d356      	bcc.n	8000df8 <__udivmoddi4+0x29c>
 8000d4a:	d053      	beq.n	8000df4 <__udivmoddi4+0x298>
 8000d4c:	b156      	cbz	r6, 8000d64 <__udivmoddi4+0x208>
 8000d4e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d52:	eb64 040e 	sbc.w	r4, r4, lr
 8000d56:	fa04 f707 	lsl.w	r7, r4, r7
 8000d5a:	40ca      	lsrs	r2, r1
 8000d5c:	40cc      	lsrs	r4, r1
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	e9c6 7400 	strd	r7, r4, [r6]
 8000d64:	4618      	mov	r0, r3
 8000d66:	2100      	movs	r1, #0
 8000d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6c:	f1c3 0120 	rsb	r1, r3, #32
 8000d70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d74:	fa20 f201 	lsr.w	r2, r0, r1
 8000d78:	fa25 f101 	lsr.w	r1, r5, r1
 8000d7c:	409d      	lsls	r5, r3
 8000d7e:	432a      	orrs	r2, r5
 8000d80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d84:	fa1f fe8c 	uxth.w	lr, ip
 8000d88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d8c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d90:	0c11      	lsrs	r1, r2, #16
 8000d92:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d96:	fb00 f50e 	mul.w	r5, r0, lr
 8000d9a:	428d      	cmp	r5, r1
 8000d9c:	fa04 f403 	lsl.w	r4, r4, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x258>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000daa:	d22f      	bcs.n	8000e0c <__udivmoddi4+0x2b0>
 8000dac:	428d      	cmp	r5, r1
 8000dae:	d92d      	bls.n	8000e0c <__udivmoddi4+0x2b0>
 8000db0:	3802      	subs	r0, #2
 8000db2:	4461      	add	r1, ip
 8000db4:	1b49      	subs	r1, r1, r5
 8000db6:	b292      	uxth	r2, r2
 8000db8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dbc:	fb07 1115 	mls	r1, r7, r5, r1
 8000dc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dc4:	fb05 f10e 	mul.w	r1, r5, lr
 8000dc8:	4291      	cmp	r1, r2
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x282>
 8000dcc:	eb1c 0202 	adds.w	r2, ip, r2
 8000dd0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd4:	d216      	bcs.n	8000e04 <__udivmoddi4+0x2a8>
 8000dd6:	4291      	cmp	r1, r2
 8000dd8:	d914      	bls.n	8000e04 <__udivmoddi4+0x2a8>
 8000dda:	3d02      	subs	r5, #2
 8000ddc:	4462      	add	r2, ip
 8000dde:	1a52      	subs	r2, r2, r1
 8000de0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000de4:	e738      	b.n	8000c58 <__udivmoddi4+0xfc>
 8000de6:	4631      	mov	r1, r6
 8000de8:	4630      	mov	r0, r6
 8000dea:	e708      	b.n	8000bfe <__udivmoddi4+0xa2>
 8000dec:	4639      	mov	r1, r7
 8000dee:	e6e6      	b.n	8000bbe <__udivmoddi4+0x62>
 8000df0:	4610      	mov	r0, r2
 8000df2:	e6fb      	b.n	8000bec <__udivmoddi4+0x90>
 8000df4:	4548      	cmp	r0, r9
 8000df6:	d2a9      	bcs.n	8000d4c <__udivmoddi4+0x1f0>
 8000df8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dfc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e00:	3b01      	subs	r3, #1
 8000e02:	e7a3      	b.n	8000d4c <__udivmoddi4+0x1f0>
 8000e04:	4645      	mov	r5, r8
 8000e06:	e7ea      	b.n	8000dde <__udivmoddi4+0x282>
 8000e08:	462b      	mov	r3, r5
 8000e0a:	e794      	b.n	8000d36 <__udivmoddi4+0x1da>
 8000e0c:	4640      	mov	r0, r8
 8000e0e:	e7d1      	b.n	8000db4 <__udivmoddi4+0x258>
 8000e10:	46d0      	mov	r8, sl
 8000e12:	e77b      	b.n	8000d0c <__udivmoddi4+0x1b0>
 8000e14:	3d02      	subs	r5, #2
 8000e16:	4462      	add	r2, ip
 8000e18:	e732      	b.n	8000c80 <__udivmoddi4+0x124>
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e70a      	b.n	8000c34 <__udivmoddi4+0xd8>
 8000e1e:	4464      	add	r4, ip
 8000e20:	3802      	subs	r0, #2
 8000e22:	e742      	b.n	8000caa <__udivmoddi4+0x14e>

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	; 0x30
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2220      	movs	r2, #32
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4618      	mov	r0, r3
 8000e42:	f009 fd18 	bl	800a876 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e46:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e48:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000e4e:	4b31      	ldr	r3, [pc, #196]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e50:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e56:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e5c:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e62:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e68:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e6e:	4b29      	ldr	r3, [pc, #164]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e70:	2204      	movs	r2, #4
 8000e72:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e74:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e7a:	4b26      	ldr	r3, [pc, #152]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000e80:	4b24      	ldr	r3, [pc, #144]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e86:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000e8e:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e90:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000e94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e96:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e9c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e9e:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ea6:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000eac:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eb4:	4817      	ldr	r0, [pc, #92]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000eb6:	f002 f959 	bl	800316c <HAL_ADC_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000ec0:	f000 fbe0 	bl	8001684 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4811      	ldr	r0, [pc, #68]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000ed0:	f003 fbee 	bl	80046b0 <HAL_ADCEx_MultiModeConfigChannel>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000eda:	f000 fbd3 	bl	8001684 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <MX_ADC1_Init+0xf0>)
 8000ee0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ee2:	2306      	movs	r3, #6
 8000ee4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eea:	237f      	movs	r3, #127	; 0x7f
 8000eec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eee:	2304      	movs	r3, #4
 8000ef0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4806      	ldr	r0, [pc, #24]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000efc:	f002 fe4a 	bl	8003b94 <HAL_ADC_ConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000f06:	f000 fbbd 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	3730      	adds	r7, #48	; 0x30
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000158 	.word	0x20000158
 8000f18:	08600004 	.word	0x08600004

08000f1c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f22:	463b      	mov	r3, r7
 8000f24:	2220      	movs	r2, #32
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f009 fca4 	bl	800a876 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f30:	4a2b      	ldr	r2, [pc, #172]	; (8000fe0 <MX_ADC2_Init+0xc4>)
 8000f32:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000f34:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f3a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f3c:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000f48:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f4e:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f54:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f56:	2204      	movs	r2, #4
 8000f58:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f96:	4811      	ldr	r0, [pc, #68]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f98:	f002 f8e8 	bl	800316c <HAL_ADC_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000fa2:	f000 fb6f 	bl	8001684 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_ADC2_Init+0xc8>)
 8000fa8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000faa:	2306      	movs	r3, #6
 8000fac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fb2:	237f      	movs	r3, #127	; 0x7f
 8000fb4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4806      	ldr	r0, [pc, #24]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000fc4:	f002 fde6 	bl	8003b94 <HAL_ADC_ConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000fce:	f000 fb59 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	3720      	adds	r7, #32
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200001c4 	.word	0x200001c4
 8000fe0:	50000100 	.word	0x50000100
 8000fe4:	19200040 	.word	0x19200040

08000fe8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b0a4      	sub	sp, #144	; 0x90
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001000:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001004:	2254      	movs	r2, #84	; 0x54
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f009 fc34 	bl	800a876 <memset>
  if(adcHandle->Instance==ADC1)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001016:	f040 80a8 	bne.w	800116a <HAL_ADC_MspInit+0x182>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800101a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001020:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001024:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001026:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800102a:	4618      	mov	r0, r3
 800102c:	f005 f832 	bl	8006094 <HAL_RCCEx_PeriphCLKConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001036:	f000 fb25 	bl	8001684 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800103a:	4b81      	ldr	r3, [pc, #516]	; (8001240 <HAL_ADC_MspInit+0x258>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	3301      	adds	r3, #1
 8001040:	4a7f      	ldr	r2, [pc, #508]	; (8001240 <HAL_ADC_MspInit+0x258>)
 8001042:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001044:	4b7e      	ldr	r3, [pc, #504]	; (8001240 <HAL_ADC_MspInit+0x258>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d10b      	bne.n	8001064 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800104c:	4b7d      	ldr	r3, [pc, #500]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 800104e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001050:	4a7c      	ldr	r2, [pc, #496]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 8001052:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001056:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001058:	4b7a      	ldr	r3, [pc, #488]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 800105a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
 8001062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001064:	4b77      	ldr	r3, [pc, #476]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001068:	4a76      	ldr	r2, [pc, #472]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 800106a:	f043 0304 	orr.w	r3, r3, #4
 800106e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001070:	4b74      	ldr	r3, [pc, #464]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	623b      	str	r3, [r7, #32]
 800107a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	4b71      	ldr	r3, [pc, #452]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 800107e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001080:	4a70      	ldr	r2, [pc, #448]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001088:	4b6e      	ldr	r3, [pc, #440]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 800108a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001094:	4b6b      	ldr	r3, [pc, #428]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 8001096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001098:	4a6a      	ldr	r2, [pc, #424]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 800109a:	f043 0302 	orr.w	r3, r3, #2
 800109e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a0:	4b68      	ldr	r3, [pc, #416]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 80010a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	61bb      	str	r3, [r7, #24]
 80010aa:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 80010ac:	2304      	movs	r3, #4
 80010ae:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b0:	2303      	movs	r3, #3
 80010b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010c0:	4619      	mov	r1, r3
 80010c2:	4861      	ldr	r0, [pc, #388]	; (8001248 <HAL_ADC_MspInit+0x260>)
 80010c4:	f004 f80e 	bl	80050e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80010c8:	2302      	movs	r3, #2
 80010ca:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010cc:	2303      	movs	r3, #3
 80010ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010dc:	4619      	mov	r1, r3
 80010de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e2:	f003 ffff 	bl	80050e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010e6:	2303      	movs	r3, #3
 80010e8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ea:	2303      	movs	r3, #3
 80010ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010fa:	4619      	mov	r1, r3
 80010fc:	4853      	ldr	r0, [pc, #332]	; (800124c <HAL_ADC_MspInit+0x264>)
 80010fe:	f003 fff1 	bl	80050e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001102:	4b53      	ldr	r3, [pc, #332]	; (8001250 <HAL_ADC_MspInit+0x268>)
 8001104:	4a53      	ldr	r2, [pc, #332]	; (8001254 <HAL_ADC_MspInit+0x26c>)
 8001106:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001108:	4b51      	ldr	r3, [pc, #324]	; (8001250 <HAL_ADC_MspInit+0x268>)
 800110a:	2205      	movs	r2, #5
 800110c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800110e:	4b50      	ldr	r3, [pc, #320]	; (8001250 <HAL_ADC_MspInit+0x268>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001114:	4b4e      	ldr	r3, [pc, #312]	; (8001250 <HAL_ADC_MspInit+0x268>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800111a:	4b4d      	ldr	r3, [pc, #308]	; (8001250 <HAL_ADC_MspInit+0x268>)
 800111c:	2280      	movs	r2, #128	; 0x80
 800111e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001120:	4b4b      	ldr	r3, [pc, #300]	; (8001250 <HAL_ADC_MspInit+0x268>)
 8001122:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001126:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001128:	4b49      	ldr	r3, [pc, #292]	; (8001250 <HAL_ADC_MspInit+0x268>)
 800112a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800112e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001130:	4b47      	ldr	r3, [pc, #284]	; (8001250 <HAL_ADC_MspInit+0x268>)
 8001132:	2220      	movs	r2, #32
 8001134:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001136:	4b46      	ldr	r3, [pc, #280]	; (8001250 <HAL_ADC_MspInit+0x268>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800113c:	4844      	ldr	r0, [pc, #272]	; (8001250 <HAL_ADC_MspInit+0x268>)
 800113e:	f003 fc9f 	bl	8004a80 <HAL_DMA_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 8001148:	f000 fa9c 	bl	8001684 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a40      	ldr	r2, [pc, #256]	; (8001250 <HAL_ADC_MspInit+0x268>)
 8001150:	655a      	str	r2, [r3, #84]	; 0x54
 8001152:	4a3f      	ldr	r2, [pc, #252]	; (8001250 <HAL_ADC_MspInit+0x268>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2100      	movs	r1, #0
 800115c:	2012      	movs	r0, #18
 800115e:	f003 fc67 	bl	8004a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001162:	2012      	movs	r0, #18
 8001164:	f003 fc7e 	bl	8004a64 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001168:	e066      	b.n	8001238 <HAL_ADC_MspInit+0x250>
  else if(adcHandle->Instance==ADC2)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a3a      	ldr	r2, [pc, #232]	; (8001258 <HAL_ADC_MspInit+0x270>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d161      	bne.n	8001238 <HAL_ADC_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800117a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800117e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001180:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001184:	4618      	mov	r0, r3
 8001186:	f004 ff85 	bl	8006094 <HAL_RCCEx_PeriphCLKConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <HAL_ADC_MspInit+0x1ac>
      Error_Handler();
 8001190:	f000 fa78 	bl	8001684 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001194:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <HAL_ADC_MspInit+0x258>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	4a29      	ldr	r2, [pc, #164]	; (8001240 <HAL_ADC_MspInit+0x258>)
 800119c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800119e:	4b28      	ldr	r3, [pc, #160]	; (8001240 <HAL_ADC_MspInit+0x258>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d10b      	bne.n	80011be <HAL_ADC_MspInit+0x1d6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011a6:	4b27      	ldr	r3, [pc, #156]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	4a26      	ldr	r2, [pc, #152]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 80011ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b2:	4b24      	ldr	r3, [pc, #144]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	4a20      	ldr	r2, [pc, #128]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ca:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	4a1a      	ldr	r2, [pc, #104]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 80011ee:	230b      	movs	r3, #11
 80011f0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f2:	2303      	movs	r3, #3
 80011f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001202:	4619      	mov	r1, r3
 8001204:	4810      	ldr	r0, [pc, #64]	; (8001248 <HAL_ADC_MspInit+0x260>)
 8001206:	f003 ff6d 	bl	80050e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 800120a:	2301      	movs	r3, #1
 800120c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120e:	2303      	movs	r3, #3
 8001210:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 800121a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800121e:	4619      	mov	r1, r3
 8001220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001224:	f003 ff5e 	bl	80050e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	2012      	movs	r0, #18
 800122e:	f003 fbff 	bl	8004a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001232:	2012      	movs	r0, #18
 8001234:	f003 fc16 	bl	8004a64 <HAL_NVIC_EnableIRQ>
}
 8001238:	bf00      	nop
 800123a:	3790      	adds	r7, #144	; 0x90
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000290 	.word	0x20000290
 8001244:	40021000 	.word	0x40021000
 8001248:	48000800 	.word	0x48000800
 800124c:	48000400 	.word	0x48000400
 8001250:	20000230 	.word	0x20000230
 8001254:	40020008 	.word	0x40020008
 8001258:	50000100 	.word	0x50000100

0800125c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001262:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_DMA_Init+0x50>)
 8001264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001266:	4a11      	ldr	r2, [pc, #68]	; (80012ac <MX_DMA_Init+0x50>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	6493      	str	r3, [r2, #72]	; 0x48
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_DMA_Init+0x50>)
 8001270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_DMA_Init+0x50>)
 800127c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800127e:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <MX_DMA_Init+0x50>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6493      	str	r3, [r2, #72]	; 0x48
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_DMA_Init+0x50>)
 8001288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	200b      	movs	r0, #11
 8001298:	f003 fbca 	bl	8004a30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800129c:	200b      	movs	r0, #11
 800129e:	f003 fbe1 	bl	8004a64 <HAL_NVIC_EnableIRQ>

}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000

080012b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <MX_GPIO_Init+0x114>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	4a3e      	ldr	r2, [pc, #248]	; (80013c4 <MX_GPIO_Init+0x114>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d2:	4b3c      	ldr	r3, [pc, #240]	; (80013c4 <MX_GPIO_Init+0x114>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012de:	4b39      	ldr	r3, [pc, #228]	; (80013c4 <MX_GPIO_Init+0x114>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	4a38      	ldr	r2, [pc, #224]	; (80013c4 <MX_GPIO_Init+0x114>)
 80012e4:	f043 0320 	orr.w	r3, r3, #32
 80012e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ea:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <MX_GPIO_Init+0x114>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	f003 0320 	and.w	r3, r3, #32
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	4b33      	ldr	r3, [pc, #204]	; (80013c4 <MX_GPIO_Init+0x114>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	4a32      	ldr	r2, [pc, #200]	; (80013c4 <MX_GPIO_Init+0x114>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001302:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <MX_GPIO_Init+0x114>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <MX_GPIO_Init+0x114>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	4a2c      	ldr	r2, [pc, #176]	; (80013c4 <MX_GPIO_Init+0x114>)
 8001314:	f043 0302 	orr.w	r3, r3, #2
 8001318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131a:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <MX_GPIO_Init+0x114>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001326:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <MX_GPIO_Init+0x114>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	4a26      	ldr	r2, [pc, #152]	; (80013c4 <MX_GPIO_Init+0x114>)
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001332:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <MX_GPIO_Init+0x114>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	2120      	movs	r1, #32
 8001342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001346:	f004 f84f 	bl	80053e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2104      	movs	r1, #4
 800134e:	481e      	ldr	r0, [pc, #120]	; (80013c8 <MX_GPIO_Init+0x118>)
 8001350:	f004 f84a 	bl	80053e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8001354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800135a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800135e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	4818      	ldr	r0, [pc, #96]	; (80013cc <MX_GPIO_Init+0x11c>)
 800136c:	f003 feba 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8001370:	2320      	movs	r3, #32
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138a:	f003 feab 	bl	80050e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 800138e:	2304      	movs	r3, #4
 8001390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	2301      	movs	r3, #1
 8001394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4808      	ldr	r0, [pc, #32]	; (80013c8 <MX_GPIO_Init+0x118>)
 80013a6:	f003 fe9d 	bl	80050e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	2028      	movs	r0, #40	; 0x28
 80013b0:	f003 fb3e 	bl	8004a30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013b4:	2028      	movs	r0, #40	; 0x28
 80013b6:	f003 fb55 	bl	8004a64 <HAL_NVIC_EnableIRQ>

}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	; 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000
 80013c8:	48000c00 	.word	0x48000c00
 80013cc:	48000800 	.word	0x48000800

080013d0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	int nb_loop = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013da:	f001 fc2a 	bl	8002c32 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013de:	f000 f885 	bl	80014ec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013e2:	f7ff ff65 	bl	80012b0 <MX_GPIO_Init>
	MX_DMA_Init();
 80013e6:	f7ff ff39 	bl	800125c <MX_DMA_Init>
	MX_ADC2_Init();
 80013ea:	f7ff fd97 	bl	8000f1c <MX_ADC2_Init>
	MX_ADC1_Init();
 80013ee:	f7ff fd1b 	bl	8000e28 <MX_ADC1_Init>
	MX_TIM1_Init();
 80013f2:	f000 fb37 	bl	8001a64 <MX_TIM1_Init>
	MX_TIM3_Init();
 80013f6:	f000 fc05 	bl	8001c04 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 80013fa:	f000 fd95 	bl	8001f28 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 80013fe:	f000 fddf 	bl	8001fc0 <MX_USART3_UART_Init>
	MX_TIM16_Init();
 8001402:	f000 fc55 	bl	8001cb0 <MX_TIM16_Init>

	/* USER CODE BEGIN 2 */

	//On start le DMA
	if(HAL_OK != HAL_ADC_Start_DMA(&hadc1, buffer, ADC_BUF_SIZE)){
 8001406:	2201      	movs	r2, #1
 8001408:	4928      	ldr	r1, [pc, #160]	; (80014ac <main+0xdc>)
 800140a:	4829      	ldr	r0, [pc, #164]	; (80014b0 <main+0xe0>)
 800140c:	f002 f870 	bl	80034f0 <HAL_ADC_Start_DMA>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <main+0x4a>
		Error_Handler();
 8001416:	f000 f935 	bl	8001684 <Error_Handler>
	}

	//On start le codeur et le timer de vitesse
	codeur_start();
 800141a:	f000 ffc9 	bl	80023b0 <codeur_start>

	//PI Speed
	h_PI->b0=0.48;
 800141e:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <main+0xe4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a25      	ldr	r2, [pc, #148]	; (80014b8 <main+0xe8>)
 8001424:	60da      	str	r2, [r3, #12]
	h_PI->b1=0.247;
 8001426:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <main+0xe4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a24      	ldr	r2, [pc, #144]	; (80014bc <main+0xec>)
 800142c:	611a      	str	r2, [r3, #16]
	h_PI->b2=-0.23;
 800142e:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <main+0xe4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a23      	ldr	r2, [pc, #140]	; (80014c0 <main+0xf0>)
 8001434:	615a      	str	r2, [r3, #20]

	//PI Current
	h_PI_I->b0=0.9325;
 8001436:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <main+0xf4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a23      	ldr	r2, [pc, #140]	; (80014c8 <main+0xf8>)
 800143c:	60da      	str	r2, [r3, #12]
	h_PI_I->b1=0.0001235;
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <main+0xf4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a22      	ldr	r2, [pc, #136]	; (80014cc <main+0xfc>)
 8001444:	611a      	str	r2, [r3, #16]
	h_PI_I->b2=-0.73;
 8001446:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <main+0xf4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a21      	ldr	r2, [pc, #132]	; (80014d0 <main+0x100>)
 800144c:	615a      	str	r2, [r3, #20]

	//Démarrage des timers pour les PWM
	pwm_start();
 800144e:	f001 f813 	bl	8002478 <pwm_start>

	//Lancement du Shell
	Shell_Init();
 8001452:	f001 f8d7 	bl	8002604 <Shell_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 8001456:	f001 f915 	bl	8002684 <Shell_Loop>

		if(flag){
 800145a:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <main+0x104>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f9      	beq.n	8001456 <main+0x86>
			nb_loop = (nb_loop + 1)%20000;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3301      	adds	r3, #1
 8001466:	4a1c      	ldr	r2, [pc, #112]	; (80014d8 <main+0x108>)
 8001468:	fb82 1203 	smull	r1, r2, r2, r3
 800146c:	1351      	asrs	r1, r2, #13
 800146e:	17da      	asrs	r2, r3, #31
 8001470:	1a8a      	subs	r2, r1, r2
 8001472:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001476:	fb01 f202 	mul.w	r2, r1, r2
 800147a:	1a9b      	subs	r3, r3, r2
 800147c:	607b      	str	r3, [r7, #4]
			if(nb_loop == 0){
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10e      	bne.n	80014a2 <main+0xd2>
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Valeur : %4d \r\n", Imes);
 8001484:	4b15      	ldr	r3, [pc, #84]	; (80014dc <main+0x10c>)
 8001486:	4a16      	ldr	r2, [pc, #88]	; (80014e0 <main+0x110>)
 8001488:	2164      	movs	r1, #100	; 0x64
 800148a:	4816      	ldr	r0, [pc, #88]	; (80014e4 <main+0x114>)
 800148c:	f009 f97c 	bl	800a788 <sniprintf>
 8001490:	6038      	str	r0, [r7, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b29a      	uxth	r2, r3
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
 800149a:	4912      	ldr	r1, [pc, #72]	; (80014e4 <main+0x114>)
 800149c:	4812      	ldr	r0, [pc, #72]	; (80014e8 <main+0x118>)
 800149e:	f007 f80d 	bl	80084bc <HAL_UART_Transmit>
			}
			flag = 0;
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <main+0x104>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
		Shell_Loop();
 80014a8:	e7d5      	b.n	8001456 <main+0x86>
 80014aa:	bf00      	nop
 80014ac:	20000294 	.word	0x20000294
 80014b0:	20000158 	.word	0x20000158
 80014b4:	200002ac 	.word	0x200002ac
 80014b8:	3ef5c28f 	.word	0x3ef5c28f
 80014bc:	3e7ced91 	.word	0x3e7ced91
 80014c0:	be6b851f 	.word	0xbe6b851f
 80014c4:	200002a8 	.word	0x200002a8
 80014c8:	3f6eb852 	.word	0x3f6eb852
 80014cc:	39017fc7 	.word	0x39017fc7
 80014d0:	bf3ae148 	.word	0xbf3ae148
 80014d4:	20000298 	.word	0x20000298
 80014d8:	68db8bad 	.word	0x68db8bad
 80014dc:	2000029c 	.word	0x2000029c
 80014e0:	0800b9f8 	.word	0x0800b9f8
 80014e4:	20000548 	.word	0x20000548
 80014e8:	200003e4 	.word	0x200003e4

080014ec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b094      	sub	sp, #80	; 0x50
 80014f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f2:	f107 0318 	add.w	r3, r7, #24
 80014f6:	2238      	movs	r2, #56	; 0x38
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f009 f9bb 	bl	800a876 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800150e:	2000      	movs	r0, #0
 8001510:	f003 ffa6 	bl	8005460 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001514:	2301      	movs	r3, #1
 8001516:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001518:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800151c:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151e:	2302      	movs	r3, #2
 8001520:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001522:	2303      	movs	r3, #3
 8001524:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001526:	2306      	movs	r3, #6
 8001528:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800152a:	2355      	movs	r3, #85	; 0x55
 800152c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800152e:	2302      	movs	r3, #2
 8001530:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001532:	2302      	movs	r3, #2
 8001534:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001536:	2302      	movs	r3, #2
 8001538:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153a:	f107 0318 	add.w	r3, r7, #24
 800153e:	4618      	mov	r0, r3
 8001540:	f004 f842 	bl	80055c8 <HAL_RCC_OscConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0x62>
	{
		Error_Handler();
 800154a:	f000 f89b 	bl	8001684 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154e:	230f      	movs	r3, #15
 8001550:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001552:	2303      	movs	r3, #3
 8001554:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2104      	movs	r1, #4
 8001566:	4618      	mov	r0, r3
 8001568:	f004 fb46 	bl	8005bf8 <HAL_RCC_ClockConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8001572:	f000 f887 	bl	8001684 <Error_Handler>
	}
}
 8001576:	bf00      	nop
 8001578:	3750      	adds	r7, #80	; 0x50
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <HAL_ADC_ConvCpltCallback>:
 * Ce Callback est appelé à chaque nouvelle mesure de courant
 * Il est déclenché par le timer 1 donc à une fréquence d'environ 20kHz
 * Ici on réalise l'asservissement en courant
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	//	}
	//Interupt Mode
	//	adc_vall = HAL_ADC_GetValue(&hadc1);
	//	HAL_ADC_Start_IT(&hadc1);

	Imes[0]=Imes[1];
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_ADC_ConvCpltCallback+0x78>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	4a1a      	ldr	r2, [pc, #104]	; (80015f8 <HAL_ADC_ConvCpltCallback+0x78>)
 800158e:	6013      	str	r3, [r2, #0]
	Imes[1]=Imes[2];
 8001590:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <HAL_ADC_ConvCpltCallback+0x78>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	4a18      	ldr	r2, [pc, #96]	; (80015f8 <HAL_ADC_ConvCpltCallback+0x78>)
 8001596:	6053      	str	r3, [r2, #4]
	Imes[2]= (buffer[0]-1351)/40.95; //Nouvelle valeur de courant
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <HAL_ADC_ConvCpltCallback+0x7c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f2a3 5347 	subw	r3, r3, #1351	; 0x547
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffe7 	bl	8000574 <__aeabi_ui2d>
 80015a6:	a312      	add	r3, pc, #72	; (adr r3, 80015f0 <HAL_ADC_ConvCpltCallback+0x70>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	f7ff f986 	bl	80008bc <__aeabi_ddiv>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f7ff fa68 	bl	8000a8c <__aeabi_d2f>
 80015bc:	4603      	mov	r3, r0
 80015be:	4a0e      	ldr	r2, [pc, #56]	; (80015f8 <HAL_ADC_ConvCpltCallback+0x78>)
 80015c0:	6093      	str	r3, [r2, #8]

	//Calcul de l'erreur en courant
	Erreur_I(Iconsigne,Imes);
 80015c2:	490d      	ldr	r1, [pc, #52]	; (80015f8 <HAL_ADC_ConvCpltCallback+0x78>)
 80015c4:	480e      	ldr	r0, [pc, #56]	; (8001600 <HAL_ADC_ConvCpltCallback+0x80>)
 80015c6:	f000 fe13 	bl	80021f0 <Erreur_I>

	//Calcul de la nouvelle valeur de alpha après le PI
	Current_PI(h_PI_I,erreur_I,alpha);
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <HAL_ADC_ConvCpltCallback+0x84>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <HAL_ADC_ConvCpltCallback+0x88>)
 80015d0:	490e      	ldr	r1, [pc, #56]	; (800160c <HAL_ADC_ConvCpltCallback+0x8c>)
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 fe64 	bl	80022a0 <Current_PI>

	//Application des nouvelles commandes PWM
	NewPWM(alpha);
 80015d8:	480b      	ldr	r0, [pc, #44]	; (8001608 <HAL_ADC_ConvCpltCallback+0x88>)
 80015da:	f000 feab 	bl	8002334 <NewPWM>

	flag = 1;
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <HAL_ADC_ConvCpltCallback+0x90>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	701a      	strb	r2, [r3, #0]
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	f3af 8000 	nop.w
 80015f0:	9999999a 	.word	0x9999999a
 80015f4:	40447999 	.word	0x40447999
 80015f8:	2000029c 	.word	0x2000029c
 80015fc:	20000294 	.word	0x20000294
 8001600:	2000051c 	.word	0x2000051c
 8001604:	200002a8 	.word	0x200002a8
 8001608:	20000004 	.word	0x20000004
 800160c:	20000510 	.word	0x20000510
 8001610:	20000298 	.word	0x20000298

08001614 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */
	/*@brief
	 * Callback appelé toutes les 100ms lors de la mesure de la vitesse
	 * Ici on réalise l'asservissement en vitesse
	 */
	if (htim->Instance == TIM16){
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a11      	ldr	r2, [pc, #68]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d114      	bne.n	8001650 <HAL_TIM_PeriodElapsedCallback+0x3c>
		//Calcul de la vitesse de rotation du moteur
		calc_speed();
 8001626:	f000 fee7 	bl	80023f8 <calc_speed>

		//Calcul de l'erreur en vitesse
		Erreur(consigne, erreur, vitesse);
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	ee07 3a90 	vmov	s15, r3
 8001632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001636:	490e      	ldr	r1, [pc, #56]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001638:	480e      	ldr	r0, [pc, #56]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800163a:	eeb0 0a67 	vmov.f32	s0, s15
 800163e:	f000 fdb3 	bl	80021a8 <Erreur>

		//Calcul de la nouvelle consigne en courant grâce au PI
		Speed_PI(h_PI,erreur,Iconsigne);
 8001642:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a0d      	ldr	r2, [pc, #52]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001648:	490a      	ldr	r1, [pc, #40]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800164a:	4618      	mov	r0, r3
 800164c:	f000 fdf4 	bl	8002238 <Speed_PI>
	}

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d101      	bne.n	800165e <HAL_TIM_PeriodElapsedCallback+0x4a>
		HAL_IncTick();
 800165a:	f001 fb03 	bl	8002c64 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40014400 	.word	0x40014400
 800166c:	20000624 	.word	0x20000624
 8001670:	20000530 	.word	0x20000530
 8001674:	20000504 	.word	0x20000504
 8001678:	200002ac 	.word	0x200002ac
 800167c:	2000051c 	.word	0x2000051c
 8001680:	40001000 	.word	0x40001000

08001684 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001688:	b672      	cpsid	i
}
 800168a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800168c:	e7fe      	b.n	800168c <Error_Handler+0x8>
	...

08001690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_MspInit+0x44>)
 8001698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169a:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <HAL_MspInit+0x44>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6613      	str	r3, [r2, #96]	; 0x60
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <HAL_MspInit+0x44>)
 80016a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <HAL_MspInit+0x44>)
 80016b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b2:	4a08      	ldr	r2, [pc, #32]	; (80016d4 <HAL_MspInit+0x44>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b8:	6593      	str	r3, [r2, #88]	; 0x58
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_MspInit+0x44>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016c6:	f003 ff6f 	bl	80055a8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000

080016d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08c      	sub	sp, #48	; 0x30
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016e8:	4b2c      	ldr	r3, [pc, #176]	; (800179c <HAL_InitTick+0xc4>)
 80016ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ec:	4a2b      	ldr	r2, [pc, #172]	; (800179c <HAL_InitTick+0xc4>)
 80016ee:	f043 0310 	orr.w	r3, r3, #16
 80016f2:	6593      	str	r3, [r2, #88]	; 0x58
 80016f4:	4b29      	ldr	r3, [pc, #164]	; (800179c <HAL_InitTick+0xc4>)
 80016f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f8:	f003 0310 	and.w	r3, r3, #16
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001700:	f107 020c 	add.w	r2, r7, #12
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	4611      	mov	r1, r2
 800170a:	4618      	mov	r0, r3
 800170c:	f004 fc4a 	bl	8005fa4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001710:	f004 fc1c 	bl	8005f4c <HAL_RCC_GetPCLK1Freq>
 8001714:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001718:	4a21      	ldr	r2, [pc, #132]	; (80017a0 <HAL_InitTick+0xc8>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	0c9b      	lsrs	r3, r3, #18
 8001720:	3b01      	subs	r3, #1
 8001722:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001724:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <HAL_InitTick+0xcc>)
 8001726:	4a20      	ldr	r2, [pc, #128]	; (80017a8 <HAL_InitTick+0xd0>)
 8001728:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800172a:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <HAL_InitTick+0xcc>)
 800172c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001730:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001732:	4a1c      	ldr	r2, [pc, #112]	; (80017a4 <HAL_InitTick+0xcc>)
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <HAL_InitTick+0xcc>)
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <HAL_InitTick+0xcc>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001744:	4817      	ldr	r0, [pc, #92]	; (80017a4 <HAL_InitTick+0xcc>)
 8001746:	f004 fef3 	bl	8006530 <HAL_TIM_Base_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001750:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001754:	2b00      	cmp	r3, #0
 8001756:	d11b      	bne.n	8001790 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001758:	4812      	ldr	r0, [pc, #72]	; (80017a4 <HAL_InitTick+0xcc>)
 800175a:	f004 ff41 	bl	80065e0 <HAL_TIM_Base_Start_IT>
 800175e:	4603      	mov	r3, r0
 8001760:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001764:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001768:	2b00      	cmp	r3, #0
 800176a:	d111      	bne.n	8001790 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800176c:	2036      	movs	r0, #54	; 0x36
 800176e:	f003 f979 	bl	8004a64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b0f      	cmp	r3, #15
 8001776:	d808      	bhi.n	800178a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001778:	2200      	movs	r2, #0
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	2036      	movs	r0, #54	; 0x36
 800177e:	f003 f957 	bl	8004a30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <HAL_InitTick+0xd4>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	e002      	b.n	8001790 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001790:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001794:	4618      	mov	r0, r3
 8001796:	3730      	adds	r7, #48	; 0x30
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40021000 	.word	0x40021000
 80017a0:	431bde83 	.word	0x431bde83
 80017a4:	200002b0 	.word	0x200002b0
 80017a8:	40001000 	.word	0x40001000
 80017ac:	200000d8 	.word	0x200000d8

080017b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80017b4:	e7fe      	b.n	80017b4 <NMI_Handler+0x4>

080017b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ba:	e7fe      	b.n	80017ba <HardFault_Handler+0x4>

080017bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <MemManage_Handler+0x4>

080017c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <BusFault_Handler+0x4>

080017c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <UsageFault_Handler+0x4>

080017ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <DMA1_Channel1_IRQHandler+0x10>)
 800180e:	f003 fb1a 	bl	8004e46 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000230 	.word	0x20000230

0800181c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001820:	4803      	ldr	r0, [pc, #12]	; (8001830 <ADC1_2_IRQHandler+0x14>)
 8001822:	f001 ff39 	bl	8003698 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001826:	4803      	ldr	r0, [pc, #12]	; (8001834 <ADC1_2_IRQHandler+0x18>)
 8001828:	f001 ff36 	bl	8003698 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000158 	.word	0x20000158
 8001834:	200001c4 	.word	0x200001c4

08001838 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800183c:	4803      	ldr	r0, [pc, #12]	; (800184c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800183e:	f005 faab 	bl	8006d98 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001842:	4803      	ldr	r0, [pc, #12]	; (8001850 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001844:	f005 faa8 	bl	8006d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000300 	.word	0x20000300
 8001850:	20000398 	.word	0x20000398

08001854 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <TIM3_IRQHandler+0x10>)
 800185a:	f005 fa9d 	bl	8006d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	2000034c 	.word	0x2000034c

08001868 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <USART2_IRQHandler+0x10>)
 800186e:	f006 ff11 	bl	8008694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200003e4 	.word	0x200003e4

0800187c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <USART3_IRQHandler+0x10>)
 8001882:	f006 ff07 	bl	8008694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000474 	.word	0x20000474

08001890 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001894:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001898:	f003 fdbe 	bl	8005418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <TIM6_DAC_IRQHandler+0x10>)
 80018a6:	f005 fa77 	bl	8006d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200002b0 	.word	0x200002b0

080018b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return 1;
 80018b8:	2301      	movs	r3, #1
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <_kill>:

int _kill(int pid, int sig)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018ce:	f009 f87d 	bl	800a9cc <__errno>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2216      	movs	r2, #22
 80018d6:	601a      	str	r2, [r3, #0]
  return -1;
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_exit>:

void _exit (int status)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ffe7 	bl	80018c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018f6:	e7fe      	b.n	80018f6 <_exit+0x12>

080018f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	e00a      	b.n	8001920 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800190a:	f3af 8000 	nop.w
 800190e:	4601      	mov	r1, r0
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	60ba      	str	r2, [r7, #8]
 8001916:	b2ca      	uxtb	r2, r1
 8001918:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	3301      	adds	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	429a      	cmp	r2, r3
 8001926:	dbf0      	blt.n	800190a <_read+0x12>
  }

  return len;
 8001928:	687b      	ldr	r3, [r7, #4]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	e009      	b.n	8001958 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	60ba      	str	r2, [r7, #8]
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	3301      	adds	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	429a      	cmp	r2, r3
 800195e:	dbf1      	blt.n	8001944 <_write+0x12>
  }
  return len;
 8001960:	687b      	ldr	r3, [r7, #4]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <_close>:

int _close(int file)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001972:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001992:	605a      	str	r2, [r3, #4]
  return 0;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <_isatty>:

int _isatty(int file)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019aa:	2301      	movs	r3, #1
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019dc:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <_sbrk+0x5c>)
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <_sbrk+0x60>)
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e8:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d102      	bne.n	80019f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <_sbrk+0x64>)
 80019f2:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <_sbrk+0x68>)
 80019f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d207      	bcs.n	8001a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a04:	f008 ffe2 	bl	800a9cc <__errno>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a12:	e009      	b.n	8001a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <_sbrk+0x64>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <_sbrk+0x64>)
 8001a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a26:	68fb      	ldr	r3, [r7, #12]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20020000 	.word	0x20020000
 8001a34:	00000400 	.word	0x00000400
 8001a38:	200002fc 	.word	0x200002fc
 8001a3c:	20000778 	.word	0x20000778

08001a40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <SystemInit+0x20>)
 8001a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4a:	4a05      	ldr	r2, [pc, #20]	; (8001a60 <SystemInit+0x20>)
 8001a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b09c      	sub	sp, #112	; 0x70
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
 8001a94:	615a      	str	r2, [r3, #20]
 8001a96:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	2234      	movs	r2, #52	; 0x34
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f008 fee9 	bl	800a876 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aa4:	4b55      	ldr	r3, [pc, #340]	; (8001bfc <MX_TIM1_Init+0x198>)
 8001aa6:	4a56      	ldr	r2, [pc, #344]	; (8001c00 <MX_TIM1_Init+0x19c>)
 8001aa8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 8001aaa:	4b54      	ldr	r3, [pc, #336]	; (8001bfc <MX_TIM1_Init+0x198>)
 8001aac:	2208      	movs	r2, #8
 8001aae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001ab0:	4b52      	ldr	r3, [pc, #328]	; (8001bfc <MX_TIM1_Init+0x198>)
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8001ab6:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <MX_TIM1_Init+0x198>)
 8001ab8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001abc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001abe:	4b4f      	ldr	r3, [pc, #316]	; (8001bfc <MX_TIM1_Init+0x198>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ac4:	4b4d      	ldr	r3, [pc, #308]	; (8001bfc <MX_TIM1_Init+0x198>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aca:	4b4c      	ldr	r3, [pc, #304]	; (8001bfc <MX_TIM1_Init+0x198>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ad0:	484a      	ldr	r0, [pc, #296]	; (8001bfc <MX_TIM1_Init+0x198>)
 8001ad2:	f004 fd2d 	bl	8006530 <HAL_TIM_Base_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001adc:	f7ff fdd2 	bl	8001684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ae6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001aea:	4619      	mov	r1, r3
 8001aec:	4843      	ldr	r0, [pc, #268]	; (8001bfc <MX_TIM1_Init+0x198>)
 8001aee:	f005 fbe7 	bl	80072c0 <HAL_TIM_ConfigClockSource>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001af8:	f7ff fdc4 	bl	8001684 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001afc:	483f      	ldr	r0, [pc, #252]	; (8001bfc <MX_TIM1_Init+0x198>)
 8001afe:	f004 fde7 	bl	80066d0 <HAL_TIM_PWM_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001b08:	f7ff fdbc 	bl	8001684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b0c:	2320      	movs	r3, #32
 8001b0e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8001b10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b14:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b1a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4836      	ldr	r0, [pc, #216]	; (8001bfc <MX_TIM1_Init+0x198>)
 8001b22:	f006 fab5 	bl	8008090 <HAL_TIMEx_MasterConfigSynchronization>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001b2c:	f7ff fdaa 	bl	8001684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b30:	2360      	movs	r3, #96	; 0x60
 8001b32:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 512;
 8001b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b38:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b52:	2200      	movs	r2, #0
 8001b54:	4619      	mov	r1, r3
 8001b56:	4829      	ldr	r0, [pc, #164]	; (8001bfc <MX_TIM1_Init+0x198>)
 8001b58:	f005 fa9e 	bl	8007098 <HAL_TIM_PWM_ConfigChannel>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8001b62:	f7ff fd8f 	bl	8001684 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4823      	ldr	r0, [pc, #140]	; (8001bfc <MX_TIM1_Init+0x198>)
 8001b70:	f005 fa92 	bl	8007098 <HAL_TIM_PWM_ConfigChannel>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 8001b7a:	f7ff fd83 	bl	8001684 <Error_Handler>
  }
  sConfigOC.Pulse = 85;
 8001b7e:	2355      	movs	r3, #85	; 0x55
 8001b80:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b86:	2208      	movs	r2, #8
 8001b88:	4619      	mov	r1, r3
 8001b8a:	481c      	ldr	r0, [pc, #112]	; (8001bfc <MX_TIM1_Init+0x198>)
 8001b8c:	f005 fa84 	bl	8007098 <HAL_TIM_PWM_ConfigChannel>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8001b96:	f7ff fd75 	bl	8001684 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8001b9a:	4818      	ldr	r0, [pc, #96]	; (8001bfc <MX_TIM1_Init+0x198>)
 8001b9c:	f006 fbc0 	bl	8008320 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 30;
 8001bac:	231e      	movs	r3, #30
 8001bae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bb8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bca:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4807      	ldr	r0, [pc, #28]	; (8001bfc <MX_TIM1_Init+0x198>)
 8001bde:	f006 faed 	bl	80081bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8001be8:	f7ff fd4c 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bec:	4803      	ldr	r0, [pc, #12]	; (8001bfc <MX_TIM1_Init+0x198>)
 8001bee:	f000 f933 	bl	8001e58 <HAL_TIM_MspPostInit>

}
 8001bf2:	bf00      	nop
 8001bf4:	3770      	adds	r7, #112	; 0x70
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000300 	.word	0x20000300
 8001c00:	40012c00 	.word	0x40012c00

08001c04 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08c      	sub	sp, #48	; 0x30
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	2224      	movs	r2, #36	; 0x24
 8001c10:	2100      	movs	r1, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f008 fe2f 	bl	800a876 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c18:	463b      	mov	r3, r7
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c22:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <MX_TIM3_Init+0xa4>)
 8001c24:	4a21      	ldr	r2, [pc, #132]	; (8001cac <MX_TIM3_Init+0xa8>)
 8001c26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c28:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <MX_TIM3_Init+0xa4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <MX_TIM3_Init+0xa4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c34:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <MX_TIM3_Init+0xa4>)
 8001c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <MX_TIM3_Init+0xa4>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c42:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <MX_TIM3_Init+0xa4>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c50:	2301      	movs	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c60:	2301      	movs	r3, #1
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	4619      	mov	r1, r3
 8001c72:	480d      	ldr	r0, [pc, #52]	; (8001ca8 <MX_TIM3_Init+0xa4>)
 8001c74:	f004 ff3c 	bl	8006af0 <HAL_TIM_Encoder_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001c7e:	f7ff fd01 	bl	8001684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c8a:	463b      	mov	r3, r7
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4806      	ldr	r0, [pc, #24]	; (8001ca8 <MX_TIM3_Init+0xa4>)
 8001c90:	f006 f9fe 	bl	8008090 <HAL_TIMEx_MasterConfigSynchronization>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001c9a:	f7ff fcf3 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c9e:	bf00      	nop
 8001ca0:	3730      	adds	r7, #48	; 0x30
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	2000034c 	.word	0x2000034c
 8001cac:	40000400 	.word	0x40000400

08001cb0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001cb4:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <MX_TIM16_Init+0x48>)
 8001cb6:	4a11      	ldr	r2, [pc, #68]	; (8001cfc <MX_TIM16_Init+0x4c>)
 8001cb8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1699;
 8001cba:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <MX_TIM16_Init+0x48>)
 8001cbc:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8001cc0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <MX_TIM16_Init+0x48>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <MX_TIM16_Init+0x48>)
 8001cca:	f242 720f 	movw	r2, #9999	; 0x270f
 8001cce:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <MX_TIM16_Init+0x48>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <MX_TIM16_Init+0x48>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <MX_TIM16_Init+0x48>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001ce2:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_TIM16_Init+0x48>)
 8001ce4:	f004 fc24 	bl	8006530 <HAL_TIM_Base_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001cee:	f7ff fcc9 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000398 	.word	0x20000398
 8001cfc:	40014400 	.word	0x40014400

08001d00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1a      	ldr	r2, [pc, #104]	; (8001d78 <HAL_TIM_Base_MspInit+0x78>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d114      	bne.n	8001d3c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d12:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <HAL_TIM_Base_MspInit+0x7c>)
 8001d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d16:	4a19      	ldr	r2, [pc, #100]	; (8001d7c <HAL_TIM_Base_MspInit+0x7c>)
 8001d18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d1e:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <HAL_TIM_Base_MspInit+0x7c>)
 8001d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	2019      	movs	r0, #25
 8001d30:	f002 fe7e 	bl	8004a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d34:	2019      	movs	r0, #25
 8001d36:	f002 fe95 	bl	8004a64 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001d3a:	e018      	b.n	8001d6e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM16)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a0f      	ldr	r2, [pc, #60]	; (8001d80 <HAL_TIM_Base_MspInit+0x80>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d113      	bne.n	8001d6e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001d46:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <HAL_TIM_Base_MspInit+0x7c>)
 8001d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d4a:	4a0c      	ldr	r2, [pc, #48]	; (8001d7c <HAL_TIM_Base_MspInit+0x7c>)
 8001d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d50:	6613      	str	r3, [r2, #96]	; 0x60
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_TIM_Base_MspInit+0x7c>)
 8001d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2100      	movs	r1, #0
 8001d62:	2019      	movs	r0, #25
 8001d64:	f002 fe64 	bl	8004a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d68:	2019      	movs	r0, #25
 8001d6a:	f002 fe7b 	bl	8004a64 <HAL_NVIC_EnableIRQ>
}
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40012c00 	.word	0x40012c00
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40014400 	.word	0x40014400

08001d84 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	; 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a2a      	ldr	r2, [pc, #168]	; (8001e4c <HAL_TIM_Encoder_MspInit+0xc8>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d14d      	bne.n	8001e42 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001da6:	4b2a      	ldr	r3, [pc, #168]	; (8001e50 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001daa:	4a29      	ldr	r2, [pc, #164]	; (8001e50 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001dac:	f043 0302 	orr.w	r3, r3, #2
 8001db0:	6593      	str	r3, [r2, #88]	; 0x58
 8001db2:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc2:	4a23      	ldr	r2, [pc, #140]	; (8001e50 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dca:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd6:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dda:	4a1d      	ldr	r2, [pc, #116]	; (8001e50 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001ddc:	f043 0304 	orr.w	r3, r3, #4
 8001de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de2:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001dee:	2350      	movs	r3, #80	; 0x50
 8001df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	4619      	mov	r1, r3
 8001e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e0c:	f003 f96a 	bl	80050e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e22:	2302      	movs	r3, #2
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4809      	ldr	r0, [pc, #36]	; (8001e54 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001e2e:	f003 f959 	bl	80050e4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	201d      	movs	r0, #29
 8001e38:	f002 fdfa 	bl	8004a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e3c:	201d      	movs	r0, #29
 8001e3e:	f002 fe11 	bl	8004a64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e42:	bf00      	nop
 8001e44:	3728      	adds	r7, #40	; 0x28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40000400 	.word	0x40000400
 8001e50:	40021000 	.word	0x40021000
 8001e54:	48000800 	.word	0x48000800

08001e58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08a      	sub	sp, #40	; 0x28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a29      	ldr	r2, [pc, #164]	; (8001f1c <HAL_TIM_MspPostInit+0xc4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d14b      	bne.n	8001f12 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7a:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <HAL_TIM_MspPostInit+0xc8>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7e:	4a28      	ldr	r2, [pc, #160]	; (8001f20 <HAL_TIM_MspPostInit+0xc8>)
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e86:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <HAL_TIM_MspPostInit+0xc8>)
 8001e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	4b23      	ldr	r3, [pc, #140]	; (8001f20 <HAL_TIM_MspPostInit+0xc8>)
 8001e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e96:	4a22      	ldr	r2, [pc, #136]	; (8001f20 <HAL_TIM_MspPostInit+0xc8>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e9e:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <HAL_TIM_MspPostInit+0xc8>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001eaa:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ebc:	2306      	movs	r3, #6
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4817      	ldr	r0, [pc, #92]	; (8001f24 <HAL_TIM_MspPostInit+0xcc>)
 8001ec8:	f003 f90c 	bl	80050e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001ecc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eda:	2300      	movs	r3, #0
 8001edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001ede:	2304      	movs	r3, #4
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001ee2:	f107 0314 	add.w	r3, r7, #20
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	480e      	ldr	r0, [pc, #56]	; (8001f24 <HAL_TIM_MspPostInit+0xcc>)
 8001eea:	f003 f8fb 	bl	80050e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001eee:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001f00:	2306      	movs	r3, #6
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f0e:	f003 f8e9 	bl	80050e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f12:	bf00      	nop
 8001f14:	3728      	adds	r7, #40	; 0x28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40012c00 	.word	0x40012c00
 8001f20:	40021000 	.word	0x40021000
 8001f24:	48000400 	.word	0x48000400

08001f28 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f2c:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <MX_USART2_UART_Init+0x90>)
 8001f2e:	4a23      	ldr	r2, [pc, #140]	; (8001fbc <MX_USART2_UART_Init+0x94>)
 8001f30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f32:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <MX_USART2_UART_Init+0x90>)
 8001f34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f3a:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <MX_USART2_UART_Init+0x90>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f40:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <MX_USART2_UART_Init+0x90>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f46:	4b1c      	ldr	r3, [pc, #112]	; (8001fb8 <MX_USART2_UART_Init+0x90>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f4c:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <MX_USART2_UART_Init+0x90>)
 8001f4e:	220c      	movs	r2, #12
 8001f50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f52:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <MX_USART2_UART_Init+0x90>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f58:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <MX_USART2_UART_Init+0x90>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f5e:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <MX_USART2_UART_Init+0x90>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f64:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <MX_USART2_UART_Init+0x90>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f6a:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <MX_USART2_UART_Init+0x90>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f70:	4811      	ldr	r0, [pc, #68]	; (8001fb8 <MX_USART2_UART_Init+0x90>)
 8001f72:	f006 fa53 	bl	800841c <HAL_UART_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001f7c:	f7ff fb82 	bl	8001684 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f80:	2100      	movs	r1, #0
 8001f82:	480d      	ldr	r0, [pc, #52]	; (8001fb8 <MX_USART2_UART_Init+0x90>)
 8001f84:	f008 f9f5 	bl	800a372 <HAL_UARTEx_SetTxFifoThreshold>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001f8e:	f7ff fb79 	bl	8001684 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f92:	2100      	movs	r1, #0
 8001f94:	4808      	ldr	r0, [pc, #32]	; (8001fb8 <MX_USART2_UART_Init+0x90>)
 8001f96:	f008 fa2a 	bl	800a3ee <HAL_UARTEx_SetRxFifoThreshold>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001fa0:	f7ff fb70 	bl	8001684 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001fa4:	4804      	ldr	r0, [pc, #16]	; (8001fb8 <MX_USART2_UART_Init+0x90>)
 8001fa6:	f008 f9ab 	bl	800a300 <HAL_UARTEx_DisableFifoMode>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001fb0:	f7ff fb68 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	200003e4 	.word	0x200003e4
 8001fbc:	40004400 	.word	0x40004400

08001fc0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fc4:	4b22      	ldr	r3, [pc, #136]	; (8002050 <MX_USART3_UART_Init+0x90>)
 8001fc6:	4a23      	ldr	r2, [pc, #140]	; (8002054 <MX_USART3_UART_Init+0x94>)
 8001fc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fca:	4b21      	ldr	r3, [pc, #132]	; (8002050 <MX_USART3_UART_Init+0x90>)
 8001fcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd2:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <MX_USART3_UART_Init+0x90>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <MX_USART3_UART_Init+0x90>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fde:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <MX_USART3_UART_Init+0x90>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fe4:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <MX_USART3_UART_Init+0x90>)
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fea:	4b19      	ldr	r3, [pc, #100]	; (8002050 <MX_USART3_UART_Init+0x90>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff0:	4b17      	ldr	r3, [pc, #92]	; (8002050 <MX_USART3_UART_Init+0x90>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ff6:	4b16      	ldr	r3, [pc, #88]	; (8002050 <MX_USART3_UART_Init+0x90>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <MX_USART3_UART_Init+0x90>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002002:	4b13      	ldr	r3, [pc, #76]	; (8002050 <MX_USART3_UART_Init+0x90>)
 8002004:	2200      	movs	r2, #0
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002008:	4811      	ldr	r0, [pc, #68]	; (8002050 <MX_USART3_UART_Init+0x90>)
 800200a:	f006 fa07 	bl	800841c <HAL_UART_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002014:	f7ff fb36 	bl	8001684 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002018:	2100      	movs	r1, #0
 800201a:	480d      	ldr	r0, [pc, #52]	; (8002050 <MX_USART3_UART_Init+0x90>)
 800201c:	f008 f9a9 	bl	800a372 <HAL_UARTEx_SetTxFifoThreshold>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002026:	f7ff fb2d 	bl	8001684 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800202a:	2100      	movs	r1, #0
 800202c:	4808      	ldr	r0, [pc, #32]	; (8002050 <MX_USART3_UART_Init+0x90>)
 800202e:	f008 f9de 	bl	800a3ee <HAL_UARTEx_SetRxFifoThreshold>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002038:	f7ff fb24 	bl	8001684 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800203c:	4804      	ldr	r0, [pc, #16]	; (8002050 <MX_USART3_UART_Init+0x90>)
 800203e:	f008 f95f 	bl	800a300 <HAL_UARTEx_DisableFifoMode>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002048:	f7ff fb1c 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000474 	.word	0x20000474
 8002054:	40004800 	.word	0x40004800

08002058 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b0a0      	sub	sp, #128	; 0x80
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002070:	f107 0318 	add.w	r3, r7, #24
 8002074:	2254      	movs	r2, #84	; 0x54
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f008 fbfc 	bl	800a876 <memset>
  if(uartHandle->Instance==USART2)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a45      	ldr	r2, [pc, #276]	; (8002198 <HAL_UART_MspInit+0x140>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d13f      	bne.n	8002108 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002088:	2302      	movs	r3, #2
 800208a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800208c:	2300      	movs	r3, #0
 800208e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002090:	f107 0318 	add.w	r3, r7, #24
 8002094:	4618      	mov	r0, r3
 8002096:	f003 fffd 	bl	8006094 <HAL_RCCEx_PeriphCLKConfig>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020a0:	f7ff faf0 	bl	8001684 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020a4:	4b3d      	ldr	r3, [pc, #244]	; (800219c <HAL_UART_MspInit+0x144>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a8:	4a3c      	ldr	r2, [pc, #240]	; (800219c <HAL_UART_MspInit+0x144>)
 80020aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ae:	6593      	str	r3, [r2, #88]	; 0x58
 80020b0:	4b3a      	ldr	r3, [pc, #232]	; (800219c <HAL_UART_MspInit+0x144>)
 80020b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020bc:	4b37      	ldr	r3, [pc, #220]	; (800219c <HAL_UART_MspInit+0x144>)
 80020be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c0:	4a36      	ldr	r2, [pc, #216]	; (800219c <HAL_UART_MspInit+0x144>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c8:	4b34      	ldr	r3, [pc, #208]	; (800219c <HAL_UART_MspInit+0x144>)
 80020ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020d4:	230c      	movs	r3, #12
 80020d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e0:	2300      	movs	r3, #0
 80020e2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020e4:	2307      	movs	r3, #7
 80020e6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020ec:	4619      	mov	r1, r3
 80020ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f2:	f002 fff7 	bl	80050e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2100      	movs	r1, #0
 80020fa:	2026      	movs	r0, #38	; 0x26
 80020fc:	f002 fc98 	bl	8004a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002100:	2026      	movs	r0, #38	; 0x26
 8002102:	f002 fcaf 	bl	8004a64 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002106:	e043      	b.n	8002190 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a24      	ldr	r2, [pc, #144]	; (80021a0 <HAL_UART_MspInit+0x148>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d13e      	bne.n	8002190 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002112:	2304      	movs	r3, #4
 8002114:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800211a:	f107 0318 	add.w	r3, r7, #24
 800211e:	4618      	mov	r0, r3
 8002120:	f003 ffb8 	bl	8006094 <HAL_RCCEx_PeriphCLKConfig>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800212a:	f7ff faab 	bl	8001684 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800212e:	4b1b      	ldr	r3, [pc, #108]	; (800219c <HAL_UART_MspInit+0x144>)
 8002130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002132:	4a1a      	ldr	r2, [pc, #104]	; (800219c <HAL_UART_MspInit+0x144>)
 8002134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002138:	6593      	str	r3, [r2, #88]	; 0x58
 800213a:	4b18      	ldr	r3, [pc, #96]	; (800219c <HAL_UART_MspInit+0x144>)
 800213c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002146:	4b15      	ldr	r3, [pc, #84]	; (800219c <HAL_UART_MspInit+0x144>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214a:	4a14      	ldr	r2, [pc, #80]	; (800219c <HAL_UART_MspInit+0x144>)
 800214c:	f043 0304 	orr.w	r3, r3, #4
 8002150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002152:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_UART_MspInit+0x144>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	f003 0304 	and.w	r3, r3, #4
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800215e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002162:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216c:	2300      	movs	r3, #0
 800216e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002170:	2307      	movs	r3, #7
 8002172:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002174:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002178:	4619      	mov	r1, r3
 800217a:	480a      	ldr	r0, [pc, #40]	; (80021a4 <HAL_UART_MspInit+0x14c>)
 800217c:	f002 ffb2 	bl	80050e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002180:	2200      	movs	r2, #0
 8002182:	2100      	movs	r1, #0
 8002184:	2027      	movs	r0, #39	; 0x27
 8002186:	f002 fc53 	bl	8004a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800218a:	2027      	movs	r0, #39	; 0x27
 800218c:	f002 fc6a 	bl	8004a64 <HAL_NVIC_EnableIRQ>
}
 8002190:	bf00      	nop
 8002192:	3780      	adds	r7, #128	; 0x80
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40004400 	.word	0x40004400
 800219c:	40021000 	.word	0x40021000
 80021a0:	40004800 	.word	0x40004800
 80021a4:	48000800 	.word	0x48000800

080021a8 <Erreur>:
 * @param erreur Un tableau de trois éléments contenant les erreurs aux instants t, t-1 et t-2.
 * @param vitesse Un tableau de trois éléments contenant les valeurs de vitesse aux instants t, t-1 et t-2.
 *
 * @return 0 si la fonction s'est exécutée avec succès.
 */
int Erreur(float consigne, float * erreur, float * vitesse){
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80021b2:	60b8      	str	r0, [r7, #8]
 80021b4:	6079      	str	r1, [r7, #4]
	erreur[0]=erreur[1];
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	601a      	str	r2, [r3, #0]
	erreur[1]=erreur[2];
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	3304      	adds	r3, #4
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	6892      	ldr	r2, [r2, #8]
 80021c6:	601a      	str	r2, [r3, #0]
	erreur[2]=consigne-vitesse[2];
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3308      	adds	r3, #8
 80021cc:	edd3 7a00 	vldr	s15, [r3]
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	3308      	adds	r3, #8
 80021d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80021d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021dc:	edc3 7a00 	vstr	s15, [r3]
	return 0;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <Erreur_I>:
 * @param Iconsigne Un tableau de trois éléments contenant les consignes de courant aux instants t, t-1 et t-2.
 * @param Imes Un tableau de trois éléments contenant les mesures de courant aux instants t, t-1 et t-2.
 *
 * @return 0 si la fonction s'est exécutée avec succès.
 */
int Erreur_I(float * Iconsigne,float * Imes){
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
	erreur_I[0]=erreur_I[1];
 80021fa:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <Erreur_I+0x44>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4a0d      	ldr	r2, [pc, #52]	; (8002234 <Erreur_I+0x44>)
 8002200:	6013      	str	r3, [r2, #0]
	erreur_I[1]=erreur_I[2];
 8002202:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <Erreur_I+0x44>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	4a0b      	ldr	r2, [pc, #44]	; (8002234 <Erreur_I+0x44>)
 8002208:	6053      	str	r3, [r2, #4]
	erreur_I[2]=Iconsigne[2]-Imes[2];
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3308      	adds	r3, #8
 800220e:	ed93 7a00 	vldr	s14, [r3]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	3308      	adds	r3, #8
 8002216:	edd3 7a00 	vldr	s15, [r3]
 800221a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <Erreur_I+0x44>)
 8002220:	edc3 7a02 	vstr	s15, [r3, #8]
	return 0;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	20000510 	.word	0x20000510

08002238 <Speed_PI>:
 * @param input Un tableau de trois éléments contenant les entrées aux instants t, t-1 et t-2.
 * @param output Un tableau de trois éléments contenant les sorties aux instants t, t-1 et t-2.
 *
 * @return 0 si la fonction s'est exécutée avec succès.
 */
int Speed_PI(h_PID_t * h_PID,float * input,float * output){
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
	output[2]=output[0]+h_PID->b0*input[2]+h_PID->b1*input[1]+h_PID->b2-input[0];
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	ed93 7a00 	vldr	s14, [r3]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	edd3 6a03 	vldr	s13, [r3, #12]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	3308      	adds	r3, #8
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800225c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	edd3 6a04 	vldr	s13, [r3, #16]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	3304      	adds	r3, #4
 800226a:	edd3 7a00 	vldr	s15, [r3]
 800226e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002272:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	edd3 7a05 	vldr	s15, [r3, #20]
 800227c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	edd3 7a00 	vldr	s15, [r3]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3308      	adds	r3, #8
 800228a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800228e:	edc3 7a00 	vstr	s15, [r3]
	return 0;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <Current_PI>:
 * @param input Un tableau de trois éléments contenant les entrées aux instants t, t-1 et t-2.
 * @param output Un tableau de trois éléments contenant les sorties aux instants t, t-1 et t-2.
 *
 * @return 0 si la fonction s'est exécutée avec succès.
 */
int Current_PI(h_PID_t * h_PID ,float * input, float * output){
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
	output[2]=output[0]+h_PID->b0*input[2]+h_PID->b1*input[1]+h_PID->b2-input[0]+0.5;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	ed93 7a00 	vldr	s14, [r3]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	edd3 6a03 	vldr	s13, [r3, #12]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	3308      	adds	r3, #8
 80022bc:	edd3 7a00 	vldr	s15, [r3]
 80022c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	edd3 6a04 	vldr	s13, [r3, #16]
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	3304      	adds	r3, #4
 80022d2:	edd3 7a00 	vldr	s15, [r3]
 80022d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80022e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	edd3 7a00 	vldr	s15, [r3]
 80022ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3308      	adds	r3, #8
 80022f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022fe:	edc3 7a00 	vstr	s15, [r3]
	if (output[2] >= 3)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3308      	adds	r3, #8
 8002306:	edd3 7a00 	vldr	s15, [r3]
 800230a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800230e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002316:	db03      	blt.n	8002320 <Current_PI+0x80>
	{
		output[2]=3; //Saturation en courant
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3308      	adds	r3, #8
 800231c:	4a04      	ldr	r2, [pc, #16]	; (8002330 <Current_PI+0x90>)
 800231e:	601a      	str	r2, [r3, #0]
	}
	return 0;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40400000 	.word	0x40400000

08002334 <NewPWM>:
 *
 * @param input Un tableau de trois éléments contenant l'entrée aux instants t, t-1 et t-2.
 *
 * @return 0 si la fonction s'est exécutée avec succès.
 */
int NewPWM(float* input){
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	New_alpha=(alpha_MAX*input[2]);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3308      	adds	r3, #8
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002374 <NewPWM+0x40>
 8002348:	ee67 7a87 	vmul.f32	s15, s15, s14
 800234c:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <NewPWM+0x44>)
 800234e:	edc3 7a00 	vstr	s15, [r3]
	set_pwm(New_alpha);
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <NewPWM+0x44>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe f92e 	bl	80005b8 <__aeabi_f2d>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	ec43 2b10 	vmov	d0, r2, r3
 8002364:	f000 f928 	bl	80025b8 <set_pwm>
	return 0;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	44800000 	.word	0x44800000
 8002378:	20000010 	.word	0x20000010

0800237c <start_asserv>:
/**
 * @brief Démarre le système d'asservissement.
 *
 * Cette fonction démarre le système d'asservissement en activant la conversion ADC DMA, en lançant un timer périodique, et en initialisant le codeur.
 */
void start_asserv(void){
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
	if(HAL_OK != HAL_ADC_Start_DMA(&hadc1, buffer, ADC_BUF_SIZE)){
 8002380:	2201      	movs	r2, #1
 8002382:	4908      	ldr	r1, [pc, #32]	; (80023a4 <start_asserv+0x28>)
 8002384:	4808      	ldr	r0, [pc, #32]	; (80023a8 <start_asserv+0x2c>)
 8002386:	f001 f8b3 	bl	80034f0 <HAL_ADC_Start_DMA>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <start_asserv+0x18>
		Error_Handler();
 8002390:	f7ff f978 	bl	8001684 <Error_Handler>
	}
	HAL_TIM_Base_Start_IT(&htim16);
 8002394:	4805      	ldr	r0, [pc, #20]	; (80023ac <start_asserv+0x30>)
 8002396:	f004 f923 	bl	80065e0 <HAL_TIM_Base_Start_IT>
	codeur_start();
 800239a:	f000 f809 	bl	80023b0 <codeur_start>
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000294 	.word	0x20000294
 80023a8:	20000158 	.word	0x20000158
 80023ac:	20000398 	.word	0x20000398

080023b0 <codeur_start>:
 * Cette fonction démarre le compteur d'encodeur sur le Timer 3 en mode interruption. L'encodeur est
 * configuré pour surveiller les deux canaux(TIM_CHANNEL_ALL).
 *
 * @note Vous devez appeler cette fonction pour activer l'acquisition des impulsions de l'encodeur.
 */
void codeur_start(void){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_ALL);
 80023b4:	213c      	movs	r1, #60	; 0x3c
 80023b6:	4802      	ldr	r0, [pc, #8]	; (80023c0 <codeur_start+0x10>)
 80023b8:	f004 fc40 	bl	8006c3c <HAL_TIM_Encoder_Start_IT>
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	2000034c 	.word	0x2000034c

080023c4 <HAL_TIM_IC_CaptureCallback>:
 * @param htim Un pointeur vers la structure TIM_HandleTypeDef associée à l'interruption.
 *
 * @note Cette fonction est destinée à être utilisée en tant que rappel (callback) pour gérer la capture d'interruption du Timer.
 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(&htim3); //valeur du compteur absolue
 80023cc:	4b07      	ldr	r3, [pc, #28]	; (80023ec <HAL_TIM_IC_CaptureCallback+0x28>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	4a07      	ldr	r2, [pc, #28]	; (80023f0 <HAL_TIM_IC_CaptureCallback+0x2c>)
 80023d4:	6013      	str	r3, [r2, #0]
	pos = (int16_t)counter; 				 //valeur du compteur avec les valeurs négatives
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_TIM_IC_CaptureCallback+0x2c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	b21a      	sxth	r2, r3
 80023dc:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_TIM_IC_CaptureCallback+0x30>)
 80023de:	801a      	strh	r2, [r3, #0]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	2000034c 	.word	0x2000034c
 80023f0:	20000528 	.word	0x20000528
 80023f4:	2000052c 	.word	0x2000052c

080023f8 <calc_speed>:
 * La vitesse est exprimée en fronts par seconde (front/s) et est stockée dans la variable 'vitesse'.
 * Après le calcul, la variable 'old_pos' est mise à jour avec la valeur actuelle de 'pos', et 'idx' est réinitialisé à 0.
 *
 * @note Cette fonction doit être appelée toutes les 100ms dans le Callback du TIM 16
 */
void calc_speed(){
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
	vitesse[0]=vitesse[1];
 80023fc:	4b18      	ldr	r3, [pc, #96]	; (8002460 <calc_speed+0x68>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	4a17      	ldr	r2, [pc, #92]	; (8002460 <calc_speed+0x68>)
 8002402:	6013      	str	r3, [r2, #0]
	vitesse[1]=vitesse[2];
 8002404:	4b16      	ldr	r3, [pc, #88]	; (8002460 <calc_speed+0x68>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4a15      	ldr	r2, [pc, #84]	; (8002460 <calc_speed+0x68>)
 800240a:	6053      	str	r3, [r2, #4]
	vitesse[2] = (((pos - oldpos)/dt)/resolution)*ms_To_s*10;
 800240c:	4b15      	ldr	r3, [pc, #84]	; (8002464 <calc_speed+0x6c>)
 800240e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002412:	461a      	mov	r2, r3
 8002414:	4b14      	ldr	r3, [pc, #80]	; (8002468 <calc_speed+0x70>)
 8002416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800241a:	1ad2      	subs	r2, r2, r3
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <calc_speed+0x74>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	fb92 f3f3 	sdiv	r3, r2, r3
 8002424:	ee07 3a90 	vmov	s15, r3
 8002428:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800242c:	4b10      	ldr	r3, [pc, #64]	; (8002470 <calc_speed+0x78>)
 800242e:	ed93 7a00 	vldr	s14, [r3]
 8002432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002436:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002474 <calc_speed+0x7c>
 800243a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800243e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002442:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <calc_speed+0x68>)
 8002448:	edc3 7a02 	vstr	s15, [r3, #8]
	oldpos = pos;
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <calc_speed+0x6c>)
 800244e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002452:	4b05      	ldr	r3, [pc, #20]	; (8002468 <calc_speed+0x70>)
 8002454:	801a      	strh	r2, [r3, #0]
}
 8002456:	bf00      	nop
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	20000530 	.word	0x20000530
 8002464:	2000052c 	.word	0x2000052c
 8002468:	2000052e 	.word	0x2000052e
 800246c:	20000014 	.word	0x20000014
 8002470:	20000018 	.word	0x20000018
 8002474:	447a0000 	.word	0x447a0000

08002478 <pwm_start>:
 * Cette fonction démarre le PWM sur les canaux 1 et 2 du Timer 1.
 * Elle active la sortie PWM et la sortie complémentaire PWM (PWMN) sur ces canaux.
 *
 * @note Cette fonction doit être appelée après avoir configuré les paramètres PWM appropriés.
 */
void pwm_start(void){
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800247c:	2100      	movs	r1, #0
 800247e:	480a      	ldr	r0, [pc, #40]	; (80024a8 <pwm_start+0x30>)
 8002480:	f004 f988 	bl	8006794 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8002484:	2100      	movs	r1, #0
 8002486:	4808      	ldr	r0, [pc, #32]	; (80024a8 <pwm_start+0x30>)
 8002488:	f005 fce2 	bl	8007e50 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800248c:	2104      	movs	r1, #4
 800248e:	4806      	ldr	r0, [pc, #24]	; (80024a8 <pwm_start+0x30>)
 8002490:	f004 f980 	bl	8006794 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002494:	2104      	movs	r1, #4
 8002496:	4804      	ldr	r0, [pc, #16]	; (80024a8 <pwm_start+0x30>)
 8002498:	f005 fcda 	bl	8007e50 <HAL_TIMEx_PWMN_Start>

	aTemp=50;
 800249c:	4b03      	ldr	r3, [pc, #12]	; (80024ac <pwm_start+0x34>)
 800249e:	2232      	movs	r2, #50	; 0x32
 80024a0:	601a      	str	r2, [r3, #0]
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000300 	.word	0x20000300
 80024ac:	2000053c 	.word	0x2000053c

080024b0 <pwm_stop>:
 * Cette fonction arrete le PWM sur les canaux 1 et 2 du Timer 1.
 * Elle désactive la sortie PWM et la sortie complémentaire PWM (PWMN) sur ces canaux.
 *
 */

void pwm_stop(void){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
	set_pwm_alpha(50);
 80024b4:	2032      	movs	r0, #50	; 0x32
 80024b6:	f000 f815 	bl	80024e4 <set_pwm_alpha>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80024ba:	2100      	movs	r1, #0
 80024bc:	4808      	ldr	r0, [pc, #32]	; (80024e0 <pwm_stop+0x30>)
 80024be:	f004 fa7b 	bl	80069b8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80024c2:	2100      	movs	r1, #0
 80024c4:	4806      	ldr	r0, [pc, #24]	; (80024e0 <pwm_stop+0x30>)
 80024c6:	f005 fd85 	bl	8007fd4 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80024ca:	2104      	movs	r1, #4
 80024cc:	4804      	ldr	r0, [pc, #16]	; (80024e0 <pwm_stop+0x30>)
 80024ce:	f004 fa73 	bl	80069b8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80024d2:	2104      	movs	r1, #4
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <pwm_stop+0x30>)
 80024d6:	f005 fd7d 	bl	8007fd4 <HAL_TIMEx_PWMN_Stop>
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000300 	.word	0x20000300

080024e4 <set_pwm_alpha>:
 *
 * Cette fonction ajuste le signal PWM pour correspondre à la valeur alpha spécifiée avec une rampe pour ne pas cramer le moteur.
 *
 * @param alpha La valeur du rapport cyclique qui détermine la configuration du signal PWM.
 */
void set_pwm_alpha(int alpha){
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
	int a1;
	int a2;
	int aTransi=aTemp;
 80024ec:	4b2f      	ldr	r3, [pc, #188]	; (80025ac <set_pwm_alpha+0xc8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	617b      	str	r3, [r7, #20]

	if (alpha > aTransi){
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	dd26      	ble.n	8002548 <set_pwm_alpha+0x64>
		while(aTransi != alpha){
 80024fa:	e021      	b.n	8002540 <set_pwm_alpha+0x5c>

			aTransi++;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	3301      	adds	r3, #1
 8002500:	617b      	str	r3, [r7, #20]
			a1=alpha_MAX*aTransi/PWM_MAX;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	029b      	lsls	r3, r3, #10
 8002506:	4a2a      	ldr	r2, [pc, #168]	; (80025b0 <set_pwm_alpha+0xcc>)
 8002508:	fb82 1203 	smull	r1, r2, r2, r3
 800250c:	1152      	asrs	r2, r2, #5
 800250e:	17db      	asrs	r3, r3, #31
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	613b      	str	r3, [r7, #16]
			a2=alpha_MAX*(PWM_MAX-aTransi)/PWM_MAX;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800251a:	029b      	lsls	r3, r3, #10
 800251c:	4a24      	ldr	r2, [pc, #144]	; (80025b0 <set_pwm_alpha+0xcc>)
 800251e:	fb82 1203 	smull	r1, r2, r2, r3
 8002522:	1152      	asrs	r2, r2, #5
 8002524:	17db      	asrs	r3, r3, #31
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,a1);
 800252a:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <set_pwm_alpha+0xd0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,a2);
 8002532:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <set_pwm_alpha+0xd0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(50);
 800253a:	2032      	movs	r0, #50	; 0x32
 800253c:	f000 fbb0 	bl	8002ca0 <HAL_Delay>
		while(aTransi != alpha){
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	429a      	cmp	r2, r3
 8002546:	d1d9      	bne.n	80024fc <set_pwm_alpha+0x18>
		}
	}

	if (alpha < aTransi){
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	429a      	cmp	r2, r3
 800254e:	da26      	bge.n	800259e <set_pwm_alpha+0xba>
		while(aTransi != alpha){
 8002550:	e021      	b.n	8002596 <set_pwm_alpha+0xb2>

			aTransi--;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	3b01      	subs	r3, #1
 8002556:	617b      	str	r3, [r7, #20]
			a1=alpha_MAX*aTransi/PWM_MAX;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	029b      	lsls	r3, r3, #10
 800255c:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <set_pwm_alpha+0xcc>)
 800255e:	fb82 1203 	smull	r1, r2, r2, r3
 8002562:	1152      	asrs	r2, r2, #5
 8002564:	17db      	asrs	r3, r3, #31
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	613b      	str	r3, [r7, #16]
			a2=alpha_MAX*(PWM_MAX-aTransi)/PWM_MAX;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8002570:	029b      	lsls	r3, r3, #10
 8002572:	4a0f      	ldr	r2, [pc, #60]	; (80025b0 <set_pwm_alpha+0xcc>)
 8002574:	fb82 1203 	smull	r1, r2, r2, r3
 8002578:	1152      	asrs	r2, r2, #5
 800257a:	17db      	asrs	r3, r3, #31
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,a1);
 8002580:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <set_pwm_alpha+0xd0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,a2);
 8002588:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <set_pwm_alpha+0xd0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(50);
 8002590:	2032      	movs	r0, #50	; 0x32
 8002592:	f000 fb85 	bl	8002ca0 <HAL_Delay>
		while(aTransi != alpha){
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	429a      	cmp	r2, r3
 800259c:	d1d9      	bne.n	8002552 <set_pwm_alpha+0x6e>
		}
	}
	aTemp = alpha;
 800259e:	4a03      	ldr	r2, [pc, #12]	; (80025ac <set_pwm_alpha+0xc8>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6013      	str	r3, [r2, #0]

}
 80025a4:	bf00      	nop
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	2000053c 	.word	0x2000053c
 80025b0:	51eb851f 	.word	0x51eb851f
 80025b4:	20000300 	.word	0x20000300

080025b8 <set_pwm>:
 *
 * Cette fonction configure le signal PWM en ajustant sans rampe.
 *
 * @param alpha La valeur alpha qui détermine la configuration du signal PWM.
 */
void set_pwm(float alpha){
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	ed87 0a01 	vstr	s0, [r7, #4]
	__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,alpha);
 80025c2:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <set_pwm+0x44>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80025ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ce:	ee17 2a90 	vmov	r2, s15
 80025d2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,1024-alpha);
 80025d4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002600 <set_pwm+0x48>
 80025d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80025dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <set_pwm+0x44>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025e8:	ee17 2a90 	vmov	r2, s15
 80025ec:	639a      	str	r2, [r3, #56]	; 0x38
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20000300 	.word	0x20000300
 8002600:	44800000 	.word	0x44800000

08002604 <Shell_Init>:
/**
 * @brief Fonction d'initialisation du Shell
 * @note Affiche un message d'accueil lors du lançement du programme
 */

void Shell_Init(void){
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8002608:	2224      	movs	r2, #36	; 0x24
 800260a:	2100      	movs	r1, #0
 800260c:	4816      	ldr	r0, [pc, #88]	; (8002668 <Shell_Init+0x64>)
 800260e:	f008 f932 	bl	800a876 <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 8002612:	2240      	movs	r2, #64	; 0x40
 8002614:	2100      	movs	r1, #0
 8002616:	4815      	ldr	r0, [pc, #84]	; (800266c <Shell_Init+0x68>)
 8002618:	f008 f92d 	bl	800a876 <memset>
 800261c:	4b14      	ldr	r3, [pc, #80]	; (8002670 <Shell_Init+0x6c>)
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 8002622:	2264      	movs	r2, #100	; 0x64
 8002624:	2100      	movs	r1, #0
 8002626:	4813      	ldr	r0, [pc, #76]	; (8002674 <Shell_Init+0x70>)
 8002628:	f008 f925 	bl	800a876 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800262c:	2201      	movs	r2, #1
 800262e:	4910      	ldr	r1, [pc, #64]	; (8002670 <Shell_Init+0x6c>)
 8002630:	4811      	ldr	r0, [pc, #68]	; (8002678 <Shell_Init+0x74>)
 8002632:	f005 ffd9 	bl	80085e8 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8002636:	4811      	ldr	r0, [pc, #68]	; (800267c <Shell_Init+0x78>)
 8002638:	f7fd fdfc 	bl	8000234 <strlen>
 800263c:	4603      	mov	r3, r0
 800263e:	b29a      	uxth	r2, r3
 8002640:	f04f 33ff 	mov.w	r3, #4294967295
 8002644:	490d      	ldr	r1, [pc, #52]	; (800267c <Shell_Init+0x78>)
 8002646:	480c      	ldr	r0, [pc, #48]	; (8002678 <Shell_Init+0x74>)
 8002648:	f005 ff38 	bl	80084bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 800264c:	480c      	ldr	r0, [pc, #48]	; (8002680 <Shell_Init+0x7c>)
 800264e:	f7fd fdf1 	bl	8000234 <strlen>
 8002652:	4603      	mov	r3, r0
 8002654:	b29a      	uxth	r2, r3
 8002656:	f04f 33ff 	mov.w	r3, #4294967295
 800265a:	4909      	ldr	r1, [pc, #36]	; (8002680 <Shell_Init+0x7c>)
 800265c:	4806      	ldr	r0, [pc, #24]	; (8002678 <Shell_Init+0x74>)
 800265e:	f005 ff2d 	bl	80084bc <HAL_UART_Transmit>
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	200005f0 	.word	0x200005f0
 800266c:	200005ac 	.word	0x200005ac
 8002670:	20000544 	.word	0x20000544
 8002674:	20000548 	.word	0x20000548
 8002678:	200003e4 	.word	0x200003e4
 800267c:	20000038 	.word	0x20000038
 8002680:	2000001c 	.word	0x2000001c

08002684 <Shell_Loop>:

/**
 * @brief Cette fonction tourne en boucle afin de recevoir et d'exécuter les commandes du Shell
 */
void Shell_Loop(void){
 8002684:	b590      	push	{r4, r7, lr}
 8002686:	b08f      	sub	sp, #60	; 0x3c
 8002688:	af00      	add	r7, sp, #0
	if(uartRxReceived){ //Condition verifiée lors de la réception d'un nouveau caractère UART
 800268a:	4b98      	ldr	r3, [pc, #608]	; (80028ec <Shell_Loop+0x268>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d05b      	beq.n	800274a <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 8002692:	4b97      	ldr	r3, [pc, #604]	; (80028f0 <Shell_Loop+0x26c>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b08      	cmp	r3, #8
 8002698:	d034      	beq.n	8002704 <Shell_Loop+0x80>
 800269a:	2b0d      	cmp	r3, #13
 800269c:	d142      	bne.n	8002724 <Shell_Loop+0xa0>
		case ASCII_CR: //Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800269e:	f04f 33ff 	mov.w	r3, #4294967295
 80026a2:	2203      	movs	r2, #3
 80026a4:	4993      	ldr	r1, [pc, #588]	; (80028f4 <Shell_Loop+0x270>)
 80026a6:	4894      	ldr	r0, [pc, #592]	; (80028f8 <Shell_Loop+0x274>)
 80026a8:	f005 ff08 	bl	80084bc <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 80026ac:	4b93      	ldr	r3, [pc, #588]	; (80028fc <Shell_Loop+0x278>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a93      	ldr	r2, [pc, #588]	; (8002900 <Shell_Loop+0x27c>)
 80026b2:	2100      	movs	r1, #0
 80026b4:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 80026b6:	4b93      	ldr	r3, [pc, #588]	; (8002904 <Shell_Loop+0x280>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 80026bc:	4992      	ldr	r1, [pc, #584]	; (8002908 <Shell_Loop+0x284>)
 80026be:	4890      	ldr	r0, [pc, #576]	; (8002900 <Shell_Loop+0x27c>)
 80026c0:	f008 f8e2 	bl	800a888 <strtok>
 80026c4:	4603      	mov	r3, r0
 80026c6:	4a91      	ldr	r2, [pc, #580]	; (800290c <Shell_Loop+0x288>)
 80026c8:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80026ca:	e010      	b.n	80026ee <Shell_Loop+0x6a>
				argv[argc++] = token;
 80026cc:	4b8d      	ldr	r3, [pc, #564]	; (8002904 <Shell_Loop+0x280>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	498c      	ldr	r1, [pc, #560]	; (8002904 <Shell_Loop+0x280>)
 80026d4:	600a      	str	r2, [r1, #0]
 80026d6:	4a8d      	ldr	r2, [pc, #564]	; (800290c <Shell_Loop+0x288>)
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	498d      	ldr	r1, [pc, #564]	; (8002910 <Shell_Loop+0x28c>)
 80026dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 80026e0:	4989      	ldr	r1, [pc, #548]	; (8002908 <Shell_Loop+0x284>)
 80026e2:	2000      	movs	r0, #0
 80026e4:	f008 f8d0 	bl	800a888 <strtok>
 80026e8:	4603      	mov	r3, r0
 80026ea:	4a88      	ldr	r2, [pc, #544]	; (800290c <Shell_Loop+0x288>)
 80026ec:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80026ee:	4b87      	ldr	r3, [pc, #540]	; (800290c <Shell_Loop+0x288>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1ea      	bne.n	80026cc <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 80026f6:	4b81      	ldr	r3, [pc, #516]	; (80028fc <Shell_Loop+0x278>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 80026fc:	4b85      	ldr	r3, [pc, #532]	; (8002914 <Shell_Loop+0x290>)
 80026fe:	2201      	movs	r2, #1
 8002700:	601a      	str	r2, [r3, #0]
			break;
 8002702:	e01f      	b.n	8002744 <Shell_Loop+0xc0>
		case ASCII_BACK: //Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8002704:	4b7d      	ldr	r3, [pc, #500]	; (80028fc <Shell_Loop+0x278>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	1e5a      	subs	r2, r3, #1
 800270a:	497c      	ldr	r1, [pc, #496]	; (80028fc <Shell_Loop+0x278>)
 800270c:	600a      	str	r2, [r1, #0]
 800270e:	4a7c      	ldr	r2, [pc, #496]	; (8002900 <Shell_Loop+0x27c>)
 8002710:	2100      	movs	r1, #0
 8002712:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8002714:	f04f 33ff 	mov.w	r3, #4294967295
 8002718:	2204      	movs	r2, #4
 800271a:	497f      	ldr	r1, [pc, #508]	; (8002918 <Shell_Loop+0x294>)
 800271c:	4876      	ldr	r0, [pc, #472]	; (80028f8 <Shell_Loop+0x274>)
 800271e:	f005 fecd 	bl	80084bc <HAL_UART_Transmit>
			break;
 8002722:	e00f      	b.n	8002744 <Shell_Loop+0xc0>

		default: //Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8002724:	4b75      	ldr	r3, [pc, #468]	; (80028fc <Shell_Loop+0x278>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	4974      	ldr	r1, [pc, #464]	; (80028fc <Shell_Loop+0x278>)
 800272c:	600a      	str	r2, [r1, #0]
 800272e:	4a70      	ldr	r2, [pc, #448]	; (80028f0 <Shell_Loop+0x26c>)
 8002730:	7811      	ldrb	r1, [r2, #0]
 8002732:	4a73      	ldr	r2, [pc, #460]	; (8002900 <Shell_Loop+0x27c>)
 8002734:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8002736:	f04f 33ff 	mov.w	r3, #4294967295
 800273a:	2201      	movs	r2, #1
 800273c:	496c      	ldr	r1, [pc, #432]	; (80028f0 <Shell_Loop+0x26c>)
 800273e:	486e      	ldr	r0, [pc, #440]	; (80028f8 <Shell_Loop+0x274>)
 8002740:	f005 febc 	bl	80084bc <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 8002744:	4b69      	ldr	r3, [pc, #420]	; (80028ec <Shell_Loop+0x268>)
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){ //Condition vérifiant la validitée d'une commande
 800274a:	4b72      	ldr	r3, [pc, #456]	; (8002914 <Shell_Loop+0x290>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 8204 	beq.w	8002b5c <Shell_Loop+0x4d8>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 8002754:	4b6e      	ldr	r3, [pc, #440]	; (8002910 <Shell_Loop+0x28c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4970      	ldr	r1, [pc, #448]	; (800291c <Shell_Loop+0x298>)
 800275a:	4618      	mov	r0, r3
 800275c:	f7fd fd60 	bl	8000220 <strcmp>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d107      	bne.n	8002776 <Shell_Loop+0xf2>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 8002766:	f04f 33ff 	mov.w	r3, #4294967295
 800276a:	221a      	movs	r2, #26
 800276c:	496c      	ldr	r1, [pc, #432]	; (8002920 <Shell_Loop+0x29c>)
 800276e:	4862      	ldr	r0, [pc, #392]	; (80028f8 <Shell_Loop+0x274>)
 8002770:	f005 fea4 	bl	80084bc <HAL_UART_Transmit>
 8002774:	e1e8      	b.n	8002b48 <Shell_Loop+0x4c4>
		}
		else if(strcmp(argv[0],"help")==0){//Fonction help renvoyant la notice des fonctions spécifiées
 8002776:	4b66      	ldr	r3, [pc, #408]	; (8002910 <Shell_Loop+0x28c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	496a      	ldr	r1, [pc, #424]	; (8002924 <Shell_Loop+0x2a0>)
 800277c:	4618      	mov	r0, r3
 800277e:	f7fd fd4f 	bl	8000220 <strcmp>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d126      	bne.n	80027d6 <Shell_Loop+0x152>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 8002788:	4a67      	ldr	r2, [pc, #412]	; (8002928 <Shell_Loop+0x2a4>)
 800278a:	2164      	movs	r1, #100	; 0x64
 800278c:	4867      	ldr	r0, [pc, #412]	; (800292c <Shell_Loop+0x2a8>)
 800278e:	f007 fffb 	bl	800a788 <sniprintf>
 8002792:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	b29a      	uxth	r2, r3
 8002798:	f04f 33ff 	mov.w	r3, #4294967295
 800279c:	4963      	ldr	r1, [pc, #396]	; (800292c <Shell_Loop+0x2a8>)
 800279e:	4856      	ldr	r0, [pc, #344]	; (80028f8 <Shell_Loop+0x274>)
 80027a0:	f005 fe8c 	bl	80084bc <HAL_UART_Transmit>
			if(strcmp(argv[1],"speed")==0){
 80027a4:	4b5a      	ldr	r3, [pc, #360]	; (8002910 <Shell_Loop+0x28c>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4961      	ldr	r1, [pc, #388]	; (8002930 <Shell_Loop+0x2ac>)
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fd fd38 	bl	8000220 <strcmp>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f040 81c8 	bne.w	8002b48 <Shell_Loop+0x4c4>
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Prend en argument un rapport cyclique entre 0 et 100\r\n");
 80027b8:	4a5e      	ldr	r2, [pc, #376]	; (8002934 <Shell_Loop+0x2b0>)
 80027ba:	2164      	movs	r1, #100	; 0x64
 80027bc:	485b      	ldr	r0, [pc, #364]	; (800292c <Shell_Loop+0x2a8>)
 80027be:	f007 ffe3 	bl	800a788 <sniprintf>
 80027c2:	6038      	str	r0, [r7, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	f04f 33ff 	mov.w	r3, #4294967295
 80027cc:	4957      	ldr	r1, [pc, #348]	; (800292c <Shell_Loop+0x2a8>)
 80027ce:	484a      	ldr	r0, [pc, #296]	; (80028f8 <Shell_Loop+0x274>)
 80027d0:	f005 fe74 	bl	80084bc <HAL_UART_Transmit>
 80027d4:	e1b8      	b.n	8002b48 <Shell_Loop+0x4c4>
			}
		}
		else if(strcmp(argv[0],"speed")==0){//Fonction permettant de choisir le sens de rotation et la vitesse du moteur
 80027d6:	4b4e      	ldr	r3, [pc, #312]	; (8002910 <Shell_Loop+0x28c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4955      	ldr	r1, [pc, #340]	; (8002930 <Shell_Loop+0x2ac>)
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fd fd1f 	bl	8000220 <strcmp>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d14e      	bne.n	8002886 <Shell_Loop+0x202>
			if(atoi(argv[1])>=0){//La valeur de vitesse reçue étant une chaine de caractères ASCII, atoi permet de la convertir en entier
 80027e8:	4b49      	ldr	r3, [pc, #292]	; (8002910 <Shell_Loop+0x28c>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f007 fe8b 	bl	800a508 <atoi>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	db37      	blt.n	8002868 <Shell_Loop+0x1e4>
				if(atoi(argv[1])<=100){
 80027f8:	4b45      	ldr	r3, [pc, #276]	; (8002910 <Shell_Loop+0x28c>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f007 fe83 	bl	800a508 <atoi>
 8002802:	4603      	mov	r3, r0
 8002804:	2b64      	cmp	r3, #100	; 0x64
 8002806:	dc1d      	bgt.n	8002844 <Shell_Loop+0x1c0>
					set_pwm_alpha(atoi(argv[1]));//Appelle à la fonction permettant de changer le rapport cyclique
 8002808:	4b41      	ldr	r3, [pc, #260]	; (8002910 <Shell_Loop+0x28c>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4618      	mov	r0, r3
 800280e:	f007 fe7b 	bl	800a508 <atoi>
 8002812:	4603      	mov	r3, r0
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff fe65 	bl	80024e4 <set_pwm_alpha>
					int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Nouveau alpha = %d\r\n",atoi(argv[1]));
 800281a:	4b3d      	ldr	r3, [pc, #244]	; (8002910 <Shell_Loop+0x28c>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4618      	mov	r0, r3
 8002820:	f007 fe72 	bl	800a508 <atoi>
 8002824:	4603      	mov	r3, r0
 8002826:	4a44      	ldr	r2, [pc, #272]	; (8002938 <Shell_Loop+0x2b4>)
 8002828:	2164      	movs	r1, #100	; 0x64
 800282a:	4840      	ldr	r0, [pc, #256]	; (800292c <Shell_Loop+0x2a8>)
 800282c:	f007 ffac 	bl	800a788 <sniprintf>
 8002830:	60b8      	str	r0, [r7, #8]
					HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	b29a      	uxth	r2, r3
 8002836:	f04f 33ff 	mov.w	r3, #4294967295
 800283a:	493c      	ldr	r1, [pc, #240]	; (800292c <Shell_Loop+0x2a8>)
 800283c:	482e      	ldr	r0, [pc, #184]	; (80028f8 <Shell_Loop+0x274>)
 800283e:	f005 fe3d 	bl	80084bc <HAL_UART_Transmit>
 8002842:	e181      	b.n	8002b48 <Shell_Loop+0x4c4>
				}
				else{//Sécuritée permettant de ne pas avoir un rapport cyclique supérieur à 100
					set_pwm_alpha(100);
 8002844:	2064      	movs	r0, #100	; 0x64
 8002846:	f7ff fe4d 	bl	80024e4 <set_pwm_alpha>
					int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Nouveau alpha = 100\r\n");
 800284a:	4a3c      	ldr	r2, [pc, #240]	; (800293c <Shell_Loop+0x2b8>)
 800284c:	2164      	movs	r1, #100	; 0x64
 800284e:	4837      	ldr	r0, [pc, #220]	; (800292c <Shell_Loop+0x2a8>)
 8002850:	f007 ff9a 	bl	800a788 <sniprintf>
 8002854:	60f8      	str	r0, [r7, #12]
					HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	b29a      	uxth	r2, r3
 800285a:	f04f 33ff 	mov.w	r3, #4294967295
 800285e:	4933      	ldr	r1, [pc, #204]	; (800292c <Shell_Loop+0x2a8>)
 8002860:	4825      	ldr	r0, [pc, #148]	; (80028f8 <Shell_Loop+0x274>)
 8002862:	f005 fe2b 	bl	80084bc <HAL_UART_Transmit>
 8002866:	e16f      	b.n	8002b48 <Shell_Loop+0x4c4>
				}
			}
			else{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Erreur alpha doit être compris entre 0 et 100\r\n");
 8002868:	4a35      	ldr	r2, [pc, #212]	; (8002940 <Shell_Loop+0x2bc>)
 800286a:	2164      	movs	r1, #100	; 0x64
 800286c:	482f      	ldr	r0, [pc, #188]	; (800292c <Shell_Loop+0x2a8>)
 800286e:	f007 ff8b 	bl	800a788 <sniprintf>
 8002872:	6138      	str	r0, [r7, #16]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	b29a      	uxth	r2, r3
 8002878:	f04f 33ff 	mov.w	r3, #4294967295
 800287c:	492b      	ldr	r1, [pc, #172]	; (800292c <Shell_Loop+0x2a8>)
 800287e:	481e      	ldr	r0, [pc, #120]	; (80028f8 <Shell_Loop+0x274>)
 8002880:	f005 fe1c 	bl	80084bc <HAL_UART_Transmit>
 8002884:	e160      	b.n	8002b48 <Shell_Loop+0x4c4>
			}
		}

		else if(strcmp(argv[0],"start")==0){//Fonction permettant d'allumer les PWM
 8002886:	4b22      	ldr	r3, [pc, #136]	; (8002910 <Shell_Loop+0x28c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	492e      	ldr	r1, [pc, #184]	; (8002944 <Shell_Loop+0x2c0>)
 800288c:	4618      	mov	r0, r3
 800288e:	f7fd fcc7 	bl	8000220 <strcmp>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d15d      	bne.n	8002954 <Shell_Loop+0x2d0>
			if(motorStart == 0){
 8002898:	4b2b      	ldr	r3, [pc, #172]	; (8002948 <Shell_Loop+0x2c4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d116      	bne.n	80028ce <Shell_Loop+0x24a>
				pwm_start();
 80028a0:	f7ff fdea 	bl	8002478 <pwm_start>
				set_pwm_alpha(50);
 80028a4:	2032      	movs	r0, #50	; 0x32
 80028a6:	f7ff fe1d 	bl	80024e4 <set_pwm_alpha>
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Motor start\r\nalpha = 50\r\n");
 80028aa:	4a28      	ldr	r2, [pc, #160]	; (800294c <Shell_Loop+0x2c8>)
 80028ac:	2164      	movs	r1, #100	; 0x64
 80028ae:	481f      	ldr	r0, [pc, #124]	; (800292c <Shell_Loop+0x2a8>)
 80028b0:	f007 ff6a 	bl	800a788 <sniprintf>
 80028b4:	6178      	str	r0, [r7, #20]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	f04f 33ff 	mov.w	r3, #4294967295
 80028be:	491b      	ldr	r1, [pc, #108]	; (800292c <Shell_Loop+0x2a8>)
 80028c0:	480d      	ldr	r0, [pc, #52]	; (80028f8 <Shell_Loop+0x274>)
 80028c2:	f005 fdfb 	bl	80084bc <HAL_UART_Transmit>
				motorStart =1;
 80028c6:	4b20      	ldr	r3, [pc, #128]	; (8002948 <Shell_Loop+0x2c4>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	e13c      	b.n	8002b48 <Shell_Loop+0x4c4>
			}
			else{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Motor is already on\r\n");
 80028ce:	4a20      	ldr	r2, [pc, #128]	; (8002950 <Shell_Loop+0x2cc>)
 80028d0:	2164      	movs	r1, #100	; 0x64
 80028d2:	4816      	ldr	r0, [pc, #88]	; (800292c <Shell_Loop+0x2a8>)
 80028d4:	f007 ff58 	bl	800a788 <sniprintf>
 80028d8:	61b8      	str	r0, [r7, #24]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	b29a      	uxth	r2, r3
 80028de:	f04f 33ff 	mov.w	r3, #4294967295
 80028e2:	4912      	ldr	r1, [pc, #72]	; (800292c <Shell_Loop+0x2a8>)
 80028e4:	4804      	ldr	r0, [pc, #16]	; (80028f8 <Shell_Loop+0x274>)
 80028e6:	f005 fde9 	bl	80084bc <HAL_UART_Transmit>
 80028ea:	e12d      	b.n	8002b48 <Shell_Loop+0x4c4>
 80028ec:	20000540 	.word	0x20000540
 80028f0:	20000544 	.word	0x20000544
 80028f4:	200000a0 	.word	0x200000a0
 80028f8:	200003e4 	.word	0x200003e4
 80028fc:	200005ec 	.word	0x200005ec
 8002900:	200005ac 	.word	0x200005ac
 8002904:	20000614 	.word	0x20000614
 8002908:	0800ba08 	.word	0x0800ba08
 800290c:	20000618 	.word	0x20000618
 8002910:	200005f0 	.word	0x200005f0
 8002914:	2000061c 	.word	0x2000061c
 8002918:	200000a4 	.word	0x200000a4
 800291c:	0800ba0c 	.word	0x0800ba0c
 8002920:	200000bc 	.word	0x200000bc
 8002924:	0800ba1c 	.word	0x0800ba1c
 8002928:	0800ba24 	.word	0x0800ba24
 800292c:	20000548 	.word	0x20000548
 8002930:	0800ba4c 	.word	0x0800ba4c
 8002934:	0800ba54 	.word	0x0800ba54
 8002938:	0800ba8c 	.word	0x0800ba8c
 800293c:	0800baa4 	.word	0x0800baa4
 8002940:	0800babc 	.word	0x0800babc
 8002944:	0800baf0 	.word	0x0800baf0
 8002948:	20000620 	.word	0x20000620
 800294c:	0800baf8 	.word	0x0800baf8
 8002950:	0800bb14 	.word	0x0800bb14
			}
		}

		else if(strcmp(argv[0],"stop")==0){//Fonction permettant d'éteindre les PWM
 8002954:	4b83      	ldr	r3, [pc, #524]	; (8002b64 <Shell_Loop+0x4e0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4983      	ldr	r1, [pc, #524]	; (8002b68 <Shell_Loop+0x4e4>)
 800295a:	4618      	mov	r0, r3
 800295c:	f7fd fc60 	bl	8000220 <strcmp>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d126      	bne.n	80029b4 <Shell_Loop+0x330>
			if(motorStart == 1){
 8002966:	4b81      	ldr	r3, [pc, #516]	; (8002b6c <Shell_Loop+0x4e8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d113      	bne.n	8002996 <Shell_Loop+0x312>
				pwm_stop();
 800296e:	f7ff fd9f 	bl	80024b0 <pwm_stop>
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Motor stop\r\n");
 8002972:	4a7f      	ldr	r2, [pc, #508]	; (8002b70 <Shell_Loop+0x4ec>)
 8002974:	2164      	movs	r1, #100	; 0x64
 8002976:	487f      	ldr	r0, [pc, #508]	; (8002b74 <Shell_Loop+0x4f0>)
 8002978:	f007 ff06 	bl	800a788 <sniprintf>
 800297c:	61f8      	str	r0, [r7, #28]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	b29a      	uxth	r2, r3
 8002982:	f04f 33ff 	mov.w	r3, #4294967295
 8002986:	497b      	ldr	r1, [pc, #492]	; (8002b74 <Shell_Loop+0x4f0>)
 8002988:	487b      	ldr	r0, [pc, #492]	; (8002b78 <Shell_Loop+0x4f4>)
 800298a:	f005 fd97 	bl	80084bc <HAL_UART_Transmit>
				motorStart =0;
 800298e:	4b77      	ldr	r3, [pc, #476]	; (8002b6c <Shell_Loop+0x4e8>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	e0d8      	b.n	8002b48 <Shell_Loop+0x4c4>
			}
			else{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Motor is already off\r\n");
 8002996:	4a79      	ldr	r2, [pc, #484]	; (8002b7c <Shell_Loop+0x4f8>)
 8002998:	2164      	movs	r1, #100	; 0x64
 800299a:	4876      	ldr	r0, [pc, #472]	; (8002b74 <Shell_Loop+0x4f0>)
 800299c:	f007 fef4 	bl	800a788 <sniprintf>
 80029a0:	6238      	str	r0, [r7, #32]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	f04f 33ff 	mov.w	r3, #4294967295
 80029aa:	4972      	ldr	r1, [pc, #456]	; (8002b74 <Shell_Loop+0x4f0>)
 80029ac:	4872      	ldr	r0, [pc, #456]	; (8002b78 <Shell_Loop+0x4f4>)
 80029ae:	f005 fd85 	bl	80084bc <HAL_UART_Transmit>
 80029b2:	e0c9      	b.n	8002b48 <Shell_Loop+0x4c4>
			}
		}
		else if(strcmp(argv[0],"vitesse")==0){//Fonction permettant renvoi la vitesse si elle est calculée (asservissement activé)
 80029b4:	4b6b      	ldr	r3, [pc, #428]	; (8002b64 <Shell_Loop+0x4e0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4971      	ldr	r1, [pc, #452]	; (8002b80 <Shell_Loop+0x4fc>)
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fd fc30 	bl	8000220 <strcmp>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d115      	bne.n	80029f2 <Shell_Loop+0x36e>

			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Vitesse : %u\r\n", (int) vitesse);
 80029c6:	4b6f      	ldr	r3, [pc, #444]	; (8002b84 <Shell_Loop+0x500>)
 80029c8:	edd3 7a00 	vldr	s15, [r3]
 80029cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029d0:	ee17 3a90 	vmov	r3, s15
 80029d4:	4a6c      	ldr	r2, [pc, #432]	; (8002b88 <Shell_Loop+0x504>)
 80029d6:	2164      	movs	r1, #100	; 0x64
 80029d8:	4866      	ldr	r0, [pc, #408]	; (8002b74 <Shell_Loop+0x4f0>)
 80029da:	f007 fed5 	bl	800a788 <sniprintf>
 80029de:	6278      	str	r0, [r7, #36]	; 0x24
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	f04f 33ff 	mov.w	r3, #4294967295
 80029e8:	4962      	ldr	r1, [pc, #392]	; (8002b74 <Shell_Loop+0x4f0>)
 80029ea:	4863      	ldr	r0, [pc, #396]	; (8002b78 <Shell_Loop+0x4f4>)
 80029ec:	f005 fd66 	bl	80084bc <HAL_UART_Transmit>
 80029f0:	e0aa      	b.n	8002b48 <Shell_Loop+0x4c4>

		}
		//Obsolette
		else if(strcmp(argv[0],"consigne")==0){//Fonction permettant de choisir le sens de rotation et la vitesse du moteur
 80029f2:	4b5c      	ldr	r3, [pc, #368]	; (8002b64 <Shell_Loop+0x4e0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4965      	ldr	r1, [pc, #404]	; (8002b8c <Shell_Loop+0x508>)
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fd fc11 	bl	8000220 <strcmp>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d146      	bne.n	8002a92 <Shell_Loop+0x40e>
			if((atoi(argv[1])>=-50) & (atoi(argv[1])<=50)){//La valeur de vitesse reçue étant une chaine de caractères ASCII, atoi permet de la convertir en entier
 8002a04:	4b57      	ldr	r3, [pc, #348]	; (8002b64 <Shell_Loop+0x4e0>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f007 fd7d 	bl	800a508 <atoi>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8002a14:	bfac      	ite	ge
 8002a16:	2301      	movge	r3, #1
 8002a18:	2300      	movlt	r3, #0
 8002a1a:	b2dc      	uxtb	r4, r3
 8002a1c:	4b51      	ldr	r3, [pc, #324]	; (8002b64 <Shell_Loop+0x4e0>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f007 fd71 	bl	800a508 <atoi>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b32      	cmp	r3, #50	; 0x32
 8002a2a:	bfd4      	ite	le
 8002a2c:	2301      	movle	r3, #1
 8002a2e:	2300      	movgt	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	4023      	ands	r3, r4
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d01c      	beq.n	8002a74 <Shell_Loop+0x3f0>

				consigne=(atoi(argv[1]));//Appelle à la fonction permettant de changer le rapport cyclique
 8002a3a:	4b4a      	ldr	r3, [pc, #296]	; (8002b64 <Shell_Loop+0x4e0>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f007 fd62 	bl	800a508 <atoi>
 8002a44:	4603      	mov	r3, r0
 8002a46:	4a52      	ldr	r2, [pc, #328]	; (8002b90 <Shell_Loop+0x50c>)
 8002a48:	6013      	str	r3, [r2, #0]
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Nouvelle consigne = %d\r\n",atoi(argv[1]));
 8002a4a:	4b46      	ldr	r3, [pc, #280]	; (8002b64 <Shell_Loop+0x4e0>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f007 fd5a 	bl	800a508 <atoi>
 8002a54:	4603      	mov	r3, r0
 8002a56:	4a4f      	ldr	r2, [pc, #316]	; (8002b94 <Shell_Loop+0x510>)
 8002a58:	2164      	movs	r1, #100	; 0x64
 8002a5a:	4846      	ldr	r0, [pc, #280]	; (8002b74 <Shell_Loop+0x4f0>)
 8002a5c:	f007 fe94 	bl	800a788 <sniprintf>
 8002a60:	62b8      	str	r0, [r7, #40]	; 0x28
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	f04f 33ff 	mov.w	r3, #4294967295
 8002a6a:	4942      	ldr	r1, [pc, #264]	; (8002b74 <Shell_Loop+0x4f0>)
 8002a6c:	4842      	ldr	r0, [pc, #264]	; (8002b78 <Shell_Loop+0x4f4>)
 8002a6e:	f005 fd25 	bl	80084bc <HAL_UART_Transmit>
 8002a72:	e069      	b.n	8002b48 <Shell_Loop+0x4c4>
			}
			else{//Sécuritée permettant de ne pas avoir un rapport cyclique supérieur à 100
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Erreur consigne doit être comprise entre -50 et 50 tour/s\r\n");
 8002a74:	4a48      	ldr	r2, [pc, #288]	; (8002b98 <Shell_Loop+0x514>)
 8002a76:	2164      	movs	r1, #100	; 0x64
 8002a78:	483e      	ldr	r0, [pc, #248]	; (8002b74 <Shell_Loop+0x4f0>)
 8002a7a:	f007 fe85 	bl	800a788 <sniprintf>
 8002a7e:	62f8      	str	r0, [r7, #44]	; 0x2c
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	f04f 33ff 	mov.w	r3, #4294967295
 8002a88:	493a      	ldr	r1, [pc, #232]	; (8002b74 <Shell_Loop+0x4f0>)
 8002a8a:	483b      	ldr	r0, [pc, #236]	; (8002b78 <Shell_Loop+0x4f4>)
 8002a8c:	f005 fd16 	bl	80084bc <HAL_UART_Transmit>
 8002a90:	e05a      	b.n	8002b48 <Shell_Loop+0x4c4>
			}

		}
		else if(strcmp(argv[0],"asserv")==0){//Fonction permettant de lancer l'asservissement
 8002a92:	4b34      	ldr	r3, [pc, #208]	; (8002b64 <Shell_Loop+0x4e0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4941      	ldr	r1, [pc, #260]	; (8002b9c <Shell_Loop+0x518>)
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fd fbc1 	bl	8000220 <strcmp>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d14a      	bne.n	8002b3a <Shell_Loop+0x4b6>
			if((atoi(argv[1])>=-3000) & (atoi(argv[1])<=3000)){
 8002aa4:	4b2f      	ldr	r3, [pc, #188]	; (8002b64 <Shell_Loop+0x4e0>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f007 fd2d 	bl	800a508 <atoi>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4a3b      	ldr	r2, [pc, #236]	; (8002ba0 <Shell_Loop+0x51c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	bfac      	ite	ge
 8002ab6:	2301      	movge	r3, #1
 8002ab8:	2300      	movlt	r3, #0
 8002aba:	b2dc      	uxtb	r4, r3
 8002abc:	4b29      	ldr	r3, [pc, #164]	; (8002b64 <Shell_Loop+0x4e0>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f007 fd21 	bl	800a508 <atoi>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002acc:	4293      	cmp	r3, r2
 8002ace:	bfd4      	ite	le
 8002ad0:	2301      	movle	r3, #1
 8002ad2:	2300      	movgt	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	4023      	ands	r3, r4
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d01e      	beq.n	8002b1c <Shell_Loop+0x498>
				consigne = atoi(argv[1]);
 8002ade:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <Shell_Loop+0x4e0>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f007 fd10 	bl	800a508 <atoi>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4a29      	ldr	r2, [pc, #164]	; (8002b90 <Shell_Loop+0x50c>)
 8002aec:	6013      	str	r3, [r2, #0]
				start_asserv();
 8002aee:	f7ff fc45 	bl	800237c <start_asserv>
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Nouvelle consigne = %d\r\n",atoi(argv[1]));
 8002af2:	4b1c      	ldr	r3, [pc, #112]	; (8002b64 <Shell_Loop+0x4e0>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f007 fd06 	bl	800a508 <atoi>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4a25      	ldr	r2, [pc, #148]	; (8002b94 <Shell_Loop+0x510>)
 8002b00:	2164      	movs	r1, #100	; 0x64
 8002b02:	481c      	ldr	r0, [pc, #112]	; (8002b74 <Shell_Loop+0x4f0>)
 8002b04:	f007 fe40 	bl	800a788 <sniprintf>
 8002b08:	6338      	str	r0, [r7, #48]	; 0x30
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b12:	4918      	ldr	r1, [pc, #96]	; (8002b74 <Shell_Loop+0x4f0>)
 8002b14:	4818      	ldr	r0, [pc, #96]	; (8002b78 <Shell_Loop+0x4f4>)
 8002b16:	f005 fcd1 	bl	80084bc <HAL_UART_Transmit>
 8002b1a:	e015      	b.n	8002b48 <Shell_Loop+0x4c4>
			}
			else{//Sécuritée permettant de ne pas avoir une vitesse inatteignable
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Erreur consigne doit être comprise entre + ou - 3000 tour/min\r\n");
 8002b1c:	4a21      	ldr	r2, [pc, #132]	; (8002ba4 <Shell_Loop+0x520>)
 8002b1e:	2164      	movs	r1, #100	; 0x64
 8002b20:	4814      	ldr	r0, [pc, #80]	; (8002b74 <Shell_Loop+0x4f0>)
 8002b22:	f007 fe31 	bl	800a788 <sniprintf>
 8002b26:	6378      	str	r0, [r7, #52]	; 0x34
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b30:	4910      	ldr	r1, [pc, #64]	; (8002b74 <Shell_Loop+0x4f0>)
 8002b32:	4811      	ldr	r0, [pc, #68]	; (8002b78 <Shell_Loop+0x4f4>)
 8002b34:	f005 fcc2 	bl	80084bc <HAL_UART_Transmit>
 8002b38:	e006      	b.n	8002b48 <Shell_Loop+0x4c4>
			}
		}


		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8002b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3e:	2214      	movs	r2, #20
 8002b40:	4919      	ldr	r1, [pc, #100]	; (8002ba8 <Shell_Loop+0x524>)
 8002b42:	480d      	ldr	r0, [pc, #52]	; (8002b78 <Shell_Loop+0x4f4>)
 8002b44:	f005 fcba 	bl	80084bc <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8002b48:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4c:	221c      	movs	r2, #28
 8002b4e:	4917      	ldr	r1, [pc, #92]	; (8002bac <Shell_Loop+0x528>)
 8002b50:	4809      	ldr	r0, [pc, #36]	; (8002b78 <Shell_Loop+0x4f4>)
 8002b52:	f005 fcb3 	bl	80084bc <HAL_UART_Transmit>
		newCmdReady = 0;
 8002b56:	4b16      	ldr	r3, [pc, #88]	; (8002bb0 <Shell_Loop+0x52c>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
	}
}
 8002b5c:	bf00      	nop
 8002b5e:	373c      	adds	r7, #60	; 0x3c
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd90      	pop	{r4, r7, pc}
 8002b64:	200005f0 	.word	0x200005f0
 8002b68:	0800bb2c 	.word	0x0800bb2c
 8002b6c:	20000620 	.word	0x20000620
 8002b70:	0800bb34 	.word	0x0800bb34
 8002b74:	20000548 	.word	0x20000548
 8002b78:	200003e4 	.word	0x200003e4
 8002b7c:	0800bb44 	.word	0x0800bb44
 8002b80:	0800bb5c 	.word	0x0800bb5c
 8002b84:	20000530 	.word	0x20000530
 8002b88:	0800bb64 	.word	0x0800bb64
 8002b8c:	0800bb74 	.word	0x0800bb74
 8002b90:	20000624 	.word	0x20000624
 8002b94:	0800bb80 	.word	0x0800bb80
 8002b98:	0800bb9c 	.word	0x0800bb9c
 8002b9c:	0800bbdc 	.word	0x0800bbdc
 8002ba0:	fffff448 	.word	0xfffff448
 8002ba4:	0800bbe4 	.word	0x0800bbe4
 8002ba8:	200000a8 	.word	0x200000a8
 8002bac:	2000001c 	.word	0x2000001c
 8002bb0:	2000061c 	.word	0x2000061c

08002bb4 <HAL_UART_RxCpltCallback>:

/**
 * @brief Fonction Callback appelée lors de la réception d'un nouveau caractère
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <HAL_UART_RxCpltCallback+0x20>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	4904      	ldr	r1, [pc, #16]	; (8002bd8 <HAL_UART_RxCpltCallback+0x24>)
 8002bc6:	4805      	ldr	r0, [pc, #20]	; (8002bdc <HAL_UART_RxCpltCallback+0x28>)
 8002bc8:	f005 fd0e 	bl	80085e8 <HAL_UART_Receive_IT>
}
 8002bcc:	bf00      	nop
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	20000540 	.word	0x20000540
 8002bd8:	20000544 	.word	0x20000544
 8002bdc:	200003e4 	.word	0x200003e4

08002be0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002be0:	480d      	ldr	r0, [pc, #52]	; (8002c18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002be2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002be4:	480d      	ldr	r0, [pc, #52]	; (8002c1c <LoopForever+0x6>)
  ldr r1, =_edata
 8002be6:	490e      	ldr	r1, [pc, #56]	; (8002c20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002be8:	4a0e      	ldr	r2, [pc, #56]	; (8002c24 <LoopForever+0xe>)
  movs r3, #0
 8002bea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002bec:	e002      	b.n	8002bf4 <LoopCopyDataInit>

08002bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bf2:	3304      	adds	r3, #4

08002bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bf8:	d3f9      	bcc.n	8002bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bfa:	4a0b      	ldr	r2, [pc, #44]	; (8002c28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bfc:	4c0b      	ldr	r4, [pc, #44]	; (8002c2c <LoopForever+0x16>)
  movs r3, #0
 8002bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c00:	e001      	b.n	8002c06 <LoopFillZerobss>

08002c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c04:	3204      	adds	r2, #4

08002c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c08:	d3fb      	bcc.n	8002c02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c0a:	f7fe ff19 	bl	8001a40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c0e:	f007 fee3 	bl	800a9d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c12:	f7fe fbdd 	bl	80013d0 <main>

08002c16 <LoopForever>:

LoopForever:
    b LoopForever
 8002c16:	e7fe      	b.n	8002c16 <LoopForever>
  ldr   r0, =_estack
 8002c18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c20:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 8002c24:	0800be5c 	.word	0x0800be5c
  ldr r2, =_sbss
 8002c28:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 8002c2c:	20000778 	.word	0x20000778

08002c30 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c30:	e7fe      	b.n	8002c30 <ADC3_IRQHandler>

08002c32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c3c:	2003      	movs	r0, #3
 8002c3e:	f001 feec 	bl	8004a1a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c42:	200f      	movs	r0, #15
 8002c44:	f7fe fd48 	bl	80016d8 <HAL_InitTick>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	71fb      	strb	r3, [r7, #7]
 8002c52:	e001      	b.n	8002c58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c54:	f7fe fd1c 	bl	8001690 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c58:	79fb      	ldrb	r3, [r7, #7]

}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c68:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_IncTick+0x1c>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_IncTick+0x20>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4413      	add	r3, r2
 8002c72:	4a03      	ldr	r2, [pc, #12]	; (8002c80 <HAL_IncTick+0x1c>)
 8002c74:	6013      	str	r3, [r2, #0]
}
 8002c76:	bf00      	nop
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	20000628 	.word	0x20000628
 8002c84:	200000dc 	.word	0x200000dc

08002c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c8c:	4b03      	ldr	r3, [pc, #12]	; (8002c9c <HAL_GetTick+0x14>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	20000628 	.word	0x20000628

08002ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ca8:	f7ff ffee 	bl	8002c88 <HAL_GetTick>
 8002cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb8:	d004      	beq.n	8002cc4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cba:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <HAL_Delay+0x40>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cc4:	bf00      	nop
 8002cc6:	f7ff ffdf 	bl	8002c88 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d8f7      	bhi.n	8002cc6 <HAL_Delay+0x26>
  {
  }
}
 8002cd6:	bf00      	nop
 8002cd8:	bf00      	nop
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	200000dc 	.word	0x200000dc

08002ce4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	609a      	str	r2, [r3, #8]
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	3360      	adds	r3, #96	; 0x60
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <LL_ADC_SetOffset+0x44>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002d84:	bf00      	nop
 8002d86:	371c      	adds	r7, #28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	03fff000 	.word	0x03fff000

08002d94 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3360      	adds	r3, #96	; 0x60
 8002da2:	461a      	mov	r2, r3
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	3360      	adds	r3, #96	; 0x60
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	431a      	orrs	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002dea:	bf00      	nop
 8002dec:	371c      	adds	r7, #28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b087      	sub	sp, #28
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	3360      	adds	r3, #96	; 0x60
 8002e06:	461a      	mov	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002e20:	bf00      	nop
 8002e22:	371c      	adds	r7, #28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	3360      	adds	r3, #96	; 0x60
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	431a      	orrs	r2, r3
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002e56:	bf00      	nop
 8002e58:	371c      	adds	r7, #28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	615a      	str	r2, [r3, #20]
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b087      	sub	sp, #28
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	3330      	adds	r3, #48	; 0x30
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	0a1b      	lsrs	r3, r3, #8
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	4413      	add	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	211f      	movs	r1, #31
 8002eda:	fa01 f303 	lsl.w	r3, r1, r3
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	401a      	ands	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	0e9b      	lsrs	r3, r3, #26
 8002ee6:	f003 011f 	and.w	r1, r3, #31
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002efa:	bf00      	nop
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f12:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	3314      	adds	r3, #20
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	0e5b      	lsrs	r3, r3, #25
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	4413      	add	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	0d1b      	lsrs	r3, r3, #20
 8002f54:	f003 031f 	and.w	r3, r3, #31
 8002f58:	2107      	movs	r1, #7
 8002f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	401a      	ands	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	0d1b      	lsrs	r3, r3, #20
 8002f66:	f003 031f 	and.w	r3, r3, #31
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f70:	431a      	orrs	r2, r3
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f76:	bf00      	nop
 8002f78:	371c      	adds	r7, #28
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
	...

08002f84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a0f      	ldr	r2, [pc, #60]	; (8002fd0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d10a      	bne.n	8002fae <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002fac:	e00a      	b.n	8002fc4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	401a      	ands	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	407f0000 	.word	0x407f0000

08002fd4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 031f 	and.w	r3, r3, #31
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003000:	4618      	mov	r0, r3
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800301c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6093      	str	r3, [r2, #8]
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003040:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003044:	d101      	bne.n	800304a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003068:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800306c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003090:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003094:	d101      	bne.n	800309a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030bc:	f043 0201 	orr.w	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <LL_ADC_IsEnabled+0x18>
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <LL_ADC_IsEnabled+0x1a>
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003106:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800310a:	f043 0204 	orr.w	r2, r3, #4
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b04      	cmp	r3, #4
 8003130:	d101      	bne.n	8003136 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b08      	cmp	r3, #8
 8003156:	d101      	bne.n	800315c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
	...

0800316c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800316c:	b590      	push	{r4, r7, lr}
 800316e:	b089      	sub	sp, #36	; 0x24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003178:	2300      	movs	r3, #0
 800317a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e1af      	b.n	80034e6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003190:	2b00      	cmp	r3, #0
 8003192:	d109      	bne.n	80031a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7fd ff27 	bl	8000fe8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff ff3f 	bl	8003030 <LL_ADC_IsDeepPowerDownEnabled>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d004      	beq.n	80031c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff ff25 	bl	800300c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff ff5a 	bl	8003080 <LL_ADC_IsInternalRegulatorEnabled>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d115      	bne.n	80031fe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff ff3e 	bl	8003058 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031dc:	4b9f      	ldr	r3, [pc, #636]	; (800345c <HAL_ADC_Init+0x2f0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	099b      	lsrs	r3, r3, #6
 80031e2:	4a9f      	ldr	r2, [pc, #636]	; (8003460 <HAL_ADC_Init+0x2f4>)
 80031e4:	fba2 2303 	umull	r2, r3, r2, r3
 80031e8:	099b      	lsrs	r3, r3, #6
 80031ea:	3301      	adds	r3, #1
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031f0:	e002      	b.n	80031f8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	3b01      	subs	r3, #1
 80031f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f9      	bne.n	80031f2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff ff3c 	bl	8003080 <LL_ADC_IsInternalRegulatorEnabled>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10d      	bne.n	800322a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003212:	f043 0210 	orr.w	r2, r3, #16
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321e:	f043 0201 	orr.w	r2, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff ff75 	bl	800311e <LL_ADC_REG_IsConversionOngoing>
 8003234:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	2b00      	cmp	r3, #0
 8003240:	f040 8148 	bne.w	80034d4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2b00      	cmp	r3, #0
 8003248:	f040 8144 	bne.w	80034d4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003250:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003254:	f043 0202 	orr.w	r2, r3, #2
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff ff35 	bl	80030d0 <LL_ADC_IsEnabled>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d141      	bne.n	80032f0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003274:	d004      	beq.n	8003280 <HAL_ADC_Init+0x114>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a7a      	ldr	r2, [pc, #488]	; (8003464 <HAL_ADC_Init+0x2f8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d10f      	bne.n	80032a0 <HAL_ADC_Init+0x134>
 8003280:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003284:	f7ff ff24 	bl	80030d0 <LL_ADC_IsEnabled>
 8003288:	4604      	mov	r4, r0
 800328a:	4876      	ldr	r0, [pc, #472]	; (8003464 <HAL_ADC_Init+0x2f8>)
 800328c:	f7ff ff20 	bl	80030d0 <LL_ADC_IsEnabled>
 8003290:	4603      	mov	r3, r0
 8003292:	4323      	orrs	r3, r4
 8003294:	2b00      	cmp	r3, #0
 8003296:	bf0c      	ite	eq
 8003298:	2301      	moveq	r3, #1
 800329a:	2300      	movne	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	e012      	b.n	80032c6 <HAL_ADC_Init+0x15a>
 80032a0:	4871      	ldr	r0, [pc, #452]	; (8003468 <HAL_ADC_Init+0x2fc>)
 80032a2:	f7ff ff15 	bl	80030d0 <LL_ADC_IsEnabled>
 80032a6:	4604      	mov	r4, r0
 80032a8:	4870      	ldr	r0, [pc, #448]	; (800346c <HAL_ADC_Init+0x300>)
 80032aa:	f7ff ff11 	bl	80030d0 <LL_ADC_IsEnabled>
 80032ae:	4603      	mov	r3, r0
 80032b0:	431c      	orrs	r4, r3
 80032b2:	486f      	ldr	r0, [pc, #444]	; (8003470 <HAL_ADC_Init+0x304>)
 80032b4:	f7ff ff0c 	bl	80030d0 <LL_ADC_IsEnabled>
 80032b8:	4603      	mov	r3, r0
 80032ba:	4323      	orrs	r3, r4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	bf0c      	ite	eq
 80032c0:	2301      	moveq	r3, #1
 80032c2:	2300      	movne	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d012      	beq.n	80032f0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032d2:	d004      	beq.n	80032de <HAL_ADC_Init+0x172>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a62      	ldr	r2, [pc, #392]	; (8003464 <HAL_ADC_Init+0x2f8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d101      	bne.n	80032e2 <HAL_ADC_Init+0x176>
 80032de:	4a65      	ldr	r2, [pc, #404]	; (8003474 <HAL_ADC_Init+0x308>)
 80032e0:	e000      	b.n	80032e4 <HAL_ADC_Init+0x178>
 80032e2:	4a65      	ldr	r2, [pc, #404]	; (8003478 <HAL_ADC_Init+0x30c>)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	4619      	mov	r1, r3
 80032ea:	4610      	mov	r0, r2
 80032ec:	f7ff fcfa 	bl	8002ce4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	7f5b      	ldrb	r3, [r3, #29]
 80032f4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032fa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003300:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003306:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800330e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003310:	4313      	orrs	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800331a:	2b01      	cmp	r3, #1
 800331c:	d106      	bne.n	800332c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003322:	3b01      	subs	r3, #1
 8003324:	045b      	lsls	r3, r3, #17
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	2b00      	cmp	r3, #0
 8003332:	d009      	beq.n	8003348 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003340:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4313      	orrs	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	4b4b      	ldr	r3, [pc, #300]	; (800347c <HAL_ADC_Init+0x310>)
 8003350:	4013      	ands	r3, r2
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	69b9      	ldr	r1, [r7, #24]
 8003358:	430b      	orrs	r3, r1
 800335a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff fed1 	bl	800311e <LL_ADC_REG_IsConversionOngoing>
 800337c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fede 	bl	8003144 <LL_ADC_INJ_IsConversionOngoing>
 8003388:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d17f      	bne.n	8003490 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d17c      	bne.n	8003490 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800339a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033a2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033b2:	f023 0302 	bic.w	r3, r3, #2
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6812      	ldr	r2, [r2, #0]
 80033ba:	69b9      	ldr	r1, [r7, #24]
 80033bc:	430b      	orrs	r3, r1
 80033be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d017      	beq.n	80033f8 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80033d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80033e0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80033e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6911      	ldr	r1, [r2, #16]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6812      	ldr	r2, [r2, #0]
 80033f0:	430b      	orrs	r3, r1
 80033f2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80033f6:	e013      	b.n	8003420 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691a      	ldr	r2, [r3, #16]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003406:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6812      	ldr	r2, [r2, #0]
 8003414:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003418:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800341c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003426:	2b01      	cmp	r3, #1
 8003428:	d12a      	bne.n	8003480 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003434:	f023 0304 	bic.w	r3, r3, #4
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003440:	4311      	orrs	r1, r2
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003446:	4311      	orrs	r1, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800344c:	430a      	orrs	r2, r1
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f042 0201 	orr.w	r2, r2, #1
 8003458:	611a      	str	r2, [r3, #16]
 800345a:	e019      	b.n	8003490 <HAL_ADC_Init+0x324>
 800345c:	20000000 	.word	0x20000000
 8003460:	053e2d63 	.word	0x053e2d63
 8003464:	50000100 	.word	0x50000100
 8003468:	50000400 	.word	0x50000400
 800346c:	50000500 	.word	0x50000500
 8003470:	50000600 	.word	0x50000600
 8003474:	50000300 	.word	0x50000300
 8003478:	50000700 	.word	0x50000700
 800347c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0201 	bic.w	r2, r2, #1
 800348e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d10c      	bne.n	80034b2 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	f023 010f 	bic.w	r1, r3, #15
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	1e5a      	subs	r2, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
 80034b0:	e007      	b.n	80034c2 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 020f 	bic.w	r2, r2, #15
 80034c0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c6:	f023 0303 	bic.w	r3, r3, #3
 80034ca:	f043 0201 	orr.w	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80034d2:	e007      	b.n	80034e4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d8:	f043 0210 	orr.w	r2, r3, #16
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3724      	adds	r7, #36	; 0x24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd90      	pop	{r4, r7, pc}
 80034ee:	bf00      	nop

080034f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003504:	d004      	beq.n	8003510 <HAL_ADC_Start_DMA+0x20>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a5a      	ldr	r2, [pc, #360]	; (8003674 <HAL_ADC_Start_DMA+0x184>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d101      	bne.n	8003514 <HAL_ADC_Start_DMA+0x24>
 8003510:	4b59      	ldr	r3, [pc, #356]	; (8003678 <HAL_ADC_Start_DMA+0x188>)
 8003512:	e000      	b.n	8003516 <HAL_ADC_Start_DMA+0x26>
 8003514:	4b59      	ldr	r3, [pc, #356]	; (800367c <HAL_ADC_Start_DMA+0x18c>)
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff fd5c 	bl	8002fd4 <LL_ADC_GetMultimode>
 800351c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff fdfb 	bl	800311e <LL_ADC_REG_IsConversionOngoing>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	f040 809b 	bne.w	8003666 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_ADC_Start_DMA+0x4e>
 800353a:	2302      	movs	r3, #2
 800353c:	e096      	b.n	800366c <HAL_ADC_Start_DMA+0x17c>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a4d      	ldr	r2, [pc, #308]	; (8003680 <HAL_ADC_Start_DMA+0x190>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d008      	beq.n	8003562 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	2b05      	cmp	r3, #5
 800355a:	d002      	beq.n	8003562 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	2b09      	cmp	r3, #9
 8003560:	d17a      	bne.n	8003658 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 ff56 	bl	8004414 <ADC_Enable>
 8003568:	4603      	mov	r3, r0
 800356a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800356c:	7dfb      	ldrb	r3, [r7, #23]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d16d      	bne.n	800364e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003576:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800357a:	f023 0301 	bic.w	r3, r3, #1
 800357e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a3a      	ldr	r2, [pc, #232]	; (8003674 <HAL_ADC_Start_DMA+0x184>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d009      	beq.n	80035a4 <HAL_ADC_Start_DMA+0xb4>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a3b      	ldr	r2, [pc, #236]	; (8003684 <HAL_ADC_Start_DMA+0x194>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d002      	beq.n	80035a0 <HAL_ADC_Start_DMA+0xb0>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	e003      	b.n	80035a8 <HAL_ADC_Start_DMA+0xb8>
 80035a0:	4b39      	ldr	r3, [pc, #228]	; (8003688 <HAL_ADC_Start_DMA+0x198>)
 80035a2:	e001      	b.n	80035a8 <HAL_ADC_Start_DMA+0xb8>
 80035a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	6812      	ldr	r2, [r2, #0]
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d002      	beq.n	80035b6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d105      	bne.n	80035c2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d006      	beq.n	80035dc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d2:	f023 0206 	bic.w	r2, r3, #6
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	661a      	str	r2, [r3, #96]	; 0x60
 80035da:	e002      	b.n	80035e2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e6:	4a29      	ldr	r2, [pc, #164]	; (800368c <HAL_ADC_Start_DMA+0x19c>)
 80035e8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ee:	4a28      	ldr	r2, [pc, #160]	; (8003690 <HAL_ADC_Start_DMA+0x1a0>)
 80035f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f6:	4a27      	ldr	r2, [pc, #156]	; (8003694 <HAL_ADC_Start_DMA+0x1a4>)
 80035f8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	221c      	movs	r2, #28
 8003600:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f042 0210 	orr.w	r2, r2, #16
 8003618:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f042 0201 	orr.w	r2, r2, #1
 8003628:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3340      	adds	r3, #64	; 0x40
 8003634:	4619      	mov	r1, r3
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f001 fac9 	bl	8004bd0 <HAL_DMA_Start_IT>
 800363e:	4603      	mov	r3, r0
 8003640:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff fd55 	bl	80030f6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800364c:	e00d      	b.n	800366a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003656:	e008      	b.n	800366a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003664:	e001      	b.n	800366a <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003666:	2302      	movs	r3, #2
 8003668:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800366a:	7dfb      	ldrb	r3, [r7, #23]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	50000100 	.word	0x50000100
 8003678:	50000300 	.word	0x50000300
 800367c:	50000700 	.word	0x50000700
 8003680:	50000600 	.word	0x50000600
 8003684:	50000500 	.word	0x50000500
 8003688:	50000400 	.word	0x50000400
 800368c:	080044d9 	.word	0x080044d9
 8003690:	080045b1 	.word	0x080045b1
 8003694:	080045cd 	.word	0x080045cd

08003698 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08a      	sub	sp, #40	; 0x28
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80036a0:	2300      	movs	r3, #0
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036bc:	d004      	beq.n	80036c8 <HAL_ADC_IRQHandler+0x30>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a8e      	ldr	r2, [pc, #568]	; (80038fc <HAL_ADC_IRQHandler+0x264>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d101      	bne.n	80036cc <HAL_ADC_IRQHandler+0x34>
 80036c8:	4b8d      	ldr	r3, [pc, #564]	; (8003900 <HAL_ADC_IRQHandler+0x268>)
 80036ca:	e000      	b.n	80036ce <HAL_ADC_IRQHandler+0x36>
 80036cc:	4b8d      	ldr	r3, [pc, #564]	; (8003904 <HAL_ADC_IRQHandler+0x26c>)
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff fc80 	bl	8002fd4 <LL_ADC_GetMultimode>
 80036d4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d017      	beq.n	8003710 <HAL_ADC_IRQHandler+0x78>
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d012      	beq.n	8003710 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d105      	bne.n	8003702 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fa:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 ffca 	bl	800469c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2202      	movs	r2, #2
 800370e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b00      	cmp	r3, #0
 8003718:	d004      	beq.n	8003724 <HAL_ADC_IRQHandler+0x8c>
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10b      	bne.n	800373c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 8094 	beq.w	8003858 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 808e 	beq.w	8003858 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003740:	f003 0310 	and.w	r3, r3, #16
 8003744:	2b00      	cmp	r3, #0
 8003746:	d105      	bne.n	8003754 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff fb95 	bl	8002e88 <LL_ADC_REG_IsTriggerSourceSWStart>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d072      	beq.n	800384a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a64      	ldr	r2, [pc, #400]	; (80038fc <HAL_ADC_IRQHandler+0x264>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d009      	beq.n	8003782 <HAL_ADC_IRQHandler+0xea>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a65      	ldr	r2, [pc, #404]	; (8003908 <HAL_ADC_IRQHandler+0x270>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d002      	beq.n	800377e <HAL_ADC_IRQHandler+0xe6>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	e003      	b.n	8003786 <HAL_ADC_IRQHandler+0xee>
 800377e:	4b63      	ldr	r3, [pc, #396]	; (800390c <HAL_ADC_IRQHandler+0x274>)
 8003780:	e001      	b.n	8003786 <HAL_ADC_IRQHandler+0xee>
 8003782:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6812      	ldr	r2, [r2, #0]
 800378a:	4293      	cmp	r3, r2
 800378c:	d008      	beq.n	80037a0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	2b05      	cmp	r3, #5
 8003798:	d002      	beq.n	80037a0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b09      	cmp	r3, #9
 800379e:	d104      	bne.n	80037aa <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	623b      	str	r3, [r7, #32]
 80037a8:	e014      	b.n	80037d4 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a53      	ldr	r2, [pc, #332]	; (80038fc <HAL_ADC_IRQHandler+0x264>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d009      	beq.n	80037c8 <HAL_ADC_IRQHandler+0x130>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a53      	ldr	r2, [pc, #332]	; (8003908 <HAL_ADC_IRQHandler+0x270>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d002      	beq.n	80037c4 <HAL_ADC_IRQHandler+0x12c>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	e003      	b.n	80037cc <HAL_ADC_IRQHandler+0x134>
 80037c4:	4b51      	ldr	r3, [pc, #324]	; (800390c <HAL_ADC_IRQHandler+0x274>)
 80037c6:	e001      	b.n	80037cc <HAL_ADC_IRQHandler+0x134>
 80037c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80037cc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d135      	bne.n	800384a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d12e      	bne.n	800384a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff fc94 	bl	800311e <LL_ADC_REG_IsConversionOngoing>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d11a      	bne.n	8003832 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 020c 	bic.w	r2, r2, #12
 800380a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003810:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d112      	bne.n	800384a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003828:	f043 0201 	orr.w	r2, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003830:	e00b      	b.n	800384a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003836:	f043 0210 	orr.w	r2, r3, #16
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003842:	f043 0201 	orr.w	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7fd fe98 	bl	8001580 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	220c      	movs	r2, #12
 8003856:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b00      	cmp	r3, #0
 8003860:	d004      	beq.n	800386c <HAL_ADC_IRQHandler+0x1d4>
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10b      	bne.n	8003884 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 80b3 	beq.w	80039de <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 80ad 	beq.w	80039de <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b00      	cmp	r3, #0
 800388e:	d105      	bne.n	800389c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003894:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff fb30 	bl	8002f06 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80038a6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff faeb 	bl	8002e88 <LL_ADC_REG_IsTriggerSourceSWStart>
 80038b2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a10      	ldr	r2, [pc, #64]	; (80038fc <HAL_ADC_IRQHandler+0x264>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d009      	beq.n	80038d2 <HAL_ADC_IRQHandler+0x23a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a11      	ldr	r2, [pc, #68]	; (8003908 <HAL_ADC_IRQHandler+0x270>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d002      	beq.n	80038ce <HAL_ADC_IRQHandler+0x236>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	e003      	b.n	80038d6 <HAL_ADC_IRQHandler+0x23e>
 80038ce:	4b0f      	ldr	r3, [pc, #60]	; (800390c <HAL_ADC_IRQHandler+0x274>)
 80038d0:	e001      	b.n	80038d6 <HAL_ADC_IRQHandler+0x23e>
 80038d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6812      	ldr	r2, [r2, #0]
 80038da:	4293      	cmp	r3, r2
 80038dc:	d008      	beq.n	80038f0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2b06      	cmp	r3, #6
 80038e8:	d002      	beq.n	80038f0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b07      	cmp	r3, #7
 80038ee:	d10f      	bne.n	8003910 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	623b      	str	r3, [r7, #32]
 80038f8:	e01f      	b.n	800393a <HAL_ADC_IRQHandler+0x2a2>
 80038fa:	bf00      	nop
 80038fc:	50000100 	.word	0x50000100
 8003900:	50000300 	.word	0x50000300
 8003904:	50000700 	.word	0x50000700
 8003908:	50000500 	.word	0x50000500
 800390c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a8b      	ldr	r2, [pc, #556]	; (8003b44 <HAL_ADC_IRQHandler+0x4ac>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d009      	beq.n	800392e <HAL_ADC_IRQHandler+0x296>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a8a      	ldr	r2, [pc, #552]	; (8003b48 <HAL_ADC_IRQHandler+0x4b0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d002      	beq.n	800392a <HAL_ADC_IRQHandler+0x292>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	e003      	b.n	8003932 <HAL_ADC_IRQHandler+0x29a>
 800392a:	4b88      	ldr	r3, [pc, #544]	; (8003b4c <HAL_ADC_IRQHandler+0x4b4>)
 800392c:	e001      	b.n	8003932 <HAL_ADC_IRQHandler+0x29a>
 800392e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003932:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d047      	beq.n	80039d0 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d007      	beq.n	800395a <HAL_ADC_IRQHandler+0x2c2>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d03f      	beq.n	80039d0 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003956:	2b00      	cmp	r3, #0
 8003958:	d13a      	bne.n	80039d0 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003964:	2b40      	cmp	r3, #64	; 0x40
 8003966:	d133      	bne.n	80039d0 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d12e      	bne.n	80039d0 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fbe4 	bl	8003144 <LL_ADC_INJ_IsConversionOngoing>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d11a      	bne.n	80039b8 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003990:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003996:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d112      	bne.n	80039d0 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ae:	f043 0201 	orr.w	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80039b6:	e00b      	b.n	80039d0 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039bc:	f043 0210 	orr.w	r2, r3, #16
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c8:	f043 0201 	orr.w	r2, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 fe3b 	bl	800464c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2260      	movs	r2, #96	; 0x60
 80039dc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d011      	beq.n	8003a0c <HAL_ADC_IRQHandler+0x374>
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00c      	beq.n	8003a0c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f8b4 	bl	8003b6c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2280      	movs	r2, #128	; 0x80
 8003a0a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d012      	beq.n	8003a3c <HAL_ADC_IRQHandler+0x3a4>
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00d      	beq.n	8003a3c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a24:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 fe21 	bl	8004674 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a3a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d012      	beq.n	8003a6c <HAL_ADC_IRQHandler+0x3d4>
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00d      	beq.n	8003a6c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a54:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fe13 	bl	8004688 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f003 0310 	and.w	r3, r3, #16
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d043      	beq.n	8003afe <HAL_ADC_IRQHandler+0x466>
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d03e      	beq.n	8003afe <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d102      	bne.n	8003a8e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a8c:	e021      	b.n	8003ad2 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d015      	beq.n	8003ac0 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a9c:	d004      	beq.n	8003aa8 <HAL_ADC_IRQHandler+0x410>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a28      	ldr	r2, [pc, #160]	; (8003b44 <HAL_ADC_IRQHandler+0x4ac>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d101      	bne.n	8003aac <HAL_ADC_IRQHandler+0x414>
 8003aa8:	4b29      	ldr	r3, [pc, #164]	; (8003b50 <HAL_ADC_IRQHandler+0x4b8>)
 8003aaa:	e000      	b.n	8003aae <HAL_ADC_IRQHandler+0x416>
 8003aac:	4b29      	ldr	r3, [pc, #164]	; (8003b54 <HAL_ADC_IRQHandler+0x4bc>)
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff fa9e 	bl	8002ff0 <LL_ADC_GetMultiDMATransfer>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00b      	beq.n	8003ad2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003aba:	2301      	movs	r3, #1
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
 8003abe:	e008      	b.n	8003ad2 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d10e      	bne.n	8003af6 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003adc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae8:	f043 0202 	orr.w	r2, r3, #2
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f845 	bl	8003b80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2210      	movs	r2, #16
 8003afc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d018      	beq.n	8003b3a <HAL_ADC_IRQHandler+0x4a2>
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d013      	beq.n	8003b3a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b16:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b22:	f043 0208 	orr.w	r2, r3, #8
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b32:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 fd93 	bl	8004660 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003b3a:	bf00      	nop
 8003b3c:	3728      	adds	r7, #40	; 0x28
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	50000100 	.word	0x50000100
 8003b48:	50000500 	.word	0x50000500
 8003b4c:	50000400 	.word	0x50000400
 8003b50:	50000300 	.word	0x50000300
 8003b54:	50000700 	.word	0x50000700

08003b58 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b0b6      	sub	sp, #216	; 0xd8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d102      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x24>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	f000 bc13 	b.w	80043de <HAL_ADC_ConfigChannel+0x84a>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff faaa 	bl	800311e <LL_ADC_REG_IsConversionOngoing>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f040 83f3 	bne.w	80043b8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6818      	ldr	r0, [r3, #0]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	6859      	ldr	r1, [r3, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	461a      	mov	r2, r3
 8003be0:	f7ff f965 	bl	8002eae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff fa98 	bl	800311e <LL_ADC_REG_IsConversionOngoing>
 8003bee:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff faa4 	bl	8003144 <LL_ADC_INJ_IsConversionOngoing>
 8003bfc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c00:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f040 81d9 	bne.w	8003fbc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f040 81d4 	bne.w	8003fbc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c1c:	d10f      	bne.n	8003c3e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2200      	movs	r2, #0
 8003c28:	4619      	mov	r1, r3
 8003c2a:	f7ff f97f 	bl	8002f2c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff f913 	bl	8002e62 <LL_ADC_SetSamplingTimeCommonConfig>
 8003c3c:	e00e      	b.n	8003c5c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	6819      	ldr	r1, [r3, #0]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f7ff f96e 	bl	8002f2c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2100      	movs	r1, #0
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff f903 	bl	8002e62 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	695a      	ldr	r2, [r3, #20]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	08db      	lsrs	r3, r3, #3
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d022      	beq.n	8003cc4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	6919      	ldr	r1, [r3, #16]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c8e:	f7ff f85d 	bl	8002d4c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	6919      	ldr	r1, [r3, #16]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f7ff f8a9 	bl	8002df6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	6919      	ldr	r1, [r3, #16]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	7f1b      	ldrb	r3, [r3, #28]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d102      	bne.n	8003cba <HAL_ADC_ConfigChannel+0x126>
 8003cb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cb8:	e000      	b.n	8003cbc <HAL_ADC_ConfigChannel+0x128>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	f7ff f8b5 	bl	8002e2c <LL_ADC_SetOffsetSaturation>
 8003cc2:	e17b      	b.n	8003fbc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2100      	movs	r1, #0
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff f862 	bl	8002d94 <LL_ADC_GetOffsetChannel>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10a      	bne.n	8003cf0 <HAL_ADC_ConfigChannel+0x15c>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2100      	movs	r1, #0
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff f857 	bl	8002d94 <LL_ADC_GetOffsetChannel>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	0e9b      	lsrs	r3, r3, #26
 8003cea:	f003 021f 	and.w	r2, r3, #31
 8003cee:	e01e      	b.n	8003d2e <HAL_ADC_ConfigChannel+0x19a>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff f84c 	bl	8002d94 <LL_ADC_GetOffsetChannel>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d06:	fa93 f3a3 	rbit	r3, r3
 8003d0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003d1e:	2320      	movs	r3, #32
 8003d20:	e004      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003d22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d26:	fab3 f383 	clz	r3, r3
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d105      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x1b2>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	0e9b      	lsrs	r3, r3, #26
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	e018      	b.n	8003d78 <HAL_ADC_ConfigChannel+0x1e4>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d52:	fa93 f3a3 	rbit	r3, r3
 8003d56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003d62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003d6a:	2320      	movs	r3, #32
 8003d6c:	e004      	b.n	8003d78 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003d6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d72:	fab3 f383 	clz	r3, r3
 8003d76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d106      	bne.n	8003d8a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2200      	movs	r2, #0
 8003d82:	2100      	movs	r1, #0
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff f81b 	bl	8002dc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2101      	movs	r1, #1
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fe ffff 	bl	8002d94 <LL_ADC_GetOffsetChannel>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10a      	bne.n	8003db6 <HAL_ADC_ConfigChannel+0x222>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2101      	movs	r1, #1
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fe fff4 	bl	8002d94 <LL_ADC_GetOffsetChannel>
 8003dac:	4603      	mov	r3, r0
 8003dae:	0e9b      	lsrs	r3, r3, #26
 8003db0:	f003 021f 	and.w	r2, r3, #31
 8003db4:	e01e      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x260>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2101      	movs	r1, #1
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fe ffe9 	bl	8002d94 <LL_ADC_GetOffsetChannel>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003dcc:	fa93 f3a3 	rbit	r3, r3
 8003dd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003dd4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003dd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003ddc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003de4:	2320      	movs	r3, #32
 8003de6:	e004      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003de8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003dec:	fab3 f383 	clz	r3, r3
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d105      	bne.n	8003e0c <HAL_ADC_ConfigChannel+0x278>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	0e9b      	lsrs	r3, r3, #26
 8003e06:	f003 031f 	and.w	r3, r3, #31
 8003e0a:	e018      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x2aa>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e18:	fa93 f3a3 	rbit	r3, r3
 8003e1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003e20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003e30:	2320      	movs	r3, #32
 8003e32:	e004      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003e34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e38:	fab3 f383 	clz	r3, r3
 8003e3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d106      	bne.n	8003e50 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2200      	movs	r2, #0
 8003e48:	2101      	movs	r1, #1
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe ffb8 	bl	8002dc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2102      	movs	r1, #2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe ff9c 	bl	8002d94 <LL_ADC_GetOffsetChannel>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10a      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x2e8>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2102      	movs	r1, #2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7fe ff91 	bl	8002d94 <LL_ADC_GetOffsetChannel>
 8003e72:	4603      	mov	r3, r0
 8003e74:	0e9b      	lsrs	r3, r3, #26
 8003e76:	f003 021f 	and.w	r2, r3, #31
 8003e7a:	e01e      	b.n	8003eba <HAL_ADC_ConfigChannel+0x326>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2102      	movs	r1, #2
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fe ff86 	bl	8002d94 <LL_ADC_GetOffsetChannel>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e92:	fa93 f3a3 	rbit	r3, r3
 8003e96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003e9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003ea2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003eaa:	2320      	movs	r3, #32
 8003eac:	e004      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003eae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003eb2:	fab3 f383 	clz	r3, r3
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d105      	bne.n	8003ed2 <HAL_ADC_ConfigChannel+0x33e>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	0e9b      	lsrs	r3, r3, #26
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	e016      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x36c>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ede:	fa93 f3a3 	rbit	r3, r3
 8003ee2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003ee4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ee6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003eea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003ef2:	2320      	movs	r3, #32
 8003ef4:	e004      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003ef6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003efa:	fab3 f383 	clz	r3, r3
 8003efe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d106      	bne.n	8003f12 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	2102      	movs	r1, #2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fe ff57 	bl	8002dc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2103      	movs	r1, #3
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fe ff3b 	bl	8002d94 <LL_ADC_GetOffsetChannel>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10a      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x3aa>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2103      	movs	r1, #3
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fe ff30 	bl	8002d94 <LL_ADC_GetOffsetChannel>
 8003f34:	4603      	mov	r3, r0
 8003f36:	0e9b      	lsrs	r3, r3, #26
 8003f38:	f003 021f 	and.w	r2, r3, #31
 8003f3c:	e017      	b.n	8003f6e <HAL_ADC_ConfigChannel+0x3da>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2103      	movs	r1, #3
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fe ff25 	bl	8002d94 <LL_ADC_GetOffsetChannel>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f50:	fa93 f3a3 	rbit	r3, r3
 8003f54:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003f56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f58:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003f5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003f60:	2320      	movs	r3, #32
 8003f62:	e003      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003f64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f66:	fab3 f383 	clz	r3, r3
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d105      	bne.n	8003f86 <HAL_ADC_ConfigChannel+0x3f2>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	0e9b      	lsrs	r3, r3, #26
 8003f80:	f003 031f 	and.w	r3, r3, #31
 8003f84:	e011      	b.n	8003faa <HAL_ADC_ConfigChannel+0x416>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f8e:	fa93 f3a3 	rbit	r3, r3
 8003f92:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f96:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003f9e:	2320      	movs	r3, #32
 8003fa0:	e003      	b.n	8003faa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa4:	fab3 f383 	clz	r3, r3
 8003fa8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d106      	bne.n	8003fbc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2103      	movs	r1, #3
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fe ff02 	bl	8002dc0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff f885 	bl	80030d0 <LL_ADC_IsEnabled>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f040 813d 	bne.w	8004248 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6818      	ldr	r0, [r3, #0]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	6819      	ldr	r1, [r3, #0]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f7fe ffd2 	bl	8002f84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4aa2      	ldr	r2, [pc, #648]	; (8004270 <HAL_ADC_ConfigChannel+0x6dc>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	f040 812e 	bne.w	8004248 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10b      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x480>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	0e9b      	lsrs	r3, r3, #26
 8004002:	3301      	adds	r3, #1
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	2b09      	cmp	r3, #9
 800400a:	bf94      	ite	ls
 800400c:	2301      	movls	r3, #1
 800400e:	2300      	movhi	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	e019      	b.n	8004048 <HAL_ADC_ConfigChannel+0x4b4>
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800401c:	fa93 f3a3 	rbit	r3, r3
 8004020:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004024:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800402c:	2320      	movs	r3, #32
 800402e:	e003      	b.n	8004038 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004030:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004032:	fab3 f383 	clz	r3, r3
 8004036:	b2db      	uxtb	r3, r3
 8004038:	3301      	adds	r3, #1
 800403a:	f003 031f 	and.w	r3, r3, #31
 800403e:	2b09      	cmp	r3, #9
 8004040:	bf94      	ite	ls
 8004042:	2301      	movls	r3, #1
 8004044:	2300      	movhi	r3, #0
 8004046:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004048:	2b00      	cmp	r3, #0
 800404a:	d079      	beq.n	8004140 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004054:	2b00      	cmp	r3, #0
 8004056:	d107      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x4d4>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	0e9b      	lsrs	r3, r3, #26
 800405e:	3301      	adds	r3, #1
 8004060:	069b      	lsls	r3, r3, #26
 8004062:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004066:	e015      	b.n	8004094 <HAL_ADC_ConfigChannel+0x500>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004070:	fa93 f3a3 	rbit	r3, r3
 8004074:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004078:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800407a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004080:	2320      	movs	r3, #32
 8004082:	e003      	b.n	800408c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004086:	fab3 f383 	clz	r3, r3
 800408a:	b2db      	uxtb	r3, r3
 800408c:	3301      	adds	r3, #1
 800408e:	069b      	lsls	r3, r3, #26
 8004090:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800409c:	2b00      	cmp	r3, #0
 800409e:	d109      	bne.n	80040b4 <HAL_ADC_ConfigChannel+0x520>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	0e9b      	lsrs	r3, r3, #26
 80040a6:	3301      	adds	r3, #1
 80040a8:	f003 031f 	and.w	r3, r3, #31
 80040ac:	2101      	movs	r1, #1
 80040ae:	fa01 f303 	lsl.w	r3, r1, r3
 80040b2:	e017      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x550>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040bc:	fa93 f3a3 	rbit	r3, r3
 80040c0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80040c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80040c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80040cc:	2320      	movs	r3, #32
 80040ce:	e003      	b.n	80040d8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80040d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040d2:	fab3 f383 	clz	r3, r3
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	3301      	adds	r3, #1
 80040da:	f003 031f 	and.w	r3, r3, #31
 80040de:	2101      	movs	r1, #1
 80040e0:	fa01 f303 	lsl.w	r3, r1, r3
 80040e4:	ea42 0103 	orr.w	r1, r2, r3
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10a      	bne.n	800410a <HAL_ADC_ConfigChannel+0x576>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	0e9b      	lsrs	r3, r3, #26
 80040fa:	3301      	adds	r3, #1
 80040fc:	f003 021f 	and.w	r2, r3, #31
 8004100:	4613      	mov	r3, r2
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	4413      	add	r3, r2
 8004106:	051b      	lsls	r3, r3, #20
 8004108:	e018      	b.n	800413c <HAL_ADC_ConfigChannel+0x5a8>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004112:	fa93 f3a3 	rbit	r3, r3
 8004116:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800411a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800411c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004122:	2320      	movs	r3, #32
 8004124:	e003      	b.n	800412e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004128:	fab3 f383 	clz	r3, r3
 800412c:	b2db      	uxtb	r3, r3
 800412e:	3301      	adds	r3, #1
 8004130:	f003 021f 	and.w	r2, r3, #31
 8004134:	4613      	mov	r3, r2
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	4413      	add	r3, r2
 800413a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800413c:	430b      	orrs	r3, r1
 800413e:	e07e      	b.n	800423e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004148:	2b00      	cmp	r3, #0
 800414a:	d107      	bne.n	800415c <HAL_ADC_ConfigChannel+0x5c8>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	0e9b      	lsrs	r3, r3, #26
 8004152:	3301      	adds	r3, #1
 8004154:	069b      	lsls	r3, r3, #26
 8004156:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800415a:	e015      	b.n	8004188 <HAL_ADC_ConfigChannel+0x5f4>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004164:	fa93 f3a3 	rbit	r3, r3
 8004168:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800416e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004174:	2320      	movs	r3, #32
 8004176:	e003      	b.n	8004180 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417a:	fab3 f383 	clz	r3, r3
 800417e:	b2db      	uxtb	r3, r3
 8004180:	3301      	adds	r3, #1
 8004182:	069b      	lsls	r3, r3, #26
 8004184:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004190:	2b00      	cmp	r3, #0
 8004192:	d109      	bne.n	80041a8 <HAL_ADC_ConfigChannel+0x614>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	0e9b      	lsrs	r3, r3, #26
 800419a:	3301      	adds	r3, #1
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	2101      	movs	r1, #1
 80041a2:	fa01 f303 	lsl.w	r3, r1, r3
 80041a6:	e017      	b.n	80041d8 <HAL_ADC_ConfigChannel+0x644>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	fa93 f3a3 	rbit	r3, r3
 80041b4:	61fb      	str	r3, [r7, #28]
  return result;
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80041c0:	2320      	movs	r3, #32
 80041c2:	e003      	b.n	80041cc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	fab3 f383 	clz	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	3301      	adds	r3, #1
 80041ce:	f003 031f 	and.w	r3, r3, #31
 80041d2:	2101      	movs	r1, #1
 80041d4:	fa01 f303 	lsl.w	r3, r1, r3
 80041d8:	ea42 0103 	orr.w	r1, r2, r3
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10d      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x670>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	0e9b      	lsrs	r3, r3, #26
 80041ee:	3301      	adds	r3, #1
 80041f0:	f003 021f 	and.w	r2, r3, #31
 80041f4:	4613      	mov	r3, r2
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	4413      	add	r3, r2
 80041fa:	3b1e      	subs	r3, #30
 80041fc:	051b      	lsls	r3, r3, #20
 80041fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004202:	e01b      	b.n	800423c <HAL_ADC_ConfigChannel+0x6a8>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	fa93 f3a3 	rbit	r3, r3
 8004210:	613b      	str	r3, [r7, #16]
  return result;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800421c:	2320      	movs	r3, #32
 800421e:	e003      	b.n	8004228 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	fab3 f383 	clz	r3, r3
 8004226:	b2db      	uxtb	r3, r3
 8004228:	3301      	adds	r3, #1
 800422a:	f003 021f 	and.w	r2, r3, #31
 800422e:	4613      	mov	r3, r2
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	4413      	add	r3, r2
 8004234:	3b1e      	subs	r3, #30
 8004236:	051b      	lsls	r3, r3, #20
 8004238:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800423c:	430b      	orrs	r3, r1
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	6892      	ldr	r2, [r2, #8]
 8004242:	4619      	mov	r1, r3
 8004244:	f7fe fe72 	bl	8002f2c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	4b09      	ldr	r3, [pc, #36]	; (8004274 <HAL_ADC_ConfigChannel+0x6e0>)
 800424e:	4013      	ands	r3, r2
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 80be 	beq.w	80043d2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800425e:	d004      	beq.n	800426a <HAL_ADC_ConfigChannel+0x6d6>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a04      	ldr	r2, [pc, #16]	; (8004278 <HAL_ADC_ConfigChannel+0x6e4>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d10a      	bne.n	8004280 <HAL_ADC_ConfigChannel+0x6ec>
 800426a:	4b04      	ldr	r3, [pc, #16]	; (800427c <HAL_ADC_ConfigChannel+0x6e8>)
 800426c:	e009      	b.n	8004282 <HAL_ADC_ConfigChannel+0x6ee>
 800426e:	bf00      	nop
 8004270:	407f0000 	.word	0x407f0000
 8004274:	80080000 	.word	0x80080000
 8004278:	50000100 	.word	0x50000100
 800427c:	50000300 	.word	0x50000300
 8004280:	4b59      	ldr	r3, [pc, #356]	; (80043e8 <HAL_ADC_ConfigChannel+0x854>)
 8004282:	4618      	mov	r0, r3
 8004284:	f7fe fd54 	bl	8002d30 <LL_ADC_GetCommonPathInternalCh>
 8004288:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a56      	ldr	r2, [pc, #344]	; (80043ec <HAL_ADC_ConfigChannel+0x858>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d004      	beq.n	80042a0 <HAL_ADC_ConfigChannel+0x70c>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a55      	ldr	r2, [pc, #340]	; (80043f0 <HAL_ADC_ConfigChannel+0x85c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d13a      	bne.n	8004316 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d134      	bne.n	8004316 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042b4:	d005      	beq.n	80042c2 <HAL_ADC_ConfigChannel+0x72e>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a4e      	ldr	r2, [pc, #312]	; (80043f4 <HAL_ADC_ConfigChannel+0x860>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	f040 8085 	bne.w	80043cc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042ca:	d004      	beq.n	80042d6 <HAL_ADC_ConfigChannel+0x742>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a49      	ldr	r2, [pc, #292]	; (80043f8 <HAL_ADC_ConfigChannel+0x864>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d101      	bne.n	80042da <HAL_ADC_ConfigChannel+0x746>
 80042d6:	4a49      	ldr	r2, [pc, #292]	; (80043fc <HAL_ADC_ConfigChannel+0x868>)
 80042d8:	e000      	b.n	80042dc <HAL_ADC_ConfigChannel+0x748>
 80042da:	4a43      	ldr	r2, [pc, #268]	; (80043e8 <HAL_ADC_ConfigChannel+0x854>)
 80042dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042e4:	4619      	mov	r1, r3
 80042e6:	4610      	mov	r0, r2
 80042e8:	f7fe fd0f 	bl	8002d0a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042ec:	4b44      	ldr	r3, [pc, #272]	; (8004400 <HAL_ADC_ConfigChannel+0x86c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	099b      	lsrs	r3, r3, #6
 80042f2:	4a44      	ldr	r2, [pc, #272]	; (8004404 <HAL_ADC_ConfigChannel+0x870>)
 80042f4:	fba2 2303 	umull	r2, r3, r2, r3
 80042f8:	099b      	lsrs	r3, r3, #6
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	4613      	mov	r3, r2
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004306:	e002      	b.n	800430e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	3b01      	subs	r3, #1
 800430c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1f9      	bne.n	8004308 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004314:	e05a      	b.n	80043cc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a3b      	ldr	r2, [pc, #236]	; (8004408 <HAL_ADC_ConfigChannel+0x874>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d125      	bne.n	800436c <HAL_ADC_ConfigChannel+0x7d8>
 8004320:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004324:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d11f      	bne.n	800436c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a31      	ldr	r2, [pc, #196]	; (80043f8 <HAL_ADC_ConfigChannel+0x864>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d104      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x7ac>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a34      	ldr	r2, [pc, #208]	; (800440c <HAL_ADC_ConfigChannel+0x878>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d047      	beq.n	80043d0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004348:	d004      	beq.n	8004354 <HAL_ADC_ConfigChannel+0x7c0>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a2a      	ldr	r2, [pc, #168]	; (80043f8 <HAL_ADC_ConfigChannel+0x864>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d101      	bne.n	8004358 <HAL_ADC_ConfigChannel+0x7c4>
 8004354:	4a29      	ldr	r2, [pc, #164]	; (80043fc <HAL_ADC_ConfigChannel+0x868>)
 8004356:	e000      	b.n	800435a <HAL_ADC_ConfigChannel+0x7c6>
 8004358:	4a23      	ldr	r2, [pc, #140]	; (80043e8 <HAL_ADC_ConfigChannel+0x854>)
 800435a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800435e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004362:	4619      	mov	r1, r3
 8004364:	4610      	mov	r0, r2
 8004366:	f7fe fcd0 	bl	8002d0a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800436a:	e031      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a27      	ldr	r2, [pc, #156]	; (8004410 <HAL_ADC_ConfigChannel+0x87c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d12d      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004376:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800437a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d127      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a1c      	ldr	r2, [pc, #112]	; (80043f8 <HAL_ADC_ConfigChannel+0x864>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d022      	beq.n	80043d2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004394:	d004      	beq.n	80043a0 <HAL_ADC_ConfigChannel+0x80c>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a17      	ldr	r2, [pc, #92]	; (80043f8 <HAL_ADC_ConfigChannel+0x864>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d101      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0x810>
 80043a0:	4a16      	ldr	r2, [pc, #88]	; (80043fc <HAL_ADC_ConfigChannel+0x868>)
 80043a2:	e000      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x812>
 80043a4:	4a10      	ldr	r2, [pc, #64]	; (80043e8 <HAL_ADC_ConfigChannel+0x854>)
 80043a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043ae:	4619      	mov	r1, r3
 80043b0:	4610      	mov	r0, r2
 80043b2:	f7fe fcaa 	bl	8002d0a <LL_ADC_SetCommonPathInternalCh>
 80043b6:	e00c      	b.n	80043d2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043bc:	f043 0220 	orr.w	r2, r3, #32
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80043ca:	e002      	b.n	80043d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043cc:	bf00      	nop
 80043ce:	e000      	b.n	80043d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80043da:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80043de:	4618      	mov	r0, r3
 80043e0:	37d8      	adds	r7, #216	; 0xd8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	50000700 	.word	0x50000700
 80043ec:	c3210000 	.word	0xc3210000
 80043f0:	90c00010 	.word	0x90c00010
 80043f4:	50000600 	.word	0x50000600
 80043f8:	50000100 	.word	0x50000100
 80043fc:	50000300 	.word	0x50000300
 8004400:	20000000 	.word	0x20000000
 8004404:	053e2d63 	.word	0x053e2d63
 8004408:	c7520000 	.word	0xc7520000
 800440c:	50000500 	.word	0x50000500
 8004410:	cb840000 	.word	0xcb840000

08004414 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f7fe fe55 	bl	80030d0 <LL_ADC_IsEnabled>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d14d      	bne.n	80044c8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	4b28      	ldr	r3, [pc, #160]	; (80044d4 <ADC_Enable+0xc0>)
 8004434:	4013      	ands	r3, r2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00d      	beq.n	8004456 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443e:	f043 0210 	orr.w	r2, r3, #16
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444a:	f043 0201 	orr.w	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e039      	b.n	80044ca <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f7fe fe24 	bl	80030a8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004460:	f7fe fc12 	bl	8002c88 <HAL_GetTick>
 8004464:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004466:	e028      	b.n	80044ba <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f7fe fe2f 	bl	80030d0 <LL_ADC_IsEnabled>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d104      	bne.n	8004482 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4618      	mov	r0, r3
 800447e:	f7fe fe13 	bl	80030a8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004482:	f7fe fc01 	bl	8002c88 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d914      	bls.n	80044ba <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b01      	cmp	r3, #1
 800449c:	d00d      	beq.n	80044ba <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a2:	f043 0210 	orr.w	r2, r3, #16
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ae:	f043 0201 	orr.w	r2, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e007      	b.n	80044ca <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d1cf      	bne.n	8004468 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	8000003f 	.word	0x8000003f

080044d8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d14b      	bne.n	800458a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0308 	and.w	r3, r3, #8
 8004508:	2b00      	cmp	r3, #0
 800450a:	d021      	beq.n	8004550 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4618      	mov	r0, r3
 8004512:	f7fe fcb9 	bl	8002e88 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d032      	beq.n	8004582 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d12b      	bne.n	8004582 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800452e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d11f      	bne.n	8004582 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004546:	f043 0201 	orr.w	r2, r3, #1
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	65da      	str	r2, [r3, #92]	; 0x5c
 800454e:	e018      	b.n	8004582 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d111      	bne.n	8004582 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004562:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d105      	bne.n	8004582 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800457a:	f043 0201 	orr.w	r2, r3, #1
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f7fc fffc 	bl	8001580 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004588:	e00e      	b.n	80045a8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f7ff faf2 	bl	8003b80 <HAL_ADC_ErrorCallback>
}
 800459c:	e004      	b.n	80045a8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	4798      	blx	r3
}
 80045a8:	bf00      	nop
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045bc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f7ff faca 	bl	8003b58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045c4:	bf00      	nop
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ea:	f043 0204 	orr.w	r2, r3, #4
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f7ff fac4 	bl	8003b80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045f8:	bf00      	nop
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <LL_ADC_IsEnabled>:
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <LL_ADC_IsEnabled+0x18>
 8004614:	2301      	movs	r3, #1
 8004616:	e000      	b.n	800461a <LL_ADC_IsEnabled+0x1a>
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <LL_ADC_REG_IsConversionOngoing>:
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	2b04      	cmp	r3, #4
 8004638:	d101      	bne.n	800463e <LL_ADC_REG_IsConversionOngoing+0x18>
 800463a:	2301      	movs	r3, #1
 800463c:	e000      	b.n	8004640 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80046b0:	b590      	push	{r4, r7, lr}
 80046b2:	b0a1      	sub	sp, #132	; 0x84
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80046ca:	2302      	movs	r3, #2
 80046cc:	e0e7      	b.n	800489e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80046d6:	2300      	movs	r3, #0
 80046d8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80046da:	2300      	movs	r3, #0
 80046dc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046e6:	d102      	bne.n	80046ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80046e8:	4b6f      	ldr	r3, [pc, #444]	; (80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046ea:	60bb      	str	r3, [r7, #8]
 80046ec:	e009      	b.n	8004702 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a6e      	ldr	r2, [pc, #440]	; (80048ac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d102      	bne.n	80046fe <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80046f8:	4b6d      	ldr	r3, [pc, #436]	; (80048b0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80046fa:	60bb      	str	r3, [r7, #8]
 80046fc:	e001      	b.n	8004702 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80046fe:	2300      	movs	r3, #0
 8004700:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10b      	bne.n	8004720 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800470c:	f043 0220 	orr.w	r2, r3, #32
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e0be      	b.n	800489e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff ff7f 	bl	8004626 <LL_ADC_REG_IsConversionOngoing>
 8004728:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff ff79 	bl	8004626 <LL_ADC_REG_IsConversionOngoing>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	f040 80a0 	bne.w	800487c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800473c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800473e:	2b00      	cmp	r3, #0
 8004740:	f040 809c 	bne.w	800487c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800474c:	d004      	beq.n	8004758 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a55      	ldr	r2, [pc, #340]	; (80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d101      	bne.n	800475c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004758:	4b56      	ldr	r3, [pc, #344]	; (80048b4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800475a:	e000      	b.n	800475e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800475c:	4b56      	ldr	r3, [pc, #344]	; (80048b8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800475e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d04b      	beq.n	8004800 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004768:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	6859      	ldr	r1, [r3, #4]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800477a:	035b      	lsls	r3, r3, #13
 800477c:	430b      	orrs	r3, r1
 800477e:	431a      	orrs	r2, r3
 8004780:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004782:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800478c:	d004      	beq.n	8004798 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a45      	ldr	r2, [pc, #276]	; (80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d10f      	bne.n	80047b8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004798:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800479c:	f7ff ff30 	bl	8004600 <LL_ADC_IsEnabled>
 80047a0:	4604      	mov	r4, r0
 80047a2:	4841      	ldr	r0, [pc, #260]	; (80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047a4:	f7ff ff2c 	bl	8004600 <LL_ADC_IsEnabled>
 80047a8:	4603      	mov	r3, r0
 80047aa:	4323      	orrs	r3, r4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	bf0c      	ite	eq
 80047b0:	2301      	moveq	r3, #1
 80047b2:	2300      	movne	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	e012      	b.n	80047de <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80047b8:	483c      	ldr	r0, [pc, #240]	; (80048ac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80047ba:	f7ff ff21 	bl	8004600 <LL_ADC_IsEnabled>
 80047be:	4604      	mov	r4, r0
 80047c0:	483b      	ldr	r0, [pc, #236]	; (80048b0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80047c2:	f7ff ff1d 	bl	8004600 <LL_ADC_IsEnabled>
 80047c6:	4603      	mov	r3, r0
 80047c8:	431c      	orrs	r4, r3
 80047ca:	483c      	ldr	r0, [pc, #240]	; (80048bc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80047cc:	f7ff ff18 	bl	8004600 <LL_ADC_IsEnabled>
 80047d0:	4603      	mov	r3, r0
 80047d2:	4323      	orrs	r3, r4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	bf0c      	ite	eq
 80047d8:	2301      	moveq	r3, #1
 80047da:	2300      	movne	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d056      	beq.n	8004890 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80047e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80047ea:	f023 030f 	bic.w	r3, r3, #15
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	6811      	ldr	r1, [r2, #0]
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	6892      	ldr	r2, [r2, #8]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	431a      	orrs	r2, r3
 80047fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047fc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047fe:	e047      	b.n	8004890 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004800:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800480a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004814:	d004      	beq.n	8004820 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a23      	ldr	r2, [pc, #140]	; (80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d10f      	bne.n	8004840 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004820:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004824:	f7ff feec 	bl	8004600 <LL_ADC_IsEnabled>
 8004828:	4604      	mov	r4, r0
 800482a:	481f      	ldr	r0, [pc, #124]	; (80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800482c:	f7ff fee8 	bl	8004600 <LL_ADC_IsEnabled>
 8004830:	4603      	mov	r3, r0
 8004832:	4323      	orrs	r3, r4
 8004834:	2b00      	cmp	r3, #0
 8004836:	bf0c      	ite	eq
 8004838:	2301      	moveq	r3, #1
 800483a:	2300      	movne	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	e012      	b.n	8004866 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004840:	481a      	ldr	r0, [pc, #104]	; (80048ac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004842:	f7ff fedd 	bl	8004600 <LL_ADC_IsEnabled>
 8004846:	4604      	mov	r4, r0
 8004848:	4819      	ldr	r0, [pc, #100]	; (80048b0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800484a:	f7ff fed9 	bl	8004600 <LL_ADC_IsEnabled>
 800484e:	4603      	mov	r3, r0
 8004850:	431c      	orrs	r4, r3
 8004852:	481a      	ldr	r0, [pc, #104]	; (80048bc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004854:	f7ff fed4 	bl	8004600 <LL_ADC_IsEnabled>
 8004858:	4603      	mov	r3, r0
 800485a:	4323      	orrs	r3, r4
 800485c:	2b00      	cmp	r3, #0
 800485e:	bf0c      	ite	eq
 8004860:	2301      	moveq	r3, #1
 8004862:	2300      	movne	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d012      	beq.n	8004890 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800486a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004872:	f023 030f 	bic.w	r3, r3, #15
 8004876:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004878:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800487a:	e009      	b.n	8004890 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004880:	f043 0220 	orr.w	r2, r3, #32
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800488e:	e000      	b.n	8004892 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004890:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800489a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3784      	adds	r7, #132	; 0x84
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd90      	pop	{r4, r7, pc}
 80048a6:	bf00      	nop
 80048a8:	50000100 	.word	0x50000100
 80048ac:	50000400 	.word	0x50000400
 80048b0:	50000500 	.word	0x50000500
 80048b4:	50000300 	.word	0x50000300
 80048b8:	50000700 	.word	0x50000700
 80048bc:	50000600 	.word	0x50000600

080048c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048d0:	4b0c      	ldr	r3, [pc, #48]	; (8004904 <__NVIC_SetPriorityGrouping+0x44>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048dc:	4013      	ands	r3, r2
 80048de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048f2:	4a04      	ldr	r2, [pc, #16]	; (8004904 <__NVIC_SetPriorityGrouping+0x44>)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	60d3      	str	r3, [r2, #12]
}
 80048f8:	bf00      	nop
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	e000ed00 	.word	0xe000ed00

08004908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800490c:	4b04      	ldr	r3, [pc, #16]	; (8004920 <__NVIC_GetPriorityGrouping+0x18>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	0a1b      	lsrs	r3, r3, #8
 8004912:	f003 0307 	and.w	r3, r3, #7
}
 8004916:	4618      	mov	r0, r3
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	e000ed00 	.word	0xe000ed00

08004924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	4603      	mov	r3, r0
 800492c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800492e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004932:	2b00      	cmp	r3, #0
 8004934:	db0b      	blt.n	800494e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004936:	79fb      	ldrb	r3, [r7, #7]
 8004938:	f003 021f 	and.w	r2, r3, #31
 800493c:	4907      	ldr	r1, [pc, #28]	; (800495c <__NVIC_EnableIRQ+0x38>)
 800493e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	2001      	movs	r0, #1
 8004946:	fa00 f202 	lsl.w	r2, r0, r2
 800494a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	e000e100 	.word	0xe000e100

08004960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	4603      	mov	r3, r0
 8004968:	6039      	str	r1, [r7, #0]
 800496a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800496c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004970:	2b00      	cmp	r3, #0
 8004972:	db0a      	blt.n	800498a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	b2da      	uxtb	r2, r3
 8004978:	490c      	ldr	r1, [pc, #48]	; (80049ac <__NVIC_SetPriority+0x4c>)
 800497a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497e:	0112      	lsls	r2, r2, #4
 8004980:	b2d2      	uxtb	r2, r2
 8004982:	440b      	add	r3, r1
 8004984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004988:	e00a      	b.n	80049a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	b2da      	uxtb	r2, r3
 800498e:	4908      	ldr	r1, [pc, #32]	; (80049b0 <__NVIC_SetPriority+0x50>)
 8004990:	79fb      	ldrb	r3, [r7, #7]
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	3b04      	subs	r3, #4
 8004998:	0112      	lsls	r2, r2, #4
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	440b      	add	r3, r1
 800499e:	761a      	strb	r2, [r3, #24]
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	e000e100 	.word	0xe000e100
 80049b0:	e000ed00 	.word	0xe000ed00

080049b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b089      	sub	sp, #36	; 0x24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	f1c3 0307 	rsb	r3, r3, #7
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	bf28      	it	cs
 80049d2:	2304      	movcs	r3, #4
 80049d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	3304      	adds	r3, #4
 80049da:	2b06      	cmp	r3, #6
 80049dc:	d902      	bls.n	80049e4 <NVIC_EncodePriority+0x30>
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	3b03      	subs	r3, #3
 80049e2:	e000      	b.n	80049e6 <NVIC_EncodePriority+0x32>
 80049e4:	2300      	movs	r3, #0
 80049e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049e8:	f04f 32ff 	mov.w	r2, #4294967295
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43da      	mvns	r2, r3
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	401a      	ands	r2, r3
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	fa01 f303 	lsl.w	r3, r1, r3
 8004a06:	43d9      	mvns	r1, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a0c:	4313      	orrs	r3, r2
         );
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3724      	adds	r7, #36	; 0x24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7ff ff4c 	bl	80048c0 <__NVIC_SetPriorityGrouping>
}
 8004a28:	bf00      	nop
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	4603      	mov	r3, r0
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a3e:	f7ff ff63 	bl	8004908 <__NVIC_GetPriorityGrouping>
 8004a42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	6978      	ldr	r0, [r7, #20]
 8004a4a:	f7ff ffb3 	bl	80049b4 <NVIC_EncodePriority>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a54:	4611      	mov	r1, r2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff ff82 	bl	8004960 <__NVIC_SetPriority>
}
 8004a5c:	bf00      	nop
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff ff56 	bl	8004924 <__NVIC_EnableIRQ>
}
 8004a78:	bf00      	nop
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e08d      	b.n	8004bae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	461a      	mov	r2, r3
 8004a98:	4b47      	ldr	r3, [pc, #284]	; (8004bb8 <HAL_DMA_Init+0x138>)
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d80f      	bhi.n	8004abe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	4b45      	ldr	r3, [pc, #276]	; (8004bbc <HAL_DMA_Init+0x13c>)
 8004aa6:	4413      	add	r3, r2
 8004aa8:	4a45      	ldr	r2, [pc, #276]	; (8004bc0 <HAL_DMA_Init+0x140>)
 8004aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004aae:	091b      	lsrs	r3, r3, #4
 8004ab0:	009a      	lsls	r2, r3, #2
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a42      	ldr	r2, [pc, #264]	; (8004bc4 <HAL_DMA_Init+0x144>)
 8004aba:	641a      	str	r2, [r3, #64]	; 0x40
 8004abc:	e00e      	b.n	8004adc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	4b40      	ldr	r3, [pc, #256]	; (8004bc8 <HAL_DMA_Init+0x148>)
 8004ac6:	4413      	add	r3, r2
 8004ac8:	4a3d      	ldr	r2, [pc, #244]	; (8004bc0 <HAL_DMA_Init+0x140>)
 8004aca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ace:	091b      	lsrs	r3, r3, #4
 8004ad0:	009a      	lsls	r2, r3, #2
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a3c      	ldr	r2, [pc, #240]	; (8004bcc <HAL_DMA_Init+0x14c>)
 8004ada:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fa76 	bl	8005020 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b3c:	d102      	bne.n	8004b44 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b4c:	b2d2      	uxtb	r2, r2
 8004b4e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b58:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d010      	beq.n	8004b84 <HAL_DMA_Init+0x104>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d80c      	bhi.n	8004b84 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 fa96 	bl	800509c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b80:	605a      	str	r2, [r3, #4]
 8004b82:	e008      	b.n	8004b96 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40020407 	.word	0x40020407
 8004bbc:	bffdfff8 	.word	0xbffdfff8
 8004bc0:	cccccccd 	.word	0xcccccccd
 8004bc4:	40020000 	.word	0x40020000
 8004bc8:	bffdfbf8 	.word	0xbffdfbf8
 8004bcc:	40020400 	.word	0x40020400

08004bd0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
 8004bdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bde:	2300      	movs	r3, #0
 8004be0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d101      	bne.n	8004bf0 <HAL_DMA_Start_IT+0x20>
 8004bec:	2302      	movs	r3, #2
 8004bee:	e066      	b.n	8004cbe <HAL_DMA_Start_IT+0xee>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d155      	bne.n	8004cb0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0201 	bic.w	r2, r2, #1
 8004c20:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	68b9      	ldr	r1, [r7, #8]
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 f9bb 	bl	8004fa4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d008      	beq.n	8004c48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f042 020e 	orr.w	r2, r2, #14
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	e00f      	b.n	8004c68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0204 	bic.w	r2, r2, #4
 8004c56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 020a 	orr.w	r2, r2, #10
 8004c66:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d007      	beq.n	8004c86 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c84:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d007      	beq.n	8004c9e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c9c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f042 0201 	orr.w	r2, r2, #1
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	e005      	b.n	8004cbc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004cb8:	2302      	movs	r3, #2
 8004cba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b085      	sub	sp, #20
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d005      	beq.n	8004cea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2204      	movs	r2, #4
 8004ce2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
 8004ce8:	e037      	b.n	8004d5a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 020e 	bic.w	r2, r2, #14
 8004cf8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d08:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0201 	bic.w	r2, r2, #1
 8004d18:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1e:	f003 021f 	and.w	r2, r3, #31
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	2101      	movs	r1, #1
 8004d28:	fa01 f202 	lsl.w	r2, r1, r2
 8004d2c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d36:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00c      	beq.n	8004d5a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d4e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004d58:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d80:	2300      	movs	r3, #0
 8004d82:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d00d      	beq.n	8004dac <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2204      	movs	r2, #4
 8004d94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	73fb      	strb	r3, [r7, #15]
 8004daa:	e047      	b.n	8004e3c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 020e 	bic.w	r2, r2, #14
 8004dba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0201 	bic.w	r2, r2, #1
 8004dca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de0:	f003 021f 	and.w	r2, r3, #31
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	2101      	movs	r1, #1
 8004dea:	fa01 f202 	lsl.w	r2, r1, r2
 8004dee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004df8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00c      	beq.n	8004e1c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e10:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004e1a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	4798      	blx	r3
    }
  }
  return status;
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e62:	f003 031f 	and.w	r3, r3, #31
 8004e66:	2204      	movs	r2, #4
 8004e68:	409a      	lsls	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d026      	beq.n	8004ec0 <HAL_DMA_IRQHandler+0x7a>
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d021      	beq.n	8004ec0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0320 	and.w	r3, r3, #32
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d107      	bne.n	8004e9a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0204 	bic.w	r2, r2, #4
 8004e98:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9e:	f003 021f 	and.w	r2, r3, #31
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	2104      	movs	r1, #4
 8004ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8004eac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d071      	beq.n	8004f9a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004ebe:	e06c      	b.n	8004f9a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec4:	f003 031f 	and.w	r3, r3, #31
 8004ec8:	2202      	movs	r2, #2
 8004eca:	409a      	lsls	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d02e      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d029      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0320 	and.w	r3, r3, #32
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10b      	bne.n	8004f04 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 020a 	bic.w	r2, r2, #10
 8004efa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f08:	f003 021f 	and.w	r2, r3, #31
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f10:	2102      	movs	r1, #2
 8004f12:	fa01 f202 	lsl.w	r2, r1, r2
 8004f16:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d038      	beq.n	8004f9a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004f30:	e033      	b.n	8004f9a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f36:	f003 031f 	and.w	r3, r3, #31
 8004f3a:	2208      	movs	r2, #8
 8004f3c:	409a      	lsls	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4013      	ands	r3, r2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d02a      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f003 0308 	and.w	r3, r3, #8
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d025      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 020e 	bic.w	r2, r2, #14
 8004f5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f64:	f003 021f 	and.w	r2, r3, #31
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f72:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d004      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004f9a:	bf00      	nop
 8004f9c:	bf00      	nop
}
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004fba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d004      	beq.n	8004fce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004fcc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd2:	f003 021f 	and.w	r2, r3, #31
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	2101      	movs	r1, #1
 8004fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8004fe0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2b10      	cmp	r3, #16
 8004ff0:	d108      	bne.n	8005004 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005002:	e007      	b.n	8005014 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	60da      	str	r2, [r3, #12]
}
 8005014:	bf00      	nop
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	461a      	mov	r2, r3
 800502e:	4b16      	ldr	r3, [pc, #88]	; (8005088 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005030:	429a      	cmp	r2, r3
 8005032:	d802      	bhi.n	800503a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005034:	4b15      	ldr	r3, [pc, #84]	; (800508c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	e001      	b.n	800503e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800503a:	4b15      	ldr	r3, [pc, #84]	; (8005090 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800503c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	b2db      	uxtb	r3, r3
 8005048:	3b08      	subs	r3, #8
 800504a:	4a12      	ldr	r2, [pc, #72]	; (8005094 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800504c:	fba2 2303 	umull	r2, r3, r2, r3
 8005050:	091b      	lsrs	r3, r3, #4
 8005052:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005058:	089b      	lsrs	r3, r3, #2
 800505a:	009a      	lsls	r2, r3, #2
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	4413      	add	r3, r2
 8005060:	461a      	mov	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a0b      	ldr	r2, [pc, #44]	; (8005098 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800506a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f003 031f 	and.w	r3, r3, #31
 8005072:	2201      	movs	r2, #1
 8005074:	409a      	lsls	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	651a      	str	r2, [r3, #80]	; 0x50
}
 800507a:	bf00      	nop
 800507c:	371c      	adds	r7, #28
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	40020407 	.word	0x40020407
 800508c:	40020800 	.word	0x40020800
 8005090:	40020820 	.word	0x40020820
 8005094:	cccccccd 	.word	0xcccccccd
 8005098:	40020880 	.word	0x40020880

0800509c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4b0b      	ldr	r3, [pc, #44]	; (80050dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80050b0:	4413      	add	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	461a      	mov	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a08      	ldr	r2, [pc, #32]	; (80050e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80050be:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	f003 031f 	and.w	r3, r3, #31
 80050c8:	2201      	movs	r2, #1
 80050ca:	409a      	lsls	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80050d0:	bf00      	nop
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	1000823f 	.word	0x1000823f
 80050e0:	40020940 	.word	0x40020940

080050e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80050f2:	e15a      	b.n	80053aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	2101      	movs	r1, #1
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005100:	4013      	ands	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 814c 	beq.w	80053a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f003 0303 	and.w	r3, r3, #3
 8005114:	2b01      	cmp	r3, #1
 8005116:	d005      	beq.n	8005124 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005120:	2b02      	cmp	r3, #2
 8005122:	d130      	bne.n	8005186 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	2203      	movs	r2, #3
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	43db      	mvns	r3, r3
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4013      	ands	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800515a:	2201      	movs	r2, #1
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	fa02 f303 	lsl.w	r3, r2, r3
 8005162:	43db      	mvns	r3, r3
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4013      	ands	r3, r2
 8005168:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	091b      	lsrs	r3, r3, #4
 8005170:	f003 0201 	and.w	r2, r3, #1
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	4313      	orrs	r3, r2
 800517e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	2b03      	cmp	r3, #3
 8005190:	d017      	beq.n	80051c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	2203      	movs	r2, #3
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	43db      	mvns	r3, r3
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4013      	ands	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d123      	bne.n	8005216 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	08da      	lsrs	r2, r3, #3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	3208      	adds	r2, #8
 80051d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f003 0307 	and.w	r3, r3, #7
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	220f      	movs	r2, #15
 80051e6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ea:	43db      	mvns	r3, r3
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	4013      	ands	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	08da      	lsrs	r2, r3, #3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3208      	adds	r2, #8
 8005210:	6939      	ldr	r1, [r7, #16]
 8005212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	2203      	movs	r2, #3
 8005222:	fa02 f303 	lsl.w	r3, r2, r3
 8005226:	43db      	mvns	r3, r3
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	4013      	ands	r3, r2
 800522c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f003 0203 	and.w	r2, r3, #3
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	fa02 f303 	lsl.w	r3, r2, r3
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 80a6 	beq.w	80053a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005258:	4b5b      	ldr	r3, [pc, #364]	; (80053c8 <HAL_GPIO_Init+0x2e4>)
 800525a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800525c:	4a5a      	ldr	r2, [pc, #360]	; (80053c8 <HAL_GPIO_Init+0x2e4>)
 800525e:	f043 0301 	orr.w	r3, r3, #1
 8005262:	6613      	str	r3, [r2, #96]	; 0x60
 8005264:	4b58      	ldr	r3, [pc, #352]	; (80053c8 <HAL_GPIO_Init+0x2e4>)
 8005266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	60bb      	str	r3, [r7, #8]
 800526e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005270:	4a56      	ldr	r2, [pc, #344]	; (80053cc <HAL_GPIO_Init+0x2e8>)
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	089b      	lsrs	r3, r3, #2
 8005276:	3302      	adds	r3, #2
 8005278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800527c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	220f      	movs	r2, #15
 8005288:	fa02 f303 	lsl.w	r3, r2, r3
 800528c:	43db      	mvns	r3, r3
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	4013      	ands	r3, r2
 8005292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800529a:	d01f      	beq.n	80052dc <HAL_GPIO_Init+0x1f8>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a4c      	ldr	r2, [pc, #304]	; (80053d0 <HAL_GPIO_Init+0x2ec>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d019      	beq.n	80052d8 <HAL_GPIO_Init+0x1f4>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a4b      	ldr	r2, [pc, #300]	; (80053d4 <HAL_GPIO_Init+0x2f0>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d013      	beq.n	80052d4 <HAL_GPIO_Init+0x1f0>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a4a      	ldr	r2, [pc, #296]	; (80053d8 <HAL_GPIO_Init+0x2f4>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00d      	beq.n	80052d0 <HAL_GPIO_Init+0x1ec>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a49      	ldr	r2, [pc, #292]	; (80053dc <HAL_GPIO_Init+0x2f8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d007      	beq.n	80052cc <HAL_GPIO_Init+0x1e8>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a48      	ldr	r2, [pc, #288]	; (80053e0 <HAL_GPIO_Init+0x2fc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d101      	bne.n	80052c8 <HAL_GPIO_Init+0x1e4>
 80052c4:	2305      	movs	r3, #5
 80052c6:	e00a      	b.n	80052de <HAL_GPIO_Init+0x1fa>
 80052c8:	2306      	movs	r3, #6
 80052ca:	e008      	b.n	80052de <HAL_GPIO_Init+0x1fa>
 80052cc:	2304      	movs	r3, #4
 80052ce:	e006      	b.n	80052de <HAL_GPIO_Init+0x1fa>
 80052d0:	2303      	movs	r3, #3
 80052d2:	e004      	b.n	80052de <HAL_GPIO_Init+0x1fa>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e002      	b.n	80052de <HAL_GPIO_Init+0x1fa>
 80052d8:	2301      	movs	r3, #1
 80052da:	e000      	b.n	80052de <HAL_GPIO_Init+0x1fa>
 80052dc:	2300      	movs	r3, #0
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	f002 0203 	and.w	r2, r2, #3
 80052e4:	0092      	lsls	r2, r2, #2
 80052e6:	4093      	lsls	r3, r2
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052ee:	4937      	ldr	r1, [pc, #220]	; (80053cc <HAL_GPIO_Init+0x2e8>)
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	089b      	lsrs	r3, r3, #2
 80052f4:	3302      	adds	r3, #2
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052fc:	4b39      	ldr	r3, [pc, #228]	; (80053e4 <HAL_GPIO_Init+0x300>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	43db      	mvns	r3, r3
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	4013      	ands	r3, r2
 800530a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4313      	orrs	r3, r2
 800531e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005320:	4a30      	ldr	r2, [pc, #192]	; (80053e4 <HAL_GPIO_Init+0x300>)
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005326:	4b2f      	ldr	r3, [pc, #188]	; (80053e4 <HAL_GPIO_Init+0x300>)
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	43db      	mvns	r3, r3
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	4013      	ands	r3, r2
 8005334:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4313      	orrs	r3, r2
 8005348:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800534a:	4a26      	ldr	r2, [pc, #152]	; (80053e4 <HAL_GPIO_Init+0x300>)
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005350:	4b24      	ldr	r3, [pc, #144]	; (80053e4 <HAL_GPIO_Init+0x300>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	43db      	mvns	r3, r3
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4013      	ands	r3, r2
 800535e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005374:	4a1b      	ldr	r2, [pc, #108]	; (80053e4 <HAL_GPIO_Init+0x300>)
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800537a:	4b1a      	ldr	r3, [pc, #104]	; (80053e4 <HAL_GPIO_Init+0x300>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	43db      	mvns	r3, r3
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	4013      	ands	r3, r2
 8005388:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4313      	orrs	r3, r2
 800539c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800539e:	4a11      	ldr	r2, [pc, #68]	; (80053e4 <HAL_GPIO_Init+0x300>)
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	3301      	adds	r3, #1
 80053a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	fa22 f303 	lsr.w	r3, r2, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f47f ae9d 	bne.w	80050f4 <HAL_GPIO_Init+0x10>
  }
}
 80053ba:	bf00      	nop
 80053bc:	bf00      	nop
 80053be:	371c      	adds	r7, #28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	40021000 	.word	0x40021000
 80053cc:	40010000 	.word	0x40010000
 80053d0:	48000400 	.word	0x48000400
 80053d4:	48000800 	.word	0x48000800
 80053d8:	48000c00 	.word	0x48000c00
 80053dc:	48001000 	.word	0x48001000
 80053e0:	48001400 	.word	0x48001400
 80053e4:	40010400 	.word	0x40010400

080053e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	807b      	strh	r3, [r7, #2]
 80053f4:	4613      	mov	r3, r2
 80053f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053f8:	787b      	ldrb	r3, [r7, #1]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053fe:	887a      	ldrh	r2, [r7, #2]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005404:	e002      	b.n	800540c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005406:	887a      	ldrh	r2, [r7, #2]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	4603      	mov	r3, r0
 8005420:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005422:	4b08      	ldr	r3, [pc, #32]	; (8005444 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005424:	695a      	ldr	r2, [r3, #20]
 8005426:	88fb      	ldrh	r3, [r7, #6]
 8005428:	4013      	ands	r3, r2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d006      	beq.n	800543c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800542e:	4a05      	ldr	r2, [pc, #20]	; (8005444 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005430:	88fb      	ldrh	r3, [r7, #6]
 8005432:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005434:	88fb      	ldrh	r3, [r7, #6]
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f806 	bl	8005448 <HAL_GPIO_EXTI_Callback>
  }
}
 800543c:	bf00      	nop
 800543e:	3708      	adds	r7, #8
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40010400 	.word	0x40010400

08005448 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	4603      	mov	r3, r0
 8005450:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
	...

08005460 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d141      	bne.n	80054f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800546e:	4b4b      	ldr	r3, [pc, #300]	; (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800547a:	d131      	bne.n	80054e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800547c:	4b47      	ldr	r3, [pc, #284]	; (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800547e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005482:	4a46      	ldr	r2, [pc, #280]	; (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005488:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800548c:	4b43      	ldr	r3, [pc, #268]	; (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005494:	4a41      	ldr	r2, [pc, #260]	; (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800549a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800549c:	4b40      	ldr	r3, [pc, #256]	; (80055a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2232      	movs	r2, #50	; 0x32
 80054a2:	fb02 f303 	mul.w	r3, r2, r3
 80054a6:	4a3f      	ldr	r2, [pc, #252]	; (80055a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80054a8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ac:	0c9b      	lsrs	r3, r3, #18
 80054ae:	3301      	adds	r3, #1
 80054b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054b2:	e002      	b.n	80054ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054ba:	4b38      	ldr	r3, [pc, #224]	; (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c6:	d102      	bne.n	80054ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f2      	bne.n	80054b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054ce:	4b33      	ldr	r3, [pc, #204]	; (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054da:	d158      	bne.n	800558e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e057      	b.n	8005590 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054e0:	4b2e      	ldr	r3, [pc, #184]	; (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054e6:	4a2d      	ldr	r2, [pc, #180]	; (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80054f0:	e04d      	b.n	800558e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f8:	d141      	bne.n	800557e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80054fa:	4b28      	ldr	r3, [pc, #160]	; (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005506:	d131      	bne.n	800556c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005508:	4b24      	ldr	r3, [pc, #144]	; (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800550a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800550e:	4a23      	ldr	r2, [pc, #140]	; (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005514:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005518:	4b20      	ldr	r3, [pc, #128]	; (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005520:	4a1e      	ldr	r2, [pc, #120]	; (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005526:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005528:	4b1d      	ldr	r3, [pc, #116]	; (80055a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2232      	movs	r2, #50	; 0x32
 800552e:	fb02 f303 	mul.w	r3, r2, r3
 8005532:	4a1c      	ldr	r2, [pc, #112]	; (80055a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005534:	fba2 2303 	umull	r2, r3, r2, r3
 8005538:	0c9b      	lsrs	r3, r3, #18
 800553a:	3301      	adds	r3, #1
 800553c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800553e:	e002      	b.n	8005546 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	3b01      	subs	r3, #1
 8005544:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005546:	4b15      	ldr	r3, [pc, #84]	; (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800554e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005552:	d102      	bne.n	800555a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1f2      	bne.n	8005540 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800555a:	4b10      	ldr	r3, [pc, #64]	; (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005566:	d112      	bne.n	800558e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e011      	b.n	8005590 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800556c:	4b0b      	ldr	r3, [pc, #44]	; (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800556e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005572:	4a0a      	ldr	r2, [pc, #40]	; (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005578:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800557c:	e007      	b.n	800558e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800557e:	4b07      	ldr	r3, [pc, #28]	; (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005586:	4a05      	ldr	r2, [pc, #20]	; (800559c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005588:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800558c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	40007000 	.word	0x40007000
 80055a0:	20000000 	.word	0x20000000
 80055a4:	431bde83 	.word	0x431bde83

080055a8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80055ac:	4b05      	ldr	r3, [pc, #20]	; (80055c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	4a04      	ldr	r2, [pc, #16]	; (80055c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80055b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055b6:	6093      	str	r3, [r2, #8]
}
 80055b8:	bf00      	nop
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	40007000 	.word	0x40007000

080055c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b088      	sub	sp, #32
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e306      	b.n	8005be8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d075      	beq.n	80056d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055e6:	4b97      	ldr	r3, [pc, #604]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 030c 	and.w	r3, r3, #12
 80055ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055f0:	4b94      	ldr	r3, [pc, #592]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f003 0303 	and.w	r3, r3, #3
 80055f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	2b0c      	cmp	r3, #12
 80055fe:	d102      	bne.n	8005606 <HAL_RCC_OscConfig+0x3e>
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	2b03      	cmp	r3, #3
 8005604:	d002      	beq.n	800560c <HAL_RCC_OscConfig+0x44>
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	2b08      	cmp	r3, #8
 800560a:	d10b      	bne.n	8005624 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800560c:	4b8d      	ldr	r3, [pc, #564]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d05b      	beq.n	80056d0 <HAL_RCC_OscConfig+0x108>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d157      	bne.n	80056d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e2e1      	b.n	8005be8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800562c:	d106      	bne.n	800563c <HAL_RCC_OscConfig+0x74>
 800562e:	4b85      	ldr	r3, [pc, #532]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a84      	ldr	r2, [pc, #528]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005638:	6013      	str	r3, [r2, #0]
 800563a:	e01d      	b.n	8005678 <HAL_RCC_OscConfig+0xb0>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005644:	d10c      	bne.n	8005660 <HAL_RCC_OscConfig+0x98>
 8005646:	4b7f      	ldr	r3, [pc, #508]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a7e      	ldr	r2, [pc, #504]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 800564c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	4b7c      	ldr	r3, [pc, #496]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a7b      	ldr	r2, [pc, #492]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	e00b      	b.n	8005678 <HAL_RCC_OscConfig+0xb0>
 8005660:	4b78      	ldr	r3, [pc, #480]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a77      	ldr	r2, [pc, #476]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800566a:	6013      	str	r3, [r2, #0]
 800566c:	4b75      	ldr	r3, [pc, #468]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a74      	ldr	r2, [pc, #464]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005676:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d013      	beq.n	80056a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005680:	f7fd fb02 	bl	8002c88 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005688:	f7fd fafe 	bl	8002c88 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b64      	cmp	r3, #100	; 0x64
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e2a6      	b.n	8005be8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800569a:	4b6a      	ldr	r3, [pc, #424]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d0f0      	beq.n	8005688 <HAL_RCC_OscConfig+0xc0>
 80056a6:	e014      	b.n	80056d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a8:	f7fd faee 	bl	8002c88 <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056b0:	f7fd faea 	bl	8002c88 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b64      	cmp	r3, #100	; 0x64
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e292      	b.n	8005be8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056c2:	4b60      	ldr	r3, [pc, #384]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1f0      	bne.n	80056b0 <HAL_RCC_OscConfig+0xe8>
 80056ce:	e000      	b.n	80056d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d075      	beq.n	80057ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056de:	4b59      	ldr	r3, [pc, #356]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 030c 	and.w	r3, r3, #12
 80056e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056e8:	4b56      	ldr	r3, [pc, #344]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f003 0303 	and.w	r3, r3, #3
 80056f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	2b0c      	cmp	r3, #12
 80056f6:	d102      	bne.n	80056fe <HAL_RCC_OscConfig+0x136>
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d002      	beq.n	8005704 <HAL_RCC_OscConfig+0x13c>
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	2b04      	cmp	r3, #4
 8005702:	d11f      	bne.n	8005744 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005704:	4b4f      	ldr	r3, [pc, #316]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800570c:	2b00      	cmp	r3, #0
 800570e:	d005      	beq.n	800571c <HAL_RCC_OscConfig+0x154>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e265      	b.n	8005be8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800571c:	4b49      	ldr	r3, [pc, #292]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	061b      	lsls	r3, r3, #24
 800572a:	4946      	ldr	r1, [pc, #280]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 800572c:	4313      	orrs	r3, r2
 800572e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005730:	4b45      	ldr	r3, [pc, #276]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4618      	mov	r0, r3
 8005736:	f7fb ffcf 	bl	80016d8 <HAL_InitTick>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d043      	beq.n	80057c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e251      	b.n	8005be8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d023      	beq.n	8005794 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800574c:	4b3d      	ldr	r3, [pc, #244]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a3c      	ldr	r2, [pc, #240]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005758:	f7fd fa96 	bl	8002c88 <HAL_GetTick>
 800575c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800575e:	e008      	b.n	8005772 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005760:	f7fd fa92 	bl	8002c88 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e23a      	b.n	8005be8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005772:	4b34      	ldr	r3, [pc, #208]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0f0      	beq.n	8005760 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800577e:	4b31      	ldr	r3, [pc, #196]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	061b      	lsls	r3, r3, #24
 800578c:	492d      	ldr	r1, [pc, #180]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 800578e:	4313      	orrs	r3, r2
 8005790:	604b      	str	r3, [r1, #4]
 8005792:	e01a      	b.n	80057ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005794:	4b2b      	ldr	r3, [pc, #172]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a2a      	ldr	r2, [pc, #168]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 800579a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800579e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a0:	f7fd fa72 	bl	8002c88 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057a8:	f7fd fa6e 	bl	8002c88 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e216      	b.n	8005be8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057ba:	4b22      	ldr	r3, [pc, #136]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1f0      	bne.n	80057a8 <HAL_RCC_OscConfig+0x1e0>
 80057c6:	e000      	b.n	80057ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0308 	and.w	r3, r3, #8
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d041      	beq.n	800585a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d01c      	beq.n	8005818 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057de:	4b19      	ldr	r3, [pc, #100]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 80057e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057e4:	4a17      	ldr	r2, [pc, #92]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 80057e6:	f043 0301 	orr.w	r3, r3, #1
 80057ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ee:	f7fd fa4b 	bl	8002c88 <HAL_GetTick>
 80057f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057f4:	e008      	b.n	8005808 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057f6:	f7fd fa47 	bl	8002c88 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e1ef      	b.n	8005be8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005808:	4b0e      	ldr	r3, [pc, #56]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 800580a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0ef      	beq.n	80057f6 <HAL_RCC_OscConfig+0x22e>
 8005816:	e020      	b.n	800585a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005818:	4b0a      	ldr	r3, [pc, #40]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 800581a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800581e:	4a09      	ldr	r2, [pc, #36]	; (8005844 <HAL_RCC_OscConfig+0x27c>)
 8005820:	f023 0301 	bic.w	r3, r3, #1
 8005824:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005828:	f7fd fa2e 	bl	8002c88 <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800582e:	e00d      	b.n	800584c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005830:	f7fd fa2a 	bl	8002c88 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d906      	bls.n	800584c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e1d2      	b.n	8005be8 <HAL_RCC_OscConfig+0x620>
 8005842:	bf00      	nop
 8005844:	40021000 	.word	0x40021000
 8005848:	200000d8 	.word	0x200000d8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800584c:	4b8c      	ldr	r3, [pc, #560]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 800584e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1ea      	bne.n	8005830 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0304 	and.w	r3, r3, #4
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 80a6 	beq.w	80059b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005868:	2300      	movs	r3, #0
 800586a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800586c:	4b84      	ldr	r3, [pc, #528]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 800586e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <HAL_RCC_OscConfig+0x2b4>
 8005878:	2301      	movs	r3, #1
 800587a:	e000      	b.n	800587e <HAL_RCC_OscConfig+0x2b6>
 800587c:	2300      	movs	r3, #0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00d      	beq.n	800589e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005882:	4b7f      	ldr	r3, [pc, #508]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005886:	4a7e      	ldr	r2, [pc, #504]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800588c:	6593      	str	r3, [r2, #88]	; 0x58
 800588e:	4b7c      	ldr	r3, [pc, #496]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800589a:	2301      	movs	r3, #1
 800589c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800589e:	4b79      	ldr	r3, [pc, #484]	; (8005a84 <HAL_RCC_OscConfig+0x4bc>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d118      	bne.n	80058dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058aa:	4b76      	ldr	r3, [pc, #472]	; (8005a84 <HAL_RCC_OscConfig+0x4bc>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a75      	ldr	r2, [pc, #468]	; (8005a84 <HAL_RCC_OscConfig+0x4bc>)
 80058b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058b6:	f7fd f9e7 	bl	8002c88 <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058bc:	e008      	b.n	80058d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058be:	f7fd f9e3 	bl	8002c88 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e18b      	b.n	8005be8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058d0:	4b6c      	ldr	r3, [pc, #432]	; (8005a84 <HAL_RCC_OscConfig+0x4bc>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0f0      	beq.n	80058be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d108      	bne.n	80058f6 <HAL_RCC_OscConfig+0x32e>
 80058e4:	4b66      	ldr	r3, [pc, #408]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 80058e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ea:	4a65      	ldr	r2, [pc, #404]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 80058ec:	f043 0301 	orr.w	r3, r3, #1
 80058f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058f4:	e024      	b.n	8005940 <HAL_RCC_OscConfig+0x378>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	2b05      	cmp	r3, #5
 80058fc:	d110      	bne.n	8005920 <HAL_RCC_OscConfig+0x358>
 80058fe:	4b60      	ldr	r3, [pc, #384]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005904:	4a5e      	ldr	r2, [pc, #376]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005906:	f043 0304 	orr.w	r3, r3, #4
 800590a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800590e:	4b5c      	ldr	r3, [pc, #368]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005914:	4a5a      	ldr	r2, [pc, #360]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005916:	f043 0301 	orr.w	r3, r3, #1
 800591a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800591e:	e00f      	b.n	8005940 <HAL_RCC_OscConfig+0x378>
 8005920:	4b57      	ldr	r3, [pc, #348]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005926:	4a56      	ldr	r2, [pc, #344]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005928:	f023 0301 	bic.w	r3, r3, #1
 800592c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005930:	4b53      	ldr	r3, [pc, #332]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005936:	4a52      	ldr	r2, [pc, #328]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005938:	f023 0304 	bic.w	r3, r3, #4
 800593c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d016      	beq.n	8005976 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005948:	f7fd f99e 	bl	8002c88 <HAL_GetTick>
 800594c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800594e:	e00a      	b.n	8005966 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005950:	f7fd f99a 	bl	8002c88 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	f241 3288 	movw	r2, #5000	; 0x1388
 800595e:	4293      	cmp	r3, r2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e140      	b.n	8005be8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005966:	4b46      	ldr	r3, [pc, #280]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0ed      	beq.n	8005950 <HAL_RCC_OscConfig+0x388>
 8005974:	e015      	b.n	80059a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005976:	f7fd f987 	bl	8002c88 <HAL_GetTick>
 800597a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800597c:	e00a      	b.n	8005994 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800597e:	f7fd f983 	bl	8002c88 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	f241 3288 	movw	r2, #5000	; 0x1388
 800598c:	4293      	cmp	r3, r2
 800598e:	d901      	bls.n	8005994 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e129      	b.n	8005be8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005994:	4b3a      	ldr	r3, [pc, #232]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1ed      	bne.n	800597e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059a2:	7ffb      	ldrb	r3, [r7, #31]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d105      	bne.n	80059b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059a8:	4b35      	ldr	r3, [pc, #212]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 80059aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ac:	4a34      	ldr	r2, [pc, #208]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 80059ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0320 	and.w	r3, r3, #32
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d03c      	beq.n	8005a3a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d01c      	beq.n	8005a02 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80059c8:	4b2d      	ldr	r3, [pc, #180]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 80059ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059ce:	4a2c      	ldr	r2, [pc, #176]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 80059d0:	f043 0301 	orr.w	r3, r3, #1
 80059d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d8:	f7fd f956 	bl	8002c88 <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059e0:	f7fd f952 	bl	8002c88 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e0fa      	b.n	8005be8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059f2:	4b23      	ldr	r3, [pc, #140]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 80059f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d0ef      	beq.n	80059e0 <HAL_RCC_OscConfig+0x418>
 8005a00:	e01b      	b.n	8005a3a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a02:	4b1f      	ldr	r3, [pc, #124]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005a04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a08:	4a1d      	ldr	r2, [pc, #116]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005a0a:	f023 0301 	bic.w	r3, r3, #1
 8005a0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a12:	f7fd f939 	bl	8002c88 <HAL_GetTick>
 8005a16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a18:	e008      	b.n	8005a2c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a1a:	f7fd f935 	bl	8002c88 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d901      	bls.n	8005a2c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e0dd      	b.n	8005be8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a2c:	4b14      	ldr	r3, [pc, #80]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005a2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1ef      	bne.n	8005a1a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 80d1 	beq.w	8005be6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a44:	4b0e      	ldr	r3, [pc, #56]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f003 030c 	and.w	r3, r3, #12
 8005a4c:	2b0c      	cmp	r3, #12
 8005a4e:	f000 808b 	beq.w	8005b68 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d15e      	bne.n	8005b18 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a5a:	4b09      	ldr	r3, [pc, #36]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a08      	ldr	r2, [pc, #32]	; (8005a80 <HAL_RCC_OscConfig+0x4b8>)
 8005a60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a66:	f7fd f90f 	bl	8002c88 <HAL_GetTick>
 8005a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a6c:	e00c      	b.n	8005a88 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a6e:	f7fd f90b 	bl	8002c88 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d905      	bls.n	8005a88 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e0b3      	b.n	8005be8 <HAL_RCC_OscConfig+0x620>
 8005a80:	40021000 	.word	0x40021000
 8005a84:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a88:	4b59      	ldr	r3, [pc, #356]	; (8005bf0 <HAL_RCC_OscConfig+0x628>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1ec      	bne.n	8005a6e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a94:	4b56      	ldr	r3, [pc, #344]	; (8005bf0 <HAL_RCC_OscConfig+0x628>)
 8005a96:	68da      	ldr	r2, [r3, #12]
 8005a98:	4b56      	ldr	r3, [pc, #344]	; (8005bf4 <HAL_RCC_OscConfig+0x62c>)
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6a11      	ldr	r1, [r2, #32]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005aa4:	3a01      	subs	r2, #1
 8005aa6:	0112      	lsls	r2, r2, #4
 8005aa8:	4311      	orrs	r1, r2
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005aae:	0212      	lsls	r2, r2, #8
 8005ab0:	4311      	orrs	r1, r2
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ab6:	0852      	lsrs	r2, r2, #1
 8005ab8:	3a01      	subs	r2, #1
 8005aba:	0552      	lsls	r2, r2, #21
 8005abc:	4311      	orrs	r1, r2
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ac2:	0852      	lsrs	r2, r2, #1
 8005ac4:	3a01      	subs	r2, #1
 8005ac6:	0652      	lsls	r2, r2, #25
 8005ac8:	4311      	orrs	r1, r2
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005ace:	06d2      	lsls	r2, r2, #27
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	4947      	ldr	r1, [pc, #284]	; (8005bf0 <HAL_RCC_OscConfig+0x628>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ad8:	4b45      	ldr	r3, [pc, #276]	; (8005bf0 <HAL_RCC_OscConfig+0x628>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a44      	ldr	r2, [pc, #272]	; (8005bf0 <HAL_RCC_OscConfig+0x628>)
 8005ade:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ae2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ae4:	4b42      	ldr	r3, [pc, #264]	; (8005bf0 <HAL_RCC_OscConfig+0x628>)
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	4a41      	ldr	r2, [pc, #260]	; (8005bf0 <HAL_RCC_OscConfig+0x628>)
 8005aea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af0:	f7fd f8ca 	bl	8002c88 <HAL_GetTick>
 8005af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005af8:	f7fd f8c6 	bl	8002c88 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e06e      	b.n	8005be8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b0a:	4b39      	ldr	r3, [pc, #228]	; (8005bf0 <HAL_RCC_OscConfig+0x628>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d0f0      	beq.n	8005af8 <HAL_RCC_OscConfig+0x530>
 8005b16:	e066      	b.n	8005be6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b18:	4b35      	ldr	r3, [pc, #212]	; (8005bf0 <HAL_RCC_OscConfig+0x628>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a34      	ldr	r2, [pc, #208]	; (8005bf0 <HAL_RCC_OscConfig+0x628>)
 8005b1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b22:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005b24:	4b32      	ldr	r3, [pc, #200]	; (8005bf0 <HAL_RCC_OscConfig+0x628>)
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	4a31      	ldr	r2, [pc, #196]	; (8005bf0 <HAL_RCC_OscConfig+0x628>)
 8005b2a:	f023 0303 	bic.w	r3, r3, #3
 8005b2e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005b30:	4b2f      	ldr	r3, [pc, #188]	; (8005bf0 <HAL_RCC_OscConfig+0x628>)
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	4a2e      	ldr	r2, [pc, #184]	; (8005bf0 <HAL_RCC_OscConfig+0x628>)
 8005b36:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b40:	f7fd f8a2 	bl	8002c88 <HAL_GetTick>
 8005b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b46:	e008      	b.n	8005b5a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b48:	f7fd f89e 	bl	8002c88 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d901      	bls.n	8005b5a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e046      	b.n	8005be8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b5a:	4b25      	ldr	r3, [pc, #148]	; (8005bf0 <HAL_RCC_OscConfig+0x628>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1f0      	bne.n	8005b48 <HAL_RCC_OscConfig+0x580>
 8005b66:	e03e      	b.n	8005be6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d101      	bne.n	8005b74 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e039      	b.n	8005be8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005b74:	4b1e      	ldr	r3, [pc, #120]	; (8005bf0 <HAL_RCC_OscConfig+0x628>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f003 0203 	and.w	r2, r3, #3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d12c      	bne.n	8005be2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	3b01      	subs	r3, #1
 8005b94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d123      	bne.n	8005be2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d11b      	bne.n	8005be2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d113      	bne.n	8005be2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc4:	085b      	lsrs	r3, r3, #1
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d109      	bne.n	8005be2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd8:	085b      	lsrs	r3, r3, #1
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d001      	beq.n	8005be6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e000      	b.n	8005be8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3720      	adds	r7, #32
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	40021000 	.word	0x40021000
 8005bf4:	019f800c 	.word	0x019f800c

08005bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005c02:	2300      	movs	r3, #0
 8005c04:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e11e      	b.n	8005e4e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c10:	4b91      	ldr	r3, [pc, #580]	; (8005e58 <HAL_RCC_ClockConfig+0x260>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 030f 	and.w	r3, r3, #15
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d910      	bls.n	8005c40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c1e:	4b8e      	ldr	r3, [pc, #568]	; (8005e58 <HAL_RCC_ClockConfig+0x260>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f023 020f 	bic.w	r2, r3, #15
 8005c26:	498c      	ldr	r1, [pc, #560]	; (8005e58 <HAL_RCC_ClockConfig+0x260>)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c2e:	4b8a      	ldr	r3, [pc, #552]	; (8005e58 <HAL_RCC_ClockConfig+0x260>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 030f 	and.w	r3, r3, #15
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d001      	beq.n	8005c40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e106      	b.n	8005e4e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d073      	beq.n	8005d34 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d129      	bne.n	8005ca8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c54:	4b81      	ldr	r3, [pc, #516]	; (8005e5c <HAL_RCC_ClockConfig+0x264>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e0f4      	b.n	8005e4e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005c64:	f000 f9d0 	bl	8006008 <RCC_GetSysClockFreqFromPLLSource>
 8005c68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	4a7c      	ldr	r2, [pc, #496]	; (8005e60 <HAL_RCC_ClockConfig+0x268>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d93f      	bls.n	8005cf2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c72:	4b7a      	ldr	r3, [pc, #488]	; (8005e5c <HAL_RCC_ClockConfig+0x264>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d009      	beq.n	8005c92 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d033      	beq.n	8005cf2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d12f      	bne.n	8005cf2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c92:	4b72      	ldr	r3, [pc, #456]	; (8005e5c <HAL_RCC_ClockConfig+0x264>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c9a:	4a70      	ldr	r2, [pc, #448]	; (8005e5c <HAL_RCC_ClockConfig+0x264>)
 8005c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005ca2:	2380      	movs	r3, #128	; 0x80
 8005ca4:	617b      	str	r3, [r7, #20]
 8005ca6:	e024      	b.n	8005cf2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d107      	bne.n	8005cc0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cb0:	4b6a      	ldr	r3, [pc, #424]	; (8005e5c <HAL_RCC_ClockConfig+0x264>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d109      	bne.n	8005cd0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e0c6      	b.n	8005e4e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cc0:	4b66      	ldr	r3, [pc, #408]	; (8005e5c <HAL_RCC_ClockConfig+0x264>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e0be      	b.n	8005e4e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005cd0:	f000 f8ce 	bl	8005e70 <HAL_RCC_GetSysClockFreq>
 8005cd4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	4a61      	ldr	r2, [pc, #388]	; (8005e60 <HAL_RCC_ClockConfig+0x268>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d909      	bls.n	8005cf2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005cde:	4b5f      	ldr	r3, [pc, #380]	; (8005e5c <HAL_RCC_ClockConfig+0x264>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ce6:	4a5d      	ldr	r2, [pc, #372]	; (8005e5c <HAL_RCC_ClockConfig+0x264>)
 8005ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005cee:	2380      	movs	r3, #128	; 0x80
 8005cf0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cf2:	4b5a      	ldr	r3, [pc, #360]	; (8005e5c <HAL_RCC_ClockConfig+0x264>)
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f023 0203 	bic.w	r2, r3, #3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	4957      	ldr	r1, [pc, #348]	; (8005e5c <HAL_RCC_ClockConfig+0x264>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d04:	f7fc ffc0 	bl	8002c88 <HAL_GetTick>
 8005d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d0a:	e00a      	b.n	8005d22 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d0c:	f7fc ffbc 	bl	8002c88 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e095      	b.n	8005e4e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d22:	4b4e      	ldr	r3, [pc, #312]	; (8005e5c <HAL_RCC_ClockConfig+0x264>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 020c 	and.w	r2, r3, #12
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d1eb      	bne.n	8005d0c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d023      	beq.n	8005d88 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0304 	and.w	r3, r3, #4
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d005      	beq.n	8005d58 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d4c:	4b43      	ldr	r3, [pc, #268]	; (8005e5c <HAL_RCC_ClockConfig+0x264>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	4a42      	ldr	r2, [pc, #264]	; (8005e5c <HAL_RCC_ClockConfig+0x264>)
 8005d52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d56:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0308 	and.w	r3, r3, #8
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d007      	beq.n	8005d74 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005d64:	4b3d      	ldr	r3, [pc, #244]	; (8005e5c <HAL_RCC_ClockConfig+0x264>)
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005d6c:	4a3b      	ldr	r2, [pc, #236]	; (8005e5c <HAL_RCC_ClockConfig+0x264>)
 8005d6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d74:	4b39      	ldr	r3, [pc, #228]	; (8005e5c <HAL_RCC_ClockConfig+0x264>)
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	4936      	ldr	r1, [pc, #216]	; (8005e5c <HAL_RCC_ClockConfig+0x264>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	608b      	str	r3, [r1, #8]
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	2b80      	cmp	r3, #128	; 0x80
 8005d8c:	d105      	bne.n	8005d9a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d8e:	4b33      	ldr	r3, [pc, #204]	; (8005e5c <HAL_RCC_ClockConfig+0x264>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	4a32      	ldr	r2, [pc, #200]	; (8005e5c <HAL_RCC_ClockConfig+0x264>)
 8005d94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d98:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d9a:	4b2f      	ldr	r3, [pc, #188]	; (8005e58 <HAL_RCC_ClockConfig+0x260>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 030f 	and.w	r3, r3, #15
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d21d      	bcs.n	8005de4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005da8:	4b2b      	ldr	r3, [pc, #172]	; (8005e58 <HAL_RCC_ClockConfig+0x260>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f023 020f 	bic.w	r2, r3, #15
 8005db0:	4929      	ldr	r1, [pc, #164]	; (8005e58 <HAL_RCC_ClockConfig+0x260>)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005db8:	f7fc ff66 	bl	8002c88 <HAL_GetTick>
 8005dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dbe:	e00a      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dc0:	f7fc ff62 	bl	8002c88 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e03b      	b.n	8005e4e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd6:	4b20      	ldr	r3, [pc, #128]	; (8005e58 <HAL_RCC_ClockConfig+0x260>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d1ed      	bne.n	8005dc0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0304 	and.w	r3, r3, #4
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d008      	beq.n	8005e02 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005df0:	4b1a      	ldr	r3, [pc, #104]	; (8005e5c <HAL_RCC_ClockConfig+0x264>)
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	4917      	ldr	r1, [pc, #92]	; (8005e5c <HAL_RCC_ClockConfig+0x264>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0308 	and.w	r3, r3, #8
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d009      	beq.n	8005e22 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e0e:	4b13      	ldr	r3, [pc, #76]	; (8005e5c <HAL_RCC_ClockConfig+0x264>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	490f      	ldr	r1, [pc, #60]	; (8005e5c <HAL_RCC_ClockConfig+0x264>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e22:	f000 f825 	bl	8005e70 <HAL_RCC_GetSysClockFreq>
 8005e26:	4602      	mov	r2, r0
 8005e28:	4b0c      	ldr	r3, [pc, #48]	; (8005e5c <HAL_RCC_ClockConfig+0x264>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	091b      	lsrs	r3, r3, #4
 8005e2e:	f003 030f 	and.w	r3, r3, #15
 8005e32:	490c      	ldr	r1, [pc, #48]	; (8005e64 <HAL_RCC_ClockConfig+0x26c>)
 8005e34:	5ccb      	ldrb	r3, [r1, r3]
 8005e36:	f003 031f 	and.w	r3, r3, #31
 8005e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e3e:	4a0a      	ldr	r2, [pc, #40]	; (8005e68 <HAL_RCC_ClockConfig+0x270>)
 8005e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005e42:	4b0a      	ldr	r3, [pc, #40]	; (8005e6c <HAL_RCC_ClockConfig+0x274>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fb fc46 	bl	80016d8 <HAL_InitTick>
 8005e4c:	4603      	mov	r3, r0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	40022000 	.word	0x40022000
 8005e5c:	40021000 	.word	0x40021000
 8005e60:	04c4b400 	.word	0x04c4b400
 8005e64:	0800bc28 	.word	0x0800bc28
 8005e68:	20000000 	.word	0x20000000
 8005e6c:	200000d8 	.word	0x200000d8

08005e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005e76:	4b2c      	ldr	r3, [pc, #176]	; (8005f28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f003 030c 	and.w	r3, r3, #12
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d102      	bne.n	8005e88 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e82:	4b2a      	ldr	r3, [pc, #168]	; (8005f2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e84:	613b      	str	r3, [r7, #16]
 8005e86:	e047      	b.n	8005f18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005e88:	4b27      	ldr	r3, [pc, #156]	; (8005f28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f003 030c 	and.w	r3, r3, #12
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d102      	bne.n	8005e9a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e94:	4b26      	ldr	r3, [pc, #152]	; (8005f30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e96:	613b      	str	r3, [r7, #16]
 8005e98:	e03e      	b.n	8005f18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005e9a:	4b23      	ldr	r3, [pc, #140]	; (8005f28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f003 030c 	and.w	r3, r3, #12
 8005ea2:	2b0c      	cmp	r3, #12
 8005ea4:	d136      	bne.n	8005f14 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ea6:	4b20      	ldr	r3, [pc, #128]	; (8005f28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005eb0:	4b1d      	ldr	r3, [pc, #116]	; (8005f28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	091b      	lsrs	r3, r3, #4
 8005eb6:	f003 030f 	and.w	r3, r3, #15
 8005eba:	3301      	adds	r3, #1
 8005ebc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b03      	cmp	r3, #3
 8005ec2:	d10c      	bne.n	8005ede <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ec4:	4a1a      	ldr	r2, [pc, #104]	; (8005f30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ecc:	4a16      	ldr	r2, [pc, #88]	; (8005f28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ece:	68d2      	ldr	r2, [r2, #12]
 8005ed0:	0a12      	lsrs	r2, r2, #8
 8005ed2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ed6:	fb02 f303 	mul.w	r3, r2, r3
 8005eda:	617b      	str	r3, [r7, #20]
      break;
 8005edc:	e00c      	b.n	8005ef8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ede:	4a13      	ldr	r2, [pc, #76]	; (8005f2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee6:	4a10      	ldr	r2, [pc, #64]	; (8005f28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ee8:	68d2      	ldr	r2, [r2, #12]
 8005eea:	0a12      	lsrs	r2, r2, #8
 8005eec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ef0:	fb02 f303 	mul.w	r3, r2, r3
 8005ef4:	617b      	str	r3, [r7, #20]
      break;
 8005ef6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ef8:	4b0b      	ldr	r3, [pc, #44]	; (8005f28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	0e5b      	lsrs	r3, r3, #25
 8005efe:	f003 0303 	and.w	r3, r3, #3
 8005f02:	3301      	adds	r3, #1
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f10:	613b      	str	r3, [r7, #16]
 8005f12:	e001      	b.n	8005f18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005f18:	693b      	ldr	r3, [r7, #16]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	371c      	adds	r7, #28
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	40021000 	.word	0x40021000
 8005f2c:	00f42400 	.word	0x00f42400
 8005f30:	016e3600 	.word	0x016e3600

08005f34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f34:	b480      	push	{r7}
 8005f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f38:	4b03      	ldr	r3, [pc, #12]	; (8005f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	20000000 	.word	0x20000000

08005f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f50:	f7ff fff0 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
 8005f54:	4602      	mov	r2, r0
 8005f56:	4b06      	ldr	r3, [pc, #24]	; (8005f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	0a1b      	lsrs	r3, r3, #8
 8005f5c:	f003 0307 	and.w	r3, r3, #7
 8005f60:	4904      	ldr	r1, [pc, #16]	; (8005f74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f62:	5ccb      	ldrb	r3, [r1, r3]
 8005f64:	f003 031f 	and.w	r3, r3, #31
 8005f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	40021000 	.word	0x40021000
 8005f74:	0800bc38 	.word	0x0800bc38

08005f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f7c:	f7ff ffda 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
 8005f80:	4602      	mov	r2, r0
 8005f82:	4b06      	ldr	r3, [pc, #24]	; (8005f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	0adb      	lsrs	r3, r3, #11
 8005f88:	f003 0307 	and.w	r3, r3, #7
 8005f8c:	4904      	ldr	r1, [pc, #16]	; (8005fa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f8e:	5ccb      	ldrb	r3, [r1, r3]
 8005f90:	f003 031f 	and.w	r3, r3, #31
 8005f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	40021000 	.word	0x40021000
 8005fa0:	0800bc38 	.word	0x0800bc38

08005fa4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	220f      	movs	r2, #15
 8005fb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005fb4:	4b12      	ldr	r3, [pc, #72]	; (8006000 <HAL_RCC_GetClockConfig+0x5c>)
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f003 0203 	and.w	r2, r3, #3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005fc0:	4b0f      	ldr	r3, [pc, #60]	; (8006000 <HAL_RCC_GetClockConfig+0x5c>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005fcc:	4b0c      	ldr	r3, [pc, #48]	; (8006000 <HAL_RCC_GetClockConfig+0x5c>)
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005fd8:	4b09      	ldr	r3, [pc, #36]	; (8006000 <HAL_RCC_GetClockConfig+0x5c>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	08db      	lsrs	r3, r3, #3
 8005fde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005fe6:	4b07      	ldr	r3, [pc, #28]	; (8006004 <HAL_RCC_GetClockConfig+0x60>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 020f 	and.w	r2, r3, #15
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	601a      	str	r2, [r3, #0]
}
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	40021000 	.word	0x40021000
 8006004:	40022000 	.word	0x40022000

08006008 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800600e:	4b1e      	ldr	r3, [pc, #120]	; (8006088 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006018:	4b1b      	ldr	r3, [pc, #108]	; (8006088 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	091b      	lsrs	r3, r3, #4
 800601e:	f003 030f 	and.w	r3, r3, #15
 8006022:	3301      	adds	r3, #1
 8006024:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	2b03      	cmp	r3, #3
 800602a:	d10c      	bne.n	8006046 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800602c:	4a17      	ldr	r2, [pc, #92]	; (800608c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	fbb2 f3f3 	udiv	r3, r2, r3
 8006034:	4a14      	ldr	r2, [pc, #80]	; (8006088 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006036:	68d2      	ldr	r2, [r2, #12]
 8006038:	0a12      	lsrs	r2, r2, #8
 800603a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800603e:	fb02 f303 	mul.w	r3, r2, r3
 8006042:	617b      	str	r3, [r7, #20]
    break;
 8006044:	e00c      	b.n	8006060 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006046:	4a12      	ldr	r2, [pc, #72]	; (8006090 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	fbb2 f3f3 	udiv	r3, r2, r3
 800604e:	4a0e      	ldr	r2, [pc, #56]	; (8006088 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006050:	68d2      	ldr	r2, [r2, #12]
 8006052:	0a12      	lsrs	r2, r2, #8
 8006054:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006058:	fb02 f303 	mul.w	r3, r2, r3
 800605c:	617b      	str	r3, [r7, #20]
    break;
 800605e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006060:	4b09      	ldr	r3, [pc, #36]	; (8006088 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	0e5b      	lsrs	r3, r3, #25
 8006066:	f003 0303 	and.w	r3, r3, #3
 800606a:	3301      	adds	r3, #1
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	fbb2 f3f3 	udiv	r3, r2, r3
 8006078:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800607a:	687b      	ldr	r3, [r7, #4]
}
 800607c:	4618      	mov	r0, r3
 800607e:	371c      	adds	r7, #28
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	40021000 	.word	0x40021000
 800608c:	016e3600 	.word	0x016e3600
 8006090:	00f42400 	.word	0x00f42400

08006094 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800609c:	2300      	movs	r3, #0
 800609e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060a0:	2300      	movs	r3, #0
 80060a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 8098 	beq.w	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060b2:	2300      	movs	r3, #0
 80060b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060b6:	4b43      	ldr	r3, [pc, #268]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10d      	bne.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060c2:	4b40      	ldr	r3, [pc, #256]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c6:	4a3f      	ldr	r2, [pc, #252]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060cc:	6593      	str	r3, [r2, #88]	; 0x58
 80060ce:	4b3d      	ldr	r3, [pc, #244]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060d6:	60bb      	str	r3, [r7, #8]
 80060d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060da:	2301      	movs	r3, #1
 80060dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060de:	4b3a      	ldr	r3, [pc, #232]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a39      	ldr	r2, [pc, #228]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80060e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060ea:	f7fc fdcd 	bl	8002c88 <HAL_GetTick>
 80060ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060f0:	e009      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060f2:	f7fc fdc9 	bl	8002c88 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d902      	bls.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	74fb      	strb	r3, [r7, #19]
        break;
 8006104:	e005      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006106:	4b30      	ldr	r3, [pc, #192]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800610e:	2b00      	cmp	r3, #0
 8006110:	d0ef      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006112:	7cfb      	ldrb	r3, [r7, #19]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d159      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006118:	4b2a      	ldr	r3, [pc, #168]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800611a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006122:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d01e      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	429a      	cmp	r2, r3
 8006132:	d019      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006134:	4b23      	ldr	r3, [pc, #140]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800613e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006140:	4b20      	ldr	r3, [pc, #128]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006146:	4a1f      	ldr	r2, [pc, #124]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800614c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006150:	4b1c      	ldr	r3, [pc, #112]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006156:	4a1b      	ldr	r2, [pc, #108]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800615c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006160:	4a18      	ldr	r2, [pc, #96]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d016      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006172:	f7fc fd89 	bl	8002c88 <HAL_GetTick>
 8006176:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006178:	e00b      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800617a:	f7fc fd85 	bl	8002c88 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	f241 3288 	movw	r2, #5000	; 0x1388
 8006188:	4293      	cmp	r3, r2
 800618a:	d902      	bls.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	74fb      	strb	r3, [r7, #19]
            break;
 8006190:	e006      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006192:	4b0c      	ldr	r3, [pc, #48]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0ec      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80061a0:	7cfb      	ldrb	r3, [r7, #19]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10b      	bne.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061a6:	4b07      	ldr	r3, [pc, #28]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b4:	4903      	ldr	r1, [pc, #12]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80061bc:	e008      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061be:	7cfb      	ldrb	r3, [r7, #19]
 80061c0:	74bb      	strb	r3, [r7, #18]
 80061c2:	e005      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80061c4:	40021000 	.word	0x40021000
 80061c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061cc:	7cfb      	ldrb	r3, [r7, #19]
 80061ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061d0:	7c7b      	ldrb	r3, [r7, #17]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d105      	bne.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061d6:	4ba7      	ldr	r3, [pc, #668]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061da:	4aa6      	ldr	r2, [pc, #664]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00a      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061ee:	4ba1      	ldr	r3, [pc, #644]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f4:	f023 0203 	bic.w	r2, r3, #3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	499d      	ldr	r1, [pc, #628]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00a      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006210:	4b98      	ldr	r3, [pc, #608]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006216:	f023 020c 	bic.w	r2, r3, #12
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	4995      	ldr	r1, [pc, #596]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006220:	4313      	orrs	r3, r2
 8006222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0304 	and.w	r3, r3, #4
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00a      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006232:	4b90      	ldr	r3, [pc, #576]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006238:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	498c      	ldr	r1, [pc, #560]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006242:	4313      	orrs	r3, r2
 8006244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0308 	and.w	r3, r3, #8
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00a      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006254:	4b87      	ldr	r3, [pc, #540]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	4984      	ldr	r1, [pc, #528]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006264:	4313      	orrs	r3, r2
 8006266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0310 	and.w	r3, r3, #16
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00a      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006276:	4b7f      	ldr	r3, [pc, #508]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800627c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	497b      	ldr	r1, [pc, #492]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006286:	4313      	orrs	r3, r2
 8006288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0320 	and.w	r3, r3, #32
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00a      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006298:	4b76      	ldr	r3, [pc, #472]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800629a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800629e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	4973      	ldr	r1, [pc, #460]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062a8:	4313      	orrs	r3, r2
 80062aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00a      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062ba:	4b6e      	ldr	r3, [pc, #440]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	496a      	ldr	r1, [pc, #424]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00a      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062dc:	4b65      	ldr	r3, [pc, #404]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	4962      	ldr	r1, [pc, #392]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00a      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062fe:	4b5d      	ldr	r3, [pc, #372]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006304:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	4959      	ldr	r1, [pc, #356]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800630e:	4313      	orrs	r3, r2
 8006310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00a      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006320:	4b54      	ldr	r3, [pc, #336]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006322:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006326:	f023 0203 	bic.w	r2, r3, #3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632e:	4951      	ldr	r1, [pc, #324]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006330:	4313      	orrs	r3, r2
 8006332:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00a      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006342:	4b4c      	ldr	r3, [pc, #304]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006348:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006350:	4948      	ldr	r1, [pc, #288]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006352:	4313      	orrs	r3, r2
 8006354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006360:	2b00      	cmp	r3, #0
 8006362:	d015      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006364:	4b43      	ldr	r3, [pc, #268]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800636a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006372:	4940      	ldr	r1, [pc, #256]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006374:	4313      	orrs	r3, r2
 8006376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006382:	d105      	bne.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006384:	4b3b      	ldr	r3, [pc, #236]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	4a3a      	ldr	r2, [pc, #232]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800638a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800638e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006398:	2b00      	cmp	r3, #0
 800639a:	d015      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800639c:	4b35      	ldr	r3, [pc, #212]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800639e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063aa:	4932      	ldr	r1, [pc, #200]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063ba:	d105      	bne.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063bc:	4b2d      	ldr	r3, [pc, #180]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	4a2c      	ldr	r2, [pc, #176]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063c6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d015      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80063d4:	4b27      	ldr	r3, [pc, #156]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e2:	4924      	ldr	r1, [pc, #144]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063f2:	d105      	bne.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063f4:	4b1f      	ldr	r3, [pc, #124]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	4a1e      	ldr	r2, [pc, #120]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063fe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d015      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800640c:	4b19      	ldr	r3, [pc, #100]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800640e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006412:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800641a:	4916      	ldr	r1, [pc, #88]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800641c:	4313      	orrs	r3, r2
 800641e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800642a:	d105      	bne.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800642c:	4b11      	ldr	r3, [pc, #68]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	4a10      	ldr	r2, [pc, #64]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006436:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d019      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006444:	4b0b      	ldr	r3, [pc, #44]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	4908      	ldr	r1, [pc, #32]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006454:	4313      	orrs	r3, r2
 8006456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006462:	d109      	bne.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006464:	4b03      	ldr	r3, [pc, #12]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	4a02      	ldr	r2, [pc, #8]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800646a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800646e:	60d3      	str	r3, [r2, #12]
 8006470:	e002      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006472:	bf00      	nop
 8006474:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d015      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006484:	4b29      	ldr	r3, [pc, #164]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800648a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006492:	4926      	ldr	r1, [pc, #152]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006494:	4313      	orrs	r3, r2
 8006496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800649e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064a2:	d105      	bne.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80064a4:	4b21      	ldr	r3, [pc, #132]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	4a20      	ldr	r2, [pc, #128]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ae:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d015      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80064bc:	4b1b      	ldr	r3, [pc, #108]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ca:	4918      	ldr	r1, [pc, #96]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064da:	d105      	bne.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80064dc:	4b13      	ldr	r3, [pc, #76]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	4a12      	ldr	r2, [pc, #72]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064e6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d015      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80064f4:	4b0d      	ldr	r3, [pc, #52]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006502:	490a      	ldr	r1, [pc, #40]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006504:	4313      	orrs	r3, r2
 8006506:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800650e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006512:	d105      	bne.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006514:	4b05      	ldr	r3, [pc, #20]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	4a04      	ldr	r2, [pc, #16]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800651a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800651e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006520:	7cbb      	ldrb	r3, [r7, #18]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	40021000 	.word	0x40021000

08006530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e049      	b.n	80065d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d106      	bne.n	800655c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7fb fbd2 	bl	8001d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2202      	movs	r2, #2
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3304      	adds	r3, #4
 800656c:	4619      	mov	r1, r3
 800656e:	4610      	mov	r0, r2
 8006570:	f000 ffda 	bl	8007528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3708      	adds	r7, #8
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
	...

080065e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d001      	beq.n	80065f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e054      	b.n	80066a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0201 	orr.w	r2, r2, #1
 800660e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a26      	ldr	r2, [pc, #152]	; (80066b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d022      	beq.n	8006660 <HAL_TIM_Base_Start_IT+0x80>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006622:	d01d      	beq.n	8006660 <HAL_TIM_Base_Start_IT+0x80>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a22      	ldr	r2, [pc, #136]	; (80066b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d018      	beq.n	8006660 <HAL_TIM_Base_Start_IT+0x80>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a21      	ldr	r2, [pc, #132]	; (80066b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d013      	beq.n	8006660 <HAL_TIM_Base_Start_IT+0x80>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a1f      	ldr	r2, [pc, #124]	; (80066bc <HAL_TIM_Base_Start_IT+0xdc>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d00e      	beq.n	8006660 <HAL_TIM_Base_Start_IT+0x80>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a1e      	ldr	r2, [pc, #120]	; (80066c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d009      	beq.n	8006660 <HAL_TIM_Base_Start_IT+0x80>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a1c      	ldr	r2, [pc, #112]	; (80066c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d004      	beq.n	8006660 <HAL_TIM_Base_Start_IT+0x80>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a1b      	ldr	r2, [pc, #108]	; (80066c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d115      	bne.n	800668c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	4b19      	ldr	r3, [pc, #100]	; (80066cc <HAL_TIM_Base_Start_IT+0xec>)
 8006668:	4013      	ands	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2b06      	cmp	r3, #6
 8006670:	d015      	beq.n	800669e <HAL_TIM_Base_Start_IT+0xbe>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006678:	d011      	beq.n	800669e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f042 0201 	orr.w	r2, r2, #1
 8006688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800668a:	e008      	b.n	800669e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f042 0201 	orr.w	r2, r2, #1
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	e000      	b.n	80066a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800669e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3714      	adds	r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	40012c00 	.word	0x40012c00
 80066b4:	40000400 	.word	0x40000400
 80066b8:	40000800 	.word	0x40000800
 80066bc:	40000c00 	.word	0x40000c00
 80066c0:	40013400 	.word	0x40013400
 80066c4:	40014000 	.word	0x40014000
 80066c8:	40015000 	.word	0x40015000
 80066cc:	00010007 	.word	0x00010007

080066d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e049      	b.n	8006776 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d106      	bne.n	80066fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f841 	bl	800677e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2202      	movs	r2, #2
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3304      	adds	r3, #4
 800670c:	4619      	mov	r1, r3
 800670e:	4610      	mov	r0, r2
 8006710:	f000 ff0a 	bl	8007528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
	...

08006794 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d109      	bne.n	80067b8 <HAL_TIM_PWM_Start+0x24>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	bf14      	ite	ne
 80067b0:	2301      	movne	r3, #1
 80067b2:	2300      	moveq	r3, #0
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	e03c      	b.n	8006832 <HAL_TIM_PWM_Start+0x9e>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2b04      	cmp	r3, #4
 80067bc:	d109      	bne.n	80067d2 <HAL_TIM_PWM_Start+0x3e>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	bf14      	ite	ne
 80067ca:	2301      	movne	r3, #1
 80067cc:	2300      	moveq	r3, #0
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	e02f      	b.n	8006832 <HAL_TIM_PWM_Start+0x9e>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b08      	cmp	r3, #8
 80067d6:	d109      	bne.n	80067ec <HAL_TIM_PWM_Start+0x58>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	bf14      	ite	ne
 80067e4:	2301      	movne	r3, #1
 80067e6:	2300      	moveq	r3, #0
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	e022      	b.n	8006832 <HAL_TIM_PWM_Start+0x9e>
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2b0c      	cmp	r3, #12
 80067f0:	d109      	bne.n	8006806 <HAL_TIM_PWM_Start+0x72>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	bf14      	ite	ne
 80067fe:	2301      	movne	r3, #1
 8006800:	2300      	moveq	r3, #0
 8006802:	b2db      	uxtb	r3, r3
 8006804:	e015      	b.n	8006832 <HAL_TIM_PWM_Start+0x9e>
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2b10      	cmp	r3, #16
 800680a:	d109      	bne.n	8006820 <HAL_TIM_PWM_Start+0x8c>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b01      	cmp	r3, #1
 8006816:	bf14      	ite	ne
 8006818:	2301      	movne	r3, #1
 800681a:	2300      	moveq	r3, #0
 800681c:	b2db      	uxtb	r3, r3
 800681e:	e008      	b.n	8006832 <HAL_TIM_PWM_Start+0x9e>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b01      	cmp	r3, #1
 800682a:	bf14      	ite	ne
 800682c:	2301      	movne	r3, #1
 800682e:	2300      	moveq	r3, #0
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e0a6      	b.n	8006988 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d104      	bne.n	800684a <HAL_TIM_PWM_Start+0xb6>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006848:	e023      	b.n	8006892 <HAL_TIM_PWM_Start+0xfe>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b04      	cmp	r3, #4
 800684e:	d104      	bne.n	800685a <HAL_TIM_PWM_Start+0xc6>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2202      	movs	r2, #2
 8006854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006858:	e01b      	b.n	8006892 <HAL_TIM_PWM_Start+0xfe>
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b08      	cmp	r3, #8
 800685e:	d104      	bne.n	800686a <HAL_TIM_PWM_Start+0xd6>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006868:	e013      	b.n	8006892 <HAL_TIM_PWM_Start+0xfe>
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b0c      	cmp	r3, #12
 800686e:	d104      	bne.n	800687a <HAL_TIM_PWM_Start+0xe6>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006878:	e00b      	b.n	8006892 <HAL_TIM_PWM_Start+0xfe>
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b10      	cmp	r3, #16
 800687e:	d104      	bne.n	800688a <HAL_TIM_PWM_Start+0xf6>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006888:	e003      	b.n	8006892 <HAL_TIM_PWM_Start+0xfe>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2202      	movs	r2, #2
 800688e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2201      	movs	r2, #1
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	4618      	mov	r0, r3
 800689c:	f001 fab2 	bl	8007e04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a3a      	ldr	r2, [pc, #232]	; (8006990 <HAL_TIM_PWM_Start+0x1fc>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d018      	beq.n	80068dc <HAL_TIM_PWM_Start+0x148>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a39      	ldr	r2, [pc, #228]	; (8006994 <HAL_TIM_PWM_Start+0x200>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d013      	beq.n	80068dc <HAL_TIM_PWM_Start+0x148>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a37      	ldr	r2, [pc, #220]	; (8006998 <HAL_TIM_PWM_Start+0x204>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d00e      	beq.n	80068dc <HAL_TIM_PWM_Start+0x148>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a36      	ldr	r2, [pc, #216]	; (800699c <HAL_TIM_PWM_Start+0x208>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d009      	beq.n	80068dc <HAL_TIM_PWM_Start+0x148>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a34      	ldr	r2, [pc, #208]	; (80069a0 <HAL_TIM_PWM_Start+0x20c>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d004      	beq.n	80068dc <HAL_TIM_PWM_Start+0x148>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a33      	ldr	r2, [pc, #204]	; (80069a4 <HAL_TIM_PWM_Start+0x210>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d101      	bne.n	80068e0 <HAL_TIM_PWM_Start+0x14c>
 80068dc:	2301      	movs	r3, #1
 80068de:	e000      	b.n	80068e2 <HAL_TIM_PWM_Start+0x14e>
 80068e0:	2300      	movs	r3, #0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d007      	beq.n	80068f6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a25      	ldr	r2, [pc, #148]	; (8006990 <HAL_TIM_PWM_Start+0x1fc>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d022      	beq.n	8006946 <HAL_TIM_PWM_Start+0x1b2>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006908:	d01d      	beq.n	8006946 <HAL_TIM_PWM_Start+0x1b2>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a26      	ldr	r2, [pc, #152]	; (80069a8 <HAL_TIM_PWM_Start+0x214>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d018      	beq.n	8006946 <HAL_TIM_PWM_Start+0x1b2>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a24      	ldr	r2, [pc, #144]	; (80069ac <HAL_TIM_PWM_Start+0x218>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d013      	beq.n	8006946 <HAL_TIM_PWM_Start+0x1b2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a23      	ldr	r2, [pc, #140]	; (80069b0 <HAL_TIM_PWM_Start+0x21c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00e      	beq.n	8006946 <HAL_TIM_PWM_Start+0x1b2>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a19      	ldr	r2, [pc, #100]	; (8006994 <HAL_TIM_PWM_Start+0x200>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d009      	beq.n	8006946 <HAL_TIM_PWM_Start+0x1b2>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a18      	ldr	r2, [pc, #96]	; (8006998 <HAL_TIM_PWM_Start+0x204>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d004      	beq.n	8006946 <HAL_TIM_PWM_Start+0x1b2>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a18      	ldr	r2, [pc, #96]	; (80069a4 <HAL_TIM_PWM_Start+0x210>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d115      	bne.n	8006972 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689a      	ldr	r2, [r3, #8]
 800694c:	4b19      	ldr	r3, [pc, #100]	; (80069b4 <HAL_TIM_PWM_Start+0x220>)
 800694e:	4013      	ands	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2b06      	cmp	r3, #6
 8006956:	d015      	beq.n	8006984 <HAL_TIM_PWM_Start+0x1f0>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800695e:	d011      	beq.n	8006984 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f042 0201 	orr.w	r2, r2, #1
 800696e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006970:	e008      	b.n	8006984 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f042 0201 	orr.w	r2, r2, #1
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	e000      	b.n	8006986 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006984:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	40012c00 	.word	0x40012c00
 8006994:	40013400 	.word	0x40013400
 8006998:	40014000 	.word	0x40014000
 800699c:	40014400 	.word	0x40014400
 80069a0:	40014800 	.word	0x40014800
 80069a4:	40015000 	.word	0x40015000
 80069a8:	40000400 	.word	0x40000400
 80069ac:	40000800 	.word	0x40000800
 80069b0:	40000c00 	.word	0x40000c00
 80069b4:	00010007 	.word	0x00010007

080069b8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2200      	movs	r2, #0
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f001 fa1a 	bl	8007e04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a40      	ldr	r2, [pc, #256]	; (8006ad8 <HAL_TIM_PWM_Stop+0x120>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d018      	beq.n	8006a0c <HAL_TIM_PWM_Stop+0x54>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a3f      	ldr	r2, [pc, #252]	; (8006adc <HAL_TIM_PWM_Stop+0x124>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d013      	beq.n	8006a0c <HAL_TIM_PWM_Stop+0x54>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a3d      	ldr	r2, [pc, #244]	; (8006ae0 <HAL_TIM_PWM_Stop+0x128>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d00e      	beq.n	8006a0c <HAL_TIM_PWM_Stop+0x54>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a3c      	ldr	r2, [pc, #240]	; (8006ae4 <HAL_TIM_PWM_Stop+0x12c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d009      	beq.n	8006a0c <HAL_TIM_PWM_Stop+0x54>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a3a      	ldr	r2, [pc, #232]	; (8006ae8 <HAL_TIM_PWM_Stop+0x130>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d004      	beq.n	8006a0c <HAL_TIM_PWM_Stop+0x54>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a39      	ldr	r2, [pc, #228]	; (8006aec <HAL_TIM_PWM_Stop+0x134>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d101      	bne.n	8006a10 <HAL_TIM_PWM_Stop+0x58>
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e000      	b.n	8006a12 <HAL_TIM_PWM_Stop+0x5a>
 8006a10:	2300      	movs	r3, #0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d017      	beq.n	8006a46 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6a1a      	ldr	r2, [r3, #32]
 8006a1c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a20:	4013      	ands	r3, r2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10f      	bne.n	8006a46 <HAL_TIM_PWM_Stop+0x8e>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6a1a      	ldr	r2, [r3, #32]
 8006a2c:	f244 4344 	movw	r3, #17476	; 0x4444
 8006a30:	4013      	ands	r3, r2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d107      	bne.n	8006a46 <HAL_TIM_PWM_Stop+0x8e>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	6a1a      	ldr	r2, [r3, #32]
 8006a4c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a50:	4013      	ands	r3, r2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10f      	bne.n	8006a76 <HAL_TIM_PWM_Stop+0xbe>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6a1a      	ldr	r2, [r3, #32]
 8006a5c:	f244 4344 	movw	r3, #17476	; 0x4444
 8006a60:	4013      	ands	r3, r2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d107      	bne.n	8006a76 <HAL_TIM_PWM_Stop+0xbe>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 0201 	bic.w	r2, r2, #1
 8006a74:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d104      	bne.n	8006a86 <HAL_TIM_PWM_Stop+0xce>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a84:	e023      	b.n	8006ace <HAL_TIM_PWM_Stop+0x116>
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2b04      	cmp	r3, #4
 8006a8a:	d104      	bne.n	8006a96 <HAL_TIM_PWM_Stop+0xde>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a94:	e01b      	b.n	8006ace <HAL_TIM_PWM_Stop+0x116>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d104      	bne.n	8006aa6 <HAL_TIM_PWM_Stop+0xee>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006aa4:	e013      	b.n	8006ace <HAL_TIM_PWM_Stop+0x116>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	2b0c      	cmp	r3, #12
 8006aaa:	d104      	bne.n	8006ab6 <HAL_TIM_PWM_Stop+0xfe>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ab4:	e00b      	b.n	8006ace <HAL_TIM_PWM_Stop+0x116>
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2b10      	cmp	r3, #16
 8006aba:	d104      	bne.n	8006ac6 <HAL_TIM_PWM_Stop+0x10e>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ac4:	e003      	b.n	8006ace <HAL_TIM_PWM_Stop+0x116>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	40012c00 	.word	0x40012c00
 8006adc:	40013400 	.word	0x40013400
 8006ae0:	40014000 	.word	0x40014000
 8006ae4:	40014400 	.word	0x40014400
 8006ae8:	40014800 	.word	0x40014800
 8006aec:	40015000 	.word	0x40015000

08006af0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e097      	b.n	8006c34 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d106      	bne.n	8006b1e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7fb f933 	bl	8001d84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2202      	movs	r2, #2
 8006b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	6812      	ldr	r2, [r2, #0]
 8006b30:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006b34:	f023 0307 	bic.w	r3, r3, #7
 8006b38:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	3304      	adds	r3, #4
 8006b42:	4619      	mov	r1, r3
 8006b44:	4610      	mov	r0, r2
 8006b46:	f000 fcef 	bl	8007528 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b72:	f023 0303 	bic.w	r3, r3, #3
 8006b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	021b      	lsls	r3, r3, #8
 8006b82:	4313      	orrs	r3, r2
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006b90:	f023 030c 	bic.w	r3, r3, #12
 8006b94:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ba0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	68da      	ldr	r2, [r3, #12]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	69db      	ldr	r3, [r3, #28]
 8006baa:	021b      	lsls	r3, r3, #8
 8006bac:	4313      	orrs	r3, r2
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	011a      	lsls	r2, r3, #4
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	031b      	lsls	r3, r3, #12
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006bce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006bd6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	011b      	lsls	r3, r3, #4
 8006be2:	4313      	orrs	r3, r2
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c4c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c54:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c5c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c64:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d110      	bne.n	8006c8e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d102      	bne.n	8006c78 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c72:	7b7b      	ldrb	r3, [r7, #13]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d001      	beq.n	8006c7c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e089      	b.n	8006d90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2202      	movs	r2, #2
 8006c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c8c:	e031      	b.n	8006cf2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b04      	cmp	r3, #4
 8006c92:	d110      	bne.n	8006cb6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c94:	7bbb      	ldrb	r3, [r7, #14]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d102      	bne.n	8006ca0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c9a:	7b3b      	ldrb	r3, [r7, #12]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d001      	beq.n	8006ca4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e075      	b.n	8006d90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cb4:	e01d      	b.n	8006cf2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cb6:	7bfb      	ldrb	r3, [r7, #15]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d108      	bne.n	8006cce <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cbc:	7bbb      	ldrb	r3, [r7, #14]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d105      	bne.n	8006cce <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cc2:	7b7b      	ldrb	r3, [r7, #13]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d102      	bne.n	8006cce <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cc8:	7b3b      	ldrb	r3, [r7, #12]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d001      	beq.n	8006cd2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e05e      	b.n	8006d90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2202      	movs	r2, #2
 8006cde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2202      	movs	r2, #2
 8006cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <HAL_TIM_Encoder_Start_IT+0xc4>
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2b04      	cmp	r3, #4
 8006cfc:	d010      	beq.n	8006d20 <HAL_TIM_Encoder_Start_IT+0xe4>
 8006cfe:	e01f      	b.n	8006d40 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2201      	movs	r2, #1
 8006d06:	2100      	movs	r1, #0
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f001 f87b 	bl	8007e04 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68da      	ldr	r2, [r3, #12]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f042 0202 	orr.w	r2, r2, #2
 8006d1c:	60da      	str	r2, [r3, #12]
      break;
 8006d1e:	e02e      	b.n	8006d7e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2201      	movs	r2, #1
 8006d26:	2104      	movs	r1, #4
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f001 f86b 	bl	8007e04 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68da      	ldr	r2, [r3, #12]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f042 0204 	orr.w	r2, r2, #4
 8006d3c:	60da      	str	r2, [r3, #12]
      break;
 8006d3e:	e01e      	b.n	8006d7e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2201      	movs	r2, #1
 8006d46:	2100      	movs	r1, #0
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f001 f85b 	bl	8007e04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2201      	movs	r2, #1
 8006d54:	2104      	movs	r1, #4
 8006d56:	4618      	mov	r0, r3
 8006d58:	f001 f854 	bl	8007e04 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0202 	orr.w	r2, r2, #2
 8006d6a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0204 	orr.w	r2, r2, #4
 8006d7a:	60da      	str	r2, [r3, #12]
      break;
 8006d7c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f042 0201 	orr.w	r2, r2, #1
 8006d8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d122      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f003 0302 	and.w	r3, r3, #2
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d11b      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f06f 0202 	mvn.w	r2, #2
 8006dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	f003 0303 	and.w	r3, r3, #3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d003      	beq.n	8006de2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7fb faf2 	bl	80023c4 <HAL_TIM_IC_CaptureCallback>
 8006de0:	e005      	b.n	8006dee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fb82 	bl	80074ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fb89 	bl	8007500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	f003 0304 	and.w	r3, r3, #4
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	d122      	bne.n	8006e48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f003 0304 	and.w	r3, r3, #4
 8006e0c:	2b04      	cmp	r3, #4
 8006e0e:	d11b      	bne.n	8006e48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f06f 0204 	mvn.w	r2, #4
 8006e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d003      	beq.n	8006e36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7fb fac8 	bl	80023c4 <HAL_TIM_IC_CaptureCallback>
 8006e34:	e005      	b.n	8006e42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fb58 	bl	80074ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fb5f 	bl	8007500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	f003 0308 	and.w	r3, r3, #8
 8006e52:	2b08      	cmp	r3, #8
 8006e54:	d122      	bne.n	8006e9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	f003 0308 	and.w	r3, r3, #8
 8006e60:	2b08      	cmp	r3, #8
 8006e62:	d11b      	bne.n	8006e9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f06f 0208 	mvn.w	r2, #8
 8006e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2204      	movs	r2, #4
 8006e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	f003 0303 	and.w	r3, r3, #3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d003      	beq.n	8006e8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7fb fa9e 	bl	80023c4 <HAL_TIM_IC_CaptureCallback>
 8006e88:	e005      	b.n	8006e96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fb2e 	bl	80074ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fb35 	bl	8007500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	f003 0310 	and.w	r3, r3, #16
 8006ea6:	2b10      	cmp	r3, #16
 8006ea8:	d122      	bne.n	8006ef0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	f003 0310 	and.w	r3, r3, #16
 8006eb4:	2b10      	cmp	r3, #16
 8006eb6:	d11b      	bne.n	8006ef0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f06f 0210 	mvn.w	r2, #16
 8006ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2208      	movs	r2, #8
 8006ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7fb fa74 	bl	80023c4 <HAL_TIM_IC_CaptureCallback>
 8006edc:	e005      	b.n	8006eea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fb04 	bl	80074ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 fb0b 	bl	8007500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d10e      	bne.n	8006f1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d107      	bne.n	8006f1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f06f 0201 	mvn.w	r2, #1
 8006f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7fa fb7c 	bl	8001614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f26:	2b80      	cmp	r3, #128	; 0x80
 8006f28:	d10e      	bne.n	8006f48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f34:	2b80      	cmp	r3, #128	; 0x80
 8006f36:	d107      	bne.n	8006f48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f001 fa09 	bl	800835a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f56:	d10e      	bne.n	8006f76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f62:	2b80      	cmp	r3, #128	; 0x80
 8006f64:	d107      	bne.n	8006f76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f001 f9fc 	bl	800836e <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f80:	2b40      	cmp	r3, #64	; 0x40
 8006f82:	d10e      	bne.n	8006fa2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f8e:	2b40      	cmp	r3, #64	; 0x40
 8006f90:	d107      	bne.n	8006fa2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fab9 	bl	8007514 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	f003 0320 	and.w	r3, r3, #32
 8006fac:	2b20      	cmp	r3, #32
 8006fae:	d10e      	bne.n	8006fce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	f003 0320 	and.w	r3, r3, #32
 8006fba:	2b20      	cmp	r3, #32
 8006fbc:	d107      	bne.n	8006fce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f06f 0220 	mvn.w	r2, #32
 8006fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 f9bc 	bl	8008346 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fdc:	d10f      	bne.n	8006ffe <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fe8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fec:	d107      	bne.n	8006ffe <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 f9c2 	bl	8008382 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007008:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800700c:	d10f      	bne.n	800702e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007018:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800701c:	d107      	bne.n	800702e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f001 f9b4 	bl	8008396 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007038:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800703c:	d10f      	bne.n	800705e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007048:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800704c:	d107      	bne.n	800705e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f001 f9a6 	bl	80083aa <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007068:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800706c:	d10f      	bne.n	800708e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007078:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800707c:	d107      	bne.n	800708e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 f998 	bl	80083be <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800708e:	bf00      	nop
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
	...

08007098 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d101      	bne.n	80070b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070b2:	2302      	movs	r3, #2
 80070b4:	e0ff      	b.n	80072b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2b14      	cmp	r3, #20
 80070c2:	f200 80f0 	bhi.w	80072a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80070c6:	a201      	add	r2, pc, #4	; (adr r2, 80070cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80070c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070cc:	08007121 	.word	0x08007121
 80070d0:	080072a7 	.word	0x080072a7
 80070d4:	080072a7 	.word	0x080072a7
 80070d8:	080072a7 	.word	0x080072a7
 80070dc:	08007161 	.word	0x08007161
 80070e0:	080072a7 	.word	0x080072a7
 80070e4:	080072a7 	.word	0x080072a7
 80070e8:	080072a7 	.word	0x080072a7
 80070ec:	080071a3 	.word	0x080071a3
 80070f0:	080072a7 	.word	0x080072a7
 80070f4:	080072a7 	.word	0x080072a7
 80070f8:	080072a7 	.word	0x080072a7
 80070fc:	080071e3 	.word	0x080071e3
 8007100:	080072a7 	.word	0x080072a7
 8007104:	080072a7 	.word	0x080072a7
 8007108:	080072a7 	.word	0x080072a7
 800710c:	08007225 	.word	0x08007225
 8007110:	080072a7 	.word	0x080072a7
 8007114:	080072a7 	.word	0x080072a7
 8007118:	080072a7 	.word	0x080072a7
 800711c:	08007265 	.word	0x08007265
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68b9      	ldr	r1, [r7, #8]
 8007126:	4618      	mov	r0, r3
 8007128:	f000 faa6 	bl	8007678 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	699a      	ldr	r2, [r3, #24]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f042 0208 	orr.w	r2, r2, #8
 800713a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	699a      	ldr	r2, [r3, #24]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f022 0204 	bic.w	r2, r2, #4
 800714a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6999      	ldr	r1, [r3, #24]
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	691a      	ldr	r2, [r3, #16]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	430a      	orrs	r2, r1
 800715c:	619a      	str	r2, [r3, #24]
      break;
 800715e:	e0a5      	b.n	80072ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68b9      	ldr	r1, [r7, #8]
 8007166:	4618      	mov	r0, r3
 8007168:	f000 fb20 	bl	80077ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	699a      	ldr	r2, [r3, #24]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800717a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	699a      	ldr	r2, [r3, #24]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800718a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6999      	ldr	r1, [r3, #24]
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	021a      	lsls	r2, r3, #8
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	430a      	orrs	r2, r1
 800719e:	619a      	str	r2, [r3, #24]
      break;
 80071a0:	e084      	b.n	80072ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68b9      	ldr	r1, [r7, #8]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f000 fb93 	bl	80078d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	69da      	ldr	r2, [r3, #28]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f042 0208 	orr.w	r2, r2, #8
 80071bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	69da      	ldr	r2, [r3, #28]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 0204 	bic.w	r2, r2, #4
 80071cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	69d9      	ldr	r1, [r3, #28]
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	691a      	ldr	r2, [r3, #16]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	430a      	orrs	r2, r1
 80071de:	61da      	str	r2, [r3, #28]
      break;
 80071e0:	e064      	b.n	80072ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68b9      	ldr	r1, [r7, #8]
 80071e8:	4618      	mov	r0, r3
 80071ea:	f000 fc05 	bl	80079f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	69da      	ldr	r2, [r3, #28]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	69da      	ldr	r2, [r3, #28]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800720c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69d9      	ldr	r1, [r3, #28]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	021a      	lsls	r2, r3, #8
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	61da      	str	r2, [r3, #28]
      break;
 8007222:	e043      	b.n	80072ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68b9      	ldr	r1, [r7, #8]
 800722a:	4618      	mov	r0, r3
 800722c:	f000 fc78 	bl	8007b20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f042 0208 	orr.w	r2, r2, #8
 800723e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f022 0204 	bic.w	r2, r2, #4
 800724e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	691a      	ldr	r2, [r3, #16]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	430a      	orrs	r2, r1
 8007260:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007262:	e023      	b.n	80072ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68b9      	ldr	r1, [r7, #8]
 800726a:	4618      	mov	r0, r3
 800726c:	f000 fcc2 	bl	8007bf4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800727e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800728e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	021a      	lsls	r2, r3, #8
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80072a4:	e002      	b.n	80072ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	75fb      	strb	r3, [r7, #23]
      break;
 80072aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3718      	adds	r7, #24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop

080072c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d101      	bne.n	80072dc <HAL_TIM_ConfigClockSource+0x1c>
 80072d8:	2302      	movs	r3, #2
 80072da:	e0f6      	b.n	80074ca <HAL_TIM_ConfigClockSource+0x20a>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2202      	movs	r2, #2
 80072e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80072fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007306:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a6f      	ldr	r2, [pc, #444]	; (80074d4 <HAL_TIM_ConfigClockSource+0x214>)
 8007316:	4293      	cmp	r3, r2
 8007318:	f000 80c1 	beq.w	800749e <HAL_TIM_ConfigClockSource+0x1de>
 800731c:	4a6d      	ldr	r2, [pc, #436]	; (80074d4 <HAL_TIM_ConfigClockSource+0x214>)
 800731e:	4293      	cmp	r3, r2
 8007320:	f200 80c6 	bhi.w	80074b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007324:	4a6c      	ldr	r2, [pc, #432]	; (80074d8 <HAL_TIM_ConfigClockSource+0x218>)
 8007326:	4293      	cmp	r3, r2
 8007328:	f000 80b9 	beq.w	800749e <HAL_TIM_ConfigClockSource+0x1de>
 800732c:	4a6a      	ldr	r2, [pc, #424]	; (80074d8 <HAL_TIM_ConfigClockSource+0x218>)
 800732e:	4293      	cmp	r3, r2
 8007330:	f200 80be 	bhi.w	80074b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007334:	4a69      	ldr	r2, [pc, #420]	; (80074dc <HAL_TIM_ConfigClockSource+0x21c>)
 8007336:	4293      	cmp	r3, r2
 8007338:	f000 80b1 	beq.w	800749e <HAL_TIM_ConfigClockSource+0x1de>
 800733c:	4a67      	ldr	r2, [pc, #412]	; (80074dc <HAL_TIM_ConfigClockSource+0x21c>)
 800733e:	4293      	cmp	r3, r2
 8007340:	f200 80b6 	bhi.w	80074b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007344:	4a66      	ldr	r2, [pc, #408]	; (80074e0 <HAL_TIM_ConfigClockSource+0x220>)
 8007346:	4293      	cmp	r3, r2
 8007348:	f000 80a9 	beq.w	800749e <HAL_TIM_ConfigClockSource+0x1de>
 800734c:	4a64      	ldr	r2, [pc, #400]	; (80074e0 <HAL_TIM_ConfigClockSource+0x220>)
 800734e:	4293      	cmp	r3, r2
 8007350:	f200 80ae 	bhi.w	80074b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007354:	4a63      	ldr	r2, [pc, #396]	; (80074e4 <HAL_TIM_ConfigClockSource+0x224>)
 8007356:	4293      	cmp	r3, r2
 8007358:	f000 80a1 	beq.w	800749e <HAL_TIM_ConfigClockSource+0x1de>
 800735c:	4a61      	ldr	r2, [pc, #388]	; (80074e4 <HAL_TIM_ConfigClockSource+0x224>)
 800735e:	4293      	cmp	r3, r2
 8007360:	f200 80a6 	bhi.w	80074b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007364:	4a60      	ldr	r2, [pc, #384]	; (80074e8 <HAL_TIM_ConfigClockSource+0x228>)
 8007366:	4293      	cmp	r3, r2
 8007368:	f000 8099 	beq.w	800749e <HAL_TIM_ConfigClockSource+0x1de>
 800736c:	4a5e      	ldr	r2, [pc, #376]	; (80074e8 <HAL_TIM_ConfigClockSource+0x228>)
 800736e:	4293      	cmp	r3, r2
 8007370:	f200 809e 	bhi.w	80074b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007374:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007378:	f000 8091 	beq.w	800749e <HAL_TIM_ConfigClockSource+0x1de>
 800737c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007380:	f200 8096 	bhi.w	80074b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007384:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007388:	f000 8089 	beq.w	800749e <HAL_TIM_ConfigClockSource+0x1de>
 800738c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007390:	f200 808e 	bhi.w	80074b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007398:	d03e      	beq.n	8007418 <HAL_TIM_ConfigClockSource+0x158>
 800739a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800739e:	f200 8087 	bhi.w	80074b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80073a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073a6:	f000 8086 	beq.w	80074b6 <HAL_TIM_ConfigClockSource+0x1f6>
 80073aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ae:	d87f      	bhi.n	80074b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80073b0:	2b70      	cmp	r3, #112	; 0x70
 80073b2:	d01a      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0x12a>
 80073b4:	2b70      	cmp	r3, #112	; 0x70
 80073b6:	d87b      	bhi.n	80074b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80073b8:	2b60      	cmp	r3, #96	; 0x60
 80073ba:	d050      	beq.n	800745e <HAL_TIM_ConfigClockSource+0x19e>
 80073bc:	2b60      	cmp	r3, #96	; 0x60
 80073be:	d877      	bhi.n	80074b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80073c0:	2b50      	cmp	r3, #80	; 0x50
 80073c2:	d03c      	beq.n	800743e <HAL_TIM_ConfigClockSource+0x17e>
 80073c4:	2b50      	cmp	r3, #80	; 0x50
 80073c6:	d873      	bhi.n	80074b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80073c8:	2b40      	cmp	r3, #64	; 0x40
 80073ca:	d058      	beq.n	800747e <HAL_TIM_ConfigClockSource+0x1be>
 80073cc:	2b40      	cmp	r3, #64	; 0x40
 80073ce:	d86f      	bhi.n	80074b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80073d0:	2b30      	cmp	r3, #48	; 0x30
 80073d2:	d064      	beq.n	800749e <HAL_TIM_ConfigClockSource+0x1de>
 80073d4:	2b30      	cmp	r3, #48	; 0x30
 80073d6:	d86b      	bhi.n	80074b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80073d8:	2b20      	cmp	r3, #32
 80073da:	d060      	beq.n	800749e <HAL_TIM_ConfigClockSource+0x1de>
 80073dc:	2b20      	cmp	r3, #32
 80073de:	d867      	bhi.n	80074b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d05c      	beq.n	800749e <HAL_TIM_ConfigClockSource+0x1de>
 80073e4:	2b10      	cmp	r3, #16
 80073e6:	d05a      	beq.n	800749e <HAL_TIM_ConfigClockSource+0x1de>
 80073e8:	e062      	b.n	80074b0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6818      	ldr	r0, [r3, #0]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	6899      	ldr	r1, [r3, #8]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f000 fce3 	bl	8007dc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800740c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	609a      	str	r2, [r3, #8]
      break;
 8007416:	e04f      	b.n	80074b8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6818      	ldr	r0, [r3, #0]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	6899      	ldr	r1, [r3, #8]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f000 fccc 	bl	8007dc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	689a      	ldr	r2, [r3, #8]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800743a:	609a      	str	r2, [r3, #8]
      break;
 800743c:	e03c      	b.n	80074b8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6818      	ldr	r0, [r3, #0]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	6859      	ldr	r1, [r3, #4]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	461a      	mov	r2, r3
 800744c:	f000 fc3e 	bl	8007ccc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2150      	movs	r1, #80	; 0x50
 8007456:	4618      	mov	r0, r3
 8007458:	f000 fc97 	bl	8007d8a <TIM_ITRx_SetConfig>
      break;
 800745c:	e02c      	b.n	80074b8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6818      	ldr	r0, [r3, #0]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	6859      	ldr	r1, [r3, #4]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	461a      	mov	r2, r3
 800746c:	f000 fc5d 	bl	8007d2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2160      	movs	r1, #96	; 0x60
 8007476:	4618      	mov	r0, r3
 8007478:	f000 fc87 	bl	8007d8a <TIM_ITRx_SetConfig>
      break;
 800747c:	e01c      	b.n	80074b8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6818      	ldr	r0, [r3, #0]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	6859      	ldr	r1, [r3, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	461a      	mov	r2, r3
 800748c:	f000 fc1e 	bl	8007ccc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2140      	movs	r1, #64	; 0x40
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fc77 	bl	8007d8a <TIM_ITRx_SetConfig>
      break;
 800749c:	e00c      	b.n	80074b8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4619      	mov	r1, r3
 80074a8:	4610      	mov	r0, r2
 80074aa:	f000 fc6e 	bl	8007d8a <TIM_ITRx_SetConfig>
      break;
 80074ae:	e003      	b.n	80074b8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	73fb      	strb	r3, [r7, #15]
      break;
 80074b4:	e000      	b.n	80074b8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80074b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	00100070 	.word	0x00100070
 80074d8:	00100060 	.word	0x00100060
 80074dc:	00100050 	.word	0x00100050
 80074e0:	00100040 	.word	0x00100040
 80074e4:	00100030 	.word	0x00100030
 80074e8:	00100020 	.word	0x00100020

080074ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a46      	ldr	r2, [pc, #280]	; (8007654 <TIM_Base_SetConfig+0x12c>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d017      	beq.n	8007570 <TIM_Base_SetConfig+0x48>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007546:	d013      	beq.n	8007570 <TIM_Base_SetConfig+0x48>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a43      	ldr	r2, [pc, #268]	; (8007658 <TIM_Base_SetConfig+0x130>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d00f      	beq.n	8007570 <TIM_Base_SetConfig+0x48>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a42      	ldr	r2, [pc, #264]	; (800765c <TIM_Base_SetConfig+0x134>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d00b      	beq.n	8007570 <TIM_Base_SetConfig+0x48>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a41      	ldr	r2, [pc, #260]	; (8007660 <TIM_Base_SetConfig+0x138>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d007      	beq.n	8007570 <TIM_Base_SetConfig+0x48>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a40      	ldr	r2, [pc, #256]	; (8007664 <TIM_Base_SetConfig+0x13c>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d003      	beq.n	8007570 <TIM_Base_SetConfig+0x48>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a3f      	ldr	r2, [pc, #252]	; (8007668 <TIM_Base_SetConfig+0x140>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d108      	bne.n	8007582 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	4313      	orrs	r3, r2
 8007580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a33      	ldr	r2, [pc, #204]	; (8007654 <TIM_Base_SetConfig+0x12c>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d023      	beq.n	80075d2 <TIM_Base_SetConfig+0xaa>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007590:	d01f      	beq.n	80075d2 <TIM_Base_SetConfig+0xaa>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a30      	ldr	r2, [pc, #192]	; (8007658 <TIM_Base_SetConfig+0x130>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d01b      	beq.n	80075d2 <TIM_Base_SetConfig+0xaa>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a2f      	ldr	r2, [pc, #188]	; (800765c <TIM_Base_SetConfig+0x134>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d017      	beq.n	80075d2 <TIM_Base_SetConfig+0xaa>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a2e      	ldr	r2, [pc, #184]	; (8007660 <TIM_Base_SetConfig+0x138>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d013      	beq.n	80075d2 <TIM_Base_SetConfig+0xaa>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a2d      	ldr	r2, [pc, #180]	; (8007664 <TIM_Base_SetConfig+0x13c>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d00f      	beq.n	80075d2 <TIM_Base_SetConfig+0xaa>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a2d      	ldr	r2, [pc, #180]	; (800766c <TIM_Base_SetConfig+0x144>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d00b      	beq.n	80075d2 <TIM_Base_SetConfig+0xaa>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a2c      	ldr	r2, [pc, #176]	; (8007670 <TIM_Base_SetConfig+0x148>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d007      	beq.n	80075d2 <TIM_Base_SetConfig+0xaa>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a2b      	ldr	r2, [pc, #172]	; (8007674 <TIM_Base_SetConfig+0x14c>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d003      	beq.n	80075d2 <TIM_Base_SetConfig+0xaa>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a26      	ldr	r2, [pc, #152]	; (8007668 <TIM_Base_SetConfig+0x140>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d108      	bne.n	80075e4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	689a      	ldr	r2, [r3, #8]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a12      	ldr	r2, [pc, #72]	; (8007654 <TIM_Base_SetConfig+0x12c>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d013      	beq.n	8007638 <TIM_Base_SetConfig+0x110>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a14      	ldr	r2, [pc, #80]	; (8007664 <TIM_Base_SetConfig+0x13c>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d00f      	beq.n	8007638 <TIM_Base_SetConfig+0x110>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a14      	ldr	r2, [pc, #80]	; (800766c <TIM_Base_SetConfig+0x144>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d00b      	beq.n	8007638 <TIM_Base_SetConfig+0x110>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a13      	ldr	r2, [pc, #76]	; (8007670 <TIM_Base_SetConfig+0x148>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d007      	beq.n	8007638 <TIM_Base_SetConfig+0x110>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a12      	ldr	r2, [pc, #72]	; (8007674 <TIM_Base_SetConfig+0x14c>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d003      	beq.n	8007638 <TIM_Base_SetConfig+0x110>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a0d      	ldr	r2, [pc, #52]	; (8007668 <TIM_Base_SetConfig+0x140>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d103      	bne.n	8007640 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	691a      	ldr	r2, [r3, #16]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	615a      	str	r2, [r3, #20]
}
 8007646:	bf00      	nop
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	40012c00 	.word	0x40012c00
 8007658:	40000400 	.word	0x40000400
 800765c:	40000800 	.word	0x40000800
 8007660:	40000c00 	.word	0x40000c00
 8007664:	40013400 	.word	0x40013400
 8007668:	40015000 	.word	0x40015000
 800766c:	40014000 	.word	0x40014000
 8007670:	40014400 	.word	0x40014400
 8007674:	40014800 	.word	0x40014800

08007678 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007678:	b480      	push	{r7}
 800767a:	b087      	sub	sp, #28
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	f023 0201 	bic.w	r2, r3, #1
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f023 0303 	bic.w	r3, r3, #3
 80076b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f023 0302 	bic.w	r3, r3, #2
 80076c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a30      	ldr	r2, [pc, #192]	; (8007794 <TIM_OC1_SetConfig+0x11c>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d013      	beq.n	8007700 <TIM_OC1_SetConfig+0x88>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a2f      	ldr	r2, [pc, #188]	; (8007798 <TIM_OC1_SetConfig+0x120>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d00f      	beq.n	8007700 <TIM_OC1_SetConfig+0x88>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a2e      	ldr	r2, [pc, #184]	; (800779c <TIM_OC1_SetConfig+0x124>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d00b      	beq.n	8007700 <TIM_OC1_SetConfig+0x88>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a2d      	ldr	r2, [pc, #180]	; (80077a0 <TIM_OC1_SetConfig+0x128>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d007      	beq.n	8007700 <TIM_OC1_SetConfig+0x88>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a2c      	ldr	r2, [pc, #176]	; (80077a4 <TIM_OC1_SetConfig+0x12c>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d003      	beq.n	8007700 <TIM_OC1_SetConfig+0x88>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a2b      	ldr	r2, [pc, #172]	; (80077a8 <TIM_OC1_SetConfig+0x130>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d10c      	bne.n	800771a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	f023 0308 	bic.w	r3, r3, #8
 8007706:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	4313      	orrs	r3, r2
 8007710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	f023 0304 	bic.w	r3, r3, #4
 8007718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a1d      	ldr	r2, [pc, #116]	; (8007794 <TIM_OC1_SetConfig+0x11c>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d013      	beq.n	800774a <TIM_OC1_SetConfig+0xd2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a1c      	ldr	r2, [pc, #112]	; (8007798 <TIM_OC1_SetConfig+0x120>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d00f      	beq.n	800774a <TIM_OC1_SetConfig+0xd2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a1b      	ldr	r2, [pc, #108]	; (800779c <TIM_OC1_SetConfig+0x124>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d00b      	beq.n	800774a <TIM_OC1_SetConfig+0xd2>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a1a      	ldr	r2, [pc, #104]	; (80077a0 <TIM_OC1_SetConfig+0x128>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d007      	beq.n	800774a <TIM_OC1_SetConfig+0xd2>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a19      	ldr	r2, [pc, #100]	; (80077a4 <TIM_OC1_SetConfig+0x12c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d003      	beq.n	800774a <TIM_OC1_SetConfig+0xd2>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a18      	ldr	r2, [pc, #96]	; (80077a8 <TIM_OC1_SetConfig+0x130>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d111      	bne.n	800776e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	4313      	orrs	r3, r2
 8007762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	693a      	ldr	r2, [r7, #16]
 8007772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	621a      	str	r2, [r3, #32]
}
 8007788:	bf00      	nop
 800778a:	371c      	adds	r7, #28
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	40012c00 	.word	0x40012c00
 8007798:	40013400 	.word	0x40013400
 800779c:	40014000 	.word	0x40014000
 80077a0:	40014400 	.word	0x40014400
 80077a4:	40014800 	.word	0x40014800
 80077a8:	40015000 	.word	0x40015000

080077ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b087      	sub	sp, #28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	f023 0210 	bic.w	r2, r3, #16
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	021b      	lsls	r3, r3, #8
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f023 0320 	bic.w	r3, r3, #32
 80077fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	011b      	lsls	r3, r3, #4
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	4313      	orrs	r3, r2
 8007806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a2c      	ldr	r2, [pc, #176]	; (80078bc <TIM_OC2_SetConfig+0x110>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d007      	beq.n	8007820 <TIM_OC2_SetConfig+0x74>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a2b      	ldr	r2, [pc, #172]	; (80078c0 <TIM_OC2_SetConfig+0x114>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d003      	beq.n	8007820 <TIM_OC2_SetConfig+0x74>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a2a      	ldr	r2, [pc, #168]	; (80078c4 <TIM_OC2_SetConfig+0x118>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d10d      	bne.n	800783c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	011b      	lsls	r3, r3, #4
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	4313      	orrs	r3, r2
 8007832:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800783a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a1f      	ldr	r2, [pc, #124]	; (80078bc <TIM_OC2_SetConfig+0x110>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d013      	beq.n	800786c <TIM_OC2_SetConfig+0xc0>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a1e      	ldr	r2, [pc, #120]	; (80078c0 <TIM_OC2_SetConfig+0x114>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d00f      	beq.n	800786c <TIM_OC2_SetConfig+0xc0>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a1e      	ldr	r2, [pc, #120]	; (80078c8 <TIM_OC2_SetConfig+0x11c>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d00b      	beq.n	800786c <TIM_OC2_SetConfig+0xc0>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a1d      	ldr	r2, [pc, #116]	; (80078cc <TIM_OC2_SetConfig+0x120>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d007      	beq.n	800786c <TIM_OC2_SetConfig+0xc0>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a1c      	ldr	r2, [pc, #112]	; (80078d0 <TIM_OC2_SetConfig+0x124>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d003      	beq.n	800786c <TIM_OC2_SetConfig+0xc0>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a17      	ldr	r2, [pc, #92]	; (80078c4 <TIM_OC2_SetConfig+0x118>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d113      	bne.n	8007894 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007872:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800787a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	693a      	ldr	r2, [r7, #16]
 8007884:	4313      	orrs	r3, r2
 8007886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	699b      	ldr	r3, [r3, #24]
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	4313      	orrs	r3, r2
 8007892:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	685a      	ldr	r2, [r3, #4]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	621a      	str	r2, [r3, #32]
}
 80078ae:	bf00      	nop
 80078b0:	371c      	adds	r7, #28
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	40012c00 	.word	0x40012c00
 80078c0:	40013400 	.word	0x40013400
 80078c4:	40015000 	.word	0x40015000
 80078c8:	40014000 	.word	0x40014000
 80078cc:	40014400 	.word	0x40014400
 80078d0:	40014800 	.word	0x40014800

080078d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f023 0303 	bic.w	r3, r3, #3
 800790e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	4313      	orrs	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	021b      	lsls	r3, r3, #8
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	4313      	orrs	r3, r2
 800792c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a2b      	ldr	r2, [pc, #172]	; (80079e0 <TIM_OC3_SetConfig+0x10c>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d007      	beq.n	8007946 <TIM_OC3_SetConfig+0x72>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a2a      	ldr	r2, [pc, #168]	; (80079e4 <TIM_OC3_SetConfig+0x110>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d003      	beq.n	8007946 <TIM_OC3_SetConfig+0x72>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a29      	ldr	r2, [pc, #164]	; (80079e8 <TIM_OC3_SetConfig+0x114>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d10d      	bne.n	8007962 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800794c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	021b      	lsls	r3, r3, #8
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	4313      	orrs	r3, r2
 8007958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a1e      	ldr	r2, [pc, #120]	; (80079e0 <TIM_OC3_SetConfig+0x10c>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d013      	beq.n	8007992 <TIM_OC3_SetConfig+0xbe>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a1d      	ldr	r2, [pc, #116]	; (80079e4 <TIM_OC3_SetConfig+0x110>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d00f      	beq.n	8007992 <TIM_OC3_SetConfig+0xbe>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a1d      	ldr	r2, [pc, #116]	; (80079ec <TIM_OC3_SetConfig+0x118>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d00b      	beq.n	8007992 <TIM_OC3_SetConfig+0xbe>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a1c      	ldr	r2, [pc, #112]	; (80079f0 <TIM_OC3_SetConfig+0x11c>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d007      	beq.n	8007992 <TIM_OC3_SetConfig+0xbe>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a1b      	ldr	r2, [pc, #108]	; (80079f4 <TIM_OC3_SetConfig+0x120>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d003      	beq.n	8007992 <TIM_OC3_SetConfig+0xbe>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a16      	ldr	r2, [pc, #88]	; (80079e8 <TIM_OC3_SetConfig+0x114>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d113      	bne.n	80079ba <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	011b      	lsls	r3, r3, #4
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	011b      	lsls	r3, r3, #4
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	685a      	ldr	r2, [r3, #4]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	621a      	str	r2, [r3, #32]
}
 80079d4:	bf00      	nop
 80079d6:	371c      	adds	r7, #28
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr
 80079e0:	40012c00 	.word	0x40012c00
 80079e4:	40013400 	.word	0x40013400
 80079e8:	40015000 	.word	0x40015000
 80079ec:	40014000 	.word	0x40014000
 80079f0:	40014400 	.word	0x40014400
 80079f4:	40014800 	.word	0x40014800

080079f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b087      	sub	sp, #28
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a1b      	ldr	r3, [r3, #32]
 8007a06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	021b      	lsls	r3, r3, #8
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	031b      	lsls	r3, r3, #12
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a2c      	ldr	r2, [pc, #176]	; (8007b08 <TIM_OC4_SetConfig+0x110>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d007      	beq.n	8007a6c <TIM_OC4_SetConfig+0x74>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a2b      	ldr	r2, [pc, #172]	; (8007b0c <TIM_OC4_SetConfig+0x114>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d003      	beq.n	8007a6c <TIM_OC4_SetConfig+0x74>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a2a      	ldr	r2, [pc, #168]	; (8007b10 <TIM_OC4_SetConfig+0x118>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d10d      	bne.n	8007a88 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	031b      	lsls	r3, r3, #12
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a1f      	ldr	r2, [pc, #124]	; (8007b08 <TIM_OC4_SetConfig+0x110>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d013      	beq.n	8007ab8 <TIM_OC4_SetConfig+0xc0>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a1e      	ldr	r2, [pc, #120]	; (8007b0c <TIM_OC4_SetConfig+0x114>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d00f      	beq.n	8007ab8 <TIM_OC4_SetConfig+0xc0>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a1e      	ldr	r2, [pc, #120]	; (8007b14 <TIM_OC4_SetConfig+0x11c>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d00b      	beq.n	8007ab8 <TIM_OC4_SetConfig+0xc0>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a1d      	ldr	r2, [pc, #116]	; (8007b18 <TIM_OC4_SetConfig+0x120>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d007      	beq.n	8007ab8 <TIM_OC4_SetConfig+0xc0>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a1c      	ldr	r2, [pc, #112]	; (8007b1c <TIM_OC4_SetConfig+0x124>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d003      	beq.n	8007ab8 <TIM_OC4_SetConfig+0xc0>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a17      	ldr	r2, [pc, #92]	; (8007b10 <TIM_OC4_SetConfig+0x118>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d113      	bne.n	8007ae0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007abe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ac6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	019b      	lsls	r3, r3, #6
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	019b      	lsls	r3, r3, #6
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	621a      	str	r2, [r3, #32]
}
 8007afa:	bf00      	nop
 8007afc:	371c      	adds	r7, #28
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	40012c00 	.word	0x40012c00
 8007b0c:	40013400 	.word	0x40013400
 8007b10:	40015000 	.word	0x40015000
 8007b14:	40014000 	.word	0x40014000
 8007b18:	40014400 	.word	0x40014400
 8007b1c:	40014800 	.word	0x40014800

08007b20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007b64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	041b      	lsls	r3, r3, #16
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a19      	ldr	r2, [pc, #100]	; (8007bdc <TIM_OC5_SetConfig+0xbc>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d013      	beq.n	8007ba2 <TIM_OC5_SetConfig+0x82>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a18      	ldr	r2, [pc, #96]	; (8007be0 <TIM_OC5_SetConfig+0xc0>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d00f      	beq.n	8007ba2 <TIM_OC5_SetConfig+0x82>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a17      	ldr	r2, [pc, #92]	; (8007be4 <TIM_OC5_SetConfig+0xc4>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d00b      	beq.n	8007ba2 <TIM_OC5_SetConfig+0x82>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a16      	ldr	r2, [pc, #88]	; (8007be8 <TIM_OC5_SetConfig+0xc8>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d007      	beq.n	8007ba2 <TIM_OC5_SetConfig+0x82>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a15      	ldr	r2, [pc, #84]	; (8007bec <TIM_OC5_SetConfig+0xcc>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d003      	beq.n	8007ba2 <TIM_OC5_SetConfig+0x82>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a14      	ldr	r2, [pc, #80]	; (8007bf0 <TIM_OC5_SetConfig+0xd0>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d109      	bne.n	8007bb6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	021b      	lsls	r3, r3, #8
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	697a      	ldr	r2, [r7, #20]
 8007bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	621a      	str	r2, [r3, #32]
}
 8007bd0:	bf00      	nop
 8007bd2:	371c      	adds	r7, #28
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	40012c00 	.word	0x40012c00
 8007be0:	40013400 	.word	0x40013400
 8007be4:	40014000 	.word	0x40014000
 8007be8:	40014400 	.word	0x40014400
 8007bec:	40014800 	.word	0x40014800
 8007bf0:	40015000 	.word	0x40015000

08007bf4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b087      	sub	sp, #28
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a1b      	ldr	r3, [r3, #32]
 8007c0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	021b      	lsls	r3, r3, #8
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	051b      	lsls	r3, r3, #20
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a1a      	ldr	r2, [pc, #104]	; (8007cb4 <TIM_OC6_SetConfig+0xc0>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d013      	beq.n	8007c78 <TIM_OC6_SetConfig+0x84>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a19      	ldr	r2, [pc, #100]	; (8007cb8 <TIM_OC6_SetConfig+0xc4>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d00f      	beq.n	8007c78 <TIM_OC6_SetConfig+0x84>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a18      	ldr	r2, [pc, #96]	; (8007cbc <TIM_OC6_SetConfig+0xc8>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d00b      	beq.n	8007c78 <TIM_OC6_SetConfig+0x84>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a17      	ldr	r2, [pc, #92]	; (8007cc0 <TIM_OC6_SetConfig+0xcc>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d007      	beq.n	8007c78 <TIM_OC6_SetConfig+0x84>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a16      	ldr	r2, [pc, #88]	; (8007cc4 <TIM_OC6_SetConfig+0xd0>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d003      	beq.n	8007c78 <TIM_OC6_SetConfig+0x84>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a15      	ldr	r2, [pc, #84]	; (8007cc8 <TIM_OC6_SetConfig+0xd4>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d109      	bne.n	8007c8c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	029b      	lsls	r3, r3, #10
 8007c86:	697a      	ldr	r2, [r7, #20]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	693a      	ldr	r2, [r7, #16]
 8007ca4:	621a      	str	r2, [r3, #32]
}
 8007ca6:	bf00      	nop
 8007ca8:	371c      	adds	r7, #28
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	40012c00 	.word	0x40012c00
 8007cb8:	40013400 	.word	0x40013400
 8007cbc:	40014000 	.word	0x40014000
 8007cc0:	40014400 	.word	0x40014400
 8007cc4:	40014800 	.word	0x40014800
 8007cc8:	40015000 	.word	0x40015000

08007ccc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b087      	sub	sp, #28
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6a1b      	ldr	r3, [r3, #32]
 8007cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	f023 0201 	bic.w	r2, r3, #1
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	011b      	lsls	r3, r3, #4
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	f023 030a 	bic.w	r3, r3, #10
 8007d08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	621a      	str	r2, [r3, #32]
}
 8007d1e:	bf00      	nop
 8007d20:	371c      	adds	r7, #28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr

08007d2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	b087      	sub	sp, #28
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	60f8      	str	r0, [r7, #12]
 8007d32:	60b9      	str	r1, [r7, #8]
 8007d34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	f023 0210 	bic.w	r2, r3, #16
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6a1b      	ldr	r3, [r3, #32]
 8007d4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	031b      	lsls	r3, r3, #12
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	011b      	lsls	r3, r3, #4
 8007d6c:	693a      	ldr	r2, [r7, #16]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	621a      	str	r2, [r3, #32]
}
 8007d7e:	bf00      	nop
 8007d80:	371c      	adds	r7, #28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b085      	sub	sp, #20
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	f043 0307 	orr.w	r3, r3, #7
 8007db0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	609a      	str	r2, [r3, #8]
}
 8007db8:	bf00      	nop
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b087      	sub	sp, #28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
 8007dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007dde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	021a      	lsls	r2, r3, #8
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	431a      	orrs	r2, r3
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	609a      	str	r2, [r3, #8]
}
 8007df8:	bf00      	nop
 8007dfa:	371c      	adds	r7, #28
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	f003 031f 	and.w	r3, r3, #31
 8007e16:	2201      	movs	r2, #1
 8007e18:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6a1a      	ldr	r2, [r3, #32]
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	43db      	mvns	r3, r3
 8007e26:	401a      	ands	r2, r3
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6a1a      	ldr	r2, [r3, #32]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	f003 031f 	and.w	r3, r3, #31
 8007e36:	6879      	ldr	r1, [r7, #4]
 8007e38:	fa01 f303 	lsl.w	r3, r1, r3
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	621a      	str	r2, [r3, #32]
}
 8007e42:	bf00      	nop
 8007e44:	371c      	adds	r7, #28
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
	...

08007e50 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d109      	bne.n	8007e74 <HAL_TIMEx_PWMN_Start+0x24>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	bf14      	ite	ne
 8007e6c:	2301      	movne	r3, #1
 8007e6e:	2300      	moveq	r3, #0
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	e022      	b.n	8007eba <HAL_TIMEx_PWMN_Start+0x6a>
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	2b04      	cmp	r3, #4
 8007e78:	d109      	bne.n	8007e8e <HAL_TIMEx_PWMN_Start+0x3e>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	bf14      	ite	ne
 8007e86:	2301      	movne	r3, #1
 8007e88:	2300      	moveq	r3, #0
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	e015      	b.n	8007eba <HAL_TIMEx_PWMN_Start+0x6a>
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b08      	cmp	r3, #8
 8007e92:	d109      	bne.n	8007ea8 <HAL_TIMEx_PWMN_Start+0x58>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	bf14      	ite	ne
 8007ea0:	2301      	movne	r3, #1
 8007ea2:	2300      	moveq	r3, #0
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	e008      	b.n	8007eba <HAL_TIMEx_PWMN_Start+0x6a>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	bf14      	ite	ne
 8007eb4:	2301      	movne	r3, #1
 8007eb6:	2300      	moveq	r3, #0
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d001      	beq.n	8007ec2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e073      	b.n	8007faa <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d104      	bne.n	8007ed2 <HAL_TIMEx_PWMN_Start+0x82>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ed0:	e013      	b.n	8007efa <HAL_TIMEx_PWMN_Start+0xaa>
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	2b04      	cmp	r3, #4
 8007ed6:	d104      	bne.n	8007ee2 <HAL_TIMEx_PWMN_Start+0x92>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2202      	movs	r2, #2
 8007edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ee0:	e00b      	b.n	8007efa <HAL_TIMEx_PWMN_Start+0xaa>
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2b08      	cmp	r3, #8
 8007ee6:	d104      	bne.n	8007ef2 <HAL_TIMEx_PWMN_Start+0xa2>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2202      	movs	r2, #2
 8007eec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ef0:	e003      	b.n	8007efa <HAL_TIMEx_PWMN_Start+0xaa>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2204      	movs	r2, #4
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	4618      	mov	r0, r3
 8007f04:	f000 fa65 	bl	80083d2 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a25      	ldr	r2, [pc, #148]	; (8007fb4 <HAL_TIMEx_PWMN_Start+0x164>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d022      	beq.n	8007f68 <HAL_TIMEx_PWMN_Start+0x118>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f2a:	d01d      	beq.n	8007f68 <HAL_TIMEx_PWMN_Start+0x118>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a21      	ldr	r2, [pc, #132]	; (8007fb8 <HAL_TIMEx_PWMN_Start+0x168>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d018      	beq.n	8007f68 <HAL_TIMEx_PWMN_Start+0x118>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a20      	ldr	r2, [pc, #128]	; (8007fbc <HAL_TIMEx_PWMN_Start+0x16c>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d013      	beq.n	8007f68 <HAL_TIMEx_PWMN_Start+0x118>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a1e      	ldr	r2, [pc, #120]	; (8007fc0 <HAL_TIMEx_PWMN_Start+0x170>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d00e      	beq.n	8007f68 <HAL_TIMEx_PWMN_Start+0x118>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a1d      	ldr	r2, [pc, #116]	; (8007fc4 <HAL_TIMEx_PWMN_Start+0x174>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d009      	beq.n	8007f68 <HAL_TIMEx_PWMN_Start+0x118>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a1b      	ldr	r2, [pc, #108]	; (8007fc8 <HAL_TIMEx_PWMN_Start+0x178>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d004      	beq.n	8007f68 <HAL_TIMEx_PWMN_Start+0x118>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a1a      	ldr	r2, [pc, #104]	; (8007fcc <HAL_TIMEx_PWMN_Start+0x17c>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d115      	bne.n	8007f94 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	689a      	ldr	r2, [r3, #8]
 8007f6e:	4b18      	ldr	r3, [pc, #96]	; (8007fd0 <HAL_TIMEx_PWMN_Start+0x180>)
 8007f70:	4013      	ands	r3, r2
 8007f72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2b06      	cmp	r3, #6
 8007f78:	d015      	beq.n	8007fa6 <HAL_TIMEx_PWMN_Start+0x156>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f80:	d011      	beq.n	8007fa6 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f042 0201 	orr.w	r2, r2, #1
 8007f90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f92:	e008      	b.n	8007fa6 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f042 0201 	orr.w	r2, r2, #1
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	e000      	b.n	8007fa8 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fa6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	40012c00 	.word	0x40012c00
 8007fb8:	40000400 	.word	0x40000400
 8007fbc:	40000800 	.word	0x40000800
 8007fc0:	40000c00 	.word	0x40000c00
 8007fc4:	40013400 	.word	0x40013400
 8007fc8:	40014000 	.word	0x40014000
 8007fcc:	40015000 	.word	0x40015000
 8007fd0:	00010007 	.word	0x00010007

08007fd4 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 f9f3 	bl	80083d2 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6a1a      	ldr	r2, [r3, #32]
 8007ff2:	f241 1311 	movw	r3, #4369	; 0x1111
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10f      	bne.n	800801c <HAL_TIMEx_PWMN_Stop+0x48>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6a1a      	ldr	r2, [r3, #32]
 8008002:	f244 4344 	movw	r3, #17476	; 0x4444
 8008006:	4013      	ands	r3, r2
 8008008:	2b00      	cmp	r3, #0
 800800a:	d107      	bne.n	800801c <HAL_TIMEx_PWMN_Stop+0x48>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800801a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6a1a      	ldr	r2, [r3, #32]
 8008022:	f241 1311 	movw	r3, #4369	; 0x1111
 8008026:	4013      	ands	r3, r2
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10f      	bne.n	800804c <HAL_TIMEx_PWMN_Stop+0x78>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6a1a      	ldr	r2, [r3, #32]
 8008032:	f244 4344 	movw	r3, #17476	; 0x4444
 8008036:	4013      	ands	r3, r2
 8008038:	2b00      	cmp	r3, #0
 800803a:	d107      	bne.n	800804c <HAL_TIMEx_PWMN_Stop+0x78>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f022 0201 	bic.w	r2, r2, #1
 800804a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d104      	bne.n	800805c <HAL_TIMEx_PWMN_Stop+0x88>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800805a:	e013      	b.n	8008084 <HAL_TIMEx_PWMN_Stop+0xb0>
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	2b04      	cmp	r3, #4
 8008060:	d104      	bne.n	800806c <HAL_TIMEx_PWMN_Stop+0x98>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800806a:	e00b      	b.n	8008084 <HAL_TIMEx_PWMN_Stop+0xb0>
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	2b08      	cmp	r3, #8
 8008070:	d104      	bne.n	800807c <HAL_TIMEx_PWMN_Stop+0xa8>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800807a:	e003      	b.n	8008084 <HAL_TIMEx_PWMN_Stop+0xb0>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
	...

08008090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d101      	bne.n	80080a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080a4:	2302      	movs	r3, #2
 80080a6:	e074      	b.n	8008192 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a34      	ldr	r2, [pc, #208]	; (80081a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d009      	beq.n	80080e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a33      	ldr	r2, [pc, #204]	; (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d004      	beq.n	80080e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a31      	ldr	r2, [pc, #196]	; (80081a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d108      	bne.n	80080f8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80080ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80080fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008102:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	4313      	orrs	r3, r2
 800810c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a21      	ldr	r2, [pc, #132]	; (80081a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d022      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008128:	d01d      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a1f      	ldr	r2, [pc, #124]	; (80081ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d018      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a1d      	ldr	r2, [pc, #116]	; (80081b0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d013      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a1c      	ldr	r2, [pc, #112]	; (80081b4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d00e      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a15      	ldr	r2, [pc, #84]	; (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d009      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a18      	ldr	r2, [pc, #96]	; (80081b8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d004      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a11      	ldr	r2, [pc, #68]	; (80081a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d10c      	bne.n	8008180 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800816c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	4313      	orrs	r3, r2
 8008176:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3714      	adds	r7, #20
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	40012c00 	.word	0x40012c00
 80081a4:	40013400 	.word	0x40013400
 80081a8:	40015000 	.word	0x40015000
 80081ac:	40000400 	.word	0x40000400
 80081b0:	40000800 	.word	0x40000800
 80081b4:	40000c00 	.word	0x40000c00
 80081b8:	40014000 	.word	0x40014000

080081bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d101      	bne.n	80081d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80081d4:	2302      	movs	r3, #2
 80081d6:	e096      	b.n	8008306 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	4313      	orrs	r3, r2
 8008208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4313      	orrs	r3, r2
 8008216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	4313      	orrs	r3, r2
 8008224:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	695b      	ldr	r3, [r3, #20]
 8008230:	4313      	orrs	r3, r2
 8008232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823e:	4313      	orrs	r3, r2
 8008240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	041b      	lsls	r3, r3, #16
 800824e:	4313      	orrs	r3, r2
 8008250:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a2f      	ldr	r2, [pc, #188]	; (8008314 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d009      	beq.n	8008270 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a2d      	ldr	r2, [pc, #180]	; (8008318 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d004      	beq.n	8008270 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a2c      	ldr	r2, [pc, #176]	; (800831c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d106      	bne.n	800827e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	69db      	ldr	r3, [r3, #28]
 800827a:	4313      	orrs	r3, r2
 800827c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a24      	ldr	r2, [pc, #144]	; (8008314 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d009      	beq.n	800829c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a22      	ldr	r2, [pc, #136]	; (8008318 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d004      	beq.n	800829c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a21      	ldr	r2, [pc, #132]	; (800831c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d12b      	bne.n	80082f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a6:	051b      	lsls	r3, r3, #20
 80082a8:	4313      	orrs	r3, r2
 80082aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	6a1b      	ldr	r3, [r3, #32]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c4:	4313      	orrs	r3, r2
 80082c6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a11      	ldr	r2, [pc, #68]	; (8008314 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d009      	beq.n	80082e6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a10      	ldr	r2, [pc, #64]	; (8008318 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d004      	beq.n	80082e6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a0e      	ldr	r2, [pc, #56]	; (800831c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d106      	bne.n	80082f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f0:	4313      	orrs	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3714      	adds	r7, #20
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	40012c00 	.word	0x40012c00
 8008318:	40013400 	.word	0x40013400
 800831c:	40015000 	.word	0x40015000

08008320 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008336:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008346:	b480      	push	{r7}
 8008348:	b083      	sub	sp, #12
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800834e:	bf00      	nop
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800835a:	b480      	push	{r7}
 800835c:	b083      	sub	sp, #12
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008362:	bf00      	nop
 8008364:	370c      	adds	r7, #12
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800836e:	b480      	push	{r7}
 8008370:	b083      	sub	sp, #12
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008376:	bf00      	nop
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008382:	b480      	push	{r7}
 8008384:	b083      	sub	sp, #12
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800838a:	bf00      	nop
 800838c:	370c      	adds	r7, #12
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008396:	b480      	push	{r7}
 8008398:	b083      	sub	sp, #12
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800839e:	bf00      	nop
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b083      	sub	sp, #12
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80083b2:	bf00      	nop
 80083b4:	370c      	adds	r7, #12
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80083be:	b480      	push	{r7}
 80083c0:	b083      	sub	sp, #12
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80083c6:	bf00      	nop
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b087      	sub	sp, #28
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	60f8      	str	r0, [r7, #12]
 80083da:	60b9      	str	r1, [r7, #8]
 80083dc:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	f003 031f 	and.w	r3, r3, #31
 80083e4:	2204      	movs	r2, #4
 80083e6:	fa02 f303 	lsl.w	r3, r2, r3
 80083ea:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6a1a      	ldr	r2, [r3, #32]
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	43db      	mvns	r3, r3
 80083f4:	401a      	ands	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6a1a      	ldr	r2, [r3, #32]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	f003 031f 	and.w	r3, r3, #31
 8008404:	6879      	ldr	r1, [r7, #4]
 8008406:	fa01 f303 	lsl.w	r3, r1, r3
 800840a:	431a      	orrs	r2, r3
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	621a      	str	r2, [r3, #32]
}
 8008410:	bf00      	nop
 8008412:	371c      	adds	r7, #28
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d101      	bne.n	800842e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e042      	b.n	80084b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008434:	2b00      	cmp	r3, #0
 8008436:	d106      	bne.n	8008446 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f7f9 fe09 	bl	8002058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2224      	movs	r2, #36	; 0x24
 800844a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f022 0201 	bic.w	r2, r2, #1
 800845c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 fc50 	bl	8008d04 <UART_SetConfig>
 8008464:	4603      	mov	r3, r0
 8008466:	2b01      	cmp	r3, #1
 8008468:	d101      	bne.n	800846e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e022      	b.n	80084b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008472:	2b00      	cmp	r3, #0
 8008474:	d002      	beq.n	800847c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 ff40 	bl	80092fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800848a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689a      	ldr	r2, [r3, #8]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800849a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f042 0201 	orr.w	r2, r2, #1
 80084aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 ffc7 	bl	8009440 <UART_CheckIdleState>
 80084b2:	4603      	mov	r3, r0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b08a      	sub	sp, #40	; 0x28
 80084c0:	af02      	add	r7, sp, #8
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	603b      	str	r3, [r7, #0]
 80084c8:	4613      	mov	r3, r2
 80084ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084d2:	2b20      	cmp	r3, #32
 80084d4:	f040 8083 	bne.w	80085de <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d002      	beq.n	80084e4 <HAL_UART_Transmit+0x28>
 80084de:	88fb      	ldrh	r3, [r7, #6]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d101      	bne.n	80084e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e07b      	b.n	80085e0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d101      	bne.n	80084f6 <HAL_UART_Transmit+0x3a>
 80084f2:	2302      	movs	r3, #2
 80084f4:	e074      	b.n	80085e0 <HAL_UART_Transmit+0x124>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2221      	movs	r2, #33	; 0x21
 800850a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800850e:	f7fa fbbb 	bl	8002c88 <HAL_GetTick>
 8008512:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	88fa      	ldrh	r2, [r7, #6]
 8008518:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	88fa      	ldrh	r2, [r7, #6]
 8008520:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800852c:	d108      	bne.n	8008540 <HAL_UART_Transmit+0x84>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d104      	bne.n	8008540 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008536:	2300      	movs	r3, #0
 8008538:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	61bb      	str	r3, [r7, #24]
 800853e:	e003      	b.n	8008548 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008544:	2300      	movs	r3, #0
 8008546:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008550:	e02c      	b.n	80085ac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	9300      	str	r3, [sp, #0]
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2200      	movs	r2, #0
 800855a:	2180      	movs	r1, #128	; 0x80
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f000 ffba 	bl	80094d6 <UART_WaitOnFlagUntilTimeout>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d001      	beq.n	800856c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008568:	2303      	movs	r3, #3
 800856a:	e039      	b.n	80085e0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10b      	bne.n	800858a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	881b      	ldrh	r3, [r3, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008580:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	3302      	adds	r3, #2
 8008586:	61bb      	str	r3, [r7, #24]
 8008588:	e007      	b.n	800859a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	781a      	ldrb	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	3301      	adds	r3, #1
 8008598:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	3b01      	subs	r3, #1
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1cc      	bne.n	8008552 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	2200      	movs	r2, #0
 80085c0:	2140      	movs	r1, #64	; 0x40
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f000 ff87 	bl	80094d6 <UART_WaitOnFlagUntilTimeout>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	e006      	b.n	80085e0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2220      	movs	r2, #32
 80085d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	e000      	b.n	80085e0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80085de:	2302      	movs	r3, #2
  }
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3720      	adds	r7, #32
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b08a      	sub	sp, #40	; 0x28
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	4613      	mov	r3, r2
 80085f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085fc:	2b20      	cmp	r3, #32
 80085fe:	d142      	bne.n	8008686 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d002      	beq.n	800860c <HAL_UART_Receive_IT+0x24>
 8008606:	88fb      	ldrh	r3, [r7, #6]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d101      	bne.n	8008610 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e03b      	b.n	8008688 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008616:	2b01      	cmp	r3, #1
 8008618:	d101      	bne.n	800861e <HAL_UART_Receive_IT+0x36>
 800861a:	2302      	movs	r3, #2
 800861c:	e034      	b.n	8008688 <HAL_UART_Receive_IT+0xa0>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a17      	ldr	r2, [pc, #92]	; (8008690 <HAL_UART_Receive_IT+0xa8>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d01f      	beq.n	8008676 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d018      	beq.n	8008676 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	e853 3f00 	ldrex	r3, [r3]
 8008650:	613b      	str	r3, [r7, #16]
   return(result);
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008658:	627b      	str	r3, [r7, #36]	; 0x24
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	623b      	str	r3, [r7, #32]
 8008664:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008666:	69f9      	ldr	r1, [r7, #28]
 8008668:	6a3a      	ldr	r2, [r7, #32]
 800866a:	e841 2300 	strex	r3, r2, [r1]
 800866e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1e6      	bne.n	8008644 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008676:	88fb      	ldrh	r3, [r7, #6]
 8008678:	461a      	mov	r2, r3
 800867a:	68b9      	ldr	r1, [r7, #8]
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 fff3 	bl	8009668 <UART_Start_Receive_IT>
 8008682:	4603      	mov	r3, r0
 8008684:	e000      	b.n	8008688 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008686:	2302      	movs	r3, #2
  }
}
 8008688:	4618      	mov	r0, r3
 800868a:	3728      	adds	r7, #40	; 0x28
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	40008000 	.word	0x40008000

08008694 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b0ba      	sub	sp, #232	; 0xe8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	69db      	ldr	r3, [r3, #28]
 80086a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80086ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80086be:	f640 030f 	movw	r3, #2063	; 0x80f
 80086c2:	4013      	ands	r3, r2
 80086c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80086c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d11b      	bne.n	8008708 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80086d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086d4:	f003 0320 	and.w	r3, r3, #32
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d015      	beq.n	8008708 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80086dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086e0:	f003 0320 	and.w	r3, r3, #32
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d105      	bne.n	80086f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80086e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d009      	beq.n	8008708 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 82d6 	beq.w	8008caa <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	4798      	blx	r3
      }
      return;
 8008706:	e2d0      	b.n	8008caa <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008708:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 811f 	beq.w	8008950 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008712:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008716:	4b8b      	ldr	r3, [pc, #556]	; (8008944 <HAL_UART_IRQHandler+0x2b0>)
 8008718:	4013      	ands	r3, r2
 800871a:	2b00      	cmp	r3, #0
 800871c:	d106      	bne.n	800872c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800871e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008722:	4b89      	ldr	r3, [pc, #548]	; (8008948 <HAL_UART_IRQHandler+0x2b4>)
 8008724:	4013      	ands	r3, r2
 8008726:	2b00      	cmp	r3, #0
 8008728:	f000 8112 	beq.w	8008950 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800872c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	2b00      	cmp	r3, #0
 8008736:	d011      	beq.n	800875c <HAL_UART_IRQHandler+0xc8>
 8008738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800873c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00b      	beq.n	800875c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2201      	movs	r2, #1
 800874a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008752:	f043 0201 	orr.w	r2, r3, #1
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800875c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008760:	f003 0302 	and.w	r3, r3, #2
 8008764:	2b00      	cmp	r3, #0
 8008766:	d011      	beq.n	800878c <HAL_UART_IRQHandler+0xf8>
 8008768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800876c:	f003 0301 	and.w	r3, r3, #1
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00b      	beq.n	800878c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2202      	movs	r2, #2
 800877a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008782:	f043 0204 	orr.w	r2, r3, #4
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800878c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008790:	f003 0304 	and.w	r3, r3, #4
 8008794:	2b00      	cmp	r3, #0
 8008796:	d011      	beq.n	80087bc <HAL_UART_IRQHandler+0x128>
 8008798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800879c:	f003 0301 	and.w	r3, r3, #1
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00b      	beq.n	80087bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2204      	movs	r2, #4
 80087aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087b2:	f043 0202 	orr.w	r2, r3, #2
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80087bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087c0:	f003 0308 	and.w	r3, r3, #8
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d017      	beq.n	80087f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80087c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087cc:	f003 0320 	and.w	r3, r3, #32
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d105      	bne.n	80087e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80087d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80087d8:	4b5a      	ldr	r3, [pc, #360]	; (8008944 <HAL_UART_IRQHandler+0x2b0>)
 80087da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00b      	beq.n	80087f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2208      	movs	r2, #8
 80087e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087ee:	f043 0208 	orr.w	r2, r3, #8
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80087f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008800:	2b00      	cmp	r3, #0
 8008802:	d012      	beq.n	800882a <HAL_UART_IRQHandler+0x196>
 8008804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008808:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00c      	beq.n	800882a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008818:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008820:	f043 0220 	orr.w	r2, r3, #32
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008830:	2b00      	cmp	r3, #0
 8008832:	f000 823c 	beq.w	8008cae <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800883a:	f003 0320 	and.w	r3, r3, #32
 800883e:	2b00      	cmp	r3, #0
 8008840:	d013      	beq.n	800886a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008846:	f003 0320 	and.w	r3, r3, #32
 800884a:	2b00      	cmp	r3, #0
 800884c:	d105      	bne.n	800885a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800884e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008856:	2b00      	cmp	r3, #0
 8008858:	d007      	beq.n	800886a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800885e:	2b00      	cmp	r3, #0
 8008860:	d003      	beq.n	800886a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008870:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800887e:	2b40      	cmp	r3, #64	; 0x40
 8008880:	d005      	beq.n	800888e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008882:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008886:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800888a:	2b00      	cmp	r3, #0
 800888c:	d04f      	beq.n	800892e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f001 f814 	bl	80098bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800889e:	2b40      	cmp	r3, #64	; 0x40
 80088a0:	d141      	bne.n	8008926 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	3308      	adds	r3, #8
 80088a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088b0:	e853 3f00 	ldrex	r3, [r3]
 80088b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80088b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	3308      	adds	r3, #8
 80088ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80088ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80088d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80088da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80088de:	e841 2300 	strex	r3, r2, [r1]
 80088e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80088e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1d9      	bne.n	80088a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d013      	beq.n	800891e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088fa:	4a14      	ldr	r2, [pc, #80]	; (800894c <HAL_UART_IRQHandler+0x2b8>)
 80088fc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008902:	4618      	mov	r0, r3
 8008904:	f7fc fa38 	bl	8004d78 <HAL_DMA_Abort_IT>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d017      	beq.n	800893e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008918:	4610      	mov	r0, r2
 800891a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800891c:	e00f      	b.n	800893e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f9da 	bl	8008cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008924:	e00b      	b.n	800893e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f9d6 	bl	8008cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800892c:	e007      	b.n	800893e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f9d2 	bl	8008cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800893c:	e1b7      	b.n	8008cae <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800893e:	bf00      	nop
    return;
 8008940:	e1b5      	b.n	8008cae <HAL_UART_IRQHandler+0x61a>
 8008942:	bf00      	nop
 8008944:	10000001 	.word	0x10000001
 8008948:	04000120 	.word	0x04000120
 800894c:	08009989 	.word	0x08009989

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008954:	2b01      	cmp	r3, #1
 8008956:	f040 814a 	bne.w	8008bee <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800895a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800895e:	f003 0310 	and.w	r3, r3, #16
 8008962:	2b00      	cmp	r3, #0
 8008964:	f000 8143 	beq.w	8008bee <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800896c:	f003 0310 	and.w	r3, r3, #16
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 813c 	beq.w	8008bee <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2210      	movs	r2, #16
 800897c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008988:	2b40      	cmp	r3, #64	; 0x40
 800898a:	f040 80b5 	bne.w	8008af8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800899a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f000 8187 	beq.w	8008cb2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80089aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089ae:	429a      	cmp	r2, r3
 80089b0:	f080 817f 	bcs.w	8008cb2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 0320 	and.w	r3, r3, #32
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f040 8086 	bne.w	8008adc <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089dc:	e853 3f00 	ldrex	r3, [r3]
 80089e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80089e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	461a      	mov	r2, r3
 80089f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80089fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a0a:	e841 2300 	strex	r3, r2, [r1]
 8008a0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008a12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1da      	bne.n	80089d0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	3308      	adds	r3, #8
 8008a20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a24:	e853 3f00 	ldrex	r3, [r3]
 8008a28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a2c:	f023 0301 	bic.w	r3, r3, #1
 8008a30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	3308      	adds	r3, #8
 8008a3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008a42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1e1      	bne.n	8008a1a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	3308      	adds	r3, #8
 8008a5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a60:	e853 3f00 	ldrex	r3, [r3]
 8008a64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	3308      	adds	r3, #8
 8008a76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008a7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008a7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008a80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008a82:	e841 2300 	strex	r3, r2, [r1]
 8008a86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1e3      	bne.n	8008a56 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2220      	movs	r2, #32
 8008a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aa4:	e853 3f00 	ldrex	r3, [r3]
 8008aa8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aac:	f023 0310 	bic.w	r3, r3, #16
 8008ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008abe:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ac0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008ac4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ac6:	e841 2300 	strex	r3, r2, [r1]
 8008aca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1e4      	bne.n	8008a9c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fc f8f5 	bl	8004cc6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	4619      	mov	r1, r3
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 f8fb 	bl	8008cec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008af6:	e0dc      	b.n	8008cb2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f000 80ce 	beq.w	8008cb6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8008b1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f000 80c9 	beq.w	8008cb6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2c:	e853 3f00 	ldrex	r3, [r3]
 8008b30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	461a      	mov	r2, r3
 8008b42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b46:	647b      	str	r3, [r7, #68]	; 0x44
 8008b48:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b4e:	e841 2300 	strex	r3, r2, [r1]
 8008b52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1e4      	bne.n	8008b24 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	3308      	adds	r3, #8
 8008b60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b64:	e853 3f00 	ldrex	r3, [r3]
 8008b68:	623b      	str	r3, [r7, #32]
   return(result);
 8008b6a:	6a3b      	ldr	r3, [r7, #32]
 8008b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b70:	f023 0301 	bic.w	r3, r3, #1
 8008b74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	3308      	adds	r3, #8
 8008b7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008b82:	633a      	str	r2, [r7, #48]	; 0x30
 8008b84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b8a:	e841 2300 	strex	r3, r2, [r1]
 8008b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1e1      	bne.n	8008b5a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2220      	movs	r2, #32
 8008b9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	e853 3f00 	ldrex	r3, [r3]
 8008bb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f023 0310 	bic.w	r3, r3, #16
 8008bbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008bcc:	61fb      	str	r3, [r7, #28]
 8008bce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd0:	69b9      	ldr	r1, [r7, #24]
 8008bd2:	69fa      	ldr	r2, [r7, #28]
 8008bd4:	e841 2300 	strex	r3, r2, [r1]
 8008bd8:	617b      	str	r3, [r7, #20]
   return(result);
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1e4      	bne.n	8008baa <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008be0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008be4:	4619      	mov	r1, r3
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f880 	bl	8008cec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008bec:	e063      	b.n	8008cb6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00e      	beq.n	8008c18 <HAL_UART_IRQHandler+0x584>
 8008bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d008      	beq.n	8008c18 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008c0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f001 fb57 	bl	800a2c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c16:	e051      	b.n	8008cbc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d014      	beq.n	8008c4e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d105      	bne.n	8008c3c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d008      	beq.n	8008c4e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d03a      	beq.n	8008cba <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	4798      	blx	r3
    }
    return;
 8008c4c:	e035      	b.n	8008cba <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d009      	beq.n	8008c6e <HAL_UART_IRQHandler+0x5da>
 8008c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d003      	beq.n	8008c6e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fea4 	bl	80099b4 <UART_EndTransmit_IT>
    return;
 8008c6c:	e026      	b.n	8008cbc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d009      	beq.n	8008c8e <HAL_UART_IRQHandler+0x5fa>
 8008c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d003      	beq.n	8008c8e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f001 fb30 	bl	800a2ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c8c:	e016      	b.n	8008cbc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d010      	beq.n	8008cbc <HAL_UART_IRQHandler+0x628>
 8008c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	da0c      	bge.n	8008cbc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f001 fb18 	bl	800a2d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ca8:	e008      	b.n	8008cbc <HAL_UART_IRQHandler+0x628>
      return;
 8008caa:	bf00      	nop
 8008cac:	e006      	b.n	8008cbc <HAL_UART_IRQHandler+0x628>
    return;
 8008cae:	bf00      	nop
 8008cb0:	e004      	b.n	8008cbc <HAL_UART_IRQHandler+0x628>
      return;
 8008cb2:	bf00      	nop
 8008cb4:	e002      	b.n	8008cbc <HAL_UART_IRQHandler+0x628>
      return;
 8008cb6:	bf00      	nop
 8008cb8:	e000      	b.n	8008cbc <HAL_UART_IRQHandler+0x628>
    return;
 8008cba:	bf00      	nop
  }
}
 8008cbc:	37e8      	adds	r7, #232	; 0xe8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop

08008cc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008ce0:	bf00      	nop
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008cf8:	bf00      	nop
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d08:	b08c      	sub	sp, #48	; 0x30
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	689a      	ldr	r2, [r3, #8]
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	431a      	orrs	r2, r3
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	695b      	ldr	r3, [r3, #20]
 8008d22:	431a      	orrs	r2, r3
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	69db      	ldr	r3, [r3, #28]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	4baa      	ldr	r3, [pc, #680]	; (8008fdc <UART_SetConfig+0x2d8>)
 8008d34:	4013      	ands	r3, r2
 8008d36:	697a      	ldr	r2, [r7, #20]
 8008d38:	6812      	ldr	r2, [r2, #0]
 8008d3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d3c:	430b      	orrs	r3, r1
 8008d3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	68da      	ldr	r2, [r3, #12]
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	430a      	orrs	r2, r1
 8008d54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a9f      	ldr	r2, [pc, #636]	; (8008fe0 <UART_SetConfig+0x2dc>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d004      	beq.n	8008d70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008d7a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008d7e:	697a      	ldr	r2, [r7, #20]
 8008d80:	6812      	ldr	r2, [r2, #0]
 8008d82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d84:	430b      	orrs	r3, r1
 8008d86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8e:	f023 010f 	bic.w	r1, r3, #15
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	430a      	orrs	r2, r1
 8008d9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a90      	ldr	r2, [pc, #576]	; (8008fe4 <UART_SetConfig+0x2e0>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d125      	bne.n	8008df4 <UART_SetConfig+0xf0>
 8008da8:	4b8f      	ldr	r3, [pc, #572]	; (8008fe8 <UART_SetConfig+0x2e4>)
 8008daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dae:	f003 0303 	and.w	r3, r3, #3
 8008db2:	2b03      	cmp	r3, #3
 8008db4:	d81a      	bhi.n	8008dec <UART_SetConfig+0xe8>
 8008db6:	a201      	add	r2, pc, #4	; (adr r2, 8008dbc <UART_SetConfig+0xb8>)
 8008db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dbc:	08008dcd 	.word	0x08008dcd
 8008dc0:	08008ddd 	.word	0x08008ddd
 8008dc4:	08008dd5 	.word	0x08008dd5
 8008dc8:	08008de5 	.word	0x08008de5
 8008dcc:	2301      	movs	r3, #1
 8008dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dd2:	e116      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008dd4:	2302      	movs	r3, #2
 8008dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dda:	e112      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008ddc:	2304      	movs	r3, #4
 8008dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008de2:	e10e      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008de4:	2308      	movs	r3, #8
 8008de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dea:	e10a      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008dec:	2310      	movs	r3, #16
 8008dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008df2:	e106      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a7c      	ldr	r2, [pc, #496]	; (8008fec <UART_SetConfig+0x2e8>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d138      	bne.n	8008e70 <UART_SetConfig+0x16c>
 8008dfe:	4b7a      	ldr	r3, [pc, #488]	; (8008fe8 <UART_SetConfig+0x2e4>)
 8008e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e04:	f003 030c 	and.w	r3, r3, #12
 8008e08:	2b0c      	cmp	r3, #12
 8008e0a:	d82d      	bhi.n	8008e68 <UART_SetConfig+0x164>
 8008e0c:	a201      	add	r2, pc, #4	; (adr r2, 8008e14 <UART_SetConfig+0x110>)
 8008e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e12:	bf00      	nop
 8008e14:	08008e49 	.word	0x08008e49
 8008e18:	08008e69 	.word	0x08008e69
 8008e1c:	08008e69 	.word	0x08008e69
 8008e20:	08008e69 	.word	0x08008e69
 8008e24:	08008e59 	.word	0x08008e59
 8008e28:	08008e69 	.word	0x08008e69
 8008e2c:	08008e69 	.word	0x08008e69
 8008e30:	08008e69 	.word	0x08008e69
 8008e34:	08008e51 	.word	0x08008e51
 8008e38:	08008e69 	.word	0x08008e69
 8008e3c:	08008e69 	.word	0x08008e69
 8008e40:	08008e69 	.word	0x08008e69
 8008e44:	08008e61 	.word	0x08008e61
 8008e48:	2300      	movs	r3, #0
 8008e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e4e:	e0d8      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008e50:	2302      	movs	r3, #2
 8008e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e56:	e0d4      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008e58:	2304      	movs	r3, #4
 8008e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e5e:	e0d0      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008e60:	2308      	movs	r3, #8
 8008e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e66:	e0cc      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008e68:	2310      	movs	r3, #16
 8008e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e6e:	e0c8      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a5e      	ldr	r2, [pc, #376]	; (8008ff0 <UART_SetConfig+0x2ec>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d125      	bne.n	8008ec6 <UART_SetConfig+0x1c2>
 8008e7a:	4b5b      	ldr	r3, [pc, #364]	; (8008fe8 <UART_SetConfig+0x2e4>)
 8008e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e84:	2b30      	cmp	r3, #48	; 0x30
 8008e86:	d016      	beq.n	8008eb6 <UART_SetConfig+0x1b2>
 8008e88:	2b30      	cmp	r3, #48	; 0x30
 8008e8a:	d818      	bhi.n	8008ebe <UART_SetConfig+0x1ba>
 8008e8c:	2b20      	cmp	r3, #32
 8008e8e:	d00a      	beq.n	8008ea6 <UART_SetConfig+0x1a2>
 8008e90:	2b20      	cmp	r3, #32
 8008e92:	d814      	bhi.n	8008ebe <UART_SetConfig+0x1ba>
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d002      	beq.n	8008e9e <UART_SetConfig+0x19a>
 8008e98:	2b10      	cmp	r3, #16
 8008e9a:	d008      	beq.n	8008eae <UART_SetConfig+0x1aa>
 8008e9c:	e00f      	b.n	8008ebe <UART_SetConfig+0x1ba>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ea4:	e0ad      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008ea6:	2302      	movs	r3, #2
 8008ea8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008eac:	e0a9      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008eae:	2304      	movs	r3, #4
 8008eb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008eb4:	e0a5      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008eb6:	2308      	movs	r3, #8
 8008eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ebc:	e0a1      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008ebe:	2310      	movs	r3, #16
 8008ec0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ec4:	e09d      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a4a      	ldr	r2, [pc, #296]	; (8008ff4 <UART_SetConfig+0x2f0>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d125      	bne.n	8008f1c <UART_SetConfig+0x218>
 8008ed0:	4b45      	ldr	r3, [pc, #276]	; (8008fe8 <UART_SetConfig+0x2e4>)
 8008ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ed6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008eda:	2bc0      	cmp	r3, #192	; 0xc0
 8008edc:	d016      	beq.n	8008f0c <UART_SetConfig+0x208>
 8008ede:	2bc0      	cmp	r3, #192	; 0xc0
 8008ee0:	d818      	bhi.n	8008f14 <UART_SetConfig+0x210>
 8008ee2:	2b80      	cmp	r3, #128	; 0x80
 8008ee4:	d00a      	beq.n	8008efc <UART_SetConfig+0x1f8>
 8008ee6:	2b80      	cmp	r3, #128	; 0x80
 8008ee8:	d814      	bhi.n	8008f14 <UART_SetConfig+0x210>
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d002      	beq.n	8008ef4 <UART_SetConfig+0x1f0>
 8008eee:	2b40      	cmp	r3, #64	; 0x40
 8008ef0:	d008      	beq.n	8008f04 <UART_SetConfig+0x200>
 8008ef2:	e00f      	b.n	8008f14 <UART_SetConfig+0x210>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008efa:	e082      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008efc:	2302      	movs	r3, #2
 8008efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f02:	e07e      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008f04:	2304      	movs	r3, #4
 8008f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f0a:	e07a      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008f0c:	2308      	movs	r3, #8
 8008f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f12:	e076      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008f14:	2310      	movs	r3, #16
 8008f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f1a:	e072      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a35      	ldr	r2, [pc, #212]	; (8008ff8 <UART_SetConfig+0x2f4>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d12a      	bne.n	8008f7c <UART_SetConfig+0x278>
 8008f26:	4b30      	ldr	r3, [pc, #192]	; (8008fe8 <UART_SetConfig+0x2e4>)
 8008f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f34:	d01a      	beq.n	8008f6c <UART_SetConfig+0x268>
 8008f36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f3a:	d81b      	bhi.n	8008f74 <UART_SetConfig+0x270>
 8008f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f40:	d00c      	beq.n	8008f5c <UART_SetConfig+0x258>
 8008f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f46:	d815      	bhi.n	8008f74 <UART_SetConfig+0x270>
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d003      	beq.n	8008f54 <UART_SetConfig+0x250>
 8008f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f50:	d008      	beq.n	8008f64 <UART_SetConfig+0x260>
 8008f52:	e00f      	b.n	8008f74 <UART_SetConfig+0x270>
 8008f54:	2300      	movs	r3, #0
 8008f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f5a:	e052      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f62:	e04e      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008f64:	2304      	movs	r3, #4
 8008f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f6a:	e04a      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008f6c:	2308      	movs	r3, #8
 8008f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f72:	e046      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008f74:	2310      	movs	r3, #16
 8008f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f7a:	e042      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a17      	ldr	r2, [pc, #92]	; (8008fe0 <UART_SetConfig+0x2dc>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d13a      	bne.n	8008ffc <UART_SetConfig+0x2f8>
 8008f86:	4b18      	ldr	r3, [pc, #96]	; (8008fe8 <UART_SetConfig+0x2e4>)
 8008f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008f90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f94:	d01a      	beq.n	8008fcc <UART_SetConfig+0x2c8>
 8008f96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f9a:	d81b      	bhi.n	8008fd4 <UART_SetConfig+0x2d0>
 8008f9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fa0:	d00c      	beq.n	8008fbc <UART_SetConfig+0x2b8>
 8008fa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fa6:	d815      	bhi.n	8008fd4 <UART_SetConfig+0x2d0>
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d003      	beq.n	8008fb4 <UART_SetConfig+0x2b0>
 8008fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fb0:	d008      	beq.n	8008fc4 <UART_SetConfig+0x2c0>
 8008fb2:	e00f      	b.n	8008fd4 <UART_SetConfig+0x2d0>
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008fba:	e022      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008fc2:	e01e      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008fc4:	2304      	movs	r3, #4
 8008fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008fca:	e01a      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008fcc:	2308      	movs	r3, #8
 8008fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008fd2:	e016      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008fd4:	2310      	movs	r3, #16
 8008fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008fda:	e012      	b.n	8009002 <UART_SetConfig+0x2fe>
 8008fdc:	cfff69f3 	.word	0xcfff69f3
 8008fe0:	40008000 	.word	0x40008000
 8008fe4:	40013800 	.word	0x40013800
 8008fe8:	40021000 	.word	0x40021000
 8008fec:	40004400 	.word	0x40004400
 8008ff0:	40004800 	.word	0x40004800
 8008ff4:	40004c00 	.word	0x40004c00
 8008ff8:	40005000 	.word	0x40005000
 8008ffc:	2310      	movs	r3, #16
 8008ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4aae      	ldr	r2, [pc, #696]	; (80092c0 <UART_SetConfig+0x5bc>)
 8009008:	4293      	cmp	r3, r2
 800900a:	f040 8097 	bne.w	800913c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800900e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009012:	2b08      	cmp	r3, #8
 8009014:	d823      	bhi.n	800905e <UART_SetConfig+0x35a>
 8009016:	a201      	add	r2, pc, #4	; (adr r2, 800901c <UART_SetConfig+0x318>)
 8009018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800901c:	08009041 	.word	0x08009041
 8009020:	0800905f 	.word	0x0800905f
 8009024:	08009049 	.word	0x08009049
 8009028:	0800905f 	.word	0x0800905f
 800902c:	0800904f 	.word	0x0800904f
 8009030:	0800905f 	.word	0x0800905f
 8009034:	0800905f 	.word	0x0800905f
 8009038:	0800905f 	.word	0x0800905f
 800903c:	08009057 	.word	0x08009057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009040:	f7fc ff84 	bl	8005f4c <HAL_RCC_GetPCLK1Freq>
 8009044:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009046:	e010      	b.n	800906a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009048:	4b9e      	ldr	r3, [pc, #632]	; (80092c4 <UART_SetConfig+0x5c0>)
 800904a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800904c:	e00d      	b.n	800906a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800904e:	f7fc ff0f 	bl	8005e70 <HAL_RCC_GetSysClockFreq>
 8009052:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009054:	e009      	b.n	800906a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800905a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800905c:	e005      	b.n	800906a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800905e:	2300      	movs	r3, #0
 8009060:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009068:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	2b00      	cmp	r3, #0
 800906e:	f000 8130 	beq.w	80092d2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009076:	4a94      	ldr	r2, [pc, #592]	; (80092c8 <UART_SetConfig+0x5c4>)
 8009078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800907c:	461a      	mov	r2, r3
 800907e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009080:	fbb3 f3f2 	udiv	r3, r3, r2
 8009084:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	685a      	ldr	r2, [r3, #4]
 800908a:	4613      	mov	r3, r2
 800908c:	005b      	lsls	r3, r3, #1
 800908e:	4413      	add	r3, r2
 8009090:	69ba      	ldr	r2, [r7, #24]
 8009092:	429a      	cmp	r2, r3
 8009094:	d305      	bcc.n	80090a2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800909c:	69ba      	ldr	r2, [r7, #24]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d903      	bls.n	80090aa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80090a8:	e113      	b.n	80092d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	2200      	movs	r2, #0
 80090ae:	60bb      	str	r3, [r7, #8]
 80090b0:	60fa      	str	r2, [r7, #12]
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b6:	4a84      	ldr	r2, [pc, #528]	; (80092c8 <UART_SetConfig+0x5c4>)
 80090b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090bc:	b29b      	uxth	r3, r3
 80090be:	2200      	movs	r2, #0
 80090c0:	603b      	str	r3, [r7, #0]
 80090c2:	607a      	str	r2, [r7, #4]
 80090c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80090cc:	f7f7 fd2e 	bl	8000b2c <__aeabi_uldivmod>
 80090d0:	4602      	mov	r2, r0
 80090d2:	460b      	mov	r3, r1
 80090d4:	4610      	mov	r0, r2
 80090d6:	4619      	mov	r1, r3
 80090d8:	f04f 0200 	mov.w	r2, #0
 80090dc:	f04f 0300 	mov.w	r3, #0
 80090e0:	020b      	lsls	r3, r1, #8
 80090e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80090e6:	0202      	lsls	r2, r0, #8
 80090e8:	6979      	ldr	r1, [r7, #20]
 80090ea:	6849      	ldr	r1, [r1, #4]
 80090ec:	0849      	lsrs	r1, r1, #1
 80090ee:	2000      	movs	r0, #0
 80090f0:	460c      	mov	r4, r1
 80090f2:	4605      	mov	r5, r0
 80090f4:	eb12 0804 	adds.w	r8, r2, r4
 80090f8:	eb43 0905 	adc.w	r9, r3, r5
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	469a      	mov	sl, r3
 8009104:	4693      	mov	fp, r2
 8009106:	4652      	mov	r2, sl
 8009108:	465b      	mov	r3, fp
 800910a:	4640      	mov	r0, r8
 800910c:	4649      	mov	r1, r9
 800910e:	f7f7 fd0d 	bl	8000b2c <__aeabi_uldivmod>
 8009112:	4602      	mov	r2, r0
 8009114:	460b      	mov	r3, r1
 8009116:	4613      	mov	r3, r2
 8009118:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800911a:	6a3b      	ldr	r3, [r7, #32]
 800911c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009120:	d308      	bcc.n	8009134 <UART_SetConfig+0x430>
 8009122:	6a3b      	ldr	r3, [r7, #32]
 8009124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009128:	d204      	bcs.n	8009134 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	6a3a      	ldr	r2, [r7, #32]
 8009130:	60da      	str	r2, [r3, #12]
 8009132:	e0ce      	b.n	80092d2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800913a:	e0ca      	b.n	80092d2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	69db      	ldr	r3, [r3, #28]
 8009140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009144:	d166      	bne.n	8009214 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009146:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800914a:	2b08      	cmp	r3, #8
 800914c:	d827      	bhi.n	800919e <UART_SetConfig+0x49a>
 800914e:	a201      	add	r2, pc, #4	; (adr r2, 8009154 <UART_SetConfig+0x450>)
 8009150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009154:	08009179 	.word	0x08009179
 8009158:	08009181 	.word	0x08009181
 800915c:	08009189 	.word	0x08009189
 8009160:	0800919f 	.word	0x0800919f
 8009164:	0800918f 	.word	0x0800918f
 8009168:	0800919f 	.word	0x0800919f
 800916c:	0800919f 	.word	0x0800919f
 8009170:	0800919f 	.word	0x0800919f
 8009174:	08009197 	.word	0x08009197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009178:	f7fc fee8 	bl	8005f4c <HAL_RCC_GetPCLK1Freq>
 800917c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800917e:	e014      	b.n	80091aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009180:	f7fc fefa 	bl	8005f78 <HAL_RCC_GetPCLK2Freq>
 8009184:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009186:	e010      	b.n	80091aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009188:	4b4e      	ldr	r3, [pc, #312]	; (80092c4 <UART_SetConfig+0x5c0>)
 800918a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800918c:	e00d      	b.n	80091aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800918e:	f7fc fe6f 	bl	8005e70 <HAL_RCC_GetSysClockFreq>
 8009192:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009194:	e009      	b.n	80091aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800919a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800919c:	e005      	b.n	80091aa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800919e:	2300      	movs	r3, #0
 80091a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80091a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80091aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f000 8090 	beq.w	80092d2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b6:	4a44      	ldr	r2, [pc, #272]	; (80092c8 <UART_SetConfig+0x5c4>)
 80091b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091bc:	461a      	mov	r2, r3
 80091be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80091c4:	005a      	lsls	r2, r3, #1
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	085b      	lsrs	r3, r3, #1
 80091cc:	441a      	add	r2, r3
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091d8:	6a3b      	ldr	r3, [r7, #32]
 80091da:	2b0f      	cmp	r3, #15
 80091dc:	d916      	bls.n	800920c <UART_SetConfig+0x508>
 80091de:	6a3b      	ldr	r3, [r7, #32]
 80091e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091e4:	d212      	bcs.n	800920c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091e6:	6a3b      	ldr	r3, [r7, #32]
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	f023 030f 	bic.w	r3, r3, #15
 80091ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80091f0:	6a3b      	ldr	r3, [r7, #32]
 80091f2:	085b      	lsrs	r3, r3, #1
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	f003 0307 	and.w	r3, r3, #7
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	8bfb      	ldrh	r3, [r7, #30]
 80091fe:	4313      	orrs	r3, r2
 8009200:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	8bfa      	ldrh	r2, [r7, #30]
 8009208:	60da      	str	r2, [r3, #12]
 800920a:	e062      	b.n	80092d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009212:	e05e      	b.n	80092d2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009214:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009218:	2b08      	cmp	r3, #8
 800921a:	d828      	bhi.n	800926e <UART_SetConfig+0x56a>
 800921c:	a201      	add	r2, pc, #4	; (adr r2, 8009224 <UART_SetConfig+0x520>)
 800921e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009222:	bf00      	nop
 8009224:	08009249 	.word	0x08009249
 8009228:	08009251 	.word	0x08009251
 800922c:	08009259 	.word	0x08009259
 8009230:	0800926f 	.word	0x0800926f
 8009234:	0800925f 	.word	0x0800925f
 8009238:	0800926f 	.word	0x0800926f
 800923c:	0800926f 	.word	0x0800926f
 8009240:	0800926f 	.word	0x0800926f
 8009244:	08009267 	.word	0x08009267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009248:	f7fc fe80 	bl	8005f4c <HAL_RCC_GetPCLK1Freq>
 800924c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800924e:	e014      	b.n	800927a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009250:	f7fc fe92 	bl	8005f78 <HAL_RCC_GetPCLK2Freq>
 8009254:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009256:	e010      	b.n	800927a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009258:	4b1a      	ldr	r3, [pc, #104]	; (80092c4 <UART_SetConfig+0x5c0>)
 800925a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800925c:	e00d      	b.n	800927a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800925e:	f7fc fe07 	bl	8005e70 <HAL_RCC_GetSysClockFreq>
 8009262:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009264:	e009      	b.n	800927a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800926a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800926c:	e005      	b.n	800927a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800926e:	2300      	movs	r3, #0
 8009270:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009278:	bf00      	nop
    }

    if (pclk != 0U)
 800927a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927c:	2b00      	cmp	r3, #0
 800927e:	d028      	beq.n	80092d2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009284:	4a10      	ldr	r2, [pc, #64]	; (80092c8 <UART_SetConfig+0x5c4>)
 8009286:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800928a:	461a      	mov	r2, r3
 800928c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	085b      	lsrs	r3, r3, #1
 8009298:	441a      	add	r2, r3
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	fbb2 f3f3 	udiv	r3, r2, r3
 80092a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092a4:	6a3b      	ldr	r3, [r7, #32]
 80092a6:	2b0f      	cmp	r3, #15
 80092a8:	d910      	bls.n	80092cc <UART_SetConfig+0x5c8>
 80092aa:	6a3b      	ldr	r3, [r7, #32]
 80092ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092b0:	d20c      	bcs.n	80092cc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80092b2:	6a3b      	ldr	r3, [r7, #32]
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	60da      	str	r2, [r3, #12]
 80092bc:	e009      	b.n	80092d2 <UART_SetConfig+0x5ce>
 80092be:	bf00      	nop
 80092c0:	40008000 	.word	0x40008000
 80092c4:	00f42400 	.word	0x00f42400
 80092c8:	0800bc40 	.word	0x0800bc40
      }
      else
      {
        ret = HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	2201      	movs	r2, #1
 80092de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	2200      	movs	r2, #0
 80092e6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	2200      	movs	r2, #0
 80092ec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80092ee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3730      	adds	r7, #48	; 0x30
 80092f6:	46bd      	mov	sp, r7
 80092f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080092fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009308:	f003 0301 	and.w	r3, r3, #1
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00a      	beq.n	8009326 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	430a      	orrs	r2, r1
 8009324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800932a:	f003 0302 	and.w	r3, r3, #2
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00a      	beq.n	8009348 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	430a      	orrs	r2, r1
 8009346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800934c:	f003 0304 	and.w	r3, r3, #4
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00a      	beq.n	800936a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	430a      	orrs	r2, r1
 8009368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800936e:	f003 0308 	and.w	r3, r3, #8
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00a      	beq.n	800938c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	430a      	orrs	r2, r1
 800938a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009390:	f003 0310 	and.w	r3, r3, #16
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00a      	beq.n	80093ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	430a      	orrs	r2, r1
 80093ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b2:	f003 0320 	and.w	r3, r3, #32
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00a      	beq.n	80093d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	430a      	orrs	r2, r1
 80093ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d01a      	beq.n	8009412 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	430a      	orrs	r2, r1
 80093f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093fa:	d10a      	bne.n	8009412 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	430a      	orrs	r2, r1
 8009410:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00a      	beq.n	8009434 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	430a      	orrs	r2, r1
 8009432:	605a      	str	r2, [r3, #4]
  }
}
 8009434:	bf00      	nop
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b086      	sub	sp, #24
 8009444:	af02      	add	r7, sp, #8
 8009446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009450:	f7f9 fc1a 	bl	8002c88 <HAL_GetTick>
 8009454:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0308 	and.w	r3, r3, #8
 8009460:	2b08      	cmp	r3, #8
 8009462:	d10e      	bne.n	8009482 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009464:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2200      	movs	r2, #0
 800946e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f82f 	bl	80094d6 <UART_WaitOnFlagUntilTimeout>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d001      	beq.n	8009482 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800947e:	2303      	movs	r3, #3
 8009480:	e025      	b.n	80094ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 0304 	and.w	r3, r3, #4
 800948c:	2b04      	cmp	r3, #4
 800948e:	d10e      	bne.n	80094ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2200      	movs	r2, #0
 800949a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f819 	bl	80094d6 <UART_WaitOnFlagUntilTimeout>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d001      	beq.n	80094ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094aa:	2303      	movs	r3, #3
 80094ac:	e00f      	b.n	80094ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2220      	movs	r2, #32
 80094b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2220      	movs	r2, #32
 80094ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b09c      	sub	sp, #112	; 0x70
 80094da:	af00      	add	r7, sp, #0
 80094dc:	60f8      	str	r0, [r7, #12]
 80094de:	60b9      	str	r1, [r7, #8]
 80094e0:	603b      	str	r3, [r7, #0]
 80094e2:	4613      	mov	r3, r2
 80094e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094e6:	e0a9      	b.n	800963c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ee:	f000 80a5 	beq.w	800963c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094f2:	f7f9 fbc9 	bl	8002c88 <HAL_GetTick>
 80094f6:	4602      	mov	r2, r0
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80094fe:	429a      	cmp	r2, r3
 8009500:	d302      	bcc.n	8009508 <UART_WaitOnFlagUntilTimeout+0x32>
 8009502:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009504:	2b00      	cmp	r3, #0
 8009506:	d140      	bne.n	800958a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009510:	e853 3f00 	ldrex	r3, [r3]
 8009514:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009518:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800951c:	667b      	str	r3, [r7, #100]	; 0x64
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	461a      	mov	r2, r3
 8009524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009526:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009528:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800952c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800952e:	e841 2300 	strex	r3, r2, [r1]
 8009532:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009536:	2b00      	cmp	r3, #0
 8009538:	d1e6      	bne.n	8009508 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	3308      	adds	r3, #8
 8009540:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009544:	e853 3f00 	ldrex	r3, [r3]
 8009548:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800954a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954c:	f023 0301 	bic.w	r3, r3, #1
 8009550:	663b      	str	r3, [r7, #96]	; 0x60
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	3308      	adds	r3, #8
 8009558:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800955a:	64ba      	str	r2, [r7, #72]	; 0x48
 800955c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009560:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009562:	e841 2300 	strex	r3, r2, [r1]
 8009566:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1e5      	bne.n	800953a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2220      	movs	r2, #32
 8009572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2220      	movs	r2, #32
 800957a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009586:	2303      	movs	r3, #3
 8009588:	e069      	b.n	800965e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 0304 	and.w	r3, r3, #4
 8009594:	2b00      	cmp	r3, #0
 8009596:	d051      	beq.n	800963c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	69db      	ldr	r3, [r3, #28]
 800959e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095a6:	d149      	bne.n	800963c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80095b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ba:	e853 3f00 	ldrex	r3, [r3]
 80095be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80095c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	461a      	mov	r2, r3
 80095ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095d0:	637b      	str	r3, [r7, #52]	; 0x34
 80095d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095d8:	e841 2300 	strex	r3, r2, [r1]
 80095dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80095de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1e6      	bne.n	80095b2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3308      	adds	r3, #8
 80095ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	e853 3f00 	ldrex	r3, [r3]
 80095f2:	613b      	str	r3, [r7, #16]
   return(result);
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	f023 0301 	bic.w	r3, r3, #1
 80095fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	3308      	adds	r3, #8
 8009602:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009604:	623a      	str	r2, [r7, #32]
 8009606:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009608:	69f9      	ldr	r1, [r7, #28]
 800960a:	6a3a      	ldr	r2, [r7, #32]
 800960c:	e841 2300 	strex	r3, r2, [r1]
 8009610:	61bb      	str	r3, [r7, #24]
   return(result);
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d1e5      	bne.n	80095e4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2220      	movs	r2, #32
 800961c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2220      	movs	r2, #32
 8009624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2220      	movs	r2, #32
 800962c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2200      	movs	r2, #0
 8009634:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009638:	2303      	movs	r3, #3
 800963a:	e010      	b.n	800965e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	69da      	ldr	r2, [r3, #28]
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	4013      	ands	r3, r2
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	429a      	cmp	r2, r3
 800964a:	bf0c      	ite	eq
 800964c:	2301      	moveq	r3, #1
 800964e:	2300      	movne	r3, #0
 8009650:	b2db      	uxtb	r3, r3
 8009652:	461a      	mov	r2, r3
 8009654:	79fb      	ldrb	r3, [r7, #7]
 8009656:	429a      	cmp	r2, r3
 8009658:	f43f af46 	beq.w	80094e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3770      	adds	r7, #112	; 0x70
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
	...

08009668 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009668:	b480      	push	{r7}
 800966a:	b0a3      	sub	sp, #140	; 0x8c
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	4613      	mov	r3, r2
 8009674:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	88fa      	ldrh	r2, [r7, #6]
 8009680:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	88fa      	ldrh	r2, [r7, #6]
 8009688:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2200      	movs	r2, #0
 8009690:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800969a:	d10e      	bne.n	80096ba <UART_Start_Receive_IT+0x52>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d105      	bne.n	80096b0 <UART_Start_Receive_IT+0x48>
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80096aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80096ae:	e02d      	b.n	800970c <UART_Start_Receive_IT+0xa4>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	22ff      	movs	r2, #255	; 0xff
 80096b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80096b8:	e028      	b.n	800970c <UART_Start_Receive_IT+0xa4>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d10d      	bne.n	80096de <UART_Start_Receive_IT+0x76>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d104      	bne.n	80096d4 <UART_Start_Receive_IT+0x6c>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	22ff      	movs	r2, #255	; 0xff
 80096ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80096d2:	e01b      	b.n	800970c <UART_Start_Receive_IT+0xa4>
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	227f      	movs	r2, #127	; 0x7f
 80096d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80096dc:	e016      	b.n	800970c <UART_Start_Receive_IT+0xa4>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096e6:	d10d      	bne.n	8009704 <UART_Start_Receive_IT+0x9c>
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d104      	bne.n	80096fa <UART_Start_Receive_IT+0x92>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	227f      	movs	r2, #127	; 0x7f
 80096f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80096f8:	e008      	b.n	800970c <UART_Start_Receive_IT+0xa4>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	223f      	movs	r2, #63	; 0x3f
 80096fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009702:	e003      	b.n	800970c <UART_Start_Receive_IT+0xa4>
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2200      	movs	r2, #0
 8009708:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2200      	movs	r2, #0
 8009710:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2222      	movs	r2, #34	; 0x22
 8009718:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	3308      	adds	r3, #8
 8009722:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009726:	e853 3f00 	ldrex	r3, [r3]
 800972a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800972c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800972e:	f043 0301 	orr.w	r3, r3, #1
 8009732:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	3308      	adds	r3, #8
 800973c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009740:	673a      	str	r2, [r7, #112]	; 0x70
 8009742:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009744:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009746:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009748:	e841 2300 	strex	r3, r2, [r1]
 800974c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800974e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1e3      	bne.n	800971c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800975c:	d153      	bne.n	8009806 <UART_Start_Receive_IT+0x19e>
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009764:	88fa      	ldrh	r2, [r7, #6]
 8009766:	429a      	cmp	r2, r3
 8009768:	d34d      	bcc.n	8009806 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009772:	d107      	bne.n	8009784 <UART_Start_Receive_IT+0x11c>
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d103      	bne.n	8009784 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	4a4b      	ldr	r2, [pc, #300]	; (80098ac <UART_Start_Receive_IT+0x244>)
 8009780:	671a      	str	r2, [r3, #112]	; 0x70
 8009782:	e002      	b.n	800978a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	4a4a      	ldr	r2, [pc, #296]	; (80098b0 <UART_Start_Receive_IT+0x248>)
 8009788:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2200      	movs	r2, #0
 800978e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d01a      	beq.n	80097d0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097a2:	e853 3f00 	ldrex	r3, [r3]
 80097a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80097a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	461a      	mov	r2, r3
 80097b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80097bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097be:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80097c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80097c4:	e841 2300 	strex	r3, r2, [r1]
 80097c8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80097ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1e4      	bne.n	800979a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	3308      	adds	r3, #8
 80097d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097da:	e853 3f00 	ldrex	r3, [r3]
 80097de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80097e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	3308      	adds	r3, #8
 80097ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80097f0:	64ba      	str	r2, [r7, #72]	; 0x48
 80097f2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80097f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097f8:	e841 2300 	strex	r3, r2, [r1]
 80097fc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80097fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009800:	2b00      	cmp	r3, #0
 8009802:	d1e5      	bne.n	80097d0 <UART_Start_Receive_IT+0x168>
 8009804:	e04a      	b.n	800989c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800980e:	d107      	bne.n	8009820 <UART_Start_Receive_IT+0x1b8>
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d103      	bne.n	8009820 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	4a26      	ldr	r2, [pc, #152]	; (80098b4 <UART_Start_Receive_IT+0x24c>)
 800981c:	671a      	str	r2, [r3, #112]	; 0x70
 800981e:	e002      	b.n	8009826 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	4a25      	ldr	r2, [pc, #148]	; (80098b8 <UART_Start_Receive_IT+0x250>)
 8009824:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2200      	movs	r2, #0
 800982a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d019      	beq.n	800986a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983e:	e853 3f00 	ldrex	r3, [r3]
 8009842:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009846:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800984a:	677b      	str	r3, [r7, #116]	; 0x74
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	461a      	mov	r2, r3
 8009852:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009854:	637b      	str	r3, [r7, #52]	; 0x34
 8009856:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009858:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800985a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800985c:	e841 2300 	strex	r3, r2, [r1]
 8009860:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009864:	2b00      	cmp	r3, #0
 8009866:	d1e6      	bne.n	8009836 <UART_Start_Receive_IT+0x1ce>
 8009868:	e018      	b.n	800989c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	e853 3f00 	ldrex	r3, [r3]
 8009876:	613b      	str	r3, [r7, #16]
   return(result);
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	f043 0320 	orr.w	r3, r3, #32
 800987e:	67bb      	str	r3, [r7, #120]	; 0x78
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	461a      	mov	r2, r3
 8009886:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009888:	623b      	str	r3, [r7, #32]
 800988a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988c:	69f9      	ldr	r1, [r7, #28]
 800988e:	6a3a      	ldr	r2, [r7, #32]
 8009890:	e841 2300 	strex	r3, r2, [r1]
 8009894:	61bb      	str	r3, [r7, #24]
   return(result);
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d1e6      	bne.n	800986a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	378c      	adds	r7, #140	; 0x8c
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	08009fc5 	.word	0x08009fc5
 80098b0:	08009ccd 	.word	0x08009ccd
 80098b4:	08009b6b 	.word	0x08009b6b
 80098b8:	08009a0b 	.word	0x08009a0b

080098bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098bc:	b480      	push	{r7}
 80098be:	b095      	sub	sp, #84	; 0x54
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098cc:	e853 3f00 	ldrex	r3, [r3]
 80098d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80098d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	461a      	mov	r2, r3
 80098e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098e2:	643b      	str	r3, [r7, #64]	; 0x40
 80098e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098ea:	e841 2300 	strex	r3, r2, [r1]
 80098ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80098f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d1e6      	bne.n	80098c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	3308      	adds	r3, #8
 80098fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fe:	6a3b      	ldr	r3, [r7, #32]
 8009900:	e853 3f00 	ldrex	r3, [r3]
 8009904:	61fb      	str	r3, [r7, #28]
   return(result);
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800990c:	f023 0301 	bic.w	r3, r3, #1
 8009910:	64bb      	str	r3, [r7, #72]	; 0x48
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	3308      	adds	r3, #8
 8009918:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800991a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800991c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009922:	e841 2300 	strex	r3, r2, [r1]
 8009926:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1e3      	bne.n	80098f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009932:	2b01      	cmp	r3, #1
 8009934:	d118      	bne.n	8009968 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	e853 3f00 	ldrex	r3, [r3]
 8009942:	60bb      	str	r3, [r7, #8]
   return(result);
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	f023 0310 	bic.w	r3, r3, #16
 800994a:	647b      	str	r3, [r7, #68]	; 0x44
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	461a      	mov	r2, r3
 8009952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009954:	61bb      	str	r3, [r7, #24]
 8009956:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009958:	6979      	ldr	r1, [r7, #20]
 800995a:	69ba      	ldr	r2, [r7, #24]
 800995c:	e841 2300 	strex	r3, r2, [r1]
 8009960:	613b      	str	r3, [r7, #16]
   return(result);
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1e6      	bne.n	8009936 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2220      	movs	r2, #32
 800996c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800997c:	bf00      	nop
 800997e:	3754      	adds	r7, #84	; 0x54
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009994:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2200      	movs	r2, #0
 800999a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f7ff f996 	bl	8008cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099ac:	bf00      	nop
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b088      	sub	sp, #32
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	e853 3f00 	ldrex	r3, [r3]
 80099c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099d0:	61fb      	str	r3, [r7, #28]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	461a      	mov	r2, r3
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	61bb      	str	r3, [r7, #24]
 80099dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099de:	6979      	ldr	r1, [r7, #20]
 80099e0:	69ba      	ldr	r2, [r7, #24]
 80099e2:	e841 2300 	strex	r3, r2, [r1]
 80099e6:	613b      	str	r3, [r7, #16]
   return(result);
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1e6      	bne.n	80099bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2220      	movs	r2, #32
 80099f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7ff f961 	bl	8008cc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a02:	bf00      	nop
 8009a04:	3720      	adds	r7, #32
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b096      	sub	sp, #88	; 0x58
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a18:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a22:	2b22      	cmp	r3, #34	; 0x22
 8009a24:	f040 8095 	bne.w	8009b52 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009a32:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009a36:	b2d9      	uxtb	r1, r3
 8009a38:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009a3c:	b2da      	uxtb	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a42:	400a      	ands	r2, r1
 8009a44:	b2d2      	uxtb	r2, r2
 8009a46:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a4c:	1c5a      	adds	r2, r3, #1
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d178      	bne.n	8009b62 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a78:	e853 3f00 	ldrex	r3, [r3]
 8009a7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a84:	653b      	str	r3, [r7, #80]	; 0x50
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8009a90:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a96:	e841 2300 	strex	r3, r2, [r1]
 8009a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1e6      	bne.n	8009a70 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	3308      	adds	r3, #8
 8009aa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aac:	e853 3f00 	ldrex	r3, [r3]
 8009ab0:	623b      	str	r3, [r7, #32]
   return(result);
 8009ab2:	6a3b      	ldr	r3, [r7, #32]
 8009ab4:	f023 0301 	bic.w	r3, r3, #1
 8009ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	3308      	adds	r3, #8
 8009ac0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ac2:	633a      	str	r2, [r7, #48]	; 0x30
 8009ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aca:	e841 2300 	strex	r3, r2, [r1]
 8009ace:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1e5      	bne.n	8009aa2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2220      	movs	r2, #32
 8009ada:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d12e      	bne.n	8009b4a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	e853 3f00 	ldrex	r3, [r3]
 8009afe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f023 0310 	bic.w	r3, r3, #16
 8009b06:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b10:	61fb      	str	r3, [r7, #28]
 8009b12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b14:	69b9      	ldr	r1, [r7, #24]
 8009b16:	69fa      	ldr	r2, [r7, #28]
 8009b18:	e841 2300 	strex	r3, r2, [r1]
 8009b1c:	617b      	str	r3, [r7, #20]
   return(result);
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1e6      	bne.n	8009af2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	69db      	ldr	r3, [r3, #28]
 8009b2a:	f003 0310 	and.w	r3, r3, #16
 8009b2e:	2b10      	cmp	r3, #16
 8009b30:	d103      	bne.n	8009b3a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2210      	movs	r2, #16
 8009b38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b40:	4619      	mov	r1, r3
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7ff f8d2 	bl	8008cec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b48:	e00b      	b.n	8009b62 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f7f9 f832 	bl	8002bb4 <HAL_UART_RxCpltCallback>
}
 8009b50:	e007      	b.n	8009b62 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	699a      	ldr	r2, [r3, #24]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f042 0208 	orr.w	r2, r2, #8
 8009b60:	619a      	str	r2, [r3, #24]
}
 8009b62:	bf00      	nop
 8009b64:	3758      	adds	r7, #88	; 0x58
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b096      	sub	sp, #88	; 0x58
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009b78:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b82:	2b22      	cmp	r3, #34	; 0x22
 8009b84:	f040 8095 	bne.w	8009cb2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b96:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009b98:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009b9c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009ba0:	4013      	ands	r3, r2
 8009ba2:	b29a      	uxth	r2, r3
 8009ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ba6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bac:	1c9a      	adds	r2, r3, #2
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d178      	bne.n	8009cc2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bd8:	e853 3f00 	ldrex	r3, [r3]
 8009bdc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009be4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	461a      	mov	r2, r3
 8009bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bee:	643b      	str	r3, [r7, #64]	; 0x40
 8009bf0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009bf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009bf6:	e841 2300 	strex	r3, r2, [r1]
 8009bfa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d1e6      	bne.n	8009bd0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	3308      	adds	r3, #8
 8009c08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0a:	6a3b      	ldr	r3, [r7, #32]
 8009c0c:	e853 3f00 	ldrex	r3, [r3]
 8009c10:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	f023 0301 	bic.w	r3, r3, #1
 8009c18:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	3308      	adds	r3, #8
 8009c20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c2a:	e841 2300 	strex	r3, r2, [r1]
 8009c2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d1e5      	bne.n	8009c02 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2220      	movs	r2, #32
 8009c3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d12e      	bne.n	8009caa <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	e853 3f00 	ldrex	r3, [r3]
 8009c5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	f023 0310 	bic.w	r3, r3, #16
 8009c66:	647b      	str	r3, [r7, #68]	; 0x44
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c70:	61bb      	str	r3, [r7, #24]
 8009c72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c74:	6979      	ldr	r1, [r7, #20]
 8009c76:	69ba      	ldr	r2, [r7, #24]
 8009c78:	e841 2300 	strex	r3, r2, [r1]
 8009c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d1e6      	bne.n	8009c52 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	69db      	ldr	r3, [r3, #28]
 8009c8a:	f003 0310 	and.w	r3, r3, #16
 8009c8e:	2b10      	cmp	r3, #16
 8009c90:	d103      	bne.n	8009c9a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2210      	movs	r2, #16
 8009c98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7ff f822 	bl	8008cec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ca8:	e00b      	b.n	8009cc2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f7f8 ff82 	bl	8002bb4 <HAL_UART_RxCpltCallback>
}
 8009cb0:	e007      	b.n	8009cc2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	699a      	ldr	r2, [r3, #24]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f042 0208 	orr.w	r2, r2, #8
 8009cc0:	619a      	str	r2, [r3, #24]
}
 8009cc2:	bf00      	nop
 8009cc4:	3758      	adds	r7, #88	; 0x58
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
	...

08009ccc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b0a6      	sub	sp, #152	; 0x98
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009cda:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	69db      	ldr	r3, [r3, #28]
 8009ce4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d02:	2b22      	cmp	r3, #34	; 0x22
 8009d04:	f040 814f 	bne.w	8009fa6 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009d0e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d12:	e0f6      	b.n	8009f02 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009d1e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009d22:	b2d9      	uxtb	r1, r3
 8009d24:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009d28:	b2da      	uxtb	r2, r3
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d2e:	400a      	ands	r2, r1
 8009d30:	b2d2      	uxtb	r2, r2
 8009d32:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d38:	1c5a      	adds	r2, r3, #1
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	3b01      	subs	r3, #1
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	69db      	ldr	r3, [r3, #28]
 8009d56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009d5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009d5e:	f003 0307 	and.w	r3, r3, #7
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d053      	beq.n	8009e0e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009d6a:	f003 0301 	and.w	r3, r3, #1
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d011      	beq.n	8009d96 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009d72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00b      	beq.n	8009d96 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2201      	movs	r2, #1
 8009d84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d8c:	f043 0201 	orr.w	r2, r3, #1
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009d9a:	f003 0302 	and.w	r3, r3, #2
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d011      	beq.n	8009dc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009da2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009da6:	f003 0301 	and.w	r3, r3, #1
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00b      	beq.n	8009dc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2202      	movs	r2, #2
 8009db4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dbc:	f043 0204 	orr.w	r2, r3, #4
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009dc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009dca:	f003 0304 	and.w	r3, r3, #4
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d011      	beq.n	8009df6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009dd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009dd6:	f003 0301 	and.w	r3, r3, #1
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00b      	beq.n	8009df6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2204      	movs	r2, #4
 8009de4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dec:	f043 0202 	orr.w	r2, r3, #2
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d006      	beq.n	8009e0e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f7fe ff69 	bl	8008cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d173      	bne.n	8009f02 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e22:	e853 3f00 	ldrex	r3, [r3]
 8009e26:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009e28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	461a      	mov	r2, r3
 8009e38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009e3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e3e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e40:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009e42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009e44:	e841 2300 	strex	r3, r2, [r1]
 8009e48:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009e4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d1e4      	bne.n	8009e1a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3308      	adds	r3, #8
 8009e56:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e5a:	e853 3f00 	ldrex	r3, [r3]
 8009e5e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e66:	f023 0301 	bic.w	r3, r3, #1
 8009e6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3308      	adds	r3, #8
 8009e72:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009e74:	657a      	str	r2, [r7, #84]	; 0x54
 8009e76:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e78:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e7c:	e841 2300 	strex	r3, r2, [r1]
 8009e80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1e3      	bne.n	8009e50 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2220      	movs	r2, #32
 8009e8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d12e      	bne.n	8009efc <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eac:	e853 3f00 	ldrex	r3, [r3]
 8009eb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb4:	f023 0310 	bic.w	r3, r3, #16
 8009eb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ec2:	643b      	str	r3, [r7, #64]	; 0x40
 8009ec4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ec8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009eca:	e841 2300 	strex	r3, r2, [r1]
 8009ece:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d1e6      	bne.n	8009ea4 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	69db      	ldr	r3, [r3, #28]
 8009edc:	f003 0310 	and.w	r3, r3, #16
 8009ee0:	2b10      	cmp	r3, #16
 8009ee2:	d103      	bne.n	8009eec <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2210      	movs	r2, #16
 8009eea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f7fe fef9 	bl	8008cec <HAL_UARTEx_RxEventCallback>
 8009efa:	e002      	b.n	8009f02 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f7f8 fe59 	bl	8002bb4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f02:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d006      	beq.n	8009f18 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009f0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009f0e:	f003 0320 	and.w	r3, r3, #32
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	f47f aefe 	bne.w	8009d14 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f1e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009f22:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d045      	beq.n	8009fb6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009f30:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d23e      	bcs.n	8009fb6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	3308      	adds	r3, #8
 8009f3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f40:	6a3b      	ldr	r3, [r7, #32]
 8009f42:	e853 3f00 	ldrex	r3, [r3]
 8009f46:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f4e:	673b      	str	r3, [r7, #112]	; 0x70
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	3308      	adds	r3, #8
 8009f56:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009f58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f60:	e841 2300 	strex	r3, r2, [r1]
 8009f64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d1e5      	bne.n	8009f38 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4a14      	ldr	r2, [pc, #80]	; (8009fc0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009f70:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	e853 3f00 	ldrex	r3, [r3]
 8009f7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	f043 0320 	orr.w	r3, r3, #32
 8009f86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f90:	61bb      	str	r3, [r7, #24]
 8009f92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f94:	6979      	ldr	r1, [r7, #20]
 8009f96:	69ba      	ldr	r2, [r7, #24]
 8009f98:	e841 2300 	strex	r3, r2, [r1]
 8009f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d1e6      	bne.n	8009f72 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009fa4:	e007      	b.n	8009fb6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	699a      	ldr	r2, [r3, #24]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f042 0208 	orr.w	r2, r2, #8
 8009fb4:	619a      	str	r2, [r3, #24]
}
 8009fb6:	bf00      	nop
 8009fb8:	3798      	adds	r7, #152	; 0x98
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	08009a0b 	.word	0x08009a0b

08009fc4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b0a8      	sub	sp, #160	; 0xa0
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009fd2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	69db      	ldr	r3, [r3, #28]
 8009fdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ffa:	2b22      	cmp	r3, #34	; 0x22
 8009ffc:	f040 8153 	bne.w	800a2a6 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a006:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a00a:	e0fa      	b.n	800a202 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a012:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a01a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800a01e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800a022:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a026:	4013      	ands	r3, r2
 800a028:	b29a      	uxth	r2, r3
 800a02a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a02e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a034:	1c9a      	adds	r2, r3, #2
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a040:	b29b      	uxth	r3, r3
 800a042:	3b01      	subs	r3, #1
 800a044:	b29a      	uxth	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	69db      	ldr	r3, [r3, #28]
 800a052:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a056:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a05a:	f003 0307 	and.w	r3, r3, #7
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d053      	beq.n	800a10a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a062:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a066:	f003 0301 	and.w	r3, r3, #1
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d011      	beq.n	800a092 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a06e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00b      	beq.n	800a092 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2201      	movs	r2, #1
 800a080:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a088:	f043 0201 	orr.w	r2, r3, #1
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a092:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a096:	f003 0302 	and.w	r3, r3, #2
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d011      	beq.n	800a0c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a09e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a0a2:	f003 0301 	and.w	r3, r3, #1
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00b      	beq.n	800a0c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2202      	movs	r2, #2
 800a0b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0b8:	f043 0204 	orr.w	r2, r3, #4
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a0c6:	f003 0304 	and.w	r3, r3, #4
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d011      	beq.n	800a0f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a0ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a0d2:	f003 0301 	and.w	r3, r3, #1
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00b      	beq.n	800a0f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2204      	movs	r2, #4
 800a0e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0e8:	f043 0202 	orr.w	r2, r3, #2
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d006      	beq.n	800a10a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f7fe fdeb 	bl	8008cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a110:	b29b      	uxth	r3, r3
 800a112:	2b00      	cmp	r3, #0
 800a114:	d175      	bne.n	800a202 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a11c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a11e:	e853 3f00 	ldrex	r3, [r3]
 800a122:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a126:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a12a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	461a      	mov	r2, r3
 800a134:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a138:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a13a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a13c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a13e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a140:	e841 2300 	strex	r3, r2, [r1]
 800a144:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a146:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d1e4      	bne.n	800a116 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	3308      	adds	r3, #8
 800a152:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a156:	e853 3f00 	ldrex	r3, [r3]
 800a15a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a15c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a15e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a162:	f023 0301 	bic.w	r3, r3, #1
 800a166:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	3308      	adds	r3, #8
 800a170:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a174:	65ba      	str	r2, [r7, #88]	; 0x58
 800a176:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a178:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a17a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a17c:	e841 2300 	strex	r3, r2, [r1]
 800a180:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a184:	2b00      	cmp	r3, #0
 800a186:	d1e1      	bne.n	800a14c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2220      	movs	r2, #32
 800a18c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d12e      	bne.n	800a1fc <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ac:	e853 3f00 	ldrex	r3, [r3]
 800a1b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b4:	f023 0310 	bic.w	r3, r3, #16
 800a1b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	461a      	mov	r2, r3
 800a1c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a1c2:	647b      	str	r3, [r7, #68]	; 0x44
 800a1c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1ca:	e841 2300 	strex	r3, r2, [r1]
 800a1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1e6      	bne.n	800a1a4 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	69db      	ldr	r3, [r3, #28]
 800a1dc:	f003 0310 	and.w	r3, r3, #16
 800a1e0:	2b10      	cmp	r3, #16
 800a1e2:	d103      	bne.n	800a1ec <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2210      	movs	r2, #16
 800a1ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f7fe fd79 	bl	8008cec <HAL_UARTEx_RxEventCallback>
 800a1fa:	e002      	b.n	800a202 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f7f8 fcd9 	bl	8002bb4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a202:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a206:	2b00      	cmp	r3, #0
 800a208:	d006      	beq.n	800a218 <UART_RxISR_16BIT_FIFOEN+0x254>
 800a20a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a20e:	f003 0320 	and.w	r3, r3, #32
 800a212:	2b00      	cmp	r3, #0
 800a214:	f47f aefa 	bne.w	800a00c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a21e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a222:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a226:	2b00      	cmp	r3, #0
 800a228:	d045      	beq.n	800a2b6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a230:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800a234:	429a      	cmp	r2, r3
 800a236:	d23e      	bcs.n	800a2b6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	3308      	adds	r3, #8
 800a23e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a242:	e853 3f00 	ldrex	r3, [r3]
 800a246:	623b      	str	r3, [r7, #32]
   return(result);
 800a248:	6a3b      	ldr	r3, [r7, #32]
 800a24a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a24e:	677b      	str	r3, [r7, #116]	; 0x74
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	3308      	adds	r3, #8
 800a256:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a258:	633a      	str	r2, [r7, #48]	; 0x30
 800a25a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a25e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a260:	e841 2300 	strex	r3, r2, [r1]
 800a264:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d1e5      	bne.n	800a238 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4a14      	ldr	r2, [pc, #80]	; (800a2c0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800a270:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	e853 3f00 	ldrex	r3, [r3]
 800a27e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f043 0320 	orr.w	r3, r3, #32
 800a286:	673b      	str	r3, [r7, #112]	; 0x70
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	461a      	mov	r2, r3
 800a28e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a290:	61fb      	str	r3, [r7, #28]
 800a292:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a294:	69b9      	ldr	r1, [r7, #24]
 800a296:	69fa      	ldr	r2, [r7, #28]
 800a298:	e841 2300 	strex	r3, r2, [r1]
 800a29c:	617b      	str	r3, [r7, #20]
   return(result);
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d1e6      	bne.n	800a272 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a2a4:	e007      	b.n	800a2b6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	699a      	ldr	r2, [r3, #24]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f042 0208 	orr.w	r2, r2, #8
 800a2b4:	619a      	str	r2, [r3, #24]
}
 800a2b6:	bf00      	nop
 800a2b8:	37a0      	adds	r7, #160	; 0xa0
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	08009b6b 	.word	0x08009b6b

0800a2c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a2cc:	bf00      	nop
 800a2ce:	370c      	adds	r7, #12
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a2f4:	bf00      	nop
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a300:	b480      	push	{r7}
 800a302:	b085      	sub	sp, #20
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d101      	bne.n	800a316 <HAL_UARTEx_DisableFifoMode+0x16>
 800a312:	2302      	movs	r3, #2
 800a314:	e027      	b.n	800a366 <HAL_UARTEx_DisableFifoMode+0x66>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2201      	movs	r2, #1
 800a31a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2224      	movs	r2, #36	; 0x24
 800a322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f022 0201 	bic.w	r2, r2, #1
 800a33c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a344:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2220      	movs	r2, #32
 800a358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a364:	2300      	movs	r3, #0
}
 800a366:	4618      	mov	r0, r3
 800a368:	3714      	adds	r7, #20
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr

0800a372 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b084      	sub	sp, #16
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a382:	2b01      	cmp	r3, #1
 800a384:	d101      	bne.n	800a38a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a386:	2302      	movs	r3, #2
 800a388:	e02d      	b.n	800a3e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2201      	movs	r2, #1
 800a38e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2224      	movs	r2, #36	; 0x24
 800a396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f022 0201 	bic.w	r2, r2, #1
 800a3b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	683a      	ldr	r2, [r7, #0]
 800a3c2:	430a      	orrs	r2, r1
 800a3c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f850 	bl	800a46c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2220      	movs	r2, #32
 800a3d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b084      	sub	sp, #16
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
 800a3f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d101      	bne.n	800a406 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a402:	2302      	movs	r3, #2
 800a404:	e02d      	b.n	800a462 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2201      	movs	r2, #1
 800a40a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2224      	movs	r2, #36	; 0x24
 800a412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f022 0201 	bic.w	r2, r2, #1
 800a42c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	683a      	ldr	r2, [r7, #0]
 800a43e:	430a      	orrs	r2, r1
 800a440:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 f812 	bl	800a46c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2220      	movs	r2, #32
 800a454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a460:	2300      	movs	r3, #0
}
 800a462:	4618      	mov	r0, r3
 800a464:	3710      	adds	r7, #16
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
	...

0800a46c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d108      	bne.n	800a48e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a48c:	e031      	b.n	800a4f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a48e:	2308      	movs	r3, #8
 800a490:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a492:	2308      	movs	r3, #8
 800a494:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	0e5b      	lsrs	r3, r3, #25
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	f003 0307 	and.w	r3, r3, #7
 800a4a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	0f5b      	lsrs	r3, r3, #29
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	f003 0307 	and.w	r3, r3, #7
 800a4b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4b6:	7bbb      	ldrb	r3, [r7, #14]
 800a4b8:	7b3a      	ldrb	r2, [r7, #12]
 800a4ba:	4911      	ldr	r1, [pc, #68]	; (800a500 <UARTEx_SetNbDataToProcess+0x94>)
 800a4bc:	5c8a      	ldrb	r2, [r1, r2]
 800a4be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a4c2:	7b3a      	ldrb	r2, [r7, #12]
 800a4c4:	490f      	ldr	r1, [pc, #60]	; (800a504 <UARTEx_SetNbDataToProcess+0x98>)
 800a4c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4cc:	b29a      	uxth	r2, r3
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4d4:	7bfb      	ldrb	r3, [r7, #15]
 800a4d6:	7b7a      	ldrb	r2, [r7, #13]
 800a4d8:	4909      	ldr	r1, [pc, #36]	; (800a500 <UARTEx_SetNbDataToProcess+0x94>)
 800a4da:	5c8a      	ldrb	r2, [r1, r2]
 800a4dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a4e0:	7b7a      	ldrb	r2, [r7, #13]
 800a4e2:	4908      	ldr	r1, [pc, #32]	; (800a504 <UARTEx_SetNbDataToProcess+0x98>)
 800a4e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a4f2:	bf00      	nop
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	0800bc58 	.word	0x0800bc58
 800a504:	0800bc60 	.word	0x0800bc60

0800a508 <atoi>:
 800a508:	220a      	movs	r2, #10
 800a50a:	2100      	movs	r1, #0
 800a50c:	f000 b882 	b.w	800a614 <strtol>

0800a510 <_strtol_l.constprop.0>:
 800a510:	2b01      	cmp	r3, #1
 800a512:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a516:	d001      	beq.n	800a51c <_strtol_l.constprop.0+0xc>
 800a518:	2b24      	cmp	r3, #36	; 0x24
 800a51a:	d906      	bls.n	800a52a <_strtol_l.constprop.0+0x1a>
 800a51c:	f000 fa56 	bl	800a9cc <__errno>
 800a520:	2316      	movs	r3, #22
 800a522:	6003      	str	r3, [r0, #0]
 800a524:	2000      	movs	r0, #0
 800a526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a52a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a610 <_strtol_l.constprop.0+0x100>
 800a52e:	460d      	mov	r5, r1
 800a530:	462e      	mov	r6, r5
 800a532:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a536:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a53a:	f017 0708 	ands.w	r7, r7, #8
 800a53e:	d1f7      	bne.n	800a530 <_strtol_l.constprop.0+0x20>
 800a540:	2c2d      	cmp	r4, #45	; 0x2d
 800a542:	d132      	bne.n	800a5aa <_strtol_l.constprop.0+0x9a>
 800a544:	782c      	ldrb	r4, [r5, #0]
 800a546:	2701      	movs	r7, #1
 800a548:	1cb5      	adds	r5, r6, #2
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d05b      	beq.n	800a606 <_strtol_l.constprop.0+0xf6>
 800a54e:	2b10      	cmp	r3, #16
 800a550:	d109      	bne.n	800a566 <_strtol_l.constprop.0+0x56>
 800a552:	2c30      	cmp	r4, #48	; 0x30
 800a554:	d107      	bne.n	800a566 <_strtol_l.constprop.0+0x56>
 800a556:	782c      	ldrb	r4, [r5, #0]
 800a558:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a55c:	2c58      	cmp	r4, #88	; 0x58
 800a55e:	d14d      	bne.n	800a5fc <_strtol_l.constprop.0+0xec>
 800a560:	786c      	ldrb	r4, [r5, #1]
 800a562:	2310      	movs	r3, #16
 800a564:	3502      	adds	r5, #2
 800a566:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a56a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a56e:	f04f 0e00 	mov.w	lr, #0
 800a572:	fbb8 f9f3 	udiv	r9, r8, r3
 800a576:	4676      	mov	r6, lr
 800a578:	fb03 8a19 	mls	sl, r3, r9, r8
 800a57c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a580:	f1bc 0f09 	cmp.w	ip, #9
 800a584:	d816      	bhi.n	800a5b4 <_strtol_l.constprop.0+0xa4>
 800a586:	4664      	mov	r4, ip
 800a588:	42a3      	cmp	r3, r4
 800a58a:	dd24      	ble.n	800a5d6 <_strtol_l.constprop.0+0xc6>
 800a58c:	f1be 3fff 	cmp.w	lr, #4294967295
 800a590:	d008      	beq.n	800a5a4 <_strtol_l.constprop.0+0x94>
 800a592:	45b1      	cmp	r9, r6
 800a594:	d31c      	bcc.n	800a5d0 <_strtol_l.constprop.0+0xc0>
 800a596:	d101      	bne.n	800a59c <_strtol_l.constprop.0+0x8c>
 800a598:	45a2      	cmp	sl, r4
 800a59a:	db19      	blt.n	800a5d0 <_strtol_l.constprop.0+0xc0>
 800a59c:	fb06 4603 	mla	r6, r6, r3, r4
 800a5a0:	f04f 0e01 	mov.w	lr, #1
 800a5a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5a8:	e7e8      	b.n	800a57c <_strtol_l.constprop.0+0x6c>
 800a5aa:	2c2b      	cmp	r4, #43	; 0x2b
 800a5ac:	bf04      	itt	eq
 800a5ae:	782c      	ldrbeq	r4, [r5, #0]
 800a5b0:	1cb5      	addeq	r5, r6, #2
 800a5b2:	e7ca      	b.n	800a54a <_strtol_l.constprop.0+0x3a>
 800a5b4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a5b8:	f1bc 0f19 	cmp.w	ip, #25
 800a5bc:	d801      	bhi.n	800a5c2 <_strtol_l.constprop.0+0xb2>
 800a5be:	3c37      	subs	r4, #55	; 0x37
 800a5c0:	e7e2      	b.n	800a588 <_strtol_l.constprop.0+0x78>
 800a5c2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a5c6:	f1bc 0f19 	cmp.w	ip, #25
 800a5ca:	d804      	bhi.n	800a5d6 <_strtol_l.constprop.0+0xc6>
 800a5cc:	3c57      	subs	r4, #87	; 0x57
 800a5ce:	e7db      	b.n	800a588 <_strtol_l.constprop.0+0x78>
 800a5d0:	f04f 3eff 	mov.w	lr, #4294967295
 800a5d4:	e7e6      	b.n	800a5a4 <_strtol_l.constprop.0+0x94>
 800a5d6:	f1be 3fff 	cmp.w	lr, #4294967295
 800a5da:	d105      	bne.n	800a5e8 <_strtol_l.constprop.0+0xd8>
 800a5dc:	2322      	movs	r3, #34	; 0x22
 800a5de:	6003      	str	r3, [r0, #0]
 800a5e0:	4646      	mov	r6, r8
 800a5e2:	b942      	cbnz	r2, 800a5f6 <_strtol_l.constprop.0+0xe6>
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	e79e      	b.n	800a526 <_strtol_l.constprop.0+0x16>
 800a5e8:	b107      	cbz	r7, 800a5ec <_strtol_l.constprop.0+0xdc>
 800a5ea:	4276      	negs	r6, r6
 800a5ec:	2a00      	cmp	r2, #0
 800a5ee:	d0f9      	beq.n	800a5e4 <_strtol_l.constprop.0+0xd4>
 800a5f0:	f1be 0f00 	cmp.w	lr, #0
 800a5f4:	d000      	beq.n	800a5f8 <_strtol_l.constprop.0+0xe8>
 800a5f6:	1e69      	subs	r1, r5, #1
 800a5f8:	6011      	str	r1, [r2, #0]
 800a5fa:	e7f3      	b.n	800a5e4 <_strtol_l.constprop.0+0xd4>
 800a5fc:	2430      	movs	r4, #48	; 0x30
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1b1      	bne.n	800a566 <_strtol_l.constprop.0+0x56>
 800a602:	2308      	movs	r3, #8
 800a604:	e7af      	b.n	800a566 <_strtol_l.constprop.0+0x56>
 800a606:	2c30      	cmp	r4, #48	; 0x30
 800a608:	d0a5      	beq.n	800a556 <_strtol_l.constprop.0+0x46>
 800a60a:	230a      	movs	r3, #10
 800a60c:	e7ab      	b.n	800a566 <_strtol_l.constprop.0+0x56>
 800a60e:	bf00      	nop
 800a610:	0800bc69 	.word	0x0800bc69

0800a614 <strtol>:
 800a614:	4613      	mov	r3, r2
 800a616:	460a      	mov	r2, r1
 800a618:	4601      	mov	r1, r0
 800a61a:	4802      	ldr	r0, [pc, #8]	; (800a624 <strtol+0x10>)
 800a61c:	6800      	ldr	r0, [r0, #0]
 800a61e:	f7ff bf77 	b.w	800a510 <_strtol_l.constprop.0>
 800a622:	bf00      	nop
 800a624:	20000138 	.word	0x20000138

0800a628 <std>:
 800a628:	2300      	movs	r3, #0
 800a62a:	b510      	push	{r4, lr}
 800a62c:	4604      	mov	r4, r0
 800a62e:	e9c0 3300 	strd	r3, r3, [r0]
 800a632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a636:	6083      	str	r3, [r0, #8]
 800a638:	8181      	strh	r1, [r0, #12]
 800a63a:	6643      	str	r3, [r0, #100]	; 0x64
 800a63c:	81c2      	strh	r2, [r0, #14]
 800a63e:	6183      	str	r3, [r0, #24]
 800a640:	4619      	mov	r1, r3
 800a642:	2208      	movs	r2, #8
 800a644:	305c      	adds	r0, #92	; 0x5c
 800a646:	f000 f916 	bl	800a876 <memset>
 800a64a:	4b05      	ldr	r3, [pc, #20]	; (800a660 <std+0x38>)
 800a64c:	6263      	str	r3, [r4, #36]	; 0x24
 800a64e:	4b05      	ldr	r3, [pc, #20]	; (800a664 <std+0x3c>)
 800a650:	62a3      	str	r3, [r4, #40]	; 0x28
 800a652:	4b05      	ldr	r3, [pc, #20]	; (800a668 <std+0x40>)
 800a654:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a656:	4b05      	ldr	r3, [pc, #20]	; (800a66c <std+0x44>)
 800a658:	6224      	str	r4, [r4, #32]
 800a65a:	6323      	str	r3, [r4, #48]	; 0x30
 800a65c:	bd10      	pop	{r4, pc}
 800a65e:	bf00      	nop
 800a660:	0800a7f1 	.word	0x0800a7f1
 800a664:	0800a813 	.word	0x0800a813
 800a668:	0800a84b 	.word	0x0800a84b
 800a66c:	0800a86f 	.word	0x0800a86f

0800a670 <stdio_exit_handler>:
 800a670:	4a02      	ldr	r2, [pc, #8]	; (800a67c <stdio_exit_handler+0xc>)
 800a672:	4903      	ldr	r1, [pc, #12]	; (800a680 <stdio_exit_handler+0x10>)
 800a674:	4803      	ldr	r0, [pc, #12]	; (800a684 <stdio_exit_handler+0x14>)
 800a676:	f000 b869 	b.w	800a74c <_fwalk_sglue>
 800a67a:	bf00      	nop
 800a67c:	200000e0 	.word	0x200000e0
 800a680:	0800b33d 	.word	0x0800b33d
 800a684:	200000ec 	.word	0x200000ec

0800a688 <cleanup_stdio>:
 800a688:	6841      	ldr	r1, [r0, #4]
 800a68a:	4b0c      	ldr	r3, [pc, #48]	; (800a6bc <cleanup_stdio+0x34>)
 800a68c:	4299      	cmp	r1, r3
 800a68e:	b510      	push	{r4, lr}
 800a690:	4604      	mov	r4, r0
 800a692:	d001      	beq.n	800a698 <cleanup_stdio+0x10>
 800a694:	f000 fe52 	bl	800b33c <_fflush_r>
 800a698:	68a1      	ldr	r1, [r4, #8]
 800a69a:	4b09      	ldr	r3, [pc, #36]	; (800a6c0 <cleanup_stdio+0x38>)
 800a69c:	4299      	cmp	r1, r3
 800a69e:	d002      	beq.n	800a6a6 <cleanup_stdio+0x1e>
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f000 fe4b 	bl	800b33c <_fflush_r>
 800a6a6:	68e1      	ldr	r1, [r4, #12]
 800a6a8:	4b06      	ldr	r3, [pc, #24]	; (800a6c4 <cleanup_stdio+0x3c>)
 800a6aa:	4299      	cmp	r1, r3
 800a6ac:	d004      	beq.n	800a6b8 <cleanup_stdio+0x30>
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6b4:	f000 be42 	b.w	800b33c <_fflush_r>
 800a6b8:	bd10      	pop	{r4, pc}
 800a6ba:	bf00      	nop
 800a6bc:	2000062c 	.word	0x2000062c
 800a6c0:	20000694 	.word	0x20000694
 800a6c4:	200006fc 	.word	0x200006fc

0800a6c8 <global_stdio_init.part.0>:
 800a6c8:	b510      	push	{r4, lr}
 800a6ca:	4b0b      	ldr	r3, [pc, #44]	; (800a6f8 <global_stdio_init.part.0+0x30>)
 800a6cc:	4c0b      	ldr	r4, [pc, #44]	; (800a6fc <global_stdio_init.part.0+0x34>)
 800a6ce:	4a0c      	ldr	r2, [pc, #48]	; (800a700 <global_stdio_init.part.0+0x38>)
 800a6d0:	601a      	str	r2, [r3, #0]
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	2104      	movs	r1, #4
 800a6d8:	f7ff ffa6 	bl	800a628 <std>
 800a6dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	2109      	movs	r1, #9
 800a6e4:	f7ff ffa0 	bl	800a628 <std>
 800a6e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a6ec:	2202      	movs	r2, #2
 800a6ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6f2:	2112      	movs	r1, #18
 800a6f4:	f7ff bf98 	b.w	800a628 <std>
 800a6f8:	20000764 	.word	0x20000764
 800a6fc:	2000062c 	.word	0x2000062c
 800a700:	0800a671 	.word	0x0800a671

0800a704 <__sfp_lock_acquire>:
 800a704:	4801      	ldr	r0, [pc, #4]	; (800a70c <__sfp_lock_acquire+0x8>)
 800a706:	f000 b98b 	b.w	800aa20 <__retarget_lock_acquire_recursive>
 800a70a:	bf00      	nop
 800a70c:	2000076d 	.word	0x2000076d

0800a710 <__sfp_lock_release>:
 800a710:	4801      	ldr	r0, [pc, #4]	; (800a718 <__sfp_lock_release+0x8>)
 800a712:	f000 b986 	b.w	800aa22 <__retarget_lock_release_recursive>
 800a716:	bf00      	nop
 800a718:	2000076d 	.word	0x2000076d

0800a71c <__sinit>:
 800a71c:	b510      	push	{r4, lr}
 800a71e:	4604      	mov	r4, r0
 800a720:	f7ff fff0 	bl	800a704 <__sfp_lock_acquire>
 800a724:	6a23      	ldr	r3, [r4, #32]
 800a726:	b11b      	cbz	r3, 800a730 <__sinit+0x14>
 800a728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a72c:	f7ff bff0 	b.w	800a710 <__sfp_lock_release>
 800a730:	4b04      	ldr	r3, [pc, #16]	; (800a744 <__sinit+0x28>)
 800a732:	6223      	str	r3, [r4, #32]
 800a734:	4b04      	ldr	r3, [pc, #16]	; (800a748 <__sinit+0x2c>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d1f5      	bne.n	800a728 <__sinit+0xc>
 800a73c:	f7ff ffc4 	bl	800a6c8 <global_stdio_init.part.0>
 800a740:	e7f2      	b.n	800a728 <__sinit+0xc>
 800a742:	bf00      	nop
 800a744:	0800a689 	.word	0x0800a689
 800a748:	20000764 	.word	0x20000764

0800a74c <_fwalk_sglue>:
 800a74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a750:	4607      	mov	r7, r0
 800a752:	4688      	mov	r8, r1
 800a754:	4614      	mov	r4, r2
 800a756:	2600      	movs	r6, #0
 800a758:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a75c:	f1b9 0901 	subs.w	r9, r9, #1
 800a760:	d505      	bpl.n	800a76e <_fwalk_sglue+0x22>
 800a762:	6824      	ldr	r4, [r4, #0]
 800a764:	2c00      	cmp	r4, #0
 800a766:	d1f7      	bne.n	800a758 <_fwalk_sglue+0xc>
 800a768:	4630      	mov	r0, r6
 800a76a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a76e:	89ab      	ldrh	r3, [r5, #12]
 800a770:	2b01      	cmp	r3, #1
 800a772:	d907      	bls.n	800a784 <_fwalk_sglue+0x38>
 800a774:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a778:	3301      	adds	r3, #1
 800a77a:	d003      	beq.n	800a784 <_fwalk_sglue+0x38>
 800a77c:	4629      	mov	r1, r5
 800a77e:	4638      	mov	r0, r7
 800a780:	47c0      	blx	r8
 800a782:	4306      	orrs	r6, r0
 800a784:	3568      	adds	r5, #104	; 0x68
 800a786:	e7e9      	b.n	800a75c <_fwalk_sglue+0x10>

0800a788 <sniprintf>:
 800a788:	b40c      	push	{r2, r3}
 800a78a:	b530      	push	{r4, r5, lr}
 800a78c:	4b17      	ldr	r3, [pc, #92]	; (800a7ec <sniprintf+0x64>)
 800a78e:	1e0c      	subs	r4, r1, #0
 800a790:	681d      	ldr	r5, [r3, #0]
 800a792:	b09d      	sub	sp, #116	; 0x74
 800a794:	da08      	bge.n	800a7a8 <sniprintf+0x20>
 800a796:	238b      	movs	r3, #139	; 0x8b
 800a798:	602b      	str	r3, [r5, #0]
 800a79a:	f04f 30ff 	mov.w	r0, #4294967295
 800a79e:	b01d      	add	sp, #116	; 0x74
 800a7a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7a4:	b002      	add	sp, #8
 800a7a6:	4770      	bx	lr
 800a7a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a7ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a7b0:	bf14      	ite	ne
 800a7b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a7b6:	4623      	moveq	r3, r4
 800a7b8:	9304      	str	r3, [sp, #16]
 800a7ba:	9307      	str	r3, [sp, #28]
 800a7bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a7c0:	9002      	str	r0, [sp, #8]
 800a7c2:	9006      	str	r0, [sp, #24]
 800a7c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a7c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a7ca:	ab21      	add	r3, sp, #132	; 0x84
 800a7cc:	a902      	add	r1, sp, #8
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	9301      	str	r3, [sp, #4]
 800a7d2:	f000 fa9f 	bl	800ad14 <_svfiprintf_r>
 800a7d6:	1c43      	adds	r3, r0, #1
 800a7d8:	bfbc      	itt	lt
 800a7da:	238b      	movlt	r3, #139	; 0x8b
 800a7dc:	602b      	strlt	r3, [r5, #0]
 800a7de:	2c00      	cmp	r4, #0
 800a7e0:	d0dd      	beq.n	800a79e <sniprintf+0x16>
 800a7e2:	9b02      	ldr	r3, [sp, #8]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	701a      	strb	r2, [r3, #0]
 800a7e8:	e7d9      	b.n	800a79e <sniprintf+0x16>
 800a7ea:	bf00      	nop
 800a7ec:	20000138 	.word	0x20000138

0800a7f0 <__sread>:
 800a7f0:	b510      	push	{r4, lr}
 800a7f2:	460c      	mov	r4, r1
 800a7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7f8:	f000 f8c4 	bl	800a984 <_read_r>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	bfab      	itete	ge
 800a800:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a802:	89a3      	ldrhlt	r3, [r4, #12]
 800a804:	181b      	addge	r3, r3, r0
 800a806:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a80a:	bfac      	ite	ge
 800a80c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a80e:	81a3      	strhlt	r3, [r4, #12]
 800a810:	bd10      	pop	{r4, pc}

0800a812 <__swrite>:
 800a812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a816:	461f      	mov	r7, r3
 800a818:	898b      	ldrh	r3, [r1, #12]
 800a81a:	05db      	lsls	r3, r3, #23
 800a81c:	4605      	mov	r5, r0
 800a81e:	460c      	mov	r4, r1
 800a820:	4616      	mov	r6, r2
 800a822:	d505      	bpl.n	800a830 <__swrite+0x1e>
 800a824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a828:	2302      	movs	r3, #2
 800a82a:	2200      	movs	r2, #0
 800a82c:	f000 f898 	bl	800a960 <_lseek_r>
 800a830:	89a3      	ldrh	r3, [r4, #12]
 800a832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a83a:	81a3      	strh	r3, [r4, #12]
 800a83c:	4632      	mov	r2, r6
 800a83e:	463b      	mov	r3, r7
 800a840:	4628      	mov	r0, r5
 800a842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a846:	f000 b8af 	b.w	800a9a8 <_write_r>

0800a84a <__sseek>:
 800a84a:	b510      	push	{r4, lr}
 800a84c:	460c      	mov	r4, r1
 800a84e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a852:	f000 f885 	bl	800a960 <_lseek_r>
 800a856:	1c43      	adds	r3, r0, #1
 800a858:	89a3      	ldrh	r3, [r4, #12]
 800a85a:	bf15      	itete	ne
 800a85c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a85e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a862:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a866:	81a3      	strheq	r3, [r4, #12]
 800a868:	bf18      	it	ne
 800a86a:	81a3      	strhne	r3, [r4, #12]
 800a86c:	bd10      	pop	{r4, pc}

0800a86e <__sclose>:
 800a86e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a872:	f000 b865 	b.w	800a940 <_close_r>

0800a876 <memset>:
 800a876:	4402      	add	r2, r0
 800a878:	4603      	mov	r3, r0
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d100      	bne.n	800a880 <memset+0xa>
 800a87e:	4770      	bx	lr
 800a880:	f803 1b01 	strb.w	r1, [r3], #1
 800a884:	e7f9      	b.n	800a87a <memset+0x4>
	...

0800a888 <strtok>:
 800a888:	4b16      	ldr	r3, [pc, #88]	; (800a8e4 <strtok+0x5c>)
 800a88a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a88c:	681e      	ldr	r6, [r3, #0]
 800a88e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800a890:	4605      	mov	r5, r0
 800a892:	b9fc      	cbnz	r4, 800a8d4 <strtok+0x4c>
 800a894:	2050      	movs	r0, #80	; 0x50
 800a896:	9101      	str	r1, [sp, #4]
 800a898:	f000 f92e 	bl	800aaf8 <malloc>
 800a89c:	9901      	ldr	r1, [sp, #4]
 800a89e:	6470      	str	r0, [r6, #68]	; 0x44
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	b920      	cbnz	r0, 800a8ae <strtok+0x26>
 800a8a4:	4b10      	ldr	r3, [pc, #64]	; (800a8e8 <strtok+0x60>)
 800a8a6:	4811      	ldr	r0, [pc, #68]	; (800a8ec <strtok+0x64>)
 800a8a8:	215b      	movs	r1, #91	; 0x5b
 800a8aa:	f000 f8bb 	bl	800aa24 <__assert_func>
 800a8ae:	e9c0 4400 	strd	r4, r4, [r0]
 800a8b2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a8b6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a8ba:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a8be:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a8c2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a8c6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a8ca:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a8ce:	6184      	str	r4, [r0, #24]
 800a8d0:	7704      	strb	r4, [r0, #28]
 800a8d2:	6244      	str	r4, [r0, #36]	; 0x24
 800a8d4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	4628      	mov	r0, r5
 800a8da:	b002      	add	sp, #8
 800a8dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a8e0:	f000 b806 	b.w	800a8f0 <__strtok_r>
 800a8e4:	20000138 	.word	0x20000138
 800a8e8:	0800bd69 	.word	0x0800bd69
 800a8ec:	0800bd80 	.word	0x0800bd80

0800a8f0 <__strtok_r>:
 800a8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8f2:	b908      	cbnz	r0, 800a8f8 <__strtok_r+0x8>
 800a8f4:	6810      	ldr	r0, [r2, #0]
 800a8f6:	b188      	cbz	r0, 800a91c <__strtok_r+0x2c>
 800a8f8:	4604      	mov	r4, r0
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a900:	460f      	mov	r7, r1
 800a902:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a906:	b91e      	cbnz	r6, 800a910 <__strtok_r+0x20>
 800a908:	b965      	cbnz	r5, 800a924 <__strtok_r+0x34>
 800a90a:	6015      	str	r5, [r2, #0]
 800a90c:	4628      	mov	r0, r5
 800a90e:	e005      	b.n	800a91c <__strtok_r+0x2c>
 800a910:	42b5      	cmp	r5, r6
 800a912:	d1f6      	bne.n	800a902 <__strtok_r+0x12>
 800a914:	2b00      	cmp	r3, #0
 800a916:	d1f0      	bne.n	800a8fa <__strtok_r+0xa>
 800a918:	6014      	str	r4, [r2, #0]
 800a91a:	7003      	strb	r3, [r0, #0]
 800a91c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a91e:	461c      	mov	r4, r3
 800a920:	e00c      	b.n	800a93c <__strtok_r+0x4c>
 800a922:	b915      	cbnz	r5, 800a92a <__strtok_r+0x3a>
 800a924:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a928:	460e      	mov	r6, r1
 800a92a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a92e:	42ab      	cmp	r3, r5
 800a930:	d1f7      	bne.n	800a922 <__strtok_r+0x32>
 800a932:	2b00      	cmp	r3, #0
 800a934:	d0f3      	beq.n	800a91e <__strtok_r+0x2e>
 800a936:	2300      	movs	r3, #0
 800a938:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a93c:	6014      	str	r4, [r2, #0]
 800a93e:	e7ed      	b.n	800a91c <__strtok_r+0x2c>

0800a940 <_close_r>:
 800a940:	b538      	push	{r3, r4, r5, lr}
 800a942:	4d06      	ldr	r5, [pc, #24]	; (800a95c <_close_r+0x1c>)
 800a944:	2300      	movs	r3, #0
 800a946:	4604      	mov	r4, r0
 800a948:	4608      	mov	r0, r1
 800a94a:	602b      	str	r3, [r5, #0]
 800a94c:	f7f7 f80d 	bl	800196a <_close>
 800a950:	1c43      	adds	r3, r0, #1
 800a952:	d102      	bne.n	800a95a <_close_r+0x1a>
 800a954:	682b      	ldr	r3, [r5, #0]
 800a956:	b103      	cbz	r3, 800a95a <_close_r+0x1a>
 800a958:	6023      	str	r3, [r4, #0]
 800a95a:	bd38      	pop	{r3, r4, r5, pc}
 800a95c:	20000768 	.word	0x20000768

0800a960 <_lseek_r>:
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	4d07      	ldr	r5, [pc, #28]	; (800a980 <_lseek_r+0x20>)
 800a964:	4604      	mov	r4, r0
 800a966:	4608      	mov	r0, r1
 800a968:	4611      	mov	r1, r2
 800a96a:	2200      	movs	r2, #0
 800a96c:	602a      	str	r2, [r5, #0]
 800a96e:	461a      	mov	r2, r3
 800a970:	f7f7 f822 	bl	80019b8 <_lseek>
 800a974:	1c43      	adds	r3, r0, #1
 800a976:	d102      	bne.n	800a97e <_lseek_r+0x1e>
 800a978:	682b      	ldr	r3, [r5, #0]
 800a97a:	b103      	cbz	r3, 800a97e <_lseek_r+0x1e>
 800a97c:	6023      	str	r3, [r4, #0]
 800a97e:	bd38      	pop	{r3, r4, r5, pc}
 800a980:	20000768 	.word	0x20000768

0800a984 <_read_r>:
 800a984:	b538      	push	{r3, r4, r5, lr}
 800a986:	4d07      	ldr	r5, [pc, #28]	; (800a9a4 <_read_r+0x20>)
 800a988:	4604      	mov	r4, r0
 800a98a:	4608      	mov	r0, r1
 800a98c:	4611      	mov	r1, r2
 800a98e:	2200      	movs	r2, #0
 800a990:	602a      	str	r2, [r5, #0]
 800a992:	461a      	mov	r2, r3
 800a994:	f7f6 ffb0 	bl	80018f8 <_read>
 800a998:	1c43      	adds	r3, r0, #1
 800a99a:	d102      	bne.n	800a9a2 <_read_r+0x1e>
 800a99c:	682b      	ldr	r3, [r5, #0]
 800a99e:	b103      	cbz	r3, 800a9a2 <_read_r+0x1e>
 800a9a0:	6023      	str	r3, [r4, #0]
 800a9a2:	bd38      	pop	{r3, r4, r5, pc}
 800a9a4:	20000768 	.word	0x20000768

0800a9a8 <_write_r>:
 800a9a8:	b538      	push	{r3, r4, r5, lr}
 800a9aa:	4d07      	ldr	r5, [pc, #28]	; (800a9c8 <_write_r+0x20>)
 800a9ac:	4604      	mov	r4, r0
 800a9ae:	4608      	mov	r0, r1
 800a9b0:	4611      	mov	r1, r2
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	602a      	str	r2, [r5, #0]
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	f7f6 ffbb 	bl	8001932 <_write>
 800a9bc:	1c43      	adds	r3, r0, #1
 800a9be:	d102      	bne.n	800a9c6 <_write_r+0x1e>
 800a9c0:	682b      	ldr	r3, [r5, #0]
 800a9c2:	b103      	cbz	r3, 800a9c6 <_write_r+0x1e>
 800a9c4:	6023      	str	r3, [r4, #0]
 800a9c6:	bd38      	pop	{r3, r4, r5, pc}
 800a9c8:	20000768 	.word	0x20000768

0800a9cc <__errno>:
 800a9cc:	4b01      	ldr	r3, [pc, #4]	; (800a9d4 <__errno+0x8>)
 800a9ce:	6818      	ldr	r0, [r3, #0]
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	20000138 	.word	0x20000138

0800a9d8 <__libc_init_array>:
 800a9d8:	b570      	push	{r4, r5, r6, lr}
 800a9da:	4d0d      	ldr	r5, [pc, #52]	; (800aa10 <__libc_init_array+0x38>)
 800a9dc:	4c0d      	ldr	r4, [pc, #52]	; (800aa14 <__libc_init_array+0x3c>)
 800a9de:	1b64      	subs	r4, r4, r5
 800a9e0:	10a4      	asrs	r4, r4, #2
 800a9e2:	2600      	movs	r6, #0
 800a9e4:	42a6      	cmp	r6, r4
 800a9e6:	d109      	bne.n	800a9fc <__libc_init_array+0x24>
 800a9e8:	4d0b      	ldr	r5, [pc, #44]	; (800aa18 <__libc_init_array+0x40>)
 800a9ea:	4c0c      	ldr	r4, [pc, #48]	; (800aa1c <__libc_init_array+0x44>)
 800a9ec:	f000 fff8 	bl	800b9e0 <_init>
 800a9f0:	1b64      	subs	r4, r4, r5
 800a9f2:	10a4      	asrs	r4, r4, #2
 800a9f4:	2600      	movs	r6, #0
 800a9f6:	42a6      	cmp	r6, r4
 800a9f8:	d105      	bne.n	800aa06 <__libc_init_array+0x2e>
 800a9fa:	bd70      	pop	{r4, r5, r6, pc}
 800a9fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa00:	4798      	blx	r3
 800aa02:	3601      	adds	r6, #1
 800aa04:	e7ee      	b.n	800a9e4 <__libc_init_array+0xc>
 800aa06:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa0a:	4798      	blx	r3
 800aa0c:	3601      	adds	r6, #1
 800aa0e:	e7f2      	b.n	800a9f6 <__libc_init_array+0x1e>
 800aa10:	0800be54 	.word	0x0800be54
 800aa14:	0800be54 	.word	0x0800be54
 800aa18:	0800be54 	.word	0x0800be54
 800aa1c:	0800be58 	.word	0x0800be58

0800aa20 <__retarget_lock_acquire_recursive>:
 800aa20:	4770      	bx	lr

0800aa22 <__retarget_lock_release_recursive>:
 800aa22:	4770      	bx	lr

0800aa24 <__assert_func>:
 800aa24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa26:	4614      	mov	r4, r2
 800aa28:	461a      	mov	r2, r3
 800aa2a:	4b09      	ldr	r3, [pc, #36]	; (800aa50 <__assert_func+0x2c>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4605      	mov	r5, r0
 800aa30:	68d8      	ldr	r0, [r3, #12]
 800aa32:	b14c      	cbz	r4, 800aa48 <__assert_func+0x24>
 800aa34:	4b07      	ldr	r3, [pc, #28]	; (800aa54 <__assert_func+0x30>)
 800aa36:	9100      	str	r1, [sp, #0]
 800aa38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa3c:	4906      	ldr	r1, [pc, #24]	; (800aa58 <__assert_func+0x34>)
 800aa3e:	462b      	mov	r3, r5
 800aa40:	f000 fca4 	bl	800b38c <fiprintf>
 800aa44:	f000 fcec 	bl	800b420 <abort>
 800aa48:	4b04      	ldr	r3, [pc, #16]	; (800aa5c <__assert_func+0x38>)
 800aa4a:	461c      	mov	r4, r3
 800aa4c:	e7f3      	b.n	800aa36 <__assert_func+0x12>
 800aa4e:	bf00      	nop
 800aa50:	20000138 	.word	0x20000138
 800aa54:	0800bdda 	.word	0x0800bdda
 800aa58:	0800bde7 	.word	0x0800bde7
 800aa5c:	0800be15 	.word	0x0800be15

0800aa60 <_free_r>:
 800aa60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa62:	2900      	cmp	r1, #0
 800aa64:	d044      	beq.n	800aaf0 <_free_r+0x90>
 800aa66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa6a:	9001      	str	r0, [sp, #4]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	f1a1 0404 	sub.w	r4, r1, #4
 800aa72:	bfb8      	it	lt
 800aa74:	18e4      	addlt	r4, r4, r3
 800aa76:	f000 f8e7 	bl	800ac48 <__malloc_lock>
 800aa7a:	4a1e      	ldr	r2, [pc, #120]	; (800aaf4 <_free_r+0x94>)
 800aa7c:	9801      	ldr	r0, [sp, #4]
 800aa7e:	6813      	ldr	r3, [r2, #0]
 800aa80:	b933      	cbnz	r3, 800aa90 <_free_r+0x30>
 800aa82:	6063      	str	r3, [r4, #4]
 800aa84:	6014      	str	r4, [r2, #0]
 800aa86:	b003      	add	sp, #12
 800aa88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa8c:	f000 b8e2 	b.w	800ac54 <__malloc_unlock>
 800aa90:	42a3      	cmp	r3, r4
 800aa92:	d908      	bls.n	800aaa6 <_free_r+0x46>
 800aa94:	6825      	ldr	r5, [r4, #0]
 800aa96:	1961      	adds	r1, r4, r5
 800aa98:	428b      	cmp	r3, r1
 800aa9a:	bf01      	itttt	eq
 800aa9c:	6819      	ldreq	r1, [r3, #0]
 800aa9e:	685b      	ldreq	r3, [r3, #4]
 800aaa0:	1949      	addeq	r1, r1, r5
 800aaa2:	6021      	streq	r1, [r4, #0]
 800aaa4:	e7ed      	b.n	800aa82 <_free_r+0x22>
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	b10b      	cbz	r3, 800aab0 <_free_r+0x50>
 800aaac:	42a3      	cmp	r3, r4
 800aaae:	d9fa      	bls.n	800aaa6 <_free_r+0x46>
 800aab0:	6811      	ldr	r1, [r2, #0]
 800aab2:	1855      	adds	r5, r2, r1
 800aab4:	42a5      	cmp	r5, r4
 800aab6:	d10b      	bne.n	800aad0 <_free_r+0x70>
 800aab8:	6824      	ldr	r4, [r4, #0]
 800aaba:	4421      	add	r1, r4
 800aabc:	1854      	adds	r4, r2, r1
 800aabe:	42a3      	cmp	r3, r4
 800aac0:	6011      	str	r1, [r2, #0]
 800aac2:	d1e0      	bne.n	800aa86 <_free_r+0x26>
 800aac4:	681c      	ldr	r4, [r3, #0]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	6053      	str	r3, [r2, #4]
 800aaca:	440c      	add	r4, r1
 800aacc:	6014      	str	r4, [r2, #0]
 800aace:	e7da      	b.n	800aa86 <_free_r+0x26>
 800aad0:	d902      	bls.n	800aad8 <_free_r+0x78>
 800aad2:	230c      	movs	r3, #12
 800aad4:	6003      	str	r3, [r0, #0]
 800aad6:	e7d6      	b.n	800aa86 <_free_r+0x26>
 800aad8:	6825      	ldr	r5, [r4, #0]
 800aada:	1961      	adds	r1, r4, r5
 800aadc:	428b      	cmp	r3, r1
 800aade:	bf04      	itt	eq
 800aae0:	6819      	ldreq	r1, [r3, #0]
 800aae2:	685b      	ldreq	r3, [r3, #4]
 800aae4:	6063      	str	r3, [r4, #4]
 800aae6:	bf04      	itt	eq
 800aae8:	1949      	addeq	r1, r1, r5
 800aaea:	6021      	streq	r1, [r4, #0]
 800aaec:	6054      	str	r4, [r2, #4]
 800aaee:	e7ca      	b.n	800aa86 <_free_r+0x26>
 800aaf0:	b003      	add	sp, #12
 800aaf2:	bd30      	pop	{r4, r5, pc}
 800aaf4:	20000770 	.word	0x20000770

0800aaf8 <malloc>:
 800aaf8:	4b02      	ldr	r3, [pc, #8]	; (800ab04 <malloc+0xc>)
 800aafa:	4601      	mov	r1, r0
 800aafc:	6818      	ldr	r0, [r3, #0]
 800aafe:	f000 b823 	b.w	800ab48 <_malloc_r>
 800ab02:	bf00      	nop
 800ab04:	20000138 	.word	0x20000138

0800ab08 <sbrk_aligned>:
 800ab08:	b570      	push	{r4, r5, r6, lr}
 800ab0a:	4e0e      	ldr	r6, [pc, #56]	; (800ab44 <sbrk_aligned+0x3c>)
 800ab0c:	460c      	mov	r4, r1
 800ab0e:	6831      	ldr	r1, [r6, #0]
 800ab10:	4605      	mov	r5, r0
 800ab12:	b911      	cbnz	r1, 800ab1a <sbrk_aligned+0x12>
 800ab14:	f000 fc66 	bl	800b3e4 <_sbrk_r>
 800ab18:	6030      	str	r0, [r6, #0]
 800ab1a:	4621      	mov	r1, r4
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	f000 fc61 	bl	800b3e4 <_sbrk_r>
 800ab22:	1c43      	adds	r3, r0, #1
 800ab24:	d00a      	beq.n	800ab3c <sbrk_aligned+0x34>
 800ab26:	1cc4      	adds	r4, r0, #3
 800ab28:	f024 0403 	bic.w	r4, r4, #3
 800ab2c:	42a0      	cmp	r0, r4
 800ab2e:	d007      	beq.n	800ab40 <sbrk_aligned+0x38>
 800ab30:	1a21      	subs	r1, r4, r0
 800ab32:	4628      	mov	r0, r5
 800ab34:	f000 fc56 	bl	800b3e4 <_sbrk_r>
 800ab38:	3001      	adds	r0, #1
 800ab3a:	d101      	bne.n	800ab40 <sbrk_aligned+0x38>
 800ab3c:	f04f 34ff 	mov.w	r4, #4294967295
 800ab40:	4620      	mov	r0, r4
 800ab42:	bd70      	pop	{r4, r5, r6, pc}
 800ab44:	20000774 	.word	0x20000774

0800ab48 <_malloc_r>:
 800ab48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab4c:	1ccd      	adds	r5, r1, #3
 800ab4e:	f025 0503 	bic.w	r5, r5, #3
 800ab52:	3508      	adds	r5, #8
 800ab54:	2d0c      	cmp	r5, #12
 800ab56:	bf38      	it	cc
 800ab58:	250c      	movcc	r5, #12
 800ab5a:	2d00      	cmp	r5, #0
 800ab5c:	4607      	mov	r7, r0
 800ab5e:	db01      	blt.n	800ab64 <_malloc_r+0x1c>
 800ab60:	42a9      	cmp	r1, r5
 800ab62:	d905      	bls.n	800ab70 <_malloc_r+0x28>
 800ab64:	230c      	movs	r3, #12
 800ab66:	603b      	str	r3, [r7, #0]
 800ab68:	2600      	movs	r6, #0
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ac44 <_malloc_r+0xfc>
 800ab74:	f000 f868 	bl	800ac48 <__malloc_lock>
 800ab78:	f8d8 3000 	ldr.w	r3, [r8]
 800ab7c:	461c      	mov	r4, r3
 800ab7e:	bb5c      	cbnz	r4, 800abd8 <_malloc_r+0x90>
 800ab80:	4629      	mov	r1, r5
 800ab82:	4638      	mov	r0, r7
 800ab84:	f7ff ffc0 	bl	800ab08 <sbrk_aligned>
 800ab88:	1c43      	adds	r3, r0, #1
 800ab8a:	4604      	mov	r4, r0
 800ab8c:	d155      	bne.n	800ac3a <_malloc_r+0xf2>
 800ab8e:	f8d8 4000 	ldr.w	r4, [r8]
 800ab92:	4626      	mov	r6, r4
 800ab94:	2e00      	cmp	r6, #0
 800ab96:	d145      	bne.n	800ac24 <_malloc_r+0xdc>
 800ab98:	2c00      	cmp	r4, #0
 800ab9a:	d048      	beq.n	800ac2e <_malloc_r+0xe6>
 800ab9c:	6823      	ldr	r3, [r4, #0]
 800ab9e:	4631      	mov	r1, r6
 800aba0:	4638      	mov	r0, r7
 800aba2:	eb04 0903 	add.w	r9, r4, r3
 800aba6:	f000 fc1d 	bl	800b3e4 <_sbrk_r>
 800abaa:	4581      	cmp	r9, r0
 800abac:	d13f      	bne.n	800ac2e <_malloc_r+0xe6>
 800abae:	6821      	ldr	r1, [r4, #0]
 800abb0:	1a6d      	subs	r5, r5, r1
 800abb2:	4629      	mov	r1, r5
 800abb4:	4638      	mov	r0, r7
 800abb6:	f7ff ffa7 	bl	800ab08 <sbrk_aligned>
 800abba:	3001      	adds	r0, #1
 800abbc:	d037      	beq.n	800ac2e <_malloc_r+0xe6>
 800abbe:	6823      	ldr	r3, [r4, #0]
 800abc0:	442b      	add	r3, r5
 800abc2:	6023      	str	r3, [r4, #0]
 800abc4:	f8d8 3000 	ldr.w	r3, [r8]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d038      	beq.n	800ac3e <_malloc_r+0xf6>
 800abcc:	685a      	ldr	r2, [r3, #4]
 800abce:	42a2      	cmp	r2, r4
 800abd0:	d12b      	bne.n	800ac2a <_malloc_r+0xe2>
 800abd2:	2200      	movs	r2, #0
 800abd4:	605a      	str	r2, [r3, #4]
 800abd6:	e00f      	b.n	800abf8 <_malloc_r+0xb0>
 800abd8:	6822      	ldr	r2, [r4, #0]
 800abda:	1b52      	subs	r2, r2, r5
 800abdc:	d41f      	bmi.n	800ac1e <_malloc_r+0xd6>
 800abde:	2a0b      	cmp	r2, #11
 800abe0:	d917      	bls.n	800ac12 <_malloc_r+0xca>
 800abe2:	1961      	adds	r1, r4, r5
 800abe4:	42a3      	cmp	r3, r4
 800abe6:	6025      	str	r5, [r4, #0]
 800abe8:	bf18      	it	ne
 800abea:	6059      	strne	r1, [r3, #4]
 800abec:	6863      	ldr	r3, [r4, #4]
 800abee:	bf08      	it	eq
 800abf0:	f8c8 1000 	streq.w	r1, [r8]
 800abf4:	5162      	str	r2, [r4, r5]
 800abf6:	604b      	str	r3, [r1, #4]
 800abf8:	4638      	mov	r0, r7
 800abfa:	f104 060b 	add.w	r6, r4, #11
 800abfe:	f000 f829 	bl	800ac54 <__malloc_unlock>
 800ac02:	f026 0607 	bic.w	r6, r6, #7
 800ac06:	1d23      	adds	r3, r4, #4
 800ac08:	1af2      	subs	r2, r6, r3
 800ac0a:	d0ae      	beq.n	800ab6a <_malloc_r+0x22>
 800ac0c:	1b9b      	subs	r3, r3, r6
 800ac0e:	50a3      	str	r3, [r4, r2]
 800ac10:	e7ab      	b.n	800ab6a <_malloc_r+0x22>
 800ac12:	42a3      	cmp	r3, r4
 800ac14:	6862      	ldr	r2, [r4, #4]
 800ac16:	d1dd      	bne.n	800abd4 <_malloc_r+0x8c>
 800ac18:	f8c8 2000 	str.w	r2, [r8]
 800ac1c:	e7ec      	b.n	800abf8 <_malloc_r+0xb0>
 800ac1e:	4623      	mov	r3, r4
 800ac20:	6864      	ldr	r4, [r4, #4]
 800ac22:	e7ac      	b.n	800ab7e <_malloc_r+0x36>
 800ac24:	4634      	mov	r4, r6
 800ac26:	6876      	ldr	r6, [r6, #4]
 800ac28:	e7b4      	b.n	800ab94 <_malloc_r+0x4c>
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	e7cc      	b.n	800abc8 <_malloc_r+0x80>
 800ac2e:	230c      	movs	r3, #12
 800ac30:	603b      	str	r3, [r7, #0]
 800ac32:	4638      	mov	r0, r7
 800ac34:	f000 f80e 	bl	800ac54 <__malloc_unlock>
 800ac38:	e797      	b.n	800ab6a <_malloc_r+0x22>
 800ac3a:	6025      	str	r5, [r4, #0]
 800ac3c:	e7dc      	b.n	800abf8 <_malloc_r+0xb0>
 800ac3e:	605b      	str	r3, [r3, #4]
 800ac40:	deff      	udf	#255	; 0xff
 800ac42:	bf00      	nop
 800ac44:	20000770 	.word	0x20000770

0800ac48 <__malloc_lock>:
 800ac48:	4801      	ldr	r0, [pc, #4]	; (800ac50 <__malloc_lock+0x8>)
 800ac4a:	f7ff bee9 	b.w	800aa20 <__retarget_lock_acquire_recursive>
 800ac4e:	bf00      	nop
 800ac50:	2000076c 	.word	0x2000076c

0800ac54 <__malloc_unlock>:
 800ac54:	4801      	ldr	r0, [pc, #4]	; (800ac5c <__malloc_unlock+0x8>)
 800ac56:	f7ff bee4 	b.w	800aa22 <__retarget_lock_release_recursive>
 800ac5a:	bf00      	nop
 800ac5c:	2000076c 	.word	0x2000076c

0800ac60 <__ssputs_r>:
 800ac60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac64:	688e      	ldr	r6, [r1, #8]
 800ac66:	461f      	mov	r7, r3
 800ac68:	42be      	cmp	r6, r7
 800ac6a:	680b      	ldr	r3, [r1, #0]
 800ac6c:	4682      	mov	sl, r0
 800ac6e:	460c      	mov	r4, r1
 800ac70:	4690      	mov	r8, r2
 800ac72:	d82c      	bhi.n	800acce <__ssputs_r+0x6e>
 800ac74:	898a      	ldrh	r2, [r1, #12]
 800ac76:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac7a:	d026      	beq.n	800acca <__ssputs_r+0x6a>
 800ac7c:	6965      	ldr	r5, [r4, #20]
 800ac7e:	6909      	ldr	r1, [r1, #16]
 800ac80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac84:	eba3 0901 	sub.w	r9, r3, r1
 800ac88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac8c:	1c7b      	adds	r3, r7, #1
 800ac8e:	444b      	add	r3, r9
 800ac90:	106d      	asrs	r5, r5, #1
 800ac92:	429d      	cmp	r5, r3
 800ac94:	bf38      	it	cc
 800ac96:	461d      	movcc	r5, r3
 800ac98:	0553      	lsls	r3, r2, #21
 800ac9a:	d527      	bpl.n	800acec <__ssputs_r+0x8c>
 800ac9c:	4629      	mov	r1, r5
 800ac9e:	f7ff ff53 	bl	800ab48 <_malloc_r>
 800aca2:	4606      	mov	r6, r0
 800aca4:	b360      	cbz	r0, 800ad00 <__ssputs_r+0xa0>
 800aca6:	6921      	ldr	r1, [r4, #16]
 800aca8:	464a      	mov	r2, r9
 800acaa:	f000 fbab 	bl	800b404 <memcpy>
 800acae:	89a3      	ldrh	r3, [r4, #12]
 800acb0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acb8:	81a3      	strh	r3, [r4, #12]
 800acba:	6126      	str	r6, [r4, #16]
 800acbc:	6165      	str	r5, [r4, #20]
 800acbe:	444e      	add	r6, r9
 800acc0:	eba5 0509 	sub.w	r5, r5, r9
 800acc4:	6026      	str	r6, [r4, #0]
 800acc6:	60a5      	str	r5, [r4, #8]
 800acc8:	463e      	mov	r6, r7
 800acca:	42be      	cmp	r6, r7
 800accc:	d900      	bls.n	800acd0 <__ssputs_r+0x70>
 800acce:	463e      	mov	r6, r7
 800acd0:	6820      	ldr	r0, [r4, #0]
 800acd2:	4632      	mov	r2, r6
 800acd4:	4641      	mov	r1, r8
 800acd6:	f000 fb6b 	bl	800b3b0 <memmove>
 800acda:	68a3      	ldr	r3, [r4, #8]
 800acdc:	1b9b      	subs	r3, r3, r6
 800acde:	60a3      	str	r3, [r4, #8]
 800ace0:	6823      	ldr	r3, [r4, #0]
 800ace2:	4433      	add	r3, r6
 800ace4:	6023      	str	r3, [r4, #0]
 800ace6:	2000      	movs	r0, #0
 800ace8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acec:	462a      	mov	r2, r5
 800acee:	f000 fb9e 	bl	800b42e <_realloc_r>
 800acf2:	4606      	mov	r6, r0
 800acf4:	2800      	cmp	r0, #0
 800acf6:	d1e0      	bne.n	800acba <__ssputs_r+0x5a>
 800acf8:	6921      	ldr	r1, [r4, #16]
 800acfa:	4650      	mov	r0, sl
 800acfc:	f7ff feb0 	bl	800aa60 <_free_r>
 800ad00:	230c      	movs	r3, #12
 800ad02:	f8ca 3000 	str.w	r3, [sl]
 800ad06:	89a3      	ldrh	r3, [r4, #12]
 800ad08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad0c:	81a3      	strh	r3, [r4, #12]
 800ad0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad12:	e7e9      	b.n	800ace8 <__ssputs_r+0x88>

0800ad14 <_svfiprintf_r>:
 800ad14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad18:	4698      	mov	r8, r3
 800ad1a:	898b      	ldrh	r3, [r1, #12]
 800ad1c:	061b      	lsls	r3, r3, #24
 800ad1e:	b09d      	sub	sp, #116	; 0x74
 800ad20:	4607      	mov	r7, r0
 800ad22:	460d      	mov	r5, r1
 800ad24:	4614      	mov	r4, r2
 800ad26:	d50e      	bpl.n	800ad46 <_svfiprintf_r+0x32>
 800ad28:	690b      	ldr	r3, [r1, #16]
 800ad2a:	b963      	cbnz	r3, 800ad46 <_svfiprintf_r+0x32>
 800ad2c:	2140      	movs	r1, #64	; 0x40
 800ad2e:	f7ff ff0b 	bl	800ab48 <_malloc_r>
 800ad32:	6028      	str	r0, [r5, #0]
 800ad34:	6128      	str	r0, [r5, #16]
 800ad36:	b920      	cbnz	r0, 800ad42 <_svfiprintf_r+0x2e>
 800ad38:	230c      	movs	r3, #12
 800ad3a:	603b      	str	r3, [r7, #0]
 800ad3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad40:	e0d0      	b.n	800aee4 <_svfiprintf_r+0x1d0>
 800ad42:	2340      	movs	r3, #64	; 0x40
 800ad44:	616b      	str	r3, [r5, #20]
 800ad46:	2300      	movs	r3, #0
 800ad48:	9309      	str	r3, [sp, #36]	; 0x24
 800ad4a:	2320      	movs	r3, #32
 800ad4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad50:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad54:	2330      	movs	r3, #48	; 0x30
 800ad56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aefc <_svfiprintf_r+0x1e8>
 800ad5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad5e:	f04f 0901 	mov.w	r9, #1
 800ad62:	4623      	mov	r3, r4
 800ad64:	469a      	mov	sl, r3
 800ad66:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad6a:	b10a      	cbz	r2, 800ad70 <_svfiprintf_r+0x5c>
 800ad6c:	2a25      	cmp	r2, #37	; 0x25
 800ad6e:	d1f9      	bne.n	800ad64 <_svfiprintf_r+0x50>
 800ad70:	ebba 0b04 	subs.w	fp, sl, r4
 800ad74:	d00b      	beq.n	800ad8e <_svfiprintf_r+0x7a>
 800ad76:	465b      	mov	r3, fp
 800ad78:	4622      	mov	r2, r4
 800ad7a:	4629      	mov	r1, r5
 800ad7c:	4638      	mov	r0, r7
 800ad7e:	f7ff ff6f 	bl	800ac60 <__ssputs_r>
 800ad82:	3001      	adds	r0, #1
 800ad84:	f000 80a9 	beq.w	800aeda <_svfiprintf_r+0x1c6>
 800ad88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad8a:	445a      	add	r2, fp
 800ad8c:	9209      	str	r2, [sp, #36]	; 0x24
 800ad8e:	f89a 3000 	ldrb.w	r3, [sl]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	f000 80a1 	beq.w	800aeda <_svfiprintf_r+0x1c6>
 800ad98:	2300      	movs	r3, #0
 800ad9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ada2:	f10a 0a01 	add.w	sl, sl, #1
 800ada6:	9304      	str	r3, [sp, #16]
 800ada8:	9307      	str	r3, [sp, #28]
 800adaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adae:	931a      	str	r3, [sp, #104]	; 0x68
 800adb0:	4654      	mov	r4, sl
 800adb2:	2205      	movs	r2, #5
 800adb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adb8:	4850      	ldr	r0, [pc, #320]	; (800aefc <_svfiprintf_r+0x1e8>)
 800adba:	f7f5 fa49 	bl	8000250 <memchr>
 800adbe:	9a04      	ldr	r2, [sp, #16]
 800adc0:	b9d8      	cbnz	r0, 800adfa <_svfiprintf_r+0xe6>
 800adc2:	06d0      	lsls	r0, r2, #27
 800adc4:	bf44      	itt	mi
 800adc6:	2320      	movmi	r3, #32
 800adc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adcc:	0711      	lsls	r1, r2, #28
 800adce:	bf44      	itt	mi
 800add0:	232b      	movmi	r3, #43	; 0x2b
 800add2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800add6:	f89a 3000 	ldrb.w	r3, [sl]
 800adda:	2b2a      	cmp	r3, #42	; 0x2a
 800addc:	d015      	beq.n	800ae0a <_svfiprintf_r+0xf6>
 800adde:	9a07      	ldr	r2, [sp, #28]
 800ade0:	4654      	mov	r4, sl
 800ade2:	2000      	movs	r0, #0
 800ade4:	f04f 0c0a 	mov.w	ip, #10
 800ade8:	4621      	mov	r1, r4
 800adea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adee:	3b30      	subs	r3, #48	; 0x30
 800adf0:	2b09      	cmp	r3, #9
 800adf2:	d94d      	bls.n	800ae90 <_svfiprintf_r+0x17c>
 800adf4:	b1b0      	cbz	r0, 800ae24 <_svfiprintf_r+0x110>
 800adf6:	9207      	str	r2, [sp, #28]
 800adf8:	e014      	b.n	800ae24 <_svfiprintf_r+0x110>
 800adfa:	eba0 0308 	sub.w	r3, r0, r8
 800adfe:	fa09 f303 	lsl.w	r3, r9, r3
 800ae02:	4313      	orrs	r3, r2
 800ae04:	9304      	str	r3, [sp, #16]
 800ae06:	46a2      	mov	sl, r4
 800ae08:	e7d2      	b.n	800adb0 <_svfiprintf_r+0x9c>
 800ae0a:	9b03      	ldr	r3, [sp, #12]
 800ae0c:	1d19      	adds	r1, r3, #4
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	9103      	str	r1, [sp, #12]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	bfbb      	ittet	lt
 800ae16:	425b      	neglt	r3, r3
 800ae18:	f042 0202 	orrlt.w	r2, r2, #2
 800ae1c:	9307      	strge	r3, [sp, #28]
 800ae1e:	9307      	strlt	r3, [sp, #28]
 800ae20:	bfb8      	it	lt
 800ae22:	9204      	strlt	r2, [sp, #16]
 800ae24:	7823      	ldrb	r3, [r4, #0]
 800ae26:	2b2e      	cmp	r3, #46	; 0x2e
 800ae28:	d10c      	bne.n	800ae44 <_svfiprintf_r+0x130>
 800ae2a:	7863      	ldrb	r3, [r4, #1]
 800ae2c:	2b2a      	cmp	r3, #42	; 0x2a
 800ae2e:	d134      	bne.n	800ae9a <_svfiprintf_r+0x186>
 800ae30:	9b03      	ldr	r3, [sp, #12]
 800ae32:	1d1a      	adds	r2, r3, #4
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	9203      	str	r2, [sp, #12]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	bfb8      	it	lt
 800ae3c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae40:	3402      	adds	r4, #2
 800ae42:	9305      	str	r3, [sp, #20]
 800ae44:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800af0c <_svfiprintf_r+0x1f8>
 800ae48:	7821      	ldrb	r1, [r4, #0]
 800ae4a:	2203      	movs	r2, #3
 800ae4c:	4650      	mov	r0, sl
 800ae4e:	f7f5 f9ff 	bl	8000250 <memchr>
 800ae52:	b138      	cbz	r0, 800ae64 <_svfiprintf_r+0x150>
 800ae54:	9b04      	ldr	r3, [sp, #16]
 800ae56:	eba0 000a 	sub.w	r0, r0, sl
 800ae5a:	2240      	movs	r2, #64	; 0x40
 800ae5c:	4082      	lsls	r2, r0
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	3401      	adds	r4, #1
 800ae62:	9304      	str	r3, [sp, #16]
 800ae64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae68:	4825      	ldr	r0, [pc, #148]	; (800af00 <_svfiprintf_r+0x1ec>)
 800ae6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae6e:	2206      	movs	r2, #6
 800ae70:	f7f5 f9ee 	bl	8000250 <memchr>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	d038      	beq.n	800aeea <_svfiprintf_r+0x1d6>
 800ae78:	4b22      	ldr	r3, [pc, #136]	; (800af04 <_svfiprintf_r+0x1f0>)
 800ae7a:	bb1b      	cbnz	r3, 800aec4 <_svfiprintf_r+0x1b0>
 800ae7c:	9b03      	ldr	r3, [sp, #12]
 800ae7e:	3307      	adds	r3, #7
 800ae80:	f023 0307 	bic.w	r3, r3, #7
 800ae84:	3308      	adds	r3, #8
 800ae86:	9303      	str	r3, [sp, #12]
 800ae88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae8a:	4433      	add	r3, r6
 800ae8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae8e:	e768      	b.n	800ad62 <_svfiprintf_r+0x4e>
 800ae90:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae94:	460c      	mov	r4, r1
 800ae96:	2001      	movs	r0, #1
 800ae98:	e7a6      	b.n	800ade8 <_svfiprintf_r+0xd4>
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	3401      	adds	r4, #1
 800ae9e:	9305      	str	r3, [sp, #20]
 800aea0:	4619      	mov	r1, r3
 800aea2:	f04f 0c0a 	mov.w	ip, #10
 800aea6:	4620      	mov	r0, r4
 800aea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aeac:	3a30      	subs	r2, #48	; 0x30
 800aeae:	2a09      	cmp	r2, #9
 800aeb0:	d903      	bls.n	800aeba <_svfiprintf_r+0x1a6>
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d0c6      	beq.n	800ae44 <_svfiprintf_r+0x130>
 800aeb6:	9105      	str	r1, [sp, #20]
 800aeb8:	e7c4      	b.n	800ae44 <_svfiprintf_r+0x130>
 800aeba:	fb0c 2101 	mla	r1, ip, r1, r2
 800aebe:	4604      	mov	r4, r0
 800aec0:	2301      	movs	r3, #1
 800aec2:	e7f0      	b.n	800aea6 <_svfiprintf_r+0x192>
 800aec4:	ab03      	add	r3, sp, #12
 800aec6:	9300      	str	r3, [sp, #0]
 800aec8:	462a      	mov	r2, r5
 800aeca:	4b0f      	ldr	r3, [pc, #60]	; (800af08 <_svfiprintf_r+0x1f4>)
 800aecc:	a904      	add	r1, sp, #16
 800aece:	4638      	mov	r0, r7
 800aed0:	f3af 8000 	nop.w
 800aed4:	1c42      	adds	r2, r0, #1
 800aed6:	4606      	mov	r6, r0
 800aed8:	d1d6      	bne.n	800ae88 <_svfiprintf_r+0x174>
 800aeda:	89ab      	ldrh	r3, [r5, #12]
 800aedc:	065b      	lsls	r3, r3, #25
 800aede:	f53f af2d 	bmi.w	800ad3c <_svfiprintf_r+0x28>
 800aee2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aee4:	b01d      	add	sp, #116	; 0x74
 800aee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeea:	ab03      	add	r3, sp, #12
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	462a      	mov	r2, r5
 800aef0:	4b05      	ldr	r3, [pc, #20]	; (800af08 <_svfiprintf_r+0x1f4>)
 800aef2:	a904      	add	r1, sp, #16
 800aef4:	4638      	mov	r0, r7
 800aef6:	f000 f879 	bl	800afec <_printf_i>
 800aefa:	e7eb      	b.n	800aed4 <_svfiprintf_r+0x1c0>
 800aefc:	0800be16 	.word	0x0800be16
 800af00:	0800be20 	.word	0x0800be20
 800af04:	00000000 	.word	0x00000000
 800af08:	0800ac61 	.word	0x0800ac61
 800af0c:	0800be1c 	.word	0x0800be1c

0800af10 <_printf_common>:
 800af10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af14:	4616      	mov	r6, r2
 800af16:	4699      	mov	r9, r3
 800af18:	688a      	ldr	r2, [r1, #8]
 800af1a:	690b      	ldr	r3, [r1, #16]
 800af1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af20:	4293      	cmp	r3, r2
 800af22:	bfb8      	it	lt
 800af24:	4613      	movlt	r3, r2
 800af26:	6033      	str	r3, [r6, #0]
 800af28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af2c:	4607      	mov	r7, r0
 800af2e:	460c      	mov	r4, r1
 800af30:	b10a      	cbz	r2, 800af36 <_printf_common+0x26>
 800af32:	3301      	adds	r3, #1
 800af34:	6033      	str	r3, [r6, #0]
 800af36:	6823      	ldr	r3, [r4, #0]
 800af38:	0699      	lsls	r1, r3, #26
 800af3a:	bf42      	ittt	mi
 800af3c:	6833      	ldrmi	r3, [r6, #0]
 800af3e:	3302      	addmi	r3, #2
 800af40:	6033      	strmi	r3, [r6, #0]
 800af42:	6825      	ldr	r5, [r4, #0]
 800af44:	f015 0506 	ands.w	r5, r5, #6
 800af48:	d106      	bne.n	800af58 <_printf_common+0x48>
 800af4a:	f104 0a19 	add.w	sl, r4, #25
 800af4e:	68e3      	ldr	r3, [r4, #12]
 800af50:	6832      	ldr	r2, [r6, #0]
 800af52:	1a9b      	subs	r3, r3, r2
 800af54:	42ab      	cmp	r3, r5
 800af56:	dc26      	bgt.n	800afa6 <_printf_common+0x96>
 800af58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af5c:	1e13      	subs	r3, r2, #0
 800af5e:	6822      	ldr	r2, [r4, #0]
 800af60:	bf18      	it	ne
 800af62:	2301      	movne	r3, #1
 800af64:	0692      	lsls	r2, r2, #26
 800af66:	d42b      	bmi.n	800afc0 <_printf_common+0xb0>
 800af68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af6c:	4649      	mov	r1, r9
 800af6e:	4638      	mov	r0, r7
 800af70:	47c0      	blx	r8
 800af72:	3001      	adds	r0, #1
 800af74:	d01e      	beq.n	800afb4 <_printf_common+0xa4>
 800af76:	6823      	ldr	r3, [r4, #0]
 800af78:	6922      	ldr	r2, [r4, #16]
 800af7a:	f003 0306 	and.w	r3, r3, #6
 800af7e:	2b04      	cmp	r3, #4
 800af80:	bf02      	ittt	eq
 800af82:	68e5      	ldreq	r5, [r4, #12]
 800af84:	6833      	ldreq	r3, [r6, #0]
 800af86:	1aed      	subeq	r5, r5, r3
 800af88:	68a3      	ldr	r3, [r4, #8]
 800af8a:	bf0c      	ite	eq
 800af8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af90:	2500      	movne	r5, #0
 800af92:	4293      	cmp	r3, r2
 800af94:	bfc4      	itt	gt
 800af96:	1a9b      	subgt	r3, r3, r2
 800af98:	18ed      	addgt	r5, r5, r3
 800af9a:	2600      	movs	r6, #0
 800af9c:	341a      	adds	r4, #26
 800af9e:	42b5      	cmp	r5, r6
 800afa0:	d11a      	bne.n	800afd8 <_printf_common+0xc8>
 800afa2:	2000      	movs	r0, #0
 800afa4:	e008      	b.n	800afb8 <_printf_common+0xa8>
 800afa6:	2301      	movs	r3, #1
 800afa8:	4652      	mov	r2, sl
 800afaa:	4649      	mov	r1, r9
 800afac:	4638      	mov	r0, r7
 800afae:	47c0      	blx	r8
 800afb0:	3001      	adds	r0, #1
 800afb2:	d103      	bne.n	800afbc <_printf_common+0xac>
 800afb4:	f04f 30ff 	mov.w	r0, #4294967295
 800afb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afbc:	3501      	adds	r5, #1
 800afbe:	e7c6      	b.n	800af4e <_printf_common+0x3e>
 800afc0:	18e1      	adds	r1, r4, r3
 800afc2:	1c5a      	adds	r2, r3, #1
 800afc4:	2030      	movs	r0, #48	; 0x30
 800afc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800afca:	4422      	add	r2, r4
 800afcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800afd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800afd4:	3302      	adds	r3, #2
 800afd6:	e7c7      	b.n	800af68 <_printf_common+0x58>
 800afd8:	2301      	movs	r3, #1
 800afda:	4622      	mov	r2, r4
 800afdc:	4649      	mov	r1, r9
 800afde:	4638      	mov	r0, r7
 800afe0:	47c0      	blx	r8
 800afe2:	3001      	adds	r0, #1
 800afe4:	d0e6      	beq.n	800afb4 <_printf_common+0xa4>
 800afe6:	3601      	adds	r6, #1
 800afe8:	e7d9      	b.n	800af9e <_printf_common+0x8e>
	...

0800afec <_printf_i>:
 800afec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aff0:	7e0f      	ldrb	r7, [r1, #24]
 800aff2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aff4:	2f78      	cmp	r7, #120	; 0x78
 800aff6:	4691      	mov	r9, r2
 800aff8:	4680      	mov	r8, r0
 800affa:	460c      	mov	r4, r1
 800affc:	469a      	mov	sl, r3
 800affe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b002:	d807      	bhi.n	800b014 <_printf_i+0x28>
 800b004:	2f62      	cmp	r7, #98	; 0x62
 800b006:	d80a      	bhi.n	800b01e <_printf_i+0x32>
 800b008:	2f00      	cmp	r7, #0
 800b00a:	f000 80d4 	beq.w	800b1b6 <_printf_i+0x1ca>
 800b00e:	2f58      	cmp	r7, #88	; 0x58
 800b010:	f000 80c0 	beq.w	800b194 <_printf_i+0x1a8>
 800b014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b018:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b01c:	e03a      	b.n	800b094 <_printf_i+0xa8>
 800b01e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b022:	2b15      	cmp	r3, #21
 800b024:	d8f6      	bhi.n	800b014 <_printf_i+0x28>
 800b026:	a101      	add	r1, pc, #4	; (adr r1, 800b02c <_printf_i+0x40>)
 800b028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b02c:	0800b085 	.word	0x0800b085
 800b030:	0800b099 	.word	0x0800b099
 800b034:	0800b015 	.word	0x0800b015
 800b038:	0800b015 	.word	0x0800b015
 800b03c:	0800b015 	.word	0x0800b015
 800b040:	0800b015 	.word	0x0800b015
 800b044:	0800b099 	.word	0x0800b099
 800b048:	0800b015 	.word	0x0800b015
 800b04c:	0800b015 	.word	0x0800b015
 800b050:	0800b015 	.word	0x0800b015
 800b054:	0800b015 	.word	0x0800b015
 800b058:	0800b19d 	.word	0x0800b19d
 800b05c:	0800b0c5 	.word	0x0800b0c5
 800b060:	0800b157 	.word	0x0800b157
 800b064:	0800b015 	.word	0x0800b015
 800b068:	0800b015 	.word	0x0800b015
 800b06c:	0800b1bf 	.word	0x0800b1bf
 800b070:	0800b015 	.word	0x0800b015
 800b074:	0800b0c5 	.word	0x0800b0c5
 800b078:	0800b015 	.word	0x0800b015
 800b07c:	0800b015 	.word	0x0800b015
 800b080:	0800b15f 	.word	0x0800b15f
 800b084:	682b      	ldr	r3, [r5, #0]
 800b086:	1d1a      	adds	r2, r3, #4
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	602a      	str	r2, [r5, #0]
 800b08c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b090:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b094:	2301      	movs	r3, #1
 800b096:	e09f      	b.n	800b1d8 <_printf_i+0x1ec>
 800b098:	6820      	ldr	r0, [r4, #0]
 800b09a:	682b      	ldr	r3, [r5, #0]
 800b09c:	0607      	lsls	r7, r0, #24
 800b09e:	f103 0104 	add.w	r1, r3, #4
 800b0a2:	6029      	str	r1, [r5, #0]
 800b0a4:	d501      	bpl.n	800b0aa <_printf_i+0xbe>
 800b0a6:	681e      	ldr	r6, [r3, #0]
 800b0a8:	e003      	b.n	800b0b2 <_printf_i+0xc6>
 800b0aa:	0646      	lsls	r6, r0, #25
 800b0ac:	d5fb      	bpl.n	800b0a6 <_printf_i+0xba>
 800b0ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b0b2:	2e00      	cmp	r6, #0
 800b0b4:	da03      	bge.n	800b0be <_printf_i+0xd2>
 800b0b6:	232d      	movs	r3, #45	; 0x2d
 800b0b8:	4276      	negs	r6, r6
 800b0ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0be:	485a      	ldr	r0, [pc, #360]	; (800b228 <_printf_i+0x23c>)
 800b0c0:	230a      	movs	r3, #10
 800b0c2:	e012      	b.n	800b0ea <_printf_i+0xfe>
 800b0c4:	682b      	ldr	r3, [r5, #0]
 800b0c6:	6820      	ldr	r0, [r4, #0]
 800b0c8:	1d19      	adds	r1, r3, #4
 800b0ca:	6029      	str	r1, [r5, #0]
 800b0cc:	0605      	lsls	r5, r0, #24
 800b0ce:	d501      	bpl.n	800b0d4 <_printf_i+0xe8>
 800b0d0:	681e      	ldr	r6, [r3, #0]
 800b0d2:	e002      	b.n	800b0da <_printf_i+0xee>
 800b0d4:	0641      	lsls	r1, r0, #25
 800b0d6:	d5fb      	bpl.n	800b0d0 <_printf_i+0xe4>
 800b0d8:	881e      	ldrh	r6, [r3, #0]
 800b0da:	4853      	ldr	r0, [pc, #332]	; (800b228 <_printf_i+0x23c>)
 800b0dc:	2f6f      	cmp	r7, #111	; 0x6f
 800b0de:	bf0c      	ite	eq
 800b0e0:	2308      	moveq	r3, #8
 800b0e2:	230a      	movne	r3, #10
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0ea:	6865      	ldr	r5, [r4, #4]
 800b0ec:	60a5      	str	r5, [r4, #8]
 800b0ee:	2d00      	cmp	r5, #0
 800b0f0:	bfa2      	ittt	ge
 800b0f2:	6821      	ldrge	r1, [r4, #0]
 800b0f4:	f021 0104 	bicge.w	r1, r1, #4
 800b0f8:	6021      	strge	r1, [r4, #0]
 800b0fa:	b90e      	cbnz	r6, 800b100 <_printf_i+0x114>
 800b0fc:	2d00      	cmp	r5, #0
 800b0fe:	d04b      	beq.n	800b198 <_printf_i+0x1ac>
 800b100:	4615      	mov	r5, r2
 800b102:	fbb6 f1f3 	udiv	r1, r6, r3
 800b106:	fb03 6711 	mls	r7, r3, r1, r6
 800b10a:	5dc7      	ldrb	r7, [r0, r7]
 800b10c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b110:	4637      	mov	r7, r6
 800b112:	42bb      	cmp	r3, r7
 800b114:	460e      	mov	r6, r1
 800b116:	d9f4      	bls.n	800b102 <_printf_i+0x116>
 800b118:	2b08      	cmp	r3, #8
 800b11a:	d10b      	bne.n	800b134 <_printf_i+0x148>
 800b11c:	6823      	ldr	r3, [r4, #0]
 800b11e:	07de      	lsls	r6, r3, #31
 800b120:	d508      	bpl.n	800b134 <_printf_i+0x148>
 800b122:	6923      	ldr	r3, [r4, #16]
 800b124:	6861      	ldr	r1, [r4, #4]
 800b126:	4299      	cmp	r1, r3
 800b128:	bfde      	ittt	le
 800b12a:	2330      	movle	r3, #48	; 0x30
 800b12c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b130:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b134:	1b52      	subs	r2, r2, r5
 800b136:	6122      	str	r2, [r4, #16]
 800b138:	f8cd a000 	str.w	sl, [sp]
 800b13c:	464b      	mov	r3, r9
 800b13e:	aa03      	add	r2, sp, #12
 800b140:	4621      	mov	r1, r4
 800b142:	4640      	mov	r0, r8
 800b144:	f7ff fee4 	bl	800af10 <_printf_common>
 800b148:	3001      	adds	r0, #1
 800b14a:	d14a      	bne.n	800b1e2 <_printf_i+0x1f6>
 800b14c:	f04f 30ff 	mov.w	r0, #4294967295
 800b150:	b004      	add	sp, #16
 800b152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b156:	6823      	ldr	r3, [r4, #0]
 800b158:	f043 0320 	orr.w	r3, r3, #32
 800b15c:	6023      	str	r3, [r4, #0]
 800b15e:	4833      	ldr	r0, [pc, #204]	; (800b22c <_printf_i+0x240>)
 800b160:	2778      	movs	r7, #120	; 0x78
 800b162:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b166:	6823      	ldr	r3, [r4, #0]
 800b168:	6829      	ldr	r1, [r5, #0]
 800b16a:	061f      	lsls	r7, r3, #24
 800b16c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b170:	d402      	bmi.n	800b178 <_printf_i+0x18c>
 800b172:	065f      	lsls	r7, r3, #25
 800b174:	bf48      	it	mi
 800b176:	b2b6      	uxthmi	r6, r6
 800b178:	07df      	lsls	r7, r3, #31
 800b17a:	bf48      	it	mi
 800b17c:	f043 0320 	orrmi.w	r3, r3, #32
 800b180:	6029      	str	r1, [r5, #0]
 800b182:	bf48      	it	mi
 800b184:	6023      	strmi	r3, [r4, #0]
 800b186:	b91e      	cbnz	r6, 800b190 <_printf_i+0x1a4>
 800b188:	6823      	ldr	r3, [r4, #0]
 800b18a:	f023 0320 	bic.w	r3, r3, #32
 800b18e:	6023      	str	r3, [r4, #0]
 800b190:	2310      	movs	r3, #16
 800b192:	e7a7      	b.n	800b0e4 <_printf_i+0xf8>
 800b194:	4824      	ldr	r0, [pc, #144]	; (800b228 <_printf_i+0x23c>)
 800b196:	e7e4      	b.n	800b162 <_printf_i+0x176>
 800b198:	4615      	mov	r5, r2
 800b19a:	e7bd      	b.n	800b118 <_printf_i+0x12c>
 800b19c:	682b      	ldr	r3, [r5, #0]
 800b19e:	6826      	ldr	r6, [r4, #0]
 800b1a0:	6961      	ldr	r1, [r4, #20]
 800b1a2:	1d18      	adds	r0, r3, #4
 800b1a4:	6028      	str	r0, [r5, #0]
 800b1a6:	0635      	lsls	r5, r6, #24
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	d501      	bpl.n	800b1b0 <_printf_i+0x1c4>
 800b1ac:	6019      	str	r1, [r3, #0]
 800b1ae:	e002      	b.n	800b1b6 <_printf_i+0x1ca>
 800b1b0:	0670      	lsls	r0, r6, #25
 800b1b2:	d5fb      	bpl.n	800b1ac <_printf_i+0x1c0>
 800b1b4:	8019      	strh	r1, [r3, #0]
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	6123      	str	r3, [r4, #16]
 800b1ba:	4615      	mov	r5, r2
 800b1bc:	e7bc      	b.n	800b138 <_printf_i+0x14c>
 800b1be:	682b      	ldr	r3, [r5, #0]
 800b1c0:	1d1a      	adds	r2, r3, #4
 800b1c2:	602a      	str	r2, [r5, #0]
 800b1c4:	681d      	ldr	r5, [r3, #0]
 800b1c6:	6862      	ldr	r2, [r4, #4]
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	f7f5 f840 	bl	8000250 <memchr>
 800b1d0:	b108      	cbz	r0, 800b1d6 <_printf_i+0x1ea>
 800b1d2:	1b40      	subs	r0, r0, r5
 800b1d4:	6060      	str	r0, [r4, #4]
 800b1d6:	6863      	ldr	r3, [r4, #4]
 800b1d8:	6123      	str	r3, [r4, #16]
 800b1da:	2300      	movs	r3, #0
 800b1dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1e0:	e7aa      	b.n	800b138 <_printf_i+0x14c>
 800b1e2:	6923      	ldr	r3, [r4, #16]
 800b1e4:	462a      	mov	r2, r5
 800b1e6:	4649      	mov	r1, r9
 800b1e8:	4640      	mov	r0, r8
 800b1ea:	47d0      	blx	sl
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	d0ad      	beq.n	800b14c <_printf_i+0x160>
 800b1f0:	6823      	ldr	r3, [r4, #0]
 800b1f2:	079b      	lsls	r3, r3, #30
 800b1f4:	d413      	bmi.n	800b21e <_printf_i+0x232>
 800b1f6:	68e0      	ldr	r0, [r4, #12]
 800b1f8:	9b03      	ldr	r3, [sp, #12]
 800b1fa:	4298      	cmp	r0, r3
 800b1fc:	bfb8      	it	lt
 800b1fe:	4618      	movlt	r0, r3
 800b200:	e7a6      	b.n	800b150 <_printf_i+0x164>
 800b202:	2301      	movs	r3, #1
 800b204:	4632      	mov	r2, r6
 800b206:	4649      	mov	r1, r9
 800b208:	4640      	mov	r0, r8
 800b20a:	47d0      	blx	sl
 800b20c:	3001      	adds	r0, #1
 800b20e:	d09d      	beq.n	800b14c <_printf_i+0x160>
 800b210:	3501      	adds	r5, #1
 800b212:	68e3      	ldr	r3, [r4, #12]
 800b214:	9903      	ldr	r1, [sp, #12]
 800b216:	1a5b      	subs	r3, r3, r1
 800b218:	42ab      	cmp	r3, r5
 800b21a:	dcf2      	bgt.n	800b202 <_printf_i+0x216>
 800b21c:	e7eb      	b.n	800b1f6 <_printf_i+0x20a>
 800b21e:	2500      	movs	r5, #0
 800b220:	f104 0619 	add.w	r6, r4, #25
 800b224:	e7f5      	b.n	800b212 <_printf_i+0x226>
 800b226:	bf00      	nop
 800b228:	0800be27 	.word	0x0800be27
 800b22c:	0800be38 	.word	0x0800be38

0800b230 <__sflush_r>:
 800b230:	898a      	ldrh	r2, [r1, #12]
 800b232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b236:	4605      	mov	r5, r0
 800b238:	0710      	lsls	r0, r2, #28
 800b23a:	460c      	mov	r4, r1
 800b23c:	d458      	bmi.n	800b2f0 <__sflush_r+0xc0>
 800b23e:	684b      	ldr	r3, [r1, #4]
 800b240:	2b00      	cmp	r3, #0
 800b242:	dc05      	bgt.n	800b250 <__sflush_r+0x20>
 800b244:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b246:	2b00      	cmp	r3, #0
 800b248:	dc02      	bgt.n	800b250 <__sflush_r+0x20>
 800b24a:	2000      	movs	r0, #0
 800b24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b250:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b252:	2e00      	cmp	r6, #0
 800b254:	d0f9      	beq.n	800b24a <__sflush_r+0x1a>
 800b256:	2300      	movs	r3, #0
 800b258:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b25c:	682f      	ldr	r7, [r5, #0]
 800b25e:	6a21      	ldr	r1, [r4, #32]
 800b260:	602b      	str	r3, [r5, #0]
 800b262:	d032      	beq.n	800b2ca <__sflush_r+0x9a>
 800b264:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b266:	89a3      	ldrh	r3, [r4, #12]
 800b268:	075a      	lsls	r2, r3, #29
 800b26a:	d505      	bpl.n	800b278 <__sflush_r+0x48>
 800b26c:	6863      	ldr	r3, [r4, #4]
 800b26e:	1ac0      	subs	r0, r0, r3
 800b270:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b272:	b10b      	cbz	r3, 800b278 <__sflush_r+0x48>
 800b274:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b276:	1ac0      	subs	r0, r0, r3
 800b278:	2300      	movs	r3, #0
 800b27a:	4602      	mov	r2, r0
 800b27c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b27e:	6a21      	ldr	r1, [r4, #32]
 800b280:	4628      	mov	r0, r5
 800b282:	47b0      	blx	r6
 800b284:	1c43      	adds	r3, r0, #1
 800b286:	89a3      	ldrh	r3, [r4, #12]
 800b288:	d106      	bne.n	800b298 <__sflush_r+0x68>
 800b28a:	6829      	ldr	r1, [r5, #0]
 800b28c:	291d      	cmp	r1, #29
 800b28e:	d82b      	bhi.n	800b2e8 <__sflush_r+0xb8>
 800b290:	4a29      	ldr	r2, [pc, #164]	; (800b338 <__sflush_r+0x108>)
 800b292:	410a      	asrs	r2, r1
 800b294:	07d6      	lsls	r6, r2, #31
 800b296:	d427      	bmi.n	800b2e8 <__sflush_r+0xb8>
 800b298:	2200      	movs	r2, #0
 800b29a:	6062      	str	r2, [r4, #4]
 800b29c:	04d9      	lsls	r1, r3, #19
 800b29e:	6922      	ldr	r2, [r4, #16]
 800b2a0:	6022      	str	r2, [r4, #0]
 800b2a2:	d504      	bpl.n	800b2ae <__sflush_r+0x7e>
 800b2a4:	1c42      	adds	r2, r0, #1
 800b2a6:	d101      	bne.n	800b2ac <__sflush_r+0x7c>
 800b2a8:	682b      	ldr	r3, [r5, #0]
 800b2aa:	b903      	cbnz	r3, 800b2ae <__sflush_r+0x7e>
 800b2ac:	6560      	str	r0, [r4, #84]	; 0x54
 800b2ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2b0:	602f      	str	r7, [r5, #0]
 800b2b2:	2900      	cmp	r1, #0
 800b2b4:	d0c9      	beq.n	800b24a <__sflush_r+0x1a>
 800b2b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2ba:	4299      	cmp	r1, r3
 800b2bc:	d002      	beq.n	800b2c4 <__sflush_r+0x94>
 800b2be:	4628      	mov	r0, r5
 800b2c0:	f7ff fbce 	bl	800aa60 <_free_r>
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	6360      	str	r0, [r4, #52]	; 0x34
 800b2c8:	e7c0      	b.n	800b24c <__sflush_r+0x1c>
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	47b0      	blx	r6
 800b2d0:	1c41      	adds	r1, r0, #1
 800b2d2:	d1c8      	bne.n	800b266 <__sflush_r+0x36>
 800b2d4:	682b      	ldr	r3, [r5, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d0c5      	beq.n	800b266 <__sflush_r+0x36>
 800b2da:	2b1d      	cmp	r3, #29
 800b2dc:	d001      	beq.n	800b2e2 <__sflush_r+0xb2>
 800b2de:	2b16      	cmp	r3, #22
 800b2e0:	d101      	bne.n	800b2e6 <__sflush_r+0xb6>
 800b2e2:	602f      	str	r7, [r5, #0]
 800b2e4:	e7b1      	b.n	800b24a <__sflush_r+0x1a>
 800b2e6:	89a3      	ldrh	r3, [r4, #12]
 800b2e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2ec:	81a3      	strh	r3, [r4, #12]
 800b2ee:	e7ad      	b.n	800b24c <__sflush_r+0x1c>
 800b2f0:	690f      	ldr	r7, [r1, #16]
 800b2f2:	2f00      	cmp	r7, #0
 800b2f4:	d0a9      	beq.n	800b24a <__sflush_r+0x1a>
 800b2f6:	0793      	lsls	r3, r2, #30
 800b2f8:	680e      	ldr	r6, [r1, #0]
 800b2fa:	bf08      	it	eq
 800b2fc:	694b      	ldreq	r3, [r1, #20]
 800b2fe:	600f      	str	r7, [r1, #0]
 800b300:	bf18      	it	ne
 800b302:	2300      	movne	r3, #0
 800b304:	eba6 0807 	sub.w	r8, r6, r7
 800b308:	608b      	str	r3, [r1, #8]
 800b30a:	f1b8 0f00 	cmp.w	r8, #0
 800b30e:	dd9c      	ble.n	800b24a <__sflush_r+0x1a>
 800b310:	6a21      	ldr	r1, [r4, #32]
 800b312:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b314:	4643      	mov	r3, r8
 800b316:	463a      	mov	r2, r7
 800b318:	4628      	mov	r0, r5
 800b31a:	47b0      	blx	r6
 800b31c:	2800      	cmp	r0, #0
 800b31e:	dc06      	bgt.n	800b32e <__sflush_r+0xfe>
 800b320:	89a3      	ldrh	r3, [r4, #12]
 800b322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b326:	81a3      	strh	r3, [r4, #12]
 800b328:	f04f 30ff 	mov.w	r0, #4294967295
 800b32c:	e78e      	b.n	800b24c <__sflush_r+0x1c>
 800b32e:	4407      	add	r7, r0
 800b330:	eba8 0800 	sub.w	r8, r8, r0
 800b334:	e7e9      	b.n	800b30a <__sflush_r+0xda>
 800b336:	bf00      	nop
 800b338:	dfbffffe 	.word	0xdfbffffe

0800b33c <_fflush_r>:
 800b33c:	b538      	push	{r3, r4, r5, lr}
 800b33e:	690b      	ldr	r3, [r1, #16]
 800b340:	4605      	mov	r5, r0
 800b342:	460c      	mov	r4, r1
 800b344:	b913      	cbnz	r3, 800b34c <_fflush_r+0x10>
 800b346:	2500      	movs	r5, #0
 800b348:	4628      	mov	r0, r5
 800b34a:	bd38      	pop	{r3, r4, r5, pc}
 800b34c:	b118      	cbz	r0, 800b356 <_fflush_r+0x1a>
 800b34e:	6a03      	ldr	r3, [r0, #32]
 800b350:	b90b      	cbnz	r3, 800b356 <_fflush_r+0x1a>
 800b352:	f7ff f9e3 	bl	800a71c <__sinit>
 800b356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d0f3      	beq.n	800b346 <_fflush_r+0xa>
 800b35e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b360:	07d0      	lsls	r0, r2, #31
 800b362:	d404      	bmi.n	800b36e <_fflush_r+0x32>
 800b364:	0599      	lsls	r1, r3, #22
 800b366:	d402      	bmi.n	800b36e <_fflush_r+0x32>
 800b368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b36a:	f7ff fb59 	bl	800aa20 <__retarget_lock_acquire_recursive>
 800b36e:	4628      	mov	r0, r5
 800b370:	4621      	mov	r1, r4
 800b372:	f7ff ff5d 	bl	800b230 <__sflush_r>
 800b376:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b378:	07da      	lsls	r2, r3, #31
 800b37a:	4605      	mov	r5, r0
 800b37c:	d4e4      	bmi.n	800b348 <_fflush_r+0xc>
 800b37e:	89a3      	ldrh	r3, [r4, #12]
 800b380:	059b      	lsls	r3, r3, #22
 800b382:	d4e1      	bmi.n	800b348 <_fflush_r+0xc>
 800b384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b386:	f7ff fb4c 	bl	800aa22 <__retarget_lock_release_recursive>
 800b38a:	e7dd      	b.n	800b348 <_fflush_r+0xc>

0800b38c <fiprintf>:
 800b38c:	b40e      	push	{r1, r2, r3}
 800b38e:	b503      	push	{r0, r1, lr}
 800b390:	4601      	mov	r1, r0
 800b392:	ab03      	add	r3, sp, #12
 800b394:	4805      	ldr	r0, [pc, #20]	; (800b3ac <fiprintf+0x20>)
 800b396:	f853 2b04 	ldr.w	r2, [r3], #4
 800b39a:	6800      	ldr	r0, [r0, #0]
 800b39c:	9301      	str	r3, [sp, #4]
 800b39e:	f000 f89f 	bl	800b4e0 <_vfiprintf_r>
 800b3a2:	b002      	add	sp, #8
 800b3a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3a8:	b003      	add	sp, #12
 800b3aa:	4770      	bx	lr
 800b3ac:	20000138 	.word	0x20000138

0800b3b0 <memmove>:
 800b3b0:	4288      	cmp	r0, r1
 800b3b2:	b510      	push	{r4, lr}
 800b3b4:	eb01 0402 	add.w	r4, r1, r2
 800b3b8:	d902      	bls.n	800b3c0 <memmove+0x10>
 800b3ba:	4284      	cmp	r4, r0
 800b3bc:	4623      	mov	r3, r4
 800b3be:	d807      	bhi.n	800b3d0 <memmove+0x20>
 800b3c0:	1e43      	subs	r3, r0, #1
 800b3c2:	42a1      	cmp	r1, r4
 800b3c4:	d008      	beq.n	800b3d8 <memmove+0x28>
 800b3c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3ce:	e7f8      	b.n	800b3c2 <memmove+0x12>
 800b3d0:	4402      	add	r2, r0
 800b3d2:	4601      	mov	r1, r0
 800b3d4:	428a      	cmp	r2, r1
 800b3d6:	d100      	bne.n	800b3da <memmove+0x2a>
 800b3d8:	bd10      	pop	{r4, pc}
 800b3da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b3e2:	e7f7      	b.n	800b3d4 <memmove+0x24>

0800b3e4 <_sbrk_r>:
 800b3e4:	b538      	push	{r3, r4, r5, lr}
 800b3e6:	4d06      	ldr	r5, [pc, #24]	; (800b400 <_sbrk_r+0x1c>)
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	4608      	mov	r0, r1
 800b3ee:	602b      	str	r3, [r5, #0]
 800b3f0:	f7f6 faf0 	bl	80019d4 <_sbrk>
 800b3f4:	1c43      	adds	r3, r0, #1
 800b3f6:	d102      	bne.n	800b3fe <_sbrk_r+0x1a>
 800b3f8:	682b      	ldr	r3, [r5, #0]
 800b3fa:	b103      	cbz	r3, 800b3fe <_sbrk_r+0x1a>
 800b3fc:	6023      	str	r3, [r4, #0]
 800b3fe:	bd38      	pop	{r3, r4, r5, pc}
 800b400:	20000768 	.word	0x20000768

0800b404 <memcpy>:
 800b404:	440a      	add	r2, r1
 800b406:	4291      	cmp	r1, r2
 800b408:	f100 33ff 	add.w	r3, r0, #4294967295
 800b40c:	d100      	bne.n	800b410 <memcpy+0xc>
 800b40e:	4770      	bx	lr
 800b410:	b510      	push	{r4, lr}
 800b412:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b416:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b41a:	4291      	cmp	r1, r2
 800b41c:	d1f9      	bne.n	800b412 <memcpy+0xe>
 800b41e:	bd10      	pop	{r4, pc}

0800b420 <abort>:
 800b420:	b508      	push	{r3, lr}
 800b422:	2006      	movs	r0, #6
 800b424:	f000 fa34 	bl	800b890 <raise>
 800b428:	2001      	movs	r0, #1
 800b42a:	f7f6 fa5b 	bl	80018e4 <_exit>

0800b42e <_realloc_r>:
 800b42e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b432:	4680      	mov	r8, r0
 800b434:	4614      	mov	r4, r2
 800b436:	460e      	mov	r6, r1
 800b438:	b921      	cbnz	r1, 800b444 <_realloc_r+0x16>
 800b43a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b43e:	4611      	mov	r1, r2
 800b440:	f7ff bb82 	b.w	800ab48 <_malloc_r>
 800b444:	b92a      	cbnz	r2, 800b452 <_realloc_r+0x24>
 800b446:	f7ff fb0b 	bl	800aa60 <_free_r>
 800b44a:	4625      	mov	r5, r4
 800b44c:	4628      	mov	r0, r5
 800b44e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b452:	f000 fa39 	bl	800b8c8 <_malloc_usable_size_r>
 800b456:	4284      	cmp	r4, r0
 800b458:	4607      	mov	r7, r0
 800b45a:	d802      	bhi.n	800b462 <_realloc_r+0x34>
 800b45c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b460:	d812      	bhi.n	800b488 <_realloc_r+0x5a>
 800b462:	4621      	mov	r1, r4
 800b464:	4640      	mov	r0, r8
 800b466:	f7ff fb6f 	bl	800ab48 <_malloc_r>
 800b46a:	4605      	mov	r5, r0
 800b46c:	2800      	cmp	r0, #0
 800b46e:	d0ed      	beq.n	800b44c <_realloc_r+0x1e>
 800b470:	42bc      	cmp	r4, r7
 800b472:	4622      	mov	r2, r4
 800b474:	4631      	mov	r1, r6
 800b476:	bf28      	it	cs
 800b478:	463a      	movcs	r2, r7
 800b47a:	f7ff ffc3 	bl	800b404 <memcpy>
 800b47e:	4631      	mov	r1, r6
 800b480:	4640      	mov	r0, r8
 800b482:	f7ff faed 	bl	800aa60 <_free_r>
 800b486:	e7e1      	b.n	800b44c <_realloc_r+0x1e>
 800b488:	4635      	mov	r5, r6
 800b48a:	e7df      	b.n	800b44c <_realloc_r+0x1e>

0800b48c <__sfputc_r>:
 800b48c:	6893      	ldr	r3, [r2, #8]
 800b48e:	3b01      	subs	r3, #1
 800b490:	2b00      	cmp	r3, #0
 800b492:	b410      	push	{r4}
 800b494:	6093      	str	r3, [r2, #8]
 800b496:	da08      	bge.n	800b4aa <__sfputc_r+0x1e>
 800b498:	6994      	ldr	r4, [r2, #24]
 800b49a:	42a3      	cmp	r3, r4
 800b49c:	db01      	blt.n	800b4a2 <__sfputc_r+0x16>
 800b49e:	290a      	cmp	r1, #10
 800b4a0:	d103      	bne.n	800b4aa <__sfputc_r+0x1e>
 800b4a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4a6:	f000 b935 	b.w	800b714 <__swbuf_r>
 800b4aa:	6813      	ldr	r3, [r2, #0]
 800b4ac:	1c58      	adds	r0, r3, #1
 800b4ae:	6010      	str	r0, [r2, #0]
 800b4b0:	7019      	strb	r1, [r3, #0]
 800b4b2:	4608      	mov	r0, r1
 800b4b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4b8:	4770      	bx	lr

0800b4ba <__sfputs_r>:
 800b4ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4bc:	4606      	mov	r6, r0
 800b4be:	460f      	mov	r7, r1
 800b4c0:	4614      	mov	r4, r2
 800b4c2:	18d5      	adds	r5, r2, r3
 800b4c4:	42ac      	cmp	r4, r5
 800b4c6:	d101      	bne.n	800b4cc <__sfputs_r+0x12>
 800b4c8:	2000      	movs	r0, #0
 800b4ca:	e007      	b.n	800b4dc <__sfputs_r+0x22>
 800b4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4d0:	463a      	mov	r2, r7
 800b4d2:	4630      	mov	r0, r6
 800b4d4:	f7ff ffda 	bl	800b48c <__sfputc_r>
 800b4d8:	1c43      	adds	r3, r0, #1
 800b4da:	d1f3      	bne.n	800b4c4 <__sfputs_r+0xa>
 800b4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b4e0 <_vfiprintf_r>:
 800b4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e4:	460d      	mov	r5, r1
 800b4e6:	b09d      	sub	sp, #116	; 0x74
 800b4e8:	4614      	mov	r4, r2
 800b4ea:	4698      	mov	r8, r3
 800b4ec:	4606      	mov	r6, r0
 800b4ee:	b118      	cbz	r0, 800b4f8 <_vfiprintf_r+0x18>
 800b4f0:	6a03      	ldr	r3, [r0, #32]
 800b4f2:	b90b      	cbnz	r3, 800b4f8 <_vfiprintf_r+0x18>
 800b4f4:	f7ff f912 	bl	800a71c <__sinit>
 800b4f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4fa:	07d9      	lsls	r1, r3, #31
 800b4fc:	d405      	bmi.n	800b50a <_vfiprintf_r+0x2a>
 800b4fe:	89ab      	ldrh	r3, [r5, #12]
 800b500:	059a      	lsls	r2, r3, #22
 800b502:	d402      	bmi.n	800b50a <_vfiprintf_r+0x2a>
 800b504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b506:	f7ff fa8b 	bl	800aa20 <__retarget_lock_acquire_recursive>
 800b50a:	89ab      	ldrh	r3, [r5, #12]
 800b50c:	071b      	lsls	r3, r3, #28
 800b50e:	d501      	bpl.n	800b514 <_vfiprintf_r+0x34>
 800b510:	692b      	ldr	r3, [r5, #16]
 800b512:	b99b      	cbnz	r3, 800b53c <_vfiprintf_r+0x5c>
 800b514:	4629      	mov	r1, r5
 800b516:	4630      	mov	r0, r6
 800b518:	f000 f93a 	bl	800b790 <__swsetup_r>
 800b51c:	b170      	cbz	r0, 800b53c <_vfiprintf_r+0x5c>
 800b51e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b520:	07dc      	lsls	r4, r3, #31
 800b522:	d504      	bpl.n	800b52e <_vfiprintf_r+0x4e>
 800b524:	f04f 30ff 	mov.w	r0, #4294967295
 800b528:	b01d      	add	sp, #116	; 0x74
 800b52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b52e:	89ab      	ldrh	r3, [r5, #12]
 800b530:	0598      	lsls	r0, r3, #22
 800b532:	d4f7      	bmi.n	800b524 <_vfiprintf_r+0x44>
 800b534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b536:	f7ff fa74 	bl	800aa22 <__retarget_lock_release_recursive>
 800b53a:	e7f3      	b.n	800b524 <_vfiprintf_r+0x44>
 800b53c:	2300      	movs	r3, #0
 800b53e:	9309      	str	r3, [sp, #36]	; 0x24
 800b540:	2320      	movs	r3, #32
 800b542:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b546:	f8cd 800c 	str.w	r8, [sp, #12]
 800b54a:	2330      	movs	r3, #48	; 0x30
 800b54c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b700 <_vfiprintf_r+0x220>
 800b550:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b554:	f04f 0901 	mov.w	r9, #1
 800b558:	4623      	mov	r3, r4
 800b55a:	469a      	mov	sl, r3
 800b55c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b560:	b10a      	cbz	r2, 800b566 <_vfiprintf_r+0x86>
 800b562:	2a25      	cmp	r2, #37	; 0x25
 800b564:	d1f9      	bne.n	800b55a <_vfiprintf_r+0x7a>
 800b566:	ebba 0b04 	subs.w	fp, sl, r4
 800b56a:	d00b      	beq.n	800b584 <_vfiprintf_r+0xa4>
 800b56c:	465b      	mov	r3, fp
 800b56e:	4622      	mov	r2, r4
 800b570:	4629      	mov	r1, r5
 800b572:	4630      	mov	r0, r6
 800b574:	f7ff ffa1 	bl	800b4ba <__sfputs_r>
 800b578:	3001      	adds	r0, #1
 800b57a:	f000 80a9 	beq.w	800b6d0 <_vfiprintf_r+0x1f0>
 800b57e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b580:	445a      	add	r2, fp
 800b582:	9209      	str	r2, [sp, #36]	; 0x24
 800b584:	f89a 3000 	ldrb.w	r3, [sl]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f000 80a1 	beq.w	800b6d0 <_vfiprintf_r+0x1f0>
 800b58e:	2300      	movs	r3, #0
 800b590:	f04f 32ff 	mov.w	r2, #4294967295
 800b594:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b598:	f10a 0a01 	add.w	sl, sl, #1
 800b59c:	9304      	str	r3, [sp, #16]
 800b59e:	9307      	str	r3, [sp, #28]
 800b5a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5a4:	931a      	str	r3, [sp, #104]	; 0x68
 800b5a6:	4654      	mov	r4, sl
 800b5a8:	2205      	movs	r2, #5
 800b5aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ae:	4854      	ldr	r0, [pc, #336]	; (800b700 <_vfiprintf_r+0x220>)
 800b5b0:	f7f4 fe4e 	bl	8000250 <memchr>
 800b5b4:	9a04      	ldr	r2, [sp, #16]
 800b5b6:	b9d8      	cbnz	r0, 800b5f0 <_vfiprintf_r+0x110>
 800b5b8:	06d1      	lsls	r1, r2, #27
 800b5ba:	bf44      	itt	mi
 800b5bc:	2320      	movmi	r3, #32
 800b5be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5c2:	0713      	lsls	r3, r2, #28
 800b5c4:	bf44      	itt	mi
 800b5c6:	232b      	movmi	r3, #43	; 0x2b
 800b5c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b5d0:	2b2a      	cmp	r3, #42	; 0x2a
 800b5d2:	d015      	beq.n	800b600 <_vfiprintf_r+0x120>
 800b5d4:	9a07      	ldr	r2, [sp, #28]
 800b5d6:	4654      	mov	r4, sl
 800b5d8:	2000      	movs	r0, #0
 800b5da:	f04f 0c0a 	mov.w	ip, #10
 800b5de:	4621      	mov	r1, r4
 800b5e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5e4:	3b30      	subs	r3, #48	; 0x30
 800b5e6:	2b09      	cmp	r3, #9
 800b5e8:	d94d      	bls.n	800b686 <_vfiprintf_r+0x1a6>
 800b5ea:	b1b0      	cbz	r0, 800b61a <_vfiprintf_r+0x13a>
 800b5ec:	9207      	str	r2, [sp, #28]
 800b5ee:	e014      	b.n	800b61a <_vfiprintf_r+0x13a>
 800b5f0:	eba0 0308 	sub.w	r3, r0, r8
 800b5f4:	fa09 f303 	lsl.w	r3, r9, r3
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	9304      	str	r3, [sp, #16]
 800b5fc:	46a2      	mov	sl, r4
 800b5fe:	e7d2      	b.n	800b5a6 <_vfiprintf_r+0xc6>
 800b600:	9b03      	ldr	r3, [sp, #12]
 800b602:	1d19      	adds	r1, r3, #4
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	9103      	str	r1, [sp, #12]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	bfbb      	ittet	lt
 800b60c:	425b      	neglt	r3, r3
 800b60e:	f042 0202 	orrlt.w	r2, r2, #2
 800b612:	9307      	strge	r3, [sp, #28]
 800b614:	9307      	strlt	r3, [sp, #28]
 800b616:	bfb8      	it	lt
 800b618:	9204      	strlt	r2, [sp, #16]
 800b61a:	7823      	ldrb	r3, [r4, #0]
 800b61c:	2b2e      	cmp	r3, #46	; 0x2e
 800b61e:	d10c      	bne.n	800b63a <_vfiprintf_r+0x15a>
 800b620:	7863      	ldrb	r3, [r4, #1]
 800b622:	2b2a      	cmp	r3, #42	; 0x2a
 800b624:	d134      	bne.n	800b690 <_vfiprintf_r+0x1b0>
 800b626:	9b03      	ldr	r3, [sp, #12]
 800b628:	1d1a      	adds	r2, r3, #4
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	9203      	str	r2, [sp, #12]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	bfb8      	it	lt
 800b632:	f04f 33ff 	movlt.w	r3, #4294967295
 800b636:	3402      	adds	r4, #2
 800b638:	9305      	str	r3, [sp, #20]
 800b63a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b710 <_vfiprintf_r+0x230>
 800b63e:	7821      	ldrb	r1, [r4, #0]
 800b640:	2203      	movs	r2, #3
 800b642:	4650      	mov	r0, sl
 800b644:	f7f4 fe04 	bl	8000250 <memchr>
 800b648:	b138      	cbz	r0, 800b65a <_vfiprintf_r+0x17a>
 800b64a:	9b04      	ldr	r3, [sp, #16]
 800b64c:	eba0 000a 	sub.w	r0, r0, sl
 800b650:	2240      	movs	r2, #64	; 0x40
 800b652:	4082      	lsls	r2, r0
 800b654:	4313      	orrs	r3, r2
 800b656:	3401      	adds	r4, #1
 800b658:	9304      	str	r3, [sp, #16]
 800b65a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b65e:	4829      	ldr	r0, [pc, #164]	; (800b704 <_vfiprintf_r+0x224>)
 800b660:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b664:	2206      	movs	r2, #6
 800b666:	f7f4 fdf3 	bl	8000250 <memchr>
 800b66a:	2800      	cmp	r0, #0
 800b66c:	d03f      	beq.n	800b6ee <_vfiprintf_r+0x20e>
 800b66e:	4b26      	ldr	r3, [pc, #152]	; (800b708 <_vfiprintf_r+0x228>)
 800b670:	bb1b      	cbnz	r3, 800b6ba <_vfiprintf_r+0x1da>
 800b672:	9b03      	ldr	r3, [sp, #12]
 800b674:	3307      	adds	r3, #7
 800b676:	f023 0307 	bic.w	r3, r3, #7
 800b67a:	3308      	adds	r3, #8
 800b67c:	9303      	str	r3, [sp, #12]
 800b67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b680:	443b      	add	r3, r7
 800b682:	9309      	str	r3, [sp, #36]	; 0x24
 800b684:	e768      	b.n	800b558 <_vfiprintf_r+0x78>
 800b686:	fb0c 3202 	mla	r2, ip, r2, r3
 800b68a:	460c      	mov	r4, r1
 800b68c:	2001      	movs	r0, #1
 800b68e:	e7a6      	b.n	800b5de <_vfiprintf_r+0xfe>
 800b690:	2300      	movs	r3, #0
 800b692:	3401      	adds	r4, #1
 800b694:	9305      	str	r3, [sp, #20]
 800b696:	4619      	mov	r1, r3
 800b698:	f04f 0c0a 	mov.w	ip, #10
 800b69c:	4620      	mov	r0, r4
 800b69e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6a2:	3a30      	subs	r2, #48	; 0x30
 800b6a4:	2a09      	cmp	r2, #9
 800b6a6:	d903      	bls.n	800b6b0 <_vfiprintf_r+0x1d0>
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d0c6      	beq.n	800b63a <_vfiprintf_r+0x15a>
 800b6ac:	9105      	str	r1, [sp, #20]
 800b6ae:	e7c4      	b.n	800b63a <_vfiprintf_r+0x15a>
 800b6b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e7f0      	b.n	800b69c <_vfiprintf_r+0x1bc>
 800b6ba:	ab03      	add	r3, sp, #12
 800b6bc:	9300      	str	r3, [sp, #0]
 800b6be:	462a      	mov	r2, r5
 800b6c0:	4b12      	ldr	r3, [pc, #72]	; (800b70c <_vfiprintf_r+0x22c>)
 800b6c2:	a904      	add	r1, sp, #16
 800b6c4:	4630      	mov	r0, r6
 800b6c6:	f3af 8000 	nop.w
 800b6ca:	4607      	mov	r7, r0
 800b6cc:	1c78      	adds	r0, r7, #1
 800b6ce:	d1d6      	bne.n	800b67e <_vfiprintf_r+0x19e>
 800b6d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6d2:	07d9      	lsls	r1, r3, #31
 800b6d4:	d405      	bmi.n	800b6e2 <_vfiprintf_r+0x202>
 800b6d6:	89ab      	ldrh	r3, [r5, #12]
 800b6d8:	059a      	lsls	r2, r3, #22
 800b6da:	d402      	bmi.n	800b6e2 <_vfiprintf_r+0x202>
 800b6dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6de:	f7ff f9a0 	bl	800aa22 <__retarget_lock_release_recursive>
 800b6e2:	89ab      	ldrh	r3, [r5, #12]
 800b6e4:	065b      	lsls	r3, r3, #25
 800b6e6:	f53f af1d 	bmi.w	800b524 <_vfiprintf_r+0x44>
 800b6ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6ec:	e71c      	b.n	800b528 <_vfiprintf_r+0x48>
 800b6ee:	ab03      	add	r3, sp, #12
 800b6f0:	9300      	str	r3, [sp, #0]
 800b6f2:	462a      	mov	r2, r5
 800b6f4:	4b05      	ldr	r3, [pc, #20]	; (800b70c <_vfiprintf_r+0x22c>)
 800b6f6:	a904      	add	r1, sp, #16
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	f7ff fc77 	bl	800afec <_printf_i>
 800b6fe:	e7e4      	b.n	800b6ca <_vfiprintf_r+0x1ea>
 800b700:	0800be16 	.word	0x0800be16
 800b704:	0800be20 	.word	0x0800be20
 800b708:	00000000 	.word	0x00000000
 800b70c:	0800b4bb 	.word	0x0800b4bb
 800b710:	0800be1c 	.word	0x0800be1c

0800b714 <__swbuf_r>:
 800b714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b716:	460e      	mov	r6, r1
 800b718:	4614      	mov	r4, r2
 800b71a:	4605      	mov	r5, r0
 800b71c:	b118      	cbz	r0, 800b726 <__swbuf_r+0x12>
 800b71e:	6a03      	ldr	r3, [r0, #32]
 800b720:	b90b      	cbnz	r3, 800b726 <__swbuf_r+0x12>
 800b722:	f7fe fffb 	bl	800a71c <__sinit>
 800b726:	69a3      	ldr	r3, [r4, #24]
 800b728:	60a3      	str	r3, [r4, #8]
 800b72a:	89a3      	ldrh	r3, [r4, #12]
 800b72c:	071a      	lsls	r2, r3, #28
 800b72e:	d525      	bpl.n	800b77c <__swbuf_r+0x68>
 800b730:	6923      	ldr	r3, [r4, #16]
 800b732:	b31b      	cbz	r3, 800b77c <__swbuf_r+0x68>
 800b734:	6823      	ldr	r3, [r4, #0]
 800b736:	6922      	ldr	r2, [r4, #16]
 800b738:	1a98      	subs	r0, r3, r2
 800b73a:	6963      	ldr	r3, [r4, #20]
 800b73c:	b2f6      	uxtb	r6, r6
 800b73e:	4283      	cmp	r3, r0
 800b740:	4637      	mov	r7, r6
 800b742:	dc04      	bgt.n	800b74e <__swbuf_r+0x3a>
 800b744:	4621      	mov	r1, r4
 800b746:	4628      	mov	r0, r5
 800b748:	f7ff fdf8 	bl	800b33c <_fflush_r>
 800b74c:	b9e0      	cbnz	r0, 800b788 <__swbuf_r+0x74>
 800b74e:	68a3      	ldr	r3, [r4, #8]
 800b750:	3b01      	subs	r3, #1
 800b752:	60a3      	str	r3, [r4, #8]
 800b754:	6823      	ldr	r3, [r4, #0]
 800b756:	1c5a      	adds	r2, r3, #1
 800b758:	6022      	str	r2, [r4, #0]
 800b75a:	701e      	strb	r6, [r3, #0]
 800b75c:	6962      	ldr	r2, [r4, #20]
 800b75e:	1c43      	adds	r3, r0, #1
 800b760:	429a      	cmp	r2, r3
 800b762:	d004      	beq.n	800b76e <__swbuf_r+0x5a>
 800b764:	89a3      	ldrh	r3, [r4, #12]
 800b766:	07db      	lsls	r3, r3, #31
 800b768:	d506      	bpl.n	800b778 <__swbuf_r+0x64>
 800b76a:	2e0a      	cmp	r6, #10
 800b76c:	d104      	bne.n	800b778 <__swbuf_r+0x64>
 800b76e:	4621      	mov	r1, r4
 800b770:	4628      	mov	r0, r5
 800b772:	f7ff fde3 	bl	800b33c <_fflush_r>
 800b776:	b938      	cbnz	r0, 800b788 <__swbuf_r+0x74>
 800b778:	4638      	mov	r0, r7
 800b77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b77c:	4621      	mov	r1, r4
 800b77e:	4628      	mov	r0, r5
 800b780:	f000 f806 	bl	800b790 <__swsetup_r>
 800b784:	2800      	cmp	r0, #0
 800b786:	d0d5      	beq.n	800b734 <__swbuf_r+0x20>
 800b788:	f04f 37ff 	mov.w	r7, #4294967295
 800b78c:	e7f4      	b.n	800b778 <__swbuf_r+0x64>
	...

0800b790 <__swsetup_r>:
 800b790:	b538      	push	{r3, r4, r5, lr}
 800b792:	4b2a      	ldr	r3, [pc, #168]	; (800b83c <__swsetup_r+0xac>)
 800b794:	4605      	mov	r5, r0
 800b796:	6818      	ldr	r0, [r3, #0]
 800b798:	460c      	mov	r4, r1
 800b79a:	b118      	cbz	r0, 800b7a4 <__swsetup_r+0x14>
 800b79c:	6a03      	ldr	r3, [r0, #32]
 800b79e:	b90b      	cbnz	r3, 800b7a4 <__swsetup_r+0x14>
 800b7a0:	f7fe ffbc 	bl	800a71c <__sinit>
 800b7a4:	89a3      	ldrh	r3, [r4, #12]
 800b7a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7aa:	0718      	lsls	r0, r3, #28
 800b7ac:	d422      	bmi.n	800b7f4 <__swsetup_r+0x64>
 800b7ae:	06d9      	lsls	r1, r3, #27
 800b7b0:	d407      	bmi.n	800b7c2 <__swsetup_r+0x32>
 800b7b2:	2309      	movs	r3, #9
 800b7b4:	602b      	str	r3, [r5, #0]
 800b7b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7ba:	81a3      	strh	r3, [r4, #12]
 800b7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c0:	e034      	b.n	800b82c <__swsetup_r+0x9c>
 800b7c2:	0758      	lsls	r0, r3, #29
 800b7c4:	d512      	bpl.n	800b7ec <__swsetup_r+0x5c>
 800b7c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7c8:	b141      	cbz	r1, 800b7dc <__swsetup_r+0x4c>
 800b7ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7ce:	4299      	cmp	r1, r3
 800b7d0:	d002      	beq.n	800b7d8 <__swsetup_r+0x48>
 800b7d2:	4628      	mov	r0, r5
 800b7d4:	f7ff f944 	bl	800aa60 <_free_r>
 800b7d8:	2300      	movs	r3, #0
 800b7da:	6363      	str	r3, [r4, #52]	; 0x34
 800b7dc:	89a3      	ldrh	r3, [r4, #12]
 800b7de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7e2:	81a3      	strh	r3, [r4, #12]
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	6063      	str	r3, [r4, #4]
 800b7e8:	6923      	ldr	r3, [r4, #16]
 800b7ea:	6023      	str	r3, [r4, #0]
 800b7ec:	89a3      	ldrh	r3, [r4, #12]
 800b7ee:	f043 0308 	orr.w	r3, r3, #8
 800b7f2:	81a3      	strh	r3, [r4, #12]
 800b7f4:	6923      	ldr	r3, [r4, #16]
 800b7f6:	b94b      	cbnz	r3, 800b80c <__swsetup_r+0x7c>
 800b7f8:	89a3      	ldrh	r3, [r4, #12]
 800b7fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b7fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b802:	d003      	beq.n	800b80c <__swsetup_r+0x7c>
 800b804:	4621      	mov	r1, r4
 800b806:	4628      	mov	r0, r5
 800b808:	f000 f88c 	bl	800b924 <__smakebuf_r>
 800b80c:	89a0      	ldrh	r0, [r4, #12]
 800b80e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b812:	f010 0301 	ands.w	r3, r0, #1
 800b816:	d00a      	beq.n	800b82e <__swsetup_r+0x9e>
 800b818:	2300      	movs	r3, #0
 800b81a:	60a3      	str	r3, [r4, #8]
 800b81c:	6963      	ldr	r3, [r4, #20]
 800b81e:	425b      	negs	r3, r3
 800b820:	61a3      	str	r3, [r4, #24]
 800b822:	6923      	ldr	r3, [r4, #16]
 800b824:	b943      	cbnz	r3, 800b838 <__swsetup_r+0xa8>
 800b826:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b82a:	d1c4      	bne.n	800b7b6 <__swsetup_r+0x26>
 800b82c:	bd38      	pop	{r3, r4, r5, pc}
 800b82e:	0781      	lsls	r1, r0, #30
 800b830:	bf58      	it	pl
 800b832:	6963      	ldrpl	r3, [r4, #20]
 800b834:	60a3      	str	r3, [r4, #8]
 800b836:	e7f4      	b.n	800b822 <__swsetup_r+0x92>
 800b838:	2000      	movs	r0, #0
 800b83a:	e7f7      	b.n	800b82c <__swsetup_r+0x9c>
 800b83c:	20000138 	.word	0x20000138

0800b840 <_raise_r>:
 800b840:	291f      	cmp	r1, #31
 800b842:	b538      	push	{r3, r4, r5, lr}
 800b844:	4604      	mov	r4, r0
 800b846:	460d      	mov	r5, r1
 800b848:	d904      	bls.n	800b854 <_raise_r+0x14>
 800b84a:	2316      	movs	r3, #22
 800b84c:	6003      	str	r3, [r0, #0]
 800b84e:	f04f 30ff 	mov.w	r0, #4294967295
 800b852:	bd38      	pop	{r3, r4, r5, pc}
 800b854:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b856:	b112      	cbz	r2, 800b85e <_raise_r+0x1e>
 800b858:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b85c:	b94b      	cbnz	r3, 800b872 <_raise_r+0x32>
 800b85e:	4620      	mov	r0, r4
 800b860:	f000 f830 	bl	800b8c4 <_getpid_r>
 800b864:	462a      	mov	r2, r5
 800b866:	4601      	mov	r1, r0
 800b868:	4620      	mov	r0, r4
 800b86a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b86e:	f000 b817 	b.w	800b8a0 <_kill_r>
 800b872:	2b01      	cmp	r3, #1
 800b874:	d00a      	beq.n	800b88c <_raise_r+0x4c>
 800b876:	1c59      	adds	r1, r3, #1
 800b878:	d103      	bne.n	800b882 <_raise_r+0x42>
 800b87a:	2316      	movs	r3, #22
 800b87c:	6003      	str	r3, [r0, #0]
 800b87e:	2001      	movs	r0, #1
 800b880:	e7e7      	b.n	800b852 <_raise_r+0x12>
 800b882:	2400      	movs	r4, #0
 800b884:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b888:	4628      	mov	r0, r5
 800b88a:	4798      	blx	r3
 800b88c:	2000      	movs	r0, #0
 800b88e:	e7e0      	b.n	800b852 <_raise_r+0x12>

0800b890 <raise>:
 800b890:	4b02      	ldr	r3, [pc, #8]	; (800b89c <raise+0xc>)
 800b892:	4601      	mov	r1, r0
 800b894:	6818      	ldr	r0, [r3, #0]
 800b896:	f7ff bfd3 	b.w	800b840 <_raise_r>
 800b89a:	bf00      	nop
 800b89c:	20000138 	.word	0x20000138

0800b8a0 <_kill_r>:
 800b8a0:	b538      	push	{r3, r4, r5, lr}
 800b8a2:	4d07      	ldr	r5, [pc, #28]	; (800b8c0 <_kill_r+0x20>)
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	4608      	mov	r0, r1
 800b8aa:	4611      	mov	r1, r2
 800b8ac:	602b      	str	r3, [r5, #0]
 800b8ae:	f7f6 f809 	bl	80018c4 <_kill>
 800b8b2:	1c43      	adds	r3, r0, #1
 800b8b4:	d102      	bne.n	800b8bc <_kill_r+0x1c>
 800b8b6:	682b      	ldr	r3, [r5, #0]
 800b8b8:	b103      	cbz	r3, 800b8bc <_kill_r+0x1c>
 800b8ba:	6023      	str	r3, [r4, #0]
 800b8bc:	bd38      	pop	{r3, r4, r5, pc}
 800b8be:	bf00      	nop
 800b8c0:	20000768 	.word	0x20000768

0800b8c4 <_getpid_r>:
 800b8c4:	f7f5 bff6 	b.w	80018b4 <_getpid>

0800b8c8 <_malloc_usable_size_r>:
 800b8c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8cc:	1f18      	subs	r0, r3, #4
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	bfbc      	itt	lt
 800b8d2:	580b      	ldrlt	r3, [r1, r0]
 800b8d4:	18c0      	addlt	r0, r0, r3
 800b8d6:	4770      	bx	lr

0800b8d8 <__swhatbuf_r>:
 800b8d8:	b570      	push	{r4, r5, r6, lr}
 800b8da:	460c      	mov	r4, r1
 800b8dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8e0:	2900      	cmp	r1, #0
 800b8e2:	b096      	sub	sp, #88	; 0x58
 800b8e4:	4615      	mov	r5, r2
 800b8e6:	461e      	mov	r6, r3
 800b8e8:	da0d      	bge.n	800b906 <__swhatbuf_r+0x2e>
 800b8ea:	89a3      	ldrh	r3, [r4, #12]
 800b8ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b8f0:	f04f 0100 	mov.w	r1, #0
 800b8f4:	bf0c      	ite	eq
 800b8f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b8fa:	2340      	movne	r3, #64	; 0x40
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	6031      	str	r1, [r6, #0]
 800b900:	602b      	str	r3, [r5, #0]
 800b902:	b016      	add	sp, #88	; 0x58
 800b904:	bd70      	pop	{r4, r5, r6, pc}
 800b906:	466a      	mov	r2, sp
 800b908:	f000 f848 	bl	800b99c <_fstat_r>
 800b90c:	2800      	cmp	r0, #0
 800b90e:	dbec      	blt.n	800b8ea <__swhatbuf_r+0x12>
 800b910:	9901      	ldr	r1, [sp, #4]
 800b912:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b916:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b91a:	4259      	negs	r1, r3
 800b91c:	4159      	adcs	r1, r3
 800b91e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b922:	e7eb      	b.n	800b8fc <__swhatbuf_r+0x24>

0800b924 <__smakebuf_r>:
 800b924:	898b      	ldrh	r3, [r1, #12]
 800b926:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b928:	079d      	lsls	r5, r3, #30
 800b92a:	4606      	mov	r6, r0
 800b92c:	460c      	mov	r4, r1
 800b92e:	d507      	bpl.n	800b940 <__smakebuf_r+0x1c>
 800b930:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b934:	6023      	str	r3, [r4, #0]
 800b936:	6123      	str	r3, [r4, #16]
 800b938:	2301      	movs	r3, #1
 800b93a:	6163      	str	r3, [r4, #20]
 800b93c:	b002      	add	sp, #8
 800b93e:	bd70      	pop	{r4, r5, r6, pc}
 800b940:	ab01      	add	r3, sp, #4
 800b942:	466a      	mov	r2, sp
 800b944:	f7ff ffc8 	bl	800b8d8 <__swhatbuf_r>
 800b948:	9900      	ldr	r1, [sp, #0]
 800b94a:	4605      	mov	r5, r0
 800b94c:	4630      	mov	r0, r6
 800b94e:	f7ff f8fb 	bl	800ab48 <_malloc_r>
 800b952:	b948      	cbnz	r0, 800b968 <__smakebuf_r+0x44>
 800b954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b958:	059a      	lsls	r2, r3, #22
 800b95a:	d4ef      	bmi.n	800b93c <__smakebuf_r+0x18>
 800b95c:	f023 0303 	bic.w	r3, r3, #3
 800b960:	f043 0302 	orr.w	r3, r3, #2
 800b964:	81a3      	strh	r3, [r4, #12]
 800b966:	e7e3      	b.n	800b930 <__smakebuf_r+0xc>
 800b968:	89a3      	ldrh	r3, [r4, #12]
 800b96a:	6020      	str	r0, [r4, #0]
 800b96c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b970:	81a3      	strh	r3, [r4, #12]
 800b972:	9b00      	ldr	r3, [sp, #0]
 800b974:	6163      	str	r3, [r4, #20]
 800b976:	9b01      	ldr	r3, [sp, #4]
 800b978:	6120      	str	r0, [r4, #16]
 800b97a:	b15b      	cbz	r3, 800b994 <__smakebuf_r+0x70>
 800b97c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b980:	4630      	mov	r0, r6
 800b982:	f000 f81d 	bl	800b9c0 <_isatty_r>
 800b986:	b128      	cbz	r0, 800b994 <__smakebuf_r+0x70>
 800b988:	89a3      	ldrh	r3, [r4, #12]
 800b98a:	f023 0303 	bic.w	r3, r3, #3
 800b98e:	f043 0301 	orr.w	r3, r3, #1
 800b992:	81a3      	strh	r3, [r4, #12]
 800b994:	89a3      	ldrh	r3, [r4, #12]
 800b996:	431d      	orrs	r5, r3
 800b998:	81a5      	strh	r5, [r4, #12]
 800b99a:	e7cf      	b.n	800b93c <__smakebuf_r+0x18>

0800b99c <_fstat_r>:
 800b99c:	b538      	push	{r3, r4, r5, lr}
 800b99e:	4d07      	ldr	r5, [pc, #28]	; (800b9bc <_fstat_r+0x20>)
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	4608      	mov	r0, r1
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	602b      	str	r3, [r5, #0]
 800b9aa:	f7f5 ffea 	bl	8001982 <_fstat>
 800b9ae:	1c43      	adds	r3, r0, #1
 800b9b0:	d102      	bne.n	800b9b8 <_fstat_r+0x1c>
 800b9b2:	682b      	ldr	r3, [r5, #0]
 800b9b4:	b103      	cbz	r3, 800b9b8 <_fstat_r+0x1c>
 800b9b6:	6023      	str	r3, [r4, #0]
 800b9b8:	bd38      	pop	{r3, r4, r5, pc}
 800b9ba:	bf00      	nop
 800b9bc:	20000768 	.word	0x20000768

0800b9c0 <_isatty_r>:
 800b9c0:	b538      	push	{r3, r4, r5, lr}
 800b9c2:	4d06      	ldr	r5, [pc, #24]	; (800b9dc <_isatty_r+0x1c>)
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	4608      	mov	r0, r1
 800b9ca:	602b      	str	r3, [r5, #0]
 800b9cc:	f7f5 ffe9 	bl	80019a2 <_isatty>
 800b9d0:	1c43      	adds	r3, r0, #1
 800b9d2:	d102      	bne.n	800b9da <_isatty_r+0x1a>
 800b9d4:	682b      	ldr	r3, [r5, #0]
 800b9d6:	b103      	cbz	r3, 800b9da <_isatty_r+0x1a>
 800b9d8:	6023      	str	r3, [r4, #0]
 800b9da:	bd38      	pop	{r3, r4, r5, pc}
 800b9dc:	20000768 	.word	0x20000768

0800b9e0 <_init>:
 800b9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9e2:	bf00      	nop
 800b9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9e6:	bc08      	pop	{r3}
 800b9e8:	469e      	mov	lr, r3
 800b9ea:	4770      	bx	lr

0800b9ec <_fini>:
 800b9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ee:	bf00      	nop
 800b9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9f2:	bc08      	pop	{r3}
 800b9f4:	469e      	mov	lr, r3
 800b9f6:	4770      	bx	lr
