
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7c4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  0800b9a4  0800b9a4  0001b9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdac  0800bdac  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  0800bdac  0800bdac  0001bdac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdb4  0800bdb4  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdb4  0800bdb4  0001bdb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdb8  0800bdb8  0001bdb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  0800bdbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000628  20000130  0800beec  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000758  0800beec  00020758  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d315  00000000  00000000  000201a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d89  00000000  00000000  0003d4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016f0  00000000  00000000  00041248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011a9  00000000  00000000  00042938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a98b  00000000  00000000  00043ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cf71  00000000  00000000  0006e46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011487e  00000000  00000000  0008b3dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006cc8  00000000  00000000  0019fc5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  001a6924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000130 	.word	0x20000130
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b98c 	.word	0x0800b98c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000134 	.word	0x20000134
 800021c:	0800b98c 	.word	0x0800b98c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b970 	b.w	8000e24 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9e08      	ldr	r6, [sp, #32]
 8000b62:	460d      	mov	r5, r1
 8000b64:	4604      	mov	r4, r0
 8000b66:	460f      	mov	r7, r1
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d14a      	bne.n	8000c02 <__udivmoddi4+0xa6>
 8000b6c:	428a      	cmp	r2, r1
 8000b6e:	4694      	mov	ip, r2
 8000b70:	d965      	bls.n	8000c3e <__udivmoddi4+0xe2>
 8000b72:	fab2 f382 	clz	r3, r2
 8000b76:	b143      	cbz	r3, 8000b8a <__udivmoddi4+0x2e>
 8000b78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b7c:	f1c3 0220 	rsb	r2, r3, #32
 8000b80:	409f      	lsls	r7, r3
 8000b82:	fa20 f202 	lsr.w	r2, r0, r2
 8000b86:	4317      	orrs	r7, r2
 8000b88:	409c      	lsls	r4, r3
 8000b8a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b8e:	fa1f f58c 	uxth.w	r5, ip
 8000b92:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b96:	0c22      	lsrs	r2, r4, #16
 8000b98:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b9c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ba0:	fb01 f005 	mul.w	r0, r1, r5
 8000ba4:	4290      	cmp	r0, r2
 8000ba6:	d90a      	bls.n	8000bbe <__udivmoddi4+0x62>
 8000ba8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bac:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bb0:	f080 811c 	bcs.w	8000dec <__udivmoddi4+0x290>
 8000bb4:	4290      	cmp	r0, r2
 8000bb6:	f240 8119 	bls.w	8000dec <__udivmoddi4+0x290>
 8000bba:	3902      	subs	r1, #2
 8000bbc:	4462      	add	r2, ip
 8000bbe:	1a12      	subs	r2, r2, r0
 8000bc0:	b2a4      	uxth	r4, r4
 8000bc2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bc6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bce:	fb00 f505 	mul.w	r5, r0, r5
 8000bd2:	42a5      	cmp	r5, r4
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x90>
 8000bd6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bda:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bde:	f080 8107 	bcs.w	8000df0 <__udivmoddi4+0x294>
 8000be2:	42a5      	cmp	r5, r4
 8000be4:	f240 8104 	bls.w	8000df0 <__udivmoddi4+0x294>
 8000be8:	4464      	add	r4, ip
 8000bea:	3802      	subs	r0, #2
 8000bec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bf0:	1b64      	subs	r4, r4, r5
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	b11e      	cbz	r6, 8000bfe <__udivmoddi4+0xa2>
 8000bf6:	40dc      	lsrs	r4, r3
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	e9c6 4300 	strd	r4, r3, [r6]
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0xbc>
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	f000 80ed 	beq.w	8000de6 <__udivmoddi4+0x28a>
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c12:	4608      	mov	r0, r1
 8000c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c18:	fab3 f183 	clz	r1, r3
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d149      	bne.n	8000cb4 <__udivmoddi4+0x158>
 8000c20:	42ab      	cmp	r3, r5
 8000c22:	d302      	bcc.n	8000c2a <__udivmoddi4+0xce>
 8000c24:	4282      	cmp	r2, r0
 8000c26:	f200 80f8 	bhi.w	8000e1a <__udivmoddi4+0x2be>
 8000c2a:	1a84      	subs	r4, r0, r2
 8000c2c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c30:	2001      	movs	r0, #1
 8000c32:	4617      	mov	r7, r2
 8000c34:	2e00      	cmp	r6, #0
 8000c36:	d0e2      	beq.n	8000bfe <__udivmoddi4+0xa2>
 8000c38:	e9c6 4700 	strd	r4, r7, [r6]
 8000c3c:	e7df      	b.n	8000bfe <__udivmoddi4+0xa2>
 8000c3e:	b902      	cbnz	r2, 8000c42 <__udivmoddi4+0xe6>
 8000c40:	deff      	udf	#255	; 0xff
 8000c42:	fab2 f382 	clz	r3, r2
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f040 8090 	bne.w	8000d6c <__udivmoddi4+0x210>
 8000c4c:	1a8a      	subs	r2, r1, r2
 8000c4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c52:	fa1f fe8c 	uxth.w	lr, ip
 8000c56:	2101      	movs	r1, #1
 8000c58:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c5c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c60:	0c22      	lsrs	r2, r4, #16
 8000c62:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c66:	fb0e f005 	mul.w	r0, lr, r5
 8000c6a:	4290      	cmp	r0, r2
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x124>
 8000c6e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c72:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x122>
 8000c78:	4290      	cmp	r0, r2
 8000c7a:	f200 80cb 	bhi.w	8000e14 <__udivmoddi4+0x2b8>
 8000c7e:	4645      	mov	r5, r8
 8000c80:	1a12      	subs	r2, r2, r0
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c88:	fb07 2210 	mls	r2, r7, r0, r2
 8000c8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c90:	fb0e fe00 	mul.w	lr, lr, r0
 8000c94:	45a6      	cmp	lr, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x14e>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca0:	d202      	bcs.n	8000ca8 <__udivmoddi4+0x14c>
 8000ca2:	45a6      	cmp	lr, r4
 8000ca4:	f200 80bb 	bhi.w	8000e1e <__udivmoddi4+0x2c2>
 8000ca8:	4610      	mov	r0, r2
 8000caa:	eba4 040e 	sub.w	r4, r4, lr
 8000cae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cb2:	e79f      	b.n	8000bf4 <__udivmoddi4+0x98>
 8000cb4:	f1c1 0720 	rsb	r7, r1, #32
 8000cb8:	408b      	lsls	r3, r1
 8000cba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cbe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cc2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cc6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cca:	40fd      	lsrs	r5, r7
 8000ccc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cd0:	4323      	orrs	r3, r4
 8000cd2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	fb09 5518 	mls	r5, r9, r8, r5
 8000cde:	0c1c      	lsrs	r4, r3, #16
 8000ce0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ce4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ce8:	42a5      	cmp	r5, r4
 8000cea:	fa02 f201 	lsl.w	r2, r2, r1
 8000cee:	fa00 f001 	lsl.w	r0, r0, r1
 8000cf2:	d90b      	bls.n	8000d0c <__udivmoddi4+0x1b0>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cfc:	f080 8088 	bcs.w	8000e10 <__udivmoddi4+0x2b4>
 8000d00:	42a5      	cmp	r5, r4
 8000d02:	f240 8085 	bls.w	8000e10 <__udivmoddi4+0x2b4>
 8000d06:	f1a8 0802 	sub.w	r8, r8, #2
 8000d0a:	4464      	add	r4, ip
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	b29d      	uxth	r5, r3
 8000d10:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d14:	fb09 4413 	mls	r4, r9, r3, r4
 8000d18:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d1c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x1da>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d2c:	d26c      	bcs.n	8000e08 <__udivmoddi4+0x2ac>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	d96a      	bls.n	8000e08 <__udivmoddi4+0x2ac>
 8000d32:	3b02      	subs	r3, #2
 8000d34:	4464      	add	r4, ip
 8000d36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	42ac      	cmp	r4, r5
 8000d44:	46c8      	mov	r8, r9
 8000d46:	46ae      	mov	lr, r5
 8000d48:	d356      	bcc.n	8000df8 <__udivmoddi4+0x29c>
 8000d4a:	d053      	beq.n	8000df4 <__udivmoddi4+0x298>
 8000d4c:	b156      	cbz	r6, 8000d64 <__udivmoddi4+0x208>
 8000d4e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d52:	eb64 040e 	sbc.w	r4, r4, lr
 8000d56:	fa04 f707 	lsl.w	r7, r4, r7
 8000d5a:	40ca      	lsrs	r2, r1
 8000d5c:	40cc      	lsrs	r4, r1
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	e9c6 7400 	strd	r7, r4, [r6]
 8000d64:	4618      	mov	r0, r3
 8000d66:	2100      	movs	r1, #0
 8000d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6c:	f1c3 0120 	rsb	r1, r3, #32
 8000d70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d74:	fa20 f201 	lsr.w	r2, r0, r1
 8000d78:	fa25 f101 	lsr.w	r1, r5, r1
 8000d7c:	409d      	lsls	r5, r3
 8000d7e:	432a      	orrs	r2, r5
 8000d80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d84:	fa1f fe8c 	uxth.w	lr, ip
 8000d88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d8c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d90:	0c11      	lsrs	r1, r2, #16
 8000d92:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d96:	fb00 f50e 	mul.w	r5, r0, lr
 8000d9a:	428d      	cmp	r5, r1
 8000d9c:	fa04 f403 	lsl.w	r4, r4, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x258>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000daa:	d22f      	bcs.n	8000e0c <__udivmoddi4+0x2b0>
 8000dac:	428d      	cmp	r5, r1
 8000dae:	d92d      	bls.n	8000e0c <__udivmoddi4+0x2b0>
 8000db0:	3802      	subs	r0, #2
 8000db2:	4461      	add	r1, ip
 8000db4:	1b49      	subs	r1, r1, r5
 8000db6:	b292      	uxth	r2, r2
 8000db8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dbc:	fb07 1115 	mls	r1, r7, r5, r1
 8000dc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dc4:	fb05 f10e 	mul.w	r1, r5, lr
 8000dc8:	4291      	cmp	r1, r2
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x282>
 8000dcc:	eb1c 0202 	adds.w	r2, ip, r2
 8000dd0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd4:	d216      	bcs.n	8000e04 <__udivmoddi4+0x2a8>
 8000dd6:	4291      	cmp	r1, r2
 8000dd8:	d914      	bls.n	8000e04 <__udivmoddi4+0x2a8>
 8000dda:	3d02      	subs	r5, #2
 8000ddc:	4462      	add	r2, ip
 8000dde:	1a52      	subs	r2, r2, r1
 8000de0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000de4:	e738      	b.n	8000c58 <__udivmoddi4+0xfc>
 8000de6:	4631      	mov	r1, r6
 8000de8:	4630      	mov	r0, r6
 8000dea:	e708      	b.n	8000bfe <__udivmoddi4+0xa2>
 8000dec:	4639      	mov	r1, r7
 8000dee:	e6e6      	b.n	8000bbe <__udivmoddi4+0x62>
 8000df0:	4610      	mov	r0, r2
 8000df2:	e6fb      	b.n	8000bec <__udivmoddi4+0x90>
 8000df4:	4548      	cmp	r0, r9
 8000df6:	d2a9      	bcs.n	8000d4c <__udivmoddi4+0x1f0>
 8000df8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dfc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e00:	3b01      	subs	r3, #1
 8000e02:	e7a3      	b.n	8000d4c <__udivmoddi4+0x1f0>
 8000e04:	4645      	mov	r5, r8
 8000e06:	e7ea      	b.n	8000dde <__udivmoddi4+0x282>
 8000e08:	462b      	mov	r3, r5
 8000e0a:	e794      	b.n	8000d36 <__udivmoddi4+0x1da>
 8000e0c:	4640      	mov	r0, r8
 8000e0e:	e7d1      	b.n	8000db4 <__udivmoddi4+0x258>
 8000e10:	46d0      	mov	r8, sl
 8000e12:	e77b      	b.n	8000d0c <__udivmoddi4+0x1b0>
 8000e14:	3d02      	subs	r5, #2
 8000e16:	4462      	add	r2, ip
 8000e18:	e732      	b.n	8000c80 <__udivmoddi4+0x124>
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e70a      	b.n	8000c34 <__udivmoddi4+0xd8>
 8000e1e:	4464      	add	r4, ip
 8000e20:	3802      	subs	r0, #2
 8000e22:	e742      	b.n	8000caa <__udivmoddi4+0x14e>

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	; 0x30
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2220      	movs	r2, #32
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4618      	mov	r0, r3
 8000e42:	f009 fcec 	bl	800a81e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e46:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e48:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000e4e:	4b31      	ldr	r3, [pc, #196]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e50:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e56:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e5c:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e62:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e68:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e6e:	4b29      	ldr	r3, [pc, #164]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e70:	2204      	movs	r2, #4
 8000e72:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e74:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e7a:	4b26      	ldr	r3, [pc, #152]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000e80:	4b24      	ldr	r3, [pc, #144]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e86:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000e8e:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e90:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000e94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e96:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e9c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e9e:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ea6:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000eac:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eb4:	4817      	ldr	r0, [pc, #92]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000eb6:	f002 f91b 	bl	80030f0 <HAL_ADC_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000ec0:	f000 fbde 	bl	8001680 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4811      	ldr	r0, [pc, #68]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000ed0:	f003 fbb0 	bl	8004634 <HAL_ADCEx_MultiModeConfigChannel>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000eda:	f000 fbd1 	bl	8001680 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <MX_ADC1_Init+0xf0>)
 8000ee0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ee2:	2306      	movs	r3, #6
 8000ee4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eea:	237f      	movs	r3, #127	; 0x7f
 8000eec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eee:	2304      	movs	r3, #4
 8000ef0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4806      	ldr	r0, [pc, #24]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000efc:	f002 fe0c 	bl	8003b18 <HAL_ADC_ConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000f06:	f000 fbbb 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	3730      	adds	r7, #48	; 0x30
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000014c 	.word	0x2000014c
 8000f18:	08600004 	.word	0x08600004

08000f1c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f22:	463b      	mov	r3, r7
 8000f24:	2220      	movs	r2, #32
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f009 fc78 	bl	800a81e <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f30:	4a2b      	ldr	r2, [pc, #172]	; (8000fe0 <MX_ADC2_Init+0xc4>)
 8000f32:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000f34:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f3a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f3c:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000f48:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f4e:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f54:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f56:	2204      	movs	r2, #4
 8000f58:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f96:	4811      	ldr	r0, [pc, #68]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000f98:	f002 f8aa 	bl	80030f0 <HAL_ADC_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000fa2:	f000 fb6d 	bl	8001680 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_ADC2_Init+0xc8>)
 8000fa8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000faa:	2306      	movs	r3, #6
 8000fac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fb2:	237f      	movs	r3, #127	; 0x7f
 8000fb4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4806      	ldr	r0, [pc, #24]	; (8000fdc <MX_ADC2_Init+0xc0>)
 8000fc4:	f002 fda8 	bl	8003b18 <HAL_ADC_ConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000fce:	f000 fb57 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	3720      	adds	r7, #32
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200001b8 	.word	0x200001b8
 8000fe0:	50000100 	.word	0x50000100
 8000fe4:	19200040 	.word	0x19200040

08000fe8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b0a4      	sub	sp, #144	; 0x90
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001000:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001004:	2254      	movs	r2, #84	; 0x54
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f009 fc08 	bl	800a81e <memset>
  if(adcHandle->Instance==ADC1)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001016:	f040 80a8 	bne.w	800116a <HAL_ADC_MspInit+0x182>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800101a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001020:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001024:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001026:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800102a:	4618      	mov	r0, r3
 800102c:	f004 fff4 	bl	8006018 <HAL_RCCEx_PeriphCLKConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001036:	f000 fb23 	bl	8001680 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800103a:	4b81      	ldr	r3, [pc, #516]	; (8001240 <HAL_ADC_MspInit+0x258>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	3301      	adds	r3, #1
 8001040:	4a7f      	ldr	r2, [pc, #508]	; (8001240 <HAL_ADC_MspInit+0x258>)
 8001042:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001044:	4b7e      	ldr	r3, [pc, #504]	; (8001240 <HAL_ADC_MspInit+0x258>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d10b      	bne.n	8001064 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800104c:	4b7d      	ldr	r3, [pc, #500]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 800104e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001050:	4a7c      	ldr	r2, [pc, #496]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 8001052:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001056:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001058:	4b7a      	ldr	r3, [pc, #488]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 800105a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
 8001062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001064:	4b77      	ldr	r3, [pc, #476]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001068:	4a76      	ldr	r2, [pc, #472]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 800106a:	f043 0304 	orr.w	r3, r3, #4
 800106e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001070:	4b74      	ldr	r3, [pc, #464]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	623b      	str	r3, [r7, #32]
 800107a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	4b71      	ldr	r3, [pc, #452]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 800107e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001080:	4a70      	ldr	r2, [pc, #448]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001088:	4b6e      	ldr	r3, [pc, #440]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 800108a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001094:	4b6b      	ldr	r3, [pc, #428]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 8001096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001098:	4a6a      	ldr	r2, [pc, #424]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 800109a:	f043 0302 	orr.w	r3, r3, #2
 800109e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a0:	4b68      	ldr	r3, [pc, #416]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 80010a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	61bb      	str	r3, [r7, #24]
 80010aa:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 80010ac:	2304      	movs	r3, #4
 80010ae:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b0:	2303      	movs	r3, #3
 80010b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010c0:	4619      	mov	r1, r3
 80010c2:	4861      	ldr	r0, [pc, #388]	; (8001248 <HAL_ADC_MspInit+0x260>)
 80010c4:	f003 ffd0 	bl	8005068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80010c8:	2302      	movs	r3, #2
 80010ca:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010cc:	2303      	movs	r3, #3
 80010ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010dc:	4619      	mov	r1, r3
 80010de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e2:	f003 ffc1 	bl	8005068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010e6:	2303      	movs	r3, #3
 80010e8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ea:	2303      	movs	r3, #3
 80010ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010fa:	4619      	mov	r1, r3
 80010fc:	4853      	ldr	r0, [pc, #332]	; (800124c <HAL_ADC_MspInit+0x264>)
 80010fe:	f003 ffb3 	bl	8005068 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001102:	4b53      	ldr	r3, [pc, #332]	; (8001250 <HAL_ADC_MspInit+0x268>)
 8001104:	4a53      	ldr	r2, [pc, #332]	; (8001254 <HAL_ADC_MspInit+0x26c>)
 8001106:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001108:	4b51      	ldr	r3, [pc, #324]	; (8001250 <HAL_ADC_MspInit+0x268>)
 800110a:	2205      	movs	r2, #5
 800110c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800110e:	4b50      	ldr	r3, [pc, #320]	; (8001250 <HAL_ADC_MspInit+0x268>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001114:	4b4e      	ldr	r3, [pc, #312]	; (8001250 <HAL_ADC_MspInit+0x268>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800111a:	4b4d      	ldr	r3, [pc, #308]	; (8001250 <HAL_ADC_MspInit+0x268>)
 800111c:	2280      	movs	r2, #128	; 0x80
 800111e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001120:	4b4b      	ldr	r3, [pc, #300]	; (8001250 <HAL_ADC_MspInit+0x268>)
 8001122:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001126:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001128:	4b49      	ldr	r3, [pc, #292]	; (8001250 <HAL_ADC_MspInit+0x268>)
 800112a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800112e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001130:	4b47      	ldr	r3, [pc, #284]	; (8001250 <HAL_ADC_MspInit+0x268>)
 8001132:	2220      	movs	r2, #32
 8001134:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001136:	4b46      	ldr	r3, [pc, #280]	; (8001250 <HAL_ADC_MspInit+0x268>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800113c:	4844      	ldr	r0, [pc, #272]	; (8001250 <HAL_ADC_MspInit+0x268>)
 800113e:	f003 fc61 	bl	8004a04 <HAL_DMA_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 8001148:	f000 fa9a 	bl	8001680 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a40      	ldr	r2, [pc, #256]	; (8001250 <HAL_ADC_MspInit+0x268>)
 8001150:	655a      	str	r2, [r3, #84]	; 0x54
 8001152:	4a3f      	ldr	r2, [pc, #252]	; (8001250 <HAL_ADC_MspInit+0x268>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2100      	movs	r1, #0
 800115c:	2012      	movs	r0, #18
 800115e:	f003 fc29 	bl	80049b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001162:	2012      	movs	r0, #18
 8001164:	f003 fc40 	bl	80049e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001168:	e066      	b.n	8001238 <HAL_ADC_MspInit+0x250>
  else if(adcHandle->Instance==ADC2)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a3a      	ldr	r2, [pc, #232]	; (8001258 <HAL_ADC_MspInit+0x270>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d161      	bne.n	8001238 <HAL_ADC_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800117a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800117e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001180:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001184:	4618      	mov	r0, r3
 8001186:	f004 ff47 	bl	8006018 <HAL_RCCEx_PeriphCLKConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <HAL_ADC_MspInit+0x1ac>
      Error_Handler();
 8001190:	f000 fa76 	bl	8001680 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001194:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <HAL_ADC_MspInit+0x258>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	4a29      	ldr	r2, [pc, #164]	; (8001240 <HAL_ADC_MspInit+0x258>)
 800119c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800119e:	4b28      	ldr	r3, [pc, #160]	; (8001240 <HAL_ADC_MspInit+0x258>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d10b      	bne.n	80011be <HAL_ADC_MspInit+0x1d6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011a6:	4b27      	ldr	r3, [pc, #156]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	4a26      	ldr	r2, [pc, #152]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 80011ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b2:	4b24      	ldr	r3, [pc, #144]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	4a20      	ldr	r2, [pc, #128]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ca:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	4a1a      	ldr	r2, [pc, #104]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <HAL_ADC_MspInit+0x25c>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 80011ee:	230b      	movs	r3, #11
 80011f0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f2:	2303      	movs	r3, #3
 80011f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001202:	4619      	mov	r1, r3
 8001204:	4810      	ldr	r0, [pc, #64]	; (8001248 <HAL_ADC_MspInit+0x260>)
 8001206:	f003 ff2f 	bl	8005068 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 800120a:	2301      	movs	r3, #1
 800120c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120e:	2303      	movs	r3, #3
 8001210:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 800121a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800121e:	4619      	mov	r1, r3
 8001220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001224:	f003 ff20 	bl	8005068 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	2012      	movs	r0, #18
 800122e:	f003 fbc1 	bl	80049b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001232:	2012      	movs	r0, #18
 8001234:	f003 fbd8 	bl	80049e8 <HAL_NVIC_EnableIRQ>
}
 8001238:	bf00      	nop
 800123a:	3790      	adds	r7, #144	; 0x90
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000284 	.word	0x20000284
 8001244:	40021000 	.word	0x40021000
 8001248:	48000800 	.word	0x48000800
 800124c:	48000400 	.word	0x48000400
 8001250:	20000224 	.word	0x20000224
 8001254:	40020008 	.word	0x40020008
 8001258:	50000100 	.word	0x50000100

0800125c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001262:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_DMA_Init+0x50>)
 8001264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001266:	4a11      	ldr	r2, [pc, #68]	; (80012ac <MX_DMA_Init+0x50>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	6493      	str	r3, [r2, #72]	; 0x48
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_DMA_Init+0x50>)
 8001270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_DMA_Init+0x50>)
 800127c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800127e:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <MX_DMA_Init+0x50>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6493      	str	r3, [r2, #72]	; 0x48
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_DMA_Init+0x50>)
 8001288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	200b      	movs	r0, #11
 8001298:	f003 fb8c 	bl	80049b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800129c:	200b      	movs	r0, #11
 800129e:	f003 fba3 	bl	80049e8 <HAL_NVIC_EnableIRQ>

}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000

080012b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <MX_GPIO_Init+0x114>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	4a3e      	ldr	r2, [pc, #248]	; (80013c4 <MX_GPIO_Init+0x114>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d2:	4b3c      	ldr	r3, [pc, #240]	; (80013c4 <MX_GPIO_Init+0x114>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012de:	4b39      	ldr	r3, [pc, #228]	; (80013c4 <MX_GPIO_Init+0x114>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	4a38      	ldr	r2, [pc, #224]	; (80013c4 <MX_GPIO_Init+0x114>)
 80012e4:	f043 0320 	orr.w	r3, r3, #32
 80012e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ea:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <MX_GPIO_Init+0x114>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	f003 0320 	and.w	r3, r3, #32
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	4b33      	ldr	r3, [pc, #204]	; (80013c4 <MX_GPIO_Init+0x114>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	4a32      	ldr	r2, [pc, #200]	; (80013c4 <MX_GPIO_Init+0x114>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001302:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <MX_GPIO_Init+0x114>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <MX_GPIO_Init+0x114>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	4a2c      	ldr	r2, [pc, #176]	; (80013c4 <MX_GPIO_Init+0x114>)
 8001314:	f043 0302 	orr.w	r3, r3, #2
 8001318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131a:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <MX_GPIO_Init+0x114>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001326:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <MX_GPIO_Init+0x114>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	4a26      	ldr	r2, [pc, #152]	; (80013c4 <MX_GPIO_Init+0x114>)
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001332:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <MX_GPIO_Init+0x114>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	2120      	movs	r1, #32
 8001342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001346:	f004 f811 	bl	800536c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2104      	movs	r1, #4
 800134e:	481e      	ldr	r0, [pc, #120]	; (80013c8 <MX_GPIO_Init+0x118>)
 8001350:	f004 f80c 	bl	800536c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8001354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800135a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800135e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	4818      	ldr	r0, [pc, #96]	; (80013cc <MX_GPIO_Init+0x11c>)
 800136c:	f003 fe7c 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8001370:	2320      	movs	r3, #32
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138a:	f003 fe6d 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 800138e:	2304      	movs	r3, #4
 8001390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	2301      	movs	r3, #1
 8001394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4808      	ldr	r0, [pc, #32]	; (80013c8 <MX_GPIO_Init+0x118>)
 80013a6:	f003 fe5f 	bl	8005068 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	2028      	movs	r0, #40	; 0x28
 80013b0:	f003 fb00 	bl	80049b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013b4:	2028      	movs	r0, #40	; 0x28
 80013b6:	f003 fb17 	bl	80049e8 <HAL_NVIC_EnableIRQ>

}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	; 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000
 80013c8:	48000c00 	.word	0x48000c00
 80013cc:	48000800 	.word	0x48000800

080013d0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	int nb_loop = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013da:	f001 fbec 	bl	8002bb6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013de:	f000 f889 	bl	80014f4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013e2:	f7ff ff65 	bl	80012b0 <MX_GPIO_Init>
	MX_DMA_Init();
 80013e6:	f7ff ff39 	bl	800125c <MX_DMA_Init>
	MX_ADC2_Init();
 80013ea:	f7ff fd97 	bl	8000f1c <MX_ADC2_Init>
	MX_ADC1_Init();
 80013ee:	f7ff fd1b 	bl	8000e28 <MX_ADC1_Init>
	MX_TIM1_Init();
 80013f2:	f000 fb35 	bl	8001a60 <MX_TIM1_Init>
	MX_TIM3_Init();
 80013f6:	f000 fc03 	bl	8001c00 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 80013fa:	f000 fd93 	bl	8001f24 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 80013fe:	f000 fddd 	bl	8001fbc <MX_USART3_UART_Init>
	MX_TIM16_Init();
 8001402:	f000 fc53 	bl	8001cac <MX_TIM16_Init>
	/* USER CODE BEGIN 2 */

	if(HAL_OK != HAL_ADC_Start_DMA(&hadc1, buffer, ADC_BUF_SIZE)){
 8001406:	2201      	movs	r2, #1
 8001408:	4929      	ldr	r1, [pc, #164]	; (80014b0 <main+0xe0>)
 800140a:	482a      	ldr	r0, [pc, #168]	; (80014b4 <main+0xe4>)
 800140c:	f002 f832 	bl	8003474 <HAL_ADC_Start_DMA>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <main+0x4a>
		Error_Handler();
 8001416:	f000 f933 	bl	8001680 <Error_Handler>
	}
	HAL_TIM_Base_Start_IT(&htim16);
 800141a:	4827      	ldr	r0, [pc, #156]	; (80014b8 <main+0xe8>)
 800141c:	f005 f8a2 	bl	8006564 <HAL_TIM_Base_Start_IT>
	codeur_start();
 8001420:	f000 fffc 	bl	800241c <codeur_start>

	//PI Speed
	h_PI->b0=0.48;
 8001424:	4b25      	ldr	r3, [pc, #148]	; (80014bc <main+0xec>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a25      	ldr	r2, [pc, #148]	; (80014c0 <main+0xf0>)
 800142a:	60da      	str	r2, [r3, #12]
	h_PI->b1=0.247;
 800142c:	4b23      	ldr	r3, [pc, #140]	; (80014bc <main+0xec>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a24      	ldr	r2, [pc, #144]	; (80014c4 <main+0xf4>)
 8001432:	611a      	str	r2, [r3, #16]
	h_PI->b2=-0.23;
 8001434:	4b21      	ldr	r3, [pc, #132]	; (80014bc <main+0xec>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a23      	ldr	r2, [pc, #140]	; (80014c8 <main+0xf8>)
 800143a:	615a      	str	r2, [r3, #20]
	//PI Current
	h_PI_I->b0=0.9325;
 800143c:	4b23      	ldr	r3, [pc, #140]	; (80014cc <main+0xfc>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a23      	ldr	r2, [pc, #140]	; (80014d0 <main+0x100>)
 8001442:	60da      	str	r2, [r3, #12]
	h_PI_I->b1=0.0001235;
 8001444:	4b21      	ldr	r3, [pc, #132]	; (80014cc <main+0xfc>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a22      	ldr	r2, [pc, #136]	; (80014d4 <main+0x104>)
 800144a:	611a      	str	r2, [r3, #16]
	h_PI_I->b2=-0.73;
 800144c:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <main+0xfc>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a21      	ldr	r2, [pc, #132]	; (80014d8 <main+0x108>)
 8001452:	615a      	str	r2, [r3, #20]
	pwm_start();
 8001454:	f001 f846 	bl	80024e4 <pwm_start>
	Shell_Init();
 8001458:	f001 f8e4 	bl	8002624 <Shell_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 800145c:	f001 f922 	bl	80026a4 <Shell_Loop>
		if(flag){
 8001460:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <main+0x10c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f9      	beq.n	800145c <main+0x8c>
			nb_loop = (nb_loop + 1)%20000;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3301      	adds	r3, #1
 800146c:	4a1c      	ldr	r2, [pc, #112]	; (80014e0 <main+0x110>)
 800146e:	fb82 1203 	smull	r1, r2, r2, r3
 8001472:	1351      	asrs	r1, r2, #13
 8001474:	17da      	asrs	r2, r3, #31
 8001476:	1a8a      	subs	r2, r1, r2
 8001478:	f644 6120 	movw	r1, #20000	; 0x4e20
 800147c:	fb01 f202 	mul.w	r2, r1, r2
 8001480:	1a9b      	subs	r3, r3, r2
 8001482:	607b      	str	r3, [r7, #4]
			if(nb_loop == 0){
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10e      	bne.n	80014a8 <main+0xd8>
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Valeur : %4d \r\n", adc_vall);
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <main+0x114>)
 800148c:	4a16      	ldr	r2, [pc, #88]	; (80014e8 <main+0x118>)
 800148e:	2140      	movs	r1, #64	; 0x40
 8001490:	4816      	ldr	r0, [pc, #88]	; (80014ec <main+0x11c>)
 8001492:	f009 f94d 	bl	800a730 <sniprintf>
 8001496:	6038      	str	r0, [r7, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	b29a      	uxth	r2, r3
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
 80014a0:	4912      	ldr	r1, [pc, #72]	; (80014ec <main+0x11c>)
 80014a2:	4813      	ldr	r0, [pc, #76]	; (80014f0 <main+0x120>)
 80014a4:	f006 ffcc 	bl	8008440 <HAL_UART_Transmit>
			}
			flag = 0;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <main+0x10c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	701a      	strb	r2, [r3, #0]
		Shell_Loop();
 80014ae:	e7d5      	b.n	800145c <main+0x8c>
 80014b0:	20000288 	.word	0x20000288
 80014b4:	2000014c 	.word	0x2000014c
 80014b8:	2000038c 	.word	0x2000038c
 80014bc:	2000029c 	.word	0x2000029c
 80014c0:	3ef5c28f 	.word	0x3ef5c28f
 80014c4:	3e7ced91 	.word	0x3e7ced91
 80014c8:	be6b851f 	.word	0xbe6b851f
 80014cc:	200002a0 	.word	0x200002a0
 80014d0:	3f6eb852 	.word	0x3f6eb852
 80014d4:	39017fc7 	.word	0x39017fc7
 80014d8:	bf3ae148 	.word	0xbf3ae148
 80014dc:	2000028c 	.word	0x2000028c
 80014e0:	68db8bad 	.word	0x68db8bad
 80014e4:	20000290 	.word	0x20000290
 80014e8:	0800b9a4 	.word	0x0800b9a4
 80014ec:	2000054c 	.word	0x2000054c
 80014f0:	200003d8 	.word	0x200003d8

080014f4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b094      	sub	sp, #80	; 0x50
 80014f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fa:	f107 0318 	add.w	r3, r7, #24
 80014fe:	2238      	movs	r2, #56	; 0x38
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f009 f98b 	bl	800a81e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001516:	2000      	movs	r0, #0
 8001518:	f003 ff64 	bl	80053e4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800151c:	2301      	movs	r3, #1
 800151e:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001520:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001524:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001526:	2302      	movs	r3, #2
 8001528:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800152a:	2303      	movs	r3, #3
 800152c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800152e:	2306      	movs	r3, #6
 8001530:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8001532:	2355      	movs	r3, #85	; 0x55
 8001534:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001536:	2302      	movs	r3, #2
 8001538:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800153a:	2302      	movs	r3, #2
 800153c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800153e:	2302      	movs	r3, #2
 8001540:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001542:	f107 0318 	add.w	r3, r7, #24
 8001546:	4618      	mov	r0, r3
 8001548:	f004 f800 	bl	800554c <HAL_RCC_OscConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0x62>
	{
		Error_Handler();
 8001552:	f000 f895 	bl	8001680 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001556:	230f      	movs	r3, #15
 8001558:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155a:	2303      	movs	r3, #3
 800155c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2104      	movs	r1, #4
 800156e:	4618      	mov	r0, r3
 8001570:	f004 fb04 	bl	8005b7c <HAL_RCC_ClockConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <SystemClock_Config+0x8a>
	{
		Error_Handler();
 800157a:	f000 f881 	bl	8001680 <Error_Handler>
	}
}
 800157e:	bf00      	nop
 8001580:	3750      	adds	r7, #80	; 0x50
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	//		flag=1;
	//	}
	//Interupt Mode
	//	adc_vall = HAL_ADC_GetValue(&hadc1);
	//	HAL_ADC_Start_IT(&hadc1);
	adc_vall[0]=adc_vall[1];
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_ADC_ConvCpltCallback+0x78>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	4a1a      	ldr	r2, [pc, #104]	; (8001600 <HAL_ADC_ConvCpltCallback+0x78>)
 8001596:	6013      	str	r3, [r2, #0]
	adc_vall[1]=adc_vall[2];
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_ADC_ConvCpltCallback+0x78>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	4a18      	ldr	r2, [pc, #96]	; (8001600 <HAL_ADC_ConvCpltCallback+0x78>)
 800159e:	6053      	str	r3, [r2, #4]
	adc_vall[2]= (buffer[0]-1351)/40.95;
 80015a0:	4b18      	ldr	r3, [pc, #96]	; (8001604 <HAL_ADC_ConvCpltCallback+0x7c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f2a3 5347 	subw	r3, r3, #1351	; 0x547
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe ffe3 	bl	8000574 <__aeabi_ui2d>
 80015ae:	a312      	add	r3, pc, #72	; (adr r3, 80015f8 <HAL_ADC_ConvCpltCallback+0x70>)
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	f7ff f982 	bl	80008bc <__aeabi_ddiv>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff fa64 	bl	8000a8c <__aeabi_d2f>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <HAL_ADC_ConvCpltCallback+0x78>)
 80015c8:	6093      	str	r3, [r2, #8]
	Erreur_I(pid_output,adc_vall);
 80015ca:	490d      	ldr	r1, [pc, #52]	; (8001600 <HAL_ADC_ConvCpltCallback+0x78>)
 80015cc:	480e      	ldr	r0, [pc, #56]	; (8001608 <HAL_ADC_ConvCpltCallback+0x80>)
 80015ce:	f000 fe15 	bl	80021fc <Erreur_I>
	Current_PI(h_PI_I,pid_output,Current_output);
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_ADC_ConvCpltCallback+0x84>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <HAL_ADC_ConvCpltCallback+0x88>)
 80015d8:	490b      	ldr	r1, [pc, #44]	; (8001608 <HAL_ADC_ConvCpltCallback+0x80>)
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 fea6 	bl	800232c <Current_PI>
	Out(Current_output);
 80015e0:	480b      	ldr	r0, [pc, #44]	; (8001610 <HAL_ADC_ConvCpltCallback+0x88>)
 80015e2:	f000 fef7 	bl	80023d4 <Out>
	flag = 1;
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_ADC_ConvCpltCallback+0x8c>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	701a      	strb	r2, [r3, #0]

}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	f3af 8000 	nop.w
 80015f8:	9999999a 	.word	0x9999999a
 80015fc:	40447999 	.word	0x40447999
 8001600:	20000290 	.word	0x20000290
 8001604:	20000288 	.word	0x20000288
 8001608:	20000510 	.word	0x20000510
 800160c:	200002a0 	.word	0x200002a0
 8001610:	2000051c 	.word	0x2000051c
 8001614:	2000028c 	.word	0x2000028c

08001618 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM16){
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a10      	ldr	r2, [pc, #64]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d112      	bne.n	8001650 <HAL_TIM_PeriodElapsedCallback+0x38>
		calc_speed();
 800162a:	f000 ff1b 	bl	8002464 <calc_speed>
		Erreur(consigne);
 800162e:	4b0f      	ldr	r3, [pc, #60]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	ee07 3a90 	vmov	s15, r3
 8001636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800163a:	eeb0 0a67 	vmov.f32	s0, s15
 800163e:	f000 fdb1 	bl	80021a4 <Erreur>
		PID(h_PI,erreur,pid_output);
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001648:	490b      	ldr	r1, [pc, #44]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800164a:	4618      	mov	r0, r3
 800164c:	f000 fe06 	bl	800225c <PID>
	}
	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a09      	ldr	r2, [pc, #36]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d101      	bne.n	800165e <HAL_TIM_PeriodElapsedCallback+0x46>
		HAL_IncTick();
 800165a:	f001 fac5 	bl	8002be8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40014400 	.word	0x40014400
 800166c:	20000604 	.word	0x20000604
 8001670:	2000029c 	.word	0x2000029c
 8001674:	20000510 	.word	0x20000510
 8001678:	200004f8 	.word	0x200004f8
 800167c:	40001000 	.word	0x40001000

08001680 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001684:	b672      	cpsid	i
}
 8001686:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001688:	e7fe      	b.n	8001688 <Error_Handler+0x8>
	...

0800168c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001692:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_MspInit+0x44>)
 8001694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001696:	4a0e      	ldr	r2, [pc, #56]	; (80016d0 <HAL_MspInit+0x44>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6613      	str	r3, [r2, #96]	; 0x60
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <HAL_MspInit+0x44>)
 80016a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_MspInit+0x44>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ae:	4a08      	ldr	r2, [pc, #32]	; (80016d0 <HAL_MspInit+0x44>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b4:	6593      	str	r3, [r2, #88]	; 0x58
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_MspInit+0x44>)
 80016b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016c2:	f003 ff33 	bl	800552c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000

080016d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08c      	sub	sp, #48	; 0x30
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016e4:	4b2c      	ldr	r3, [pc, #176]	; (8001798 <HAL_InitTick+0xc4>)
 80016e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e8:	4a2b      	ldr	r2, [pc, #172]	; (8001798 <HAL_InitTick+0xc4>)
 80016ea:	f043 0310 	orr.w	r3, r3, #16
 80016ee:	6593      	str	r3, [r2, #88]	; 0x58
 80016f0:	4b29      	ldr	r3, [pc, #164]	; (8001798 <HAL_InitTick+0xc4>)
 80016f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f4:	f003 0310 	and.w	r3, r3, #16
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016fc:	f107 020c 	add.w	r2, r7, #12
 8001700:	f107 0310 	add.w	r3, r7, #16
 8001704:	4611      	mov	r1, r2
 8001706:	4618      	mov	r0, r3
 8001708:	f004 fc0e 	bl	8005f28 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800170c:	f004 fbe0 	bl	8005ed0 <HAL_RCC_GetPCLK1Freq>
 8001710:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001714:	4a21      	ldr	r2, [pc, #132]	; (800179c <HAL_InitTick+0xc8>)
 8001716:	fba2 2303 	umull	r2, r3, r2, r3
 800171a:	0c9b      	lsrs	r3, r3, #18
 800171c:	3b01      	subs	r3, #1
 800171e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001720:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <HAL_InitTick+0xcc>)
 8001722:	4a20      	ldr	r2, [pc, #128]	; (80017a4 <HAL_InitTick+0xd0>)
 8001724:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001726:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <HAL_InitTick+0xcc>)
 8001728:	f240 32e7 	movw	r2, #999	; 0x3e7
 800172c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800172e:	4a1c      	ldr	r2, [pc, #112]	; (80017a0 <HAL_InitTick+0xcc>)
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <HAL_InitTick+0xcc>)
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <HAL_InitTick+0xcc>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001740:	4817      	ldr	r0, [pc, #92]	; (80017a0 <HAL_InitTick+0xcc>)
 8001742:	f004 feb7 	bl	80064b4 <HAL_TIM_Base_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800174c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001750:	2b00      	cmp	r3, #0
 8001752:	d11b      	bne.n	800178c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001754:	4812      	ldr	r0, [pc, #72]	; (80017a0 <HAL_InitTick+0xcc>)
 8001756:	f004 ff05 	bl	8006564 <HAL_TIM_Base_Start_IT>
 800175a:	4603      	mov	r3, r0
 800175c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001760:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001764:	2b00      	cmp	r3, #0
 8001766:	d111      	bne.n	800178c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001768:	2036      	movs	r0, #54	; 0x36
 800176a:	f003 f93d 	bl	80049e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b0f      	cmp	r3, #15
 8001772:	d808      	bhi.n	8001786 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001774:	2200      	movs	r2, #0
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	2036      	movs	r0, #54	; 0x36
 800177a:	f003 f91b 	bl	80049b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800177e:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <HAL_InitTick+0xd4>)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	e002      	b.n	800178c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800178c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001790:	4618      	mov	r0, r3
 8001792:	3730      	adds	r7, #48	; 0x30
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021000 	.word	0x40021000
 800179c:	431bde83 	.word	0x431bde83
 80017a0:	200002a4 	.word	0x200002a4
 80017a4:	40001000 	.word	0x40001000
 80017a8:	200000cc 	.word	0x200000cc

080017ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80017b0:	e7fe      	b.n	80017b0 <NMI_Handler+0x4>

080017b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b6:	e7fe      	b.n	80017b6 <HardFault_Handler+0x4>

080017b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <MemManage_Handler+0x4>

080017be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <BusFault_Handler+0x4>

080017c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <UsageFault_Handler+0x4>

080017ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <DMA1_Channel1_IRQHandler+0x10>)
 800180a:	f003 fade 	bl	8004dca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000224 	.word	0x20000224

08001818 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800181c:	4803      	ldr	r0, [pc, #12]	; (800182c <ADC1_2_IRQHandler+0x14>)
 800181e:	f001 fefd 	bl	800361c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001822:	4803      	ldr	r0, [pc, #12]	; (8001830 <ADC1_2_IRQHandler+0x18>)
 8001824:	f001 fefa 	bl	800361c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	2000014c 	.word	0x2000014c
 8001830:	200001b8 	.word	0x200001b8

08001834 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001838:	4803      	ldr	r0, [pc, #12]	; (8001848 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800183a:	f005 fa6f 	bl	8006d1c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800183e:	4803      	ldr	r0, [pc, #12]	; (800184c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001840:	f005 fa6c 	bl	8006d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200002f4 	.word	0x200002f4
 800184c:	2000038c 	.word	0x2000038c

08001850 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <TIM3_IRQHandler+0x10>)
 8001856:	f005 fa61 	bl	8006d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000340 	.word	0x20000340

08001864 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <USART2_IRQHandler+0x10>)
 800186a:	f006 fed5 	bl	8008618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200003d8 	.word	0x200003d8

08001878 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <USART3_IRQHandler+0x10>)
 800187e:	f006 fecb 	bl	8008618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000468 	.word	0x20000468

0800188c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001890:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001894:	f003 fd82 	bl	800539c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}

0800189c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <TIM6_DAC_IRQHandler+0x10>)
 80018a2:	f005 fa3b 	bl	8006d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200002a4 	.word	0x200002a4

080018b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return 1;
 80018b4:	2301      	movs	r3, #1
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <_kill>:

int _kill(int pid, int sig)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018ca:	f009 f853 	bl	800a974 <__errno>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2216      	movs	r2, #22
 80018d2:	601a      	str	r2, [r3, #0]
  return -1;
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_exit>:

void _exit (int status)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ffe7 	bl	80018c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018f2:	e7fe      	b.n	80018f2 <_exit+0x12>

080018f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	e00a      	b.n	800191c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001906:	f3af 8000 	nop.w
 800190a:	4601      	mov	r1, r0
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	60ba      	str	r2, [r7, #8]
 8001912:	b2ca      	uxtb	r2, r1
 8001914:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	429a      	cmp	r2, r3
 8001922:	dbf0      	blt.n	8001906 <_read+0x12>
  }

  return len;
 8001924:	687b      	ldr	r3, [r7, #4]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	e009      	b.n	8001954 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	60ba      	str	r2, [r7, #8]
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	3301      	adds	r3, #1
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	429a      	cmp	r2, r3
 800195a:	dbf1      	blt.n	8001940 <_write+0x12>
  }
  return len;
 800195c:	687b      	ldr	r3, [r7, #4]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <_close>:

int _close(int file)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800198e:	605a      	str	r2, [r3, #4]
  return 0;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <_isatty>:

int _isatty(int file)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019a6:	2301      	movs	r3, #1
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d8:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <_sbrk+0x5c>)
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <_sbrk+0x60>)
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d102      	bne.n	80019f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <_sbrk+0x64>)
 80019ee:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <_sbrk+0x68>)
 80019f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d207      	bcs.n	8001a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a00:	f008 ffb8 	bl	800a974 <__errno>
 8001a04:	4603      	mov	r3, r0
 8001a06:	220c      	movs	r2, #12
 8001a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0e:	e009      	b.n	8001a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <_sbrk+0x64>)
 8001a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a22:	68fb      	ldr	r3, [r7, #12]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20020000 	.word	0x20020000
 8001a30:	00000400 	.word	0x00000400
 8001a34:	200002f0 	.word	0x200002f0
 8001a38:	20000758 	.word	0x20000758

08001a3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <SystemInit+0x20>)
 8001a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a46:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <SystemInit+0x20>)
 8001a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b09c      	sub	sp, #112	; 0x70
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a66:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
 8001a90:	615a      	str	r2, [r3, #20]
 8001a92:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	2234      	movs	r2, #52	; 0x34
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f008 febf 	bl	800a81e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <MX_TIM1_Init+0x198>)
 8001aa2:	4a56      	ldr	r2, [pc, #344]	; (8001bfc <MX_TIM1_Init+0x19c>)
 8001aa4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 8001aa6:	4b54      	ldr	r3, [pc, #336]	; (8001bf8 <MX_TIM1_Init+0x198>)
 8001aa8:	2208      	movs	r2, #8
 8001aaa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001aac:	4b52      	ldr	r3, [pc, #328]	; (8001bf8 <MX_TIM1_Init+0x198>)
 8001aae:	2220      	movs	r2, #32
 8001ab0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8001ab2:	4b51      	ldr	r3, [pc, #324]	; (8001bf8 <MX_TIM1_Init+0x198>)
 8001ab4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001ab8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aba:	4b4f      	ldr	r3, [pc, #316]	; (8001bf8 <MX_TIM1_Init+0x198>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ac0:	4b4d      	ldr	r3, [pc, #308]	; (8001bf8 <MX_TIM1_Init+0x198>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac6:	4b4c      	ldr	r3, [pc, #304]	; (8001bf8 <MX_TIM1_Init+0x198>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001acc:	484a      	ldr	r0, [pc, #296]	; (8001bf8 <MX_TIM1_Init+0x198>)
 8001ace:	f004 fcf1 	bl	80064b4 <HAL_TIM_Base_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001ad8:	f7ff fdd2 	bl	8001680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ae2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4843      	ldr	r0, [pc, #268]	; (8001bf8 <MX_TIM1_Init+0x198>)
 8001aea:	f005 fbab 	bl	8007244 <HAL_TIM_ConfigClockSource>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001af4:	f7ff fdc4 	bl	8001680 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001af8:	483f      	ldr	r0, [pc, #252]	; (8001bf8 <MX_TIM1_Init+0x198>)
 8001afa:	f004 fdab 	bl	8006654 <HAL_TIM_PWM_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001b04:	f7ff fdbc 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b08:	2320      	movs	r3, #32
 8001b0a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8001b0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b10:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4836      	ldr	r0, [pc, #216]	; (8001bf8 <MX_TIM1_Init+0x198>)
 8001b1e:	f006 fa79 	bl	8008014 <HAL_TIMEx_MasterConfigSynchronization>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001b28:	f7ff fdaa 	bl	8001680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b2c:	2360      	movs	r3, #96	; 0x60
 8001b2e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 512;
 8001b30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b34:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b36:	2300      	movs	r3, #0
 8001b38:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b4e:	2200      	movs	r2, #0
 8001b50:	4619      	mov	r1, r3
 8001b52:	4829      	ldr	r0, [pc, #164]	; (8001bf8 <MX_TIM1_Init+0x198>)
 8001b54:	f005 fa62 	bl	800701c <HAL_TIM_PWM_ConfigChannel>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8001b5e:	f7ff fd8f 	bl	8001680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b66:	2204      	movs	r2, #4
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4823      	ldr	r0, [pc, #140]	; (8001bf8 <MX_TIM1_Init+0x198>)
 8001b6c:	f005 fa56 	bl	800701c <HAL_TIM_PWM_ConfigChannel>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 8001b76:	f7ff fd83 	bl	8001680 <Error_Handler>
  }
  sConfigOC.Pulse = 85;
 8001b7a:	2355      	movs	r3, #85	; 0x55
 8001b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b82:	2208      	movs	r2, #8
 8001b84:	4619      	mov	r1, r3
 8001b86:	481c      	ldr	r0, [pc, #112]	; (8001bf8 <MX_TIM1_Init+0x198>)
 8001b88:	f005 fa48 	bl	800701c <HAL_TIM_PWM_ConfigChannel>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8001b92:	f7ff fd75 	bl	8001680 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8001b96:	4818      	ldr	r0, [pc, #96]	; (8001bf8 <MX_TIM1_Init+0x198>)
 8001b98:	f006 fb84 	bl	80082a4 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 30;
 8001ba8:	231e      	movs	r3, #30
 8001baa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bb4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4807      	ldr	r0, [pc, #28]	; (8001bf8 <MX_TIM1_Init+0x198>)
 8001bda:	f006 fab1 	bl	8008140 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8001be4:	f7ff fd4c 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001be8:	4803      	ldr	r0, [pc, #12]	; (8001bf8 <MX_TIM1_Init+0x198>)
 8001bea:	f000 f933 	bl	8001e54 <HAL_TIM_MspPostInit>

}
 8001bee:	bf00      	nop
 8001bf0:	3770      	adds	r7, #112	; 0x70
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200002f4 	.word	0x200002f4
 8001bfc:	40012c00 	.word	0x40012c00

08001c00 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08c      	sub	sp, #48	; 0x30
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c06:	f107 030c 	add.w	r3, r7, #12
 8001c0a:	2224      	movs	r2, #36	; 0x24
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f008 fe05 	bl	800a81e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c14:	463b      	mov	r3, r7
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c1e:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <MX_TIM3_Init+0xa4>)
 8001c20:	4a21      	ldr	r2, [pc, #132]	; (8001ca8 <MX_TIM3_Init+0xa8>)
 8001c22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c24:	4b1f      	ldr	r3, [pc, #124]	; (8001ca4 <MX_TIM3_Init+0xa4>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <MX_TIM3_Init+0xa4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c30:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <MX_TIM3_Init+0xa4>)
 8001c32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c38:	4b1a      	ldr	r3, [pc, #104]	; (8001ca4 <MX_TIM3_Init+0xa4>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c3e:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <MX_TIM3_Init+0xa4>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c44:	2303      	movs	r3, #3
 8001c46:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c60:	2300      	movs	r3, #0
 8001c62:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	480d      	ldr	r0, [pc, #52]	; (8001ca4 <MX_TIM3_Init+0xa4>)
 8001c70:	f004 ff00 	bl	8006a74 <HAL_TIM_Encoder_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001c7a:	f7ff fd01 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c86:	463b      	mov	r3, r7
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4806      	ldr	r0, [pc, #24]	; (8001ca4 <MX_TIM3_Init+0xa4>)
 8001c8c:	f006 f9c2 	bl	8008014 <HAL_TIMEx_MasterConfigSynchronization>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001c96:	f7ff fcf3 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	3730      	adds	r7, #48	; 0x30
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000340 	.word	0x20000340
 8001ca8:	40000400 	.word	0x40000400

08001cac <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001cb0:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <MX_TIM16_Init+0x48>)
 8001cb2:	4a11      	ldr	r2, [pc, #68]	; (8001cf8 <MX_TIM16_Init+0x4c>)
 8001cb4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1699;
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <MX_TIM16_Init+0x48>)
 8001cb8:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8001cbc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <MX_TIM16_Init+0x48>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <MX_TIM16_Init+0x48>)
 8001cc6:	f242 720f 	movw	r2, #9999	; 0x270f
 8001cca:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ccc:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <MX_TIM16_Init+0x48>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001cd2:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <MX_TIM16_Init+0x48>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <MX_TIM16_Init+0x48>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001cde:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <MX_TIM16_Init+0x48>)
 8001ce0:	f004 fbe8 	bl	80064b4 <HAL_TIM_Base_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001cea:	f7ff fcc9 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	2000038c 	.word	0x2000038c
 8001cf8:	40014400 	.word	0x40014400

08001cfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1a      	ldr	r2, [pc, #104]	; (8001d74 <HAL_TIM_Base_MspInit+0x78>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d114      	bne.n	8001d38 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <HAL_TIM_Base_MspInit+0x7c>)
 8001d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d12:	4a19      	ldr	r2, [pc, #100]	; (8001d78 <HAL_TIM_Base_MspInit+0x7c>)
 8001d14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d18:	6613      	str	r3, [r2, #96]	; 0x60
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <HAL_TIM_Base_MspInit+0x7c>)
 8001d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2100      	movs	r1, #0
 8001d2a:	2019      	movs	r0, #25
 8001d2c:	f002 fe42 	bl	80049b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d30:	2019      	movs	r0, #25
 8001d32:	f002 fe59 	bl	80049e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001d36:	e018      	b.n	8001d6a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM16)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0f      	ldr	r2, [pc, #60]	; (8001d7c <HAL_TIM_Base_MspInit+0x80>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d113      	bne.n	8001d6a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001d42:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <HAL_TIM_Base_MspInit+0x7c>)
 8001d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d46:	4a0c      	ldr	r2, [pc, #48]	; (8001d78 <HAL_TIM_Base_MspInit+0x7c>)
 8001d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d4c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_TIM_Base_MspInit+0x7c>)
 8001d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	2019      	movs	r0, #25
 8001d60:	f002 fe28 	bl	80049b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d64:	2019      	movs	r0, #25
 8001d66:	f002 fe3f 	bl	80049e8 <HAL_NVIC_EnableIRQ>
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40012c00 	.word	0x40012c00
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40014400 	.word	0x40014400

08001d80 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a2a      	ldr	r2, [pc, #168]	; (8001e48 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d14d      	bne.n	8001e3e <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001da2:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da6:	4a29      	ldr	r2, [pc, #164]	; (8001e4c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	6593      	str	r3, [r2, #88]	; 0x58
 8001dae:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbe:	4a23      	ldr	r2, [pc, #140]	; (8001e4c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc6:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd2:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd6:	4a1d      	ldr	r2, [pc, #116]	; (8001e4c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dde:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001dea:	2350      	movs	r3, #80	; 0x50
 8001dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dee:	2302      	movs	r3, #2
 8001df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df6:	2300      	movs	r3, #0
 8001df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	4619      	mov	r1, r3
 8001e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e08:	f003 f92e 	bl	8005068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	4619      	mov	r1, r3
 8001e28:	4809      	ldr	r0, [pc, #36]	; (8001e50 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001e2a:	f003 f91d 	bl	8005068 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2100      	movs	r1, #0
 8001e32:	201d      	movs	r0, #29
 8001e34:	f002 fdbe 	bl	80049b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e38:	201d      	movs	r0, #29
 8001e3a:	f002 fdd5 	bl	80049e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e3e:	bf00      	nop
 8001e40:	3728      	adds	r7, #40	; 0x28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40000400 	.word	0x40000400
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	48000800 	.word	0x48000800

08001e54 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	; 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a29      	ldr	r2, [pc, #164]	; (8001f18 <HAL_TIM_MspPostInit+0xc4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d14b      	bne.n	8001f0e <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e76:	4b29      	ldr	r3, [pc, #164]	; (8001f1c <HAL_TIM_MspPostInit+0xc8>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7a:	4a28      	ldr	r2, [pc, #160]	; (8001f1c <HAL_TIM_MspPostInit+0xc8>)
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e82:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <HAL_TIM_MspPostInit+0xc8>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8e:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <HAL_TIM_MspPostInit+0xc8>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e92:	4a22      	ldr	r2, [pc, #136]	; (8001f1c <HAL_TIM_MspPostInit+0xc8>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e9a:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <HAL_TIM_MspPostInit+0xc8>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001ea6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eac:	2302      	movs	r3, #2
 8001eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001eb8:	2306      	movs	r3, #6
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4817      	ldr	r0, [pc, #92]	; (8001f20 <HAL_TIM_MspPostInit+0xcc>)
 8001ec4:	f003 f8d0 	bl	8005068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001ec8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001eda:	2304      	movs	r3, #4
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	480e      	ldr	r0, [pc, #56]	; (8001f20 <HAL_TIM_MspPostInit+0xcc>)
 8001ee6:	f003 f8bf 	bl	8005068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001eea:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001efc:	2306      	movs	r3, #6
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	4619      	mov	r1, r3
 8001f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f0a:	f003 f8ad 	bl	8005068 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f0e:	bf00      	nop
 8001f10:	3728      	adds	r7, #40	; 0x28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40012c00 	.word	0x40012c00
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	48000400 	.word	0x48000400

08001f24 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f28:	4b22      	ldr	r3, [pc, #136]	; (8001fb4 <MX_USART2_UART_Init+0x90>)
 8001f2a:	4a23      	ldr	r2, [pc, #140]	; (8001fb8 <MX_USART2_UART_Init+0x94>)
 8001f2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f2e:	4b21      	ldr	r3, [pc, #132]	; (8001fb4 <MX_USART2_UART_Init+0x90>)
 8001f30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f36:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <MX_USART2_UART_Init+0x90>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f3c:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <MX_USART2_UART_Init+0x90>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f42:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <MX_USART2_UART_Init+0x90>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f48:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <MX_USART2_UART_Init+0x90>)
 8001f4a:	220c      	movs	r2, #12
 8001f4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f4e:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <MX_USART2_UART_Init+0x90>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f54:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <MX_USART2_UART_Init+0x90>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f5a:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <MX_USART2_UART_Init+0x90>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f60:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <MX_USART2_UART_Init+0x90>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f66:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <MX_USART2_UART_Init+0x90>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f6c:	4811      	ldr	r0, [pc, #68]	; (8001fb4 <MX_USART2_UART_Init+0x90>)
 8001f6e:	f006 fa17 	bl	80083a0 <HAL_UART_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001f78:	f7ff fb82 	bl	8001680 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <MX_USART2_UART_Init+0x90>)
 8001f80:	f008 f9b9 	bl	800a2f6 <HAL_UARTEx_SetTxFifoThreshold>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001f8a:	f7ff fb79 	bl	8001680 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4808      	ldr	r0, [pc, #32]	; (8001fb4 <MX_USART2_UART_Init+0x90>)
 8001f92:	f008 f9ee 	bl	800a372 <HAL_UARTEx_SetRxFifoThreshold>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001f9c:	f7ff fb70 	bl	8001680 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001fa0:	4804      	ldr	r0, [pc, #16]	; (8001fb4 <MX_USART2_UART_Init+0x90>)
 8001fa2:	f008 f96f 	bl	800a284 <HAL_UARTEx_DisableFifoMode>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001fac:	f7ff fb68 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	200003d8 	.word	0x200003d8
 8001fb8:	40004400 	.word	0x40004400

08001fbc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fc0:	4b22      	ldr	r3, [pc, #136]	; (800204c <MX_USART3_UART_Init+0x90>)
 8001fc2:	4a23      	ldr	r2, [pc, #140]	; (8002050 <MX_USART3_UART_Init+0x94>)
 8001fc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fc6:	4b21      	ldr	r3, [pc, #132]	; (800204c <MX_USART3_UART_Init+0x90>)
 8001fc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fcc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fce:	4b1f      	ldr	r3, [pc, #124]	; (800204c <MX_USART3_UART_Init+0x90>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fd4:	4b1d      	ldr	r3, [pc, #116]	; (800204c <MX_USART3_UART_Init+0x90>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fda:	4b1c      	ldr	r3, [pc, #112]	; (800204c <MX_USART3_UART_Init+0x90>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <MX_USART3_UART_Init+0x90>)
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe6:	4b19      	ldr	r3, [pc, #100]	; (800204c <MX_USART3_UART_Init+0x90>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <MX_USART3_UART_Init+0x90>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <MX_USART3_UART_Init+0x90>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ff8:	4b14      	ldr	r3, [pc, #80]	; (800204c <MX_USART3_UART_Init+0x90>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <MX_USART3_UART_Init+0x90>)
 8002000:	2200      	movs	r2, #0
 8002002:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002004:	4811      	ldr	r0, [pc, #68]	; (800204c <MX_USART3_UART_Init+0x90>)
 8002006:	f006 f9cb 	bl	80083a0 <HAL_UART_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002010:	f7ff fb36 	bl	8001680 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002014:	2100      	movs	r1, #0
 8002016:	480d      	ldr	r0, [pc, #52]	; (800204c <MX_USART3_UART_Init+0x90>)
 8002018:	f008 f96d 	bl	800a2f6 <HAL_UARTEx_SetTxFifoThreshold>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002022:	f7ff fb2d 	bl	8001680 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002026:	2100      	movs	r1, #0
 8002028:	4808      	ldr	r0, [pc, #32]	; (800204c <MX_USART3_UART_Init+0x90>)
 800202a:	f008 f9a2 	bl	800a372 <HAL_UARTEx_SetRxFifoThreshold>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002034:	f7ff fb24 	bl	8001680 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002038:	4804      	ldr	r0, [pc, #16]	; (800204c <MX_USART3_UART_Init+0x90>)
 800203a:	f008 f923 	bl	800a284 <HAL_UARTEx_DisableFifoMode>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002044:	f7ff fb1c 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000468 	.word	0x20000468
 8002050:	40004800 	.word	0x40004800

08002054 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b0a0      	sub	sp, #128	; 0x80
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800206c:	f107 0318 	add.w	r3, r7, #24
 8002070:	2254      	movs	r2, #84	; 0x54
 8002072:	2100      	movs	r1, #0
 8002074:	4618      	mov	r0, r3
 8002076:	f008 fbd2 	bl	800a81e <memset>
  if(uartHandle->Instance==USART2)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a45      	ldr	r2, [pc, #276]	; (8002194 <HAL_UART_MspInit+0x140>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d13f      	bne.n	8002104 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002084:	2302      	movs	r3, #2
 8002086:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002088:	2300      	movs	r3, #0
 800208a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800208c:	f107 0318 	add.w	r3, r7, #24
 8002090:	4618      	mov	r0, r3
 8002092:	f003 ffc1 	bl	8006018 <HAL_RCCEx_PeriphCLKConfig>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800209c:	f7ff faf0 	bl	8001680 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020a0:	4b3d      	ldr	r3, [pc, #244]	; (8002198 <HAL_UART_MspInit+0x144>)
 80020a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a4:	4a3c      	ldr	r2, [pc, #240]	; (8002198 <HAL_UART_MspInit+0x144>)
 80020a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020aa:	6593      	str	r3, [r2, #88]	; 0x58
 80020ac:	4b3a      	ldr	r3, [pc, #232]	; (8002198 <HAL_UART_MspInit+0x144>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b8:	4b37      	ldr	r3, [pc, #220]	; (8002198 <HAL_UART_MspInit+0x144>)
 80020ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020bc:	4a36      	ldr	r2, [pc, #216]	; (8002198 <HAL_UART_MspInit+0x144>)
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c4:	4b34      	ldr	r3, [pc, #208]	; (8002198 <HAL_UART_MspInit+0x144>)
 80020c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020d0:	230c      	movs	r3, #12
 80020d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020dc:	2300      	movs	r3, #0
 80020de:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020e0:	2307      	movs	r3, #7
 80020e2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020e8:	4619      	mov	r1, r3
 80020ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ee:	f002 ffbb 	bl	8005068 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020f2:	2200      	movs	r2, #0
 80020f4:	2100      	movs	r1, #0
 80020f6:	2026      	movs	r0, #38	; 0x26
 80020f8:	f002 fc5c 	bl	80049b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020fc:	2026      	movs	r0, #38	; 0x26
 80020fe:	f002 fc73 	bl	80049e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002102:	e043      	b.n	800218c <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a24      	ldr	r2, [pc, #144]	; (800219c <HAL_UART_MspInit+0x148>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d13e      	bne.n	800218c <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800210e:	2304      	movs	r3, #4
 8002110:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002112:	2300      	movs	r3, #0
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002116:	f107 0318 	add.w	r3, r7, #24
 800211a:	4618      	mov	r0, r3
 800211c:	f003 ff7c 	bl	8006018 <HAL_RCCEx_PeriphCLKConfig>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8002126:	f7ff faab 	bl	8001680 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800212a:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <HAL_UART_MspInit+0x144>)
 800212c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212e:	4a1a      	ldr	r2, [pc, #104]	; (8002198 <HAL_UART_MspInit+0x144>)
 8002130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002134:	6593      	str	r3, [r2, #88]	; 0x58
 8002136:	4b18      	ldr	r3, [pc, #96]	; (8002198 <HAL_UART_MspInit+0x144>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002142:	4b15      	ldr	r3, [pc, #84]	; (8002198 <HAL_UART_MspInit+0x144>)
 8002144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002146:	4a14      	ldr	r2, [pc, #80]	; (8002198 <HAL_UART_MspInit+0x144>)
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800214e:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_UART_MspInit+0x144>)
 8002150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800215a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800215e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2300      	movs	r3, #0
 800216a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800216c:	2307      	movs	r3, #7
 800216e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002170:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002174:	4619      	mov	r1, r3
 8002176:	480a      	ldr	r0, [pc, #40]	; (80021a0 <HAL_UART_MspInit+0x14c>)
 8002178:	f002 ff76 	bl	8005068 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800217c:	2200      	movs	r2, #0
 800217e:	2100      	movs	r1, #0
 8002180:	2027      	movs	r0, #39	; 0x27
 8002182:	f002 fc17 	bl	80049b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002186:	2027      	movs	r0, #39	; 0x27
 8002188:	f002 fc2e 	bl	80049e8 <HAL_NVIC_EnableIRQ>
}
 800218c:	bf00      	nop
 800218e:	3780      	adds	r7, #128	; 0x80
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40004400 	.word	0x40004400
 8002198:	40021000 	.word	0x40021000
 800219c:	40004800 	.word	0x40004800
 80021a0:	48000800 	.word	0x48000800

080021a4 <Erreur>:
		pwm_stop();
	}
}
 */

int Erreur(float consigne){
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	ed87 0a01 	vstr	s0, [r7, #4]
	erreur[0]=erreur[1];
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <Erreur+0x4c>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	4a0f      	ldr	r2, [pc, #60]	; (80021f0 <Erreur+0x4c>)
 80021b4:	6013      	str	r3, [r2, #0]
	erreur[1]=erreur[2];
 80021b6:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <Erreur+0x4c>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	4a0d      	ldr	r2, [pc, #52]	; (80021f0 <Erreur+0x4c>)
 80021bc:	6053      	str	r3, [r2, #4]
	erreur[idx]=consigne-vitesse[idx];
 80021be:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <Erreur+0x50>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a0d      	ldr	r2, [pc, #52]	; (80021f8 <Erreur+0x54>)
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	edd3 7a00 	vldr	s15, [r3]
 80021cc:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <Erreur+0x50>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80021d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021d8:	4a05      	ldr	r2, [pc, #20]	; (80021f0 <Erreur+0x4c>)
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	edc3 7a00 	vstr	s15, [r3]
	return 0;  // Return an appropriate value.
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	200004f8 	.word	0x200004f8
 80021f4:	20000004 	.word	0x20000004
 80021f8:	20000534 	.word	0x20000534

080021fc <Erreur_I>:

int Erreur_I(float* consigne_current,float* adc_value){
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
	erreur_I[0]=erreur_I[1];
 8002206:	4b13      	ldr	r3, [pc, #76]	; (8002254 <Erreur_I+0x58>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4a12      	ldr	r2, [pc, #72]	; (8002254 <Erreur_I+0x58>)
 800220c:	6013      	str	r3, [r2, #0]
	erreur_I[1]=erreur_I[2];
 800220e:	4b11      	ldr	r3, [pc, #68]	; (8002254 <Erreur_I+0x58>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	4a10      	ldr	r2, [pc, #64]	; (8002254 <Erreur_I+0x58>)
 8002214:	6053      	str	r3, [r2, #4]
	erreur_I[idx]=consigne_current[idx]-adc_value[idx];
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <Erreur_I+0x5c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	4413      	add	r3, r2
 8002220:	ed93 7a00 	vldr	s14, [r3]
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <Erreur_I+0x5c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	4413      	add	r3, r2
 800222e:	edd3 7a00 	vldr	s15, [r3]
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <Erreur_I+0x5c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800223a:	4a06      	ldr	r2, [pc, #24]	; (8002254 <Erreur_I+0x58>)
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	edc3 7a00 	vstr	s15, [r3]
	return 0;  // Return an appropriate value.
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000504 	.word	0x20000504
 8002258:	20000004 	.word	0x20000004

0800225c <PID>:

int PID(h_PID_t * h_PID,float *input,float* output){
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
	output[idx]=output[idx-2]+h_PID->b0*input[idx]+h_PID->b1*input[idx-1]+h_PID->b2-input[idx-2];
 8002268:	4b2e      	ldr	r3, [pc, #184]	; (8002324 <PID+0xc8>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002270:	3b02      	subs	r3, #2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	4413      	add	r3, r2
 8002278:	ed93 7a00 	vldr	s14, [r3]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	edd3 6a03 	vldr	s13, [r3, #12]
 8002282:	4b28      	ldr	r3, [pc, #160]	; (8002324 <PID+0xc8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	4413      	add	r3, r2
 800228c:	edd3 7a00 	vldr	s15, [r3]
 8002290:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002294:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	edd3 6a04 	vldr	s13, [r3, #16]
 800229e:	4b21      	ldr	r3, [pc, #132]	; (8002324 <PID+0xc8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022a6:	3b01      	subs	r3, #1
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	4413      	add	r3, r2
 80022ae:	edd3 7a00 	vldr	s15, [r3]
 80022b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	edd3 7a05 	vldr	s15, [r3, #20]
 80022c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022c4:	4b17      	ldr	r3, [pc, #92]	; (8002324 <PID+0xc8>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022cc:	3b02      	subs	r3, #2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	4413      	add	r3, r2
 80022d4:	edd3 7a00 	vldr	s15, [r3]
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <PID+0xc8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e6:	edc3 7a00 	vstr	s15, [r3]
	if (output[idx] >= 3)
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <PID+0xc8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	4413      	add	r3, r2
 80022f4:	edd3 7a00 	vldr	s15, [r3]
 80022f8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80022fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002304:	db06      	blt.n	8002314 <PID+0xb8>
	{
		output[idx]=3;
 8002306:	4b07      	ldr	r3, [pc, #28]	; (8002324 <PID+0xc8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	4413      	add	r3, r2
 8002310:	4a05      	ldr	r2, [pc, #20]	; (8002328 <PID+0xcc>)
 8002312:	601a      	str	r2, [r3, #0]
	}
	return 0;  // Return an appropriate value.
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000004 	.word	0x20000004
 8002328:	40400000 	.word	0x40400000

0800232c <Current_PI>:


int Current_PI(h_PID_t * h_PID ,float* input, float* output){
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
	output[idx]=output[idx-2]+h_PID->b0*input[idx]+h_PID->b1*input[idx-1]+h_PID->b2-input[idx-2]+0.5;
 8002338:	4b25      	ldr	r3, [pc, #148]	; (80023d0 <Current_PI+0xa4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002340:	3b02      	subs	r3, #2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	ed93 7a00 	vldr	s14, [r3]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	edd3 6a03 	vldr	s13, [r3, #12]
 8002352:	4b1f      	ldr	r3, [pc, #124]	; (80023d0 <Current_PI+0xa4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	4413      	add	r3, r2
 800235c:	edd3 7a00 	vldr	s15, [r3]
 8002360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002364:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	edd3 6a04 	vldr	s13, [r3, #16]
 800236e:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <Current_PI+0xa4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002376:	3b01      	subs	r3, #1
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	4413      	add	r3, r2
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002386:	ee37 7a27 	vadd.f32	s14, s14, s15
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002390:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002394:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <Current_PI+0xa4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800239c:	3b02      	subs	r3, #2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	4413      	add	r3, r2
 80023a4:	edd3 7a00 	vldr	s15, [r3]
 80023a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <Current_PI+0xa4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023be:	edc3 7a00 	vstr	s15, [r3]
	return 0;  // Return an appropriate value.
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	20000004 	.word	0x20000004

080023d4 <Out>:
float Out(float* input){
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
	New_consigne=(1024*input[idx]);
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <Out+0x3c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	edd3 7a00 	vldr	s15, [r3]
 80023ea:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002414 <Out+0x40>
 80023ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023f2:	4b09      	ldr	r3, [pc, #36]	; (8002418 <Out+0x44>)
 80023f4:	edc3 7a00 	vstr	s15, [r3]
	return New_consigne;
 80023f8:	4b07      	ldr	r3, [pc, #28]	; (8002418 <Out+0x44>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	ee07 3a90 	vmov	s15, r3
}
 8002400:	eeb0 0a67 	vmov.f32	s0, s15
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000004 	.word	0x20000004
 8002414:	44800000 	.word	0x44800000
 8002418:	20000528 	.word	0x20000528

0800241c <codeur_start>:
 * Cette fonction démarre le compteur d'encodeur sur le Timer 3 en mode interruption. L'encodeur est
 * configuré pour surveiller les deux canaux(TIM_CHANNEL_ALL).
 *
 * @note Vous devez appeler cette fonction pour activer l'acquisition des impulsions de l'encodeur.
 */
void codeur_start(void){
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_ALL);
 8002420:	213c      	movs	r1, #60	; 0x3c
 8002422:	4802      	ldr	r0, [pc, #8]	; (800242c <codeur_start+0x10>)
 8002424:	f004 fbcc 	bl	8006bc0 <HAL_TIM_Encoder_Start_IT>
}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000340 	.word	0x20000340

08002430 <HAL_TIM_IC_CaptureCallback>:
 *
 * @param htim Un pointeur vers la structure TIM_HandleTypeDef associée à l'interruption.
 *
 * @note Cette fonction est destinée à être utilisée en tant que rappel (callback) pour gérer la capture d'interruption du Timer.
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(&htim3); //valeur du compteur absolue
 8002438:	4b07      	ldr	r3, [pc, #28]	; (8002458 <HAL_TIM_IC_CaptureCallback+0x28>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	4a07      	ldr	r2, [pc, #28]	; (800245c <HAL_TIM_IC_CaptureCallback+0x2c>)
 8002440:	6013      	str	r3, [r2, #0]
	pos = (int16_t)counter; //valeur du compteur avec les valeurs négatives
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_TIM_IC_CaptureCallback+0x2c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	b21a      	sxth	r2, r3
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_TIM_IC_CaptureCallback+0x30>)
 800244a:	801a      	strh	r2, [r3, #0]
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	20000340 	.word	0x20000340
 800245c:	2000052c 	.word	0x2000052c
 8002460:	20000530 	.word	0x20000530

08002464 <calc_speed>:
 * La vitesse est exprimée en fronts par seconde (front/s) et est stockée dans la variable 'vitesse'.
 * Après le calcul, la variable 'old_pos' est mise à jour avec la valeur actuelle de 'pos', et 'idx' est réinitialisé à 0.
 *
 * @note Cette fonction doit être appelée toutes les 500ms à l'aide de systick pour mettre à jour la vitesse en temps réel.
 */
void calc_speed(){
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
	vitesse[0]=vitesse[1];
 8002468:	4b18      	ldr	r3, [pc, #96]	; (80024cc <calc_speed+0x68>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4a17      	ldr	r2, [pc, #92]	; (80024cc <calc_speed+0x68>)
 800246e:	6013      	str	r3, [r2, #0]
	vitesse[1]=vitesse[2];
 8002470:	4b16      	ldr	r3, [pc, #88]	; (80024cc <calc_speed+0x68>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	4a15      	ldr	r2, [pc, #84]	; (80024cc <calc_speed+0x68>)
 8002476:	6053      	str	r3, [r2, #4]
	vitesse[2] = (((pos - oldpos)/dt)/resolution)*ms_To_s*10;
 8002478:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <calc_speed+0x6c>)
 800247a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800247e:	461a      	mov	r2, r3
 8002480:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <calc_speed+0x70>)
 8002482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002486:	1ad2      	subs	r2, r2, r3
 8002488:	4b13      	ldr	r3, [pc, #76]	; (80024d8 <calc_speed+0x74>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002490:	ee07 3a90 	vmov	s15, r3
 8002494:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002498:	4b10      	ldr	r3, [pc, #64]	; (80024dc <calc_speed+0x78>)
 800249a:	ed93 7a00 	vldr	s14, [r3]
 800249e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024a2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80024e0 <calc_speed+0x7c>
 80024a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024aa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80024ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <calc_speed+0x68>)
 80024b4:	edc3 7a02 	vstr	s15, [r3, #8]
	oldpos = pos;
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <calc_speed+0x6c>)
 80024ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80024be:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <calc_speed+0x70>)
 80024c0:	801a      	strh	r2, [r3, #0]

	//vitesse=(pos-old_pos)*1000/dt; //vitesse en front/s

}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	20000534 	.word	0x20000534
 80024d0:	20000530 	.word	0x20000530
 80024d4:	20000532 	.word	0x20000532
 80024d8:	20000008 	.word	0x20000008
 80024dc:	2000000c 	.word	0x2000000c
 80024e0:	447a0000 	.word	0x447a0000

080024e4 <pwm_start>:
 * Cette fonction démarre le PWM sur les canaux 1 et 2 du Timer 1.
 * Elle active la sortie PWM et la sortie complémentaire PWM (PWMN) sur ces canaux.
 *
 * @note Cette fonction doit être appelée après avoir configuré les paramètres PWM appropriés.
 */
void pwm_start(void){
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80024e8:	2100      	movs	r1, #0
 80024ea:	480a      	ldr	r0, [pc, #40]	; (8002514 <pwm_start+0x30>)
 80024ec:	f004 f914 	bl	8006718 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80024f0:	2100      	movs	r1, #0
 80024f2:	4808      	ldr	r0, [pc, #32]	; (8002514 <pwm_start+0x30>)
 80024f4:	f005 fc6e 	bl	8007dd4 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80024f8:	2104      	movs	r1, #4
 80024fa:	4806      	ldr	r0, [pc, #24]	; (8002514 <pwm_start+0x30>)
 80024fc:	f004 f90c 	bl	8006718 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002500:	2104      	movs	r1, #4
 8002502:	4804      	ldr	r0, [pc, #16]	; (8002514 <pwm_start+0x30>)
 8002504:	f005 fc66 	bl	8007dd4 <HAL_TIMEx_PWMN_Start>

	aTemp=50;
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <pwm_start+0x34>)
 800250a:	2232      	movs	r2, #50	; 0x32
 800250c:	601a      	str	r2, [r3, #0]

}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	200002f4 	.word	0x200002f4
 8002518:	20000540 	.word	0x20000540

0800251c <pwm_stop>:
 * Cette fonction arrete le PWM sur les canaux 1 et 2 du Timer 1.
 * Elle désactive la sortie PWM et la sortie complémentaire PWM (PWMN) sur ces canaux.
 *
 */

void pwm_stop(void){
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
	set_pwm_alpha(50);
 8002520:	2032      	movs	r0, #50	; 0x32
 8002522:	f000 f815 	bl	8002550 <set_pwm_alpha>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002526:	2100      	movs	r1, #0
 8002528:	4808      	ldr	r0, [pc, #32]	; (800254c <pwm_stop+0x30>)
 800252a:	f004 fa07 	bl	800693c <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800252e:	2100      	movs	r1, #0
 8002530:	4806      	ldr	r0, [pc, #24]	; (800254c <pwm_stop+0x30>)
 8002532:	f005 fd11 	bl	8007f58 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8002536:	2104      	movs	r1, #4
 8002538:	4804      	ldr	r0, [pc, #16]	; (800254c <pwm_stop+0x30>)
 800253a:	f004 f9ff 	bl	800693c <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800253e:	2104      	movs	r1, #4
 8002540:	4802      	ldr	r0, [pc, #8]	; (800254c <pwm_stop+0x30>)
 8002542:	f005 fd09 	bl	8007f58 <HAL_TIMEx_PWMN_Stop>
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	200002f4 	.word	0x200002f4

08002550 <set_pwm_alpha>:
 *
 * @param alpha La valeur du paramètre alpha en pourcentage (entre 0 et 100).
 *
 * @note Assurez-vous que le Timer 1 est configuré correctement pour le fonctionnement PWM avant d'appeler cette fonction.
 */
void set_pwm_alpha(int alpha){
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	int a1;
	int a2;
	int aTransi=aTemp;
 8002558:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <set_pwm_alpha+0xc8>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	617b      	str	r3, [r7, #20]

	if (alpha > aTransi){
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	429a      	cmp	r2, r3
 8002564:	dd26      	ble.n	80025b4 <set_pwm_alpha+0x64>
		while(aTransi != alpha){
 8002566:	e021      	b.n	80025ac <set_pwm_alpha+0x5c>

			aTransi++;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3301      	adds	r3, #1
 800256c:	617b      	str	r3, [r7, #20]
			a1=alpha_MAX*aTransi/PWM_MAX;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	029b      	lsls	r3, r3, #10
 8002572:	4a2a      	ldr	r2, [pc, #168]	; (800261c <set_pwm_alpha+0xcc>)
 8002574:	fb82 1203 	smull	r1, r2, r2, r3
 8002578:	1152      	asrs	r2, r2, #5
 800257a:	17db      	asrs	r3, r3, #31
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	613b      	str	r3, [r7, #16]
			a2=alpha_MAX*(PWM_MAX-aTransi)/PWM_MAX;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8002586:	029b      	lsls	r3, r3, #10
 8002588:	4a24      	ldr	r2, [pc, #144]	; (800261c <set_pwm_alpha+0xcc>)
 800258a:	fb82 1203 	smull	r1, r2, r2, r3
 800258e:	1152      	asrs	r2, r2, #5
 8002590:	17db      	asrs	r3, r3, #31
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,a1);
 8002596:	4b22      	ldr	r3, [pc, #136]	; (8002620 <set_pwm_alpha+0xd0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,a2);
 800259e:	4b20      	ldr	r3, [pc, #128]	; (8002620 <set_pwm_alpha+0xd0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(50);
 80025a6:	2032      	movs	r0, #50	; 0x32
 80025a8:	f000 fb3c 	bl	8002c24 <HAL_Delay>
		while(aTransi != alpha){
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d1d9      	bne.n	8002568 <set_pwm_alpha+0x18>
		}
	}

	if (alpha < aTransi){
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	da26      	bge.n	800260a <set_pwm_alpha+0xba>
		while(aTransi != alpha){
 80025bc:	e021      	b.n	8002602 <set_pwm_alpha+0xb2>

			aTransi--;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
			a1=alpha_MAX*aTransi/PWM_MAX;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	029b      	lsls	r3, r3, #10
 80025c8:	4a14      	ldr	r2, [pc, #80]	; (800261c <set_pwm_alpha+0xcc>)
 80025ca:	fb82 1203 	smull	r1, r2, r2, r3
 80025ce:	1152      	asrs	r2, r2, #5
 80025d0:	17db      	asrs	r3, r3, #31
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	613b      	str	r3, [r7, #16]
			a2=alpha_MAX*(PWM_MAX-aTransi)/PWM_MAX;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80025dc:	029b      	lsls	r3, r3, #10
 80025de:	4a0f      	ldr	r2, [pc, #60]	; (800261c <set_pwm_alpha+0xcc>)
 80025e0:	fb82 1203 	smull	r1, r2, r2, r3
 80025e4:	1152      	asrs	r2, r2, #5
 80025e6:	17db      	asrs	r3, r3, #31
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,a1);
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <set_pwm_alpha+0xd0>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,a2);
 80025f4:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <set_pwm_alpha+0xd0>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(50);
 80025fc:	2032      	movs	r0, #50	; 0x32
 80025fe:	f000 fb11 	bl	8002c24 <HAL_Delay>
		while(aTransi != alpha){
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	429a      	cmp	r2, r3
 8002608:	d1d9      	bne.n	80025be <set_pwm_alpha+0x6e>
		}
	}
	aTemp = alpha;
 800260a:	4a03      	ldr	r2, [pc, #12]	; (8002618 <set_pwm_alpha+0xc8>)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6013      	str	r3, [r2, #0]

}
 8002610:	bf00      	nop
 8002612:	3718      	adds	r7, #24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20000540 	.word	0x20000540
 800261c:	51eb851f 	.word	0x51eb851f
 8002620:	200002f4 	.word	0x200002f4

08002624 <Shell_Init>:
/**
 * @brief Fonction d'initialisation du Shell
 * @note Affiche un message d'accueil lors du lançement du programme
 */

void Shell_Init(void){
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8002628:	2224      	movs	r2, #36	; 0x24
 800262a:	2100      	movs	r1, #0
 800262c:	4816      	ldr	r0, [pc, #88]	; (8002688 <Shell_Init+0x64>)
 800262e:	f008 f8f6 	bl	800a81e <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 8002632:	2240      	movs	r2, #64	; 0x40
 8002634:	2100      	movs	r1, #0
 8002636:	4815      	ldr	r0, [pc, #84]	; (800268c <Shell_Init+0x68>)
 8002638:	f008 f8f1 	bl	800a81e <memset>
 800263c:	4b14      	ldr	r3, [pc, #80]	; (8002690 <Shell_Init+0x6c>)
 800263e:	2200      	movs	r2, #0
 8002640:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 8002642:	2240      	movs	r2, #64	; 0x40
 8002644:	2100      	movs	r1, #0
 8002646:	4813      	ldr	r0, [pc, #76]	; (8002694 <Shell_Init+0x70>)
 8002648:	f008 f8e9 	bl	800a81e <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800264c:	2201      	movs	r2, #1
 800264e:	4910      	ldr	r1, [pc, #64]	; (8002690 <Shell_Init+0x6c>)
 8002650:	4811      	ldr	r0, [pc, #68]	; (8002698 <Shell_Init+0x74>)
 8002652:	f005 ff8b 	bl	800856c <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8002656:	4811      	ldr	r0, [pc, #68]	; (800269c <Shell_Init+0x78>)
 8002658:	f7fd fdec 	bl	8000234 <strlen>
 800265c:	4603      	mov	r3, r0
 800265e:	b29a      	uxth	r2, r3
 8002660:	f04f 33ff 	mov.w	r3, #4294967295
 8002664:	490d      	ldr	r1, [pc, #52]	; (800269c <Shell_Init+0x78>)
 8002666:	480c      	ldr	r0, [pc, #48]	; (8002698 <Shell_Init+0x74>)
 8002668:	f005 feea 	bl	8008440 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 800266c:	480c      	ldr	r0, [pc, #48]	; (80026a0 <Shell_Init+0x7c>)
 800266e:	f7fd fde1 	bl	8000234 <strlen>
 8002672:	4603      	mov	r3, r0
 8002674:	b29a      	uxth	r2, r3
 8002676:	f04f 33ff 	mov.w	r3, #4294967295
 800267a:	4909      	ldr	r1, [pc, #36]	; (80026a0 <Shell_Init+0x7c>)
 800267c:	4806      	ldr	r0, [pc, #24]	; (8002698 <Shell_Init+0x74>)
 800267e:	f005 fedf 	bl	8008440 <HAL_UART_Transmit>
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	200005d0 	.word	0x200005d0
 800268c:	2000058c 	.word	0x2000058c
 8002690:	20000548 	.word	0x20000548
 8002694:	2000054c 	.word	0x2000054c
 8002698:	200003d8 	.word	0x200003d8
 800269c:	2000002c 	.word	0x2000002c
 80026a0:	20000010 	.word	0x20000010

080026a4 <Shell_Loop>:

/**
 * @brief Cette fonction tourne en boucle afin de recevoir et d'exécuter les commandes du Shell
 */
void Shell_Loop(void){
 80026a4:	b590      	push	{r4, r7, lr}
 80026a6:	b08d      	sub	sp, #52	; 0x34
 80026a8:	af00      	add	r7, sp, #0
	if(uartRxReceived){ //Condition verifiée lors de la réception d'un nouveau caractère UART
 80026aa:	4b9b      	ldr	r3, [pc, #620]	; (8002918 <Shell_Loop+0x274>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d05b      	beq.n	800276a <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 80026b2:	4b9a      	ldr	r3, [pc, #616]	; (800291c <Shell_Loop+0x278>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d034      	beq.n	8002724 <Shell_Loop+0x80>
 80026ba:	2b0d      	cmp	r3, #13
 80026bc:	d142      	bne.n	8002744 <Shell_Loop+0xa0>
		case ASCII_CR: //Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80026be:	f04f 33ff 	mov.w	r3, #4294967295
 80026c2:	2203      	movs	r2, #3
 80026c4:	4996      	ldr	r1, [pc, #600]	; (8002920 <Shell_Loop+0x27c>)
 80026c6:	4897      	ldr	r0, [pc, #604]	; (8002924 <Shell_Loop+0x280>)
 80026c8:	f005 feba 	bl	8008440 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 80026cc:	4b96      	ldr	r3, [pc, #600]	; (8002928 <Shell_Loop+0x284>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a96      	ldr	r2, [pc, #600]	; (800292c <Shell_Loop+0x288>)
 80026d2:	2100      	movs	r1, #0
 80026d4:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 80026d6:	4b96      	ldr	r3, [pc, #600]	; (8002930 <Shell_Loop+0x28c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 80026dc:	4995      	ldr	r1, [pc, #596]	; (8002934 <Shell_Loop+0x290>)
 80026de:	4893      	ldr	r0, [pc, #588]	; (800292c <Shell_Loop+0x288>)
 80026e0:	f008 f8a6 	bl	800a830 <strtok>
 80026e4:	4603      	mov	r3, r0
 80026e6:	4a94      	ldr	r2, [pc, #592]	; (8002938 <Shell_Loop+0x294>)
 80026e8:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80026ea:	e010      	b.n	800270e <Shell_Loop+0x6a>
				argv[argc++] = token;
 80026ec:	4b90      	ldr	r3, [pc, #576]	; (8002930 <Shell_Loop+0x28c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	498f      	ldr	r1, [pc, #572]	; (8002930 <Shell_Loop+0x28c>)
 80026f4:	600a      	str	r2, [r1, #0]
 80026f6:	4a90      	ldr	r2, [pc, #576]	; (8002938 <Shell_Loop+0x294>)
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	4990      	ldr	r1, [pc, #576]	; (800293c <Shell_Loop+0x298>)
 80026fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8002700:	498c      	ldr	r1, [pc, #560]	; (8002934 <Shell_Loop+0x290>)
 8002702:	2000      	movs	r0, #0
 8002704:	f008 f894 	bl	800a830 <strtok>
 8002708:	4603      	mov	r3, r0
 800270a:	4a8b      	ldr	r2, [pc, #556]	; (8002938 <Shell_Loop+0x294>)
 800270c:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800270e:	4b8a      	ldr	r3, [pc, #552]	; (8002938 <Shell_Loop+0x294>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1ea      	bne.n	80026ec <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 8002716:	4b84      	ldr	r3, [pc, #528]	; (8002928 <Shell_Loop+0x284>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 800271c:	4b88      	ldr	r3, [pc, #544]	; (8002940 <Shell_Loop+0x29c>)
 800271e:	2201      	movs	r2, #1
 8002720:	601a      	str	r2, [r3, #0]
			break;
 8002722:	e01f      	b.n	8002764 <Shell_Loop+0xc0>
		case ASCII_BACK: //Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8002724:	4b80      	ldr	r3, [pc, #512]	; (8002928 <Shell_Loop+0x284>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	1e5a      	subs	r2, r3, #1
 800272a:	497f      	ldr	r1, [pc, #508]	; (8002928 <Shell_Loop+0x284>)
 800272c:	600a      	str	r2, [r1, #0]
 800272e:	4a7f      	ldr	r2, [pc, #508]	; (800292c <Shell_Loop+0x288>)
 8002730:	2100      	movs	r1, #0
 8002732:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8002734:	f04f 33ff 	mov.w	r3, #4294967295
 8002738:	2204      	movs	r2, #4
 800273a:	4982      	ldr	r1, [pc, #520]	; (8002944 <Shell_Loop+0x2a0>)
 800273c:	4879      	ldr	r0, [pc, #484]	; (8002924 <Shell_Loop+0x280>)
 800273e:	f005 fe7f 	bl	8008440 <HAL_UART_Transmit>
			break;
 8002742:	e00f      	b.n	8002764 <Shell_Loop+0xc0>

		default: //Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8002744:	4b78      	ldr	r3, [pc, #480]	; (8002928 <Shell_Loop+0x284>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	4977      	ldr	r1, [pc, #476]	; (8002928 <Shell_Loop+0x284>)
 800274c:	600a      	str	r2, [r1, #0]
 800274e:	4a73      	ldr	r2, [pc, #460]	; (800291c <Shell_Loop+0x278>)
 8002750:	7811      	ldrb	r1, [r2, #0]
 8002752:	4a76      	ldr	r2, [pc, #472]	; (800292c <Shell_Loop+0x288>)
 8002754:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8002756:	f04f 33ff 	mov.w	r3, #4294967295
 800275a:	2201      	movs	r2, #1
 800275c:	496f      	ldr	r1, [pc, #444]	; (800291c <Shell_Loop+0x278>)
 800275e:	4871      	ldr	r0, [pc, #452]	; (8002924 <Shell_Loop+0x280>)
 8002760:	f005 fe6e 	bl	8008440 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 8002764:	4b6c      	ldr	r3, [pc, #432]	; (8002918 <Shell_Loop+0x274>)
 8002766:	2200      	movs	r2, #0
 8002768:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){ //Condition vérifiant la validitée d'une commande
 800276a:	4b75      	ldr	r3, [pc, #468]	; (8002940 <Shell_Loop+0x29c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 81bc 	beq.w	8002aec <Shell_Loop+0x448>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 8002774:	4b71      	ldr	r3, [pc, #452]	; (800293c <Shell_Loop+0x298>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4973      	ldr	r1, [pc, #460]	; (8002948 <Shell_Loop+0x2a4>)
 800277a:	4618      	mov	r0, r3
 800277c:	f7fd fd50 	bl	8000220 <strcmp>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d107      	bne.n	8002796 <Shell_Loop+0xf2>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 8002786:	f04f 33ff 	mov.w	r3, #4294967295
 800278a:	221a      	movs	r2, #26
 800278c:	496f      	ldr	r1, [pc, #444]	; (800294c <Shell_Loop+0x2a8>)
 800278e:	4865      	ldr	r0, [pc, #404]	; (8002924 <Shell_Loop+0x280>)
 8002790:	f005 fe56 	bl	8008440 <HAL_UART_Transmit>
 8002794:	e1a0      	b.n	8002ad8 <Shell_Loop+0x434>
		}
		else if(strcmp(argv[0],"help")==0){//Fonction help renvoyant la notice des fonctions spécifiées
 8002796:	4b69      	ldr	r3, [pc, #420]	; (800293c <Shell_Loop+0x298>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	496d      	ldr	r1, [pc, #436]	; (8002950 <Shell_Loop+0x2ac>)
 800279c:	4618      	mov	r0, r3
 800279e:	f7fd fd3f 	bl	8000220 <strcmp>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d126      	bne.n	80027f6 <Shell_Loop+0x152>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 80027a8:	4a6a      	ldr	r2, [pc, #424]	; (8002954 <Shell_Loop+0x2b0>)
 80027aa:	2140      	movs	r1, #64	; 0x40
 80027ac:	486a      	ldr	r0, [pc, #424]	; (8002958 <Shell_Loop+0x2b4>)
 80027ae:	f007 ffbf 	bl	800a730 <sniprintf>
 80027b2:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	f04f 33ff 	mov.w	r3, #4294967295
 80027bc:	4966      	ldr	r1, [pc, #408]	; (8002958 <Shell_Loop+0x2b4>)
 80027be:	4859      	ldr	r0, [pc, #356]	; (8002924 <Shell_Loop+0x280>)
 80027c0:	f005 fe3e 	bl	8008440 <HAL_UART_Transmit>
			if(strcmp(argv[1],"speed")==0){
 80027c4:	4b5d      	ldr	r3, [pc, #372]	; (800293c <Shell_Loop+0x298>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	4964      	ldr	r1, [pc, #400]	; (800295c <Shell_Loop+0x2b8>)
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fd fd28 	bl	8000220 <strcmp>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f040 8180 	bne.w	8002ad8 <Shell_Loop+0x434>
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Prend en argument un rapport cyclique entre 0 et 100\r\n");
 80027d8:	4a61      	ldr	r2, [pc, #388]	; (8002960 <Shell_Loop+0x2bc>)
 80027da:	2140      	movs	r1, #64	; 0x40
 80027dc:	485e      	ldr	r0, [pc, #376]	; (8002958 <Shell_Loop+0x2b4>)
 80027de:	f007 ffa7 	bl	800a730 <sniprintf>
 80027e2:	6038      	str	r0, [r7, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	f04f 33ff 	mov.w	r3, #4294967295
 80027ec:	495a      	ldr	r1, [pc, #360]	; (8002958 <Shell_Loop+0x2b4>)
 80027ee:	484d      	ldr	r0, [pc, #308]	; (8002924 <Shell_Loop+0x280>)
 80027f0:	f005 fe26 	bl	8008440 <HAL_UART_Transmit>
 80027f4:	e170      	b.n	8002ad8 <Shell_Loop+0x434>
			}
		}
		else if(strcmp(argv[0],"speed")==0){//Fonction permettant de choisir le sens de rotation et la vitesse du moteur
 80027f6:	4b51      	ldr	r3, [pc, #324]	; (800293c <Shell_Loop+0x298>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4958      	ldr	r1, [pc, #352]	; (800295c <Shell_Loop+0x2b8>)
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fd fd0f 	bl	8000220 <strcmp>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d154      	bne.n	80028b2 <Shell_Loop+0x20e>
			if(atoi(argv[1])>=0){//La valeur de vitesse reçue étant une chaine de caractères ASCII, atoi permet de la convertir en entier
 8002808:	4b4c      	ldr	r3, [pc, #304]	; (800293c <Shell_Loop+0x298>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4618      	mov	r0, r3
 800280e:	f007 fe3d 	bl	800a48c <atoi>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	db37      	blt.n	8002888 <Shell_Loop+0x1e4>
				if(atoi(argv[1])<=100){
 8002818:	4b48      	ldr	r3, [pc, #288]	; (800293c <Shell_Loop+0x298>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	4618      	mov	r0, r3
 800281e:	f007 fe35 	bl	800a48c <atoi>
 8002822:	4603      	mov	r3, r0
 8002824:	2b64      	cmp	r3, #100	; 0x64
 8002826:	dc1d      	bgt.n	8002864 <Shell_Loop+0x1c0>
					set_pwm_alpha(atoi(argv[1]));//Appelle à la fonction permettant de changer le rapport cyclique
 8002828:	4b44      	ldr	r3, [pc, #272]	; (800293c <Shell_Loop+0x298>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	4618      	mov	r0, r3
 800282e:	f007 fe2d 	bl	800a48c <atoi>
 8002832:	4603      	mov	r3, r0
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fe8b 	bl	8002550 <set_pwm_alpha>
					int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Nouveau alpha = %d\r\n",atoi(argv[1]));
 800283a:	4b40      	ldr	r3, [pc, #256]	; (800293c <Shell_Loop+0x298>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	4618      	mov	r0, r3
 8002840:	f007 fe24 	bl	800a48c <atoi>
 8002844:	4603      	mov	r3, r0
 8002846:	4a47      	ldr	r2, [pc, #284]	; (8002964 <Shell_Loop+0x2c0>)
 8002848:	2140      	movs	r1, #64	; 0x40
 800284a:	4843      	ldr	r0, [pc, #268]	; (8002958 <Shell_Loop+0x2b4>)
 800284c:	f007 ff70 	bl	800a730 <sniprintf>
 8002850:	60b8      	str	r0, [r7, #8]
					HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	b29a      	uxth	r2, r3
 8002856:	f04f 33ff 	mov.w	r3, #4294967295
 800285a:	493f      	ldr	r1, [pc, #252]	; (8002958 <Shell_Loop+0x2b4>)
 800285c:	4831      	ldr	r0, [pc, #196]	; (8002924 <Shell_Loop+0x280>)
 800285e:	f005 fdef 	bl	8008440 <HAL_UART_Transmit>
 8002862:	e139      	b.n	8002ad8 <Shell_Loop+0x434>
				}
				else{//Sécuritée permettant de ne pas avoir un rapport cyclique supérieur à 100
					set_pwm_alpha(100);
 8002864:	2064      	movs	r0, #100	; 0x64
 8002866:	f7ff fe73 	bl	8002550 <set_pwm_alpha>
					int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Nouveau alpha = 100\r\n");
 800286a:	4a3f      	ldr	r2, [pc, #252]	; (8002968 <Shell_Loop+0x2c4>)
 800286c:	2140      	movs	r1, #64	; 0x40
 800286e:	483a      	ldr	r0, [pc, #232]	; (8002958 <Shell_Loop+0x2b4>)
 8002870:	f007 ff5e 	bl	800a730 <sniprintf>
 8002874:	60f8      	str	r0, [r7, #12]
					HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	b29a      	uxth	r2, r3
 800287a:	f04f 33ff 	mov.w	r3, #4294967295
 800287e:	4936      	ldr	r1, [pc, #216]	; (8002958 <Shell_Loop+0x2b4>)
 8002880:	4828      	ldr	r0, [pc, #160]	; (8002924 <Shell_Loop+0x280>)
 8002882:	f005 fddd 	bl	8008440 <HAL_UART_Transmit>
 8002886:	e127      	b.n	8002ad8 <Shell_Loop+0x434>
				}
			}
			else{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Erreur alpha doit être compris entre 0 et 100\r\n",atoi(argv[1]));
 8002888:	4b2c      	ldr	r3, [pc, #176]	; (800293c <Shell_Loop+0x298>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	4618      	mov	r0, r3
 800288e:	f007 fdfd 	bl	800a48c <atoi>
 8002892:	4603      	mov	r3, r0
 8002894:	4a35      	ldr	r2, [pc, #212]	; (800296c <Shell_Loop+0x2c8>)
 8002896:	2140      	movs	r1, #64	; 0x40
 8002898:	482f      	ldr	r0, [pc, #188]	; (8002958 <Shell_Loop+0x2b4>)
 800289a:	f007 ff49 	bl	800a730 <sniprintf>
 800289e:	6138      	str	r0, [r7, #16]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	f04f 33ff 	mov.w	r3, #4294967295
 80028a8:	492b      	ldr	r1, [pc, #172]	; (8002958 <Shell_Loop+0x2b4>)
 80028aa:	481e      	ldr	r0, [pc, #120]	; (8002924 <Shell_Loop+0x280>)
 80028ac:	f005 fdc8 	bl	8008440 <HAL_UART_Transmit>
 80028b0:	e112      	b.n	8002ad8 <Shell_Loop+0x434>
			}
		}

		else if(strcmp(argv[0],"start")==0){//Fonction permettant d'allumer les PWM
 80028b2:	4b22      	ldr	r3, [pc, #136]	; (800293c <Shell_Loop+0x298>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	492e      	ldr	r1, [pc, #184]	; (8002970 <Shell_Loop+0x2cc>)
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fd fcb1 	bl	8000220 <strcmp>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d15d      	bne.n	8002980 <Shell_Loop+0x2dc>
			if(motorStart == 0){
 80028c4:	4b2b      	ldr	r3, [pc, #172]	; (8002974 <Shell_Loop+0x2d0>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d116      	bne.n	80028fa <Shell_Loop+0x256>
				pwm_start();
 80028cc:	f7ff fe0a 	bl	80024e4 <pwm_start>
				set_pwm_alpha(50);
 80028d0:	2032      	movs	r0, #50	; 0x32
 80028d2:	f7ff fe3d 	bl	8002550 <set_pwm_alpha>
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Motor start\r\nalpha = 50\r\n");
 80028d6:	4a28      	ldr	r2, [pc, #160]	; (8002978 <Shell_Loop+0x2d4>)
 80028d8:	2140      	movs	r1, #64	; 0x40
 80028da:	481f      	ldr	r0, [pc, #124]	; (8002958 <Shell_Loop+0x2b4>)
 80028dc:	f007 ff28 	bl	800a730 <sniprintf>
 80028e0:	6178      	str	r0, [r7, #20]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ea:	491b      	ldr	r1, [pc, #108]	; (8002958 <Shell_Loop+0x2b4>)
 80028ec:	480d      	ldr	r0, [pc, #52]	; (8002924 <Shell_Loop+0x280>)
 80028ee:	f005 fda7 	bl	8008440 <HAL_UART_Transmit>
				motorStart =1;
 80028f2:	4b20      	ldr	r3, [pc, #128]	; (8002974 <Shell_Loop+0x2d0>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	e0ee      	b.n	8002ad8 <Shell_Loop+0x434>
			}
			else{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Motor is already on\r\n");
 80028fa:	4a20      	ldr	r2, [pc, #128]	; (800297c <Shell_Loop+0x2d8>)
 80028fc:	2140      	movs	r1, #64	; 0x40
 80028fe:	4816      	ldr	r0, [pc, #88]	; (8002958 <Shell_Loop+0x2b4>)
 8002900:	f007 ff16 	bl	800a730 <sniprintf>
 8002904:	61b8      	str	r0, [r7, #24]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	b29a      	uxth	r2, r3
 800290a:	f04f 33ff 	mov.w	r3, #4294967295
 800290e:	4912      	ldr	r1, [pc, #72]	; (8002958 <Shell_Loop+0x2b4>)
 8002910:	4804      	ldr	r0, [pc, #16]	; (8002924 <Shell_Loop+0x280>)
 8002912:	f005 fd95 	bl	8008440 <HAL_UART_Transmit>
 8002916:	e0df      	b.n	8002ad8 <Shell_Loop+0x434>
 8002918:	20000544 	.word	0x20000544
 800291c:	20000548 	.word	0x20000548
 8002920:	20000094 	.word	0x20000094
 8002924:	200003d8 	.word	0x200003d8
 8002928:	200005cc 	.word	0x200005cc
 800292c:	2000058c 	.word	0x2000058c
 8002930:	200005f4 	.word	0x200005f4
 8002934:	0800b9b4 	.word	0x0800b9b4
 8002938:	200005f8 	.word	0x200005f8
 800293c:	200005d0 	.word	0x200005d0
 8002940:	200005fc 	.word	0x200005fc
 8002944:	20000098 	.word	0x20000098
 8002948:	0800b9b8 	.word	0x0800b9b8
 800294c:	200000b0 	.word	0x200000b0
 8002950:	0800b9c8 	.word	0x0800b9c8
 8002954:	0800b9d0 	.word	0x0800b9d0
 8002958:	2000054c 	.word	0x2000054c
 800295c:	0800b9f8 	.word	0x0800b9f8
 8002960:	0800ba00 	.word	0x0800ba00
 8002964:	0800ba38 	.word	0x0800ba38
 8002968:	0800ba50 	.word	0x0800ba50
 800296c:	0800ba68 	.word	0x0800ba68
 8002970:	0800ba9c 	.word	0x0800ba9c
 8002974:	20000600 	.word	0x20000600
 8002978:	0800baa4 	.word	0x0800baa4
 800297c:	0800bac0 	.word	0x0800bac0
			}
		}

		else if(strcmp(argv[0],"stop")==0){//Fonction permettant d'éteindre les PWM
 8002980:	4b5c      	ldr	r3, [pc, #368]	; (8002af4 <Shell_Loop+0x450>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	495c      	ldr	r1, [pc, #368]	; (8002af8 <Shell_Loop+0x454>)
 8002986:	4618      	mov	r0, r3
 8002988:	f7fd fc4a 	bl	8000220 <strcmp>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d126      	bne.n	80029e0 <Shell_Loop+0x33c>
			if(motorStart == 1){
 8002992:	4b5a      	ldr	r3, [pc, #360]	; (8002afc <Shell_Loop+0x458>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d113      	bne.n	80029c2 <Shell_Loop+0x31e>
				pwm_stop();
 800299a:	f7ff fdbf 	bl	800251c <pwm_stop>
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Motor stop\r\n");
 800299e:	4a58      	ldr	r2, [pc, #352]	; (8002b00 <Shell_Loop+0x45c>)
 80029a0:	2140      	movs	r1, #64	; 0x40
 80029a2:	4858      	ldr	r0, [pc, #352]	; (8002b04 <Shell_Loop+0x460>)
 80029a4:	f007 fec4 	bl	800a730 <sniprintf>
 80029a8:	61f8      	str	r0, [r7, #28]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	f04f 33ff 	mov.w	r3, #4294967295
 80029b2:	4954      	ldr	r1, [pc, #336]	; (8002b04 <Shell_Loop+0x460>)
 80029b4:	4854      	ldr	r0, [pc, #336]	; (8002b08 <Shell_Loop+0x464>)
 80029b6:	f005 fd43 	bl	8008440 <HAL_UART_Transmit>
				motorStart =0;
 80029ba:	4b50      	ldr	r3, [pc, #320]	; (8002afc <Shell_Loop+0x458>)
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	e08a      	b.n	8002ad8 <Shell_Loop+0x434>
			}
			else{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Motor is already off\r\n");
 80029c2:	4a52      	ldr	r2, [pc, #328]	; (8002b0c <Shell_Loop+0x468>)
 80029c4:	2140      	movs	r1, #64	; 0x40
 80029c6:	484f      	ldr	r0, [pc, #316]	; (8002b04 <Shell_Loop+0x460>)
 80029c8:	f007 feb2 	bl	800a730 <sniprintf>
 80029cc:	6238      	str	r0, [r7, #32]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295
 80029d6:	494b      	ldr	r1, [pc, #300]	; (8002b04 <Shell_Loop+0x460>)
 80029d8:	484b      	ldr	r0, [pc, #300]	; (8002b08 <Shell_Loop+0x464>)
 80029da:	f005 fd31 	bl	8008440 <HAL_UART_Transmit>
 80029de:	e07b      	b.n	8002ad8 <Shell_Loop+0x434>
			}
		}
		else if(strcmp(argv[0],"vitesse")==0){//Fonction permettant d'éteindre les PWM
 80029e0:	4b44      	ldr	r3, [pc, #272]	; (8002af4 <Shell_Loop+0x450>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	494a      	ldr	r1, [pc, #296]	; (8002b10 <Shell_Loop+0x46c>)
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fd fc1a 	bl	8000220 <strcmp>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d115      	bne.n	8002a1e <Shell_Loop+0x37a>

			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Vitesse : %u\r\n", (int) vitesse);
 80029f2:	4b48      	ldr	r3, [pc, #288]	; (8002b14 <Shell_Loop+0x470>)
 80029f4:	edd3 7a00 	vldr	s15, [r3]
 80029f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029fc:	ee17 3a90 	vmov	r3, s15
 8002a00:	4a45      	ldr	r2, [pc, #276]	; (8002b18 <Shell_Loop+0x474>)
 8002a02:	2140      	movs	r1, #64	; 0x40
 8002a04:	483f      	ldr	r0, [pc, #252]	; (8002b04 <Shell_Loop+0x460>)
 8002a06:	f007 fe93 	bl	800a730 <sniprintf>
 8002a0a:	6278      	str	r0, [r7, #36]	; 0x24
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	f04f 33ff 	mov.w	r3, #4294967295
 8002a14:	493b      	ldr	r1, [pc, #236]	; (8002b04 <Shell_Loop+0x460>)
 8002a16:	483c      	ldr	r0, [pc, #240]	; (8002b08 <Shell_Loop+0x464>)
 8002a18:	f005 fd12 	bl	8008440 <HAL_UART_Transmit>
 8002a1c:	e05c      	b.n	8002ad8 <Shell_Loop+0x434>

		}

		else if(strcmp(argv[0],"consigne")==0){//Fonction permettant de choisir le sens de rotation et la vitesse du moteur
 8002a1e:	4b35      	ldr	r3, [pc, #212]	; (8002af4 <Shell_Loop+0x450>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	493e      	ldr	r1, [pc, #248]	; (8002b1c <Shell_Loop+0x478>)
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fd fbfb 	bl	8000220 <strcmp>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d14c      	bne.n	8002aca <Shell_Loop+0x426>
			if(atoi(argv[1])>=-50 & atoi(argv[1])<=50){//La valeur de vitesse reçue étant une chaine de caractères ASCII, atoi permet de la convertir en entier
 8002a30:	4b30      	ldr	r3, [pc, #192]	; (8002af4 <Shell_Loop+0x450>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f007 fd29 	bl	800a48c <atoi>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8002a40:	bfac      	ite	ge
 8002a42:	2301      	movge	r3, #1
 8002a44:	2300      	movlt	r3, #0
 8002a46:	b2dc      	uxtb	r4, r3
 8002a48:	4b2a      	ldr	r3, [pc, #168]	; (8002af4 <Shell_Loop+0x450>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f007 fd1d 	bl	800a48c <atoi>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b32      	cmp	r3, #50	; 0x32
 8002a56:	bfd4      	ite	le
 8002a58:	2301      	movle	r3, #1
 8002a5a:	2300      	movgt	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	4023      	ands	r3, r4
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d01c      	beq.n	8002aa0 <Shell_Loop+0x3fc>

				consigne=(atoi(argv[1]));//Appelle à la fonction permettant de changer le rapport cyclique
 8002a66:	4b23      	ldr	r3, [pc, #140]	; (8002af4 <Shell_Loop+0x450>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f007 fd0e 	bl	800a48c <atoi>
 8002a70:	4603      	mov	r3, r0
 8002a72:	4a2b      	ldr	r2, [pc, #172]	; (8002b20 <Shell_Loop+0x47c>)
 8002a74:	6013      	str	r3, [r2, #0]
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Nouvelle consigne = %d\r\n",atoi(argv[1]));
 8002a76:	4b1f      	ldr	r3, [pc, #124]	; (8002af4 <Shell_Loop+0x450>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f007 fd06 	bl	800a48c <atoi>
 8002a80:	4603      	mov	r3, r0
 8002a82:	4a28      	ldr	r2, [pc, #160]	; (8002b24 <Shell_Loop+0x480>)
 8002a84:	2140      	movs	r1, #64	; 0x40
 8002a86:	481f      	ldr	r0, [pc, #124]	; (8002b04 <Shell_Loop+0x460>)
 8002a88:	f007 fe52 	bl	800a730 <sniprintf>
 8002a8c:	62b8      	str	r0, [r7, #40]	; 0x28
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	f04f 33ff 	mov.w	r3, #4294967295
 8002a96:	491b      	ldr	r1, [pc, #108]	; (8002b04 <Shell_Loop+0x460>)
 8002a98:	481b      	ldr	r0, [pc, #108]	; (8002b08 <Shell_Loop+0x464>)
 8002a9a:	f005 fcd1 	bl	8008440 <HAL_UART_Transmit>
 8002a9e:	e01b      	b.n	8002ad8 <Shell_Loop+0x434>
			}
			else{//Sécuritée permettant de ne pas avoir un rapport cyclique supérieur à 100
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Erreur consigne doit être comprise entre -50 et 50 tour/s\r\n",atoi(argv[1]));
 8002aa0:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <Shell_Loop+0x450>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f007 fcf1 	bl	800a48c <atoi>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4a1e      	ldr	r2, [pc, #120]	; (8002b28 <Shell_Loop+0x484>)
 8002aae:	2140      	movs	r1, #64	; 0x40
 8002ab0:	4814      	ldr	r0, [pc, #80]	; (8002b04 <Shell_Loop+0x460>)
 8002ab2:	f007 fe3d 	bl	800a730 <sniprintf>
 8002ab6:	62f8      	str	r0, [r7, #44]	; 0x2c
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac0:	4910      	ldr	r1, [pc, #64]	; (8002b04 <Shell_Loop+0x460>)
 8002ac2:	4811      	ldr	r0, [pc, #68]	; (8002b08 <Shell_Loop+0x464>)
 8002ac4:	f005 fcbc 	bl	8008440 <HAL_UART_Transmit>
 8002ac8:	e006      	b.n	8002ad8 <Shell_Loop+0x434>

		}


		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8002aca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ace:	2214      	movs	r2, #20
 8002ad0:	4916      	ldr	r1, [pc, #88]	; (8002b2c <Shell_Loop+0x488>)
 8002ad2:	480d      	ldr	r0, [pc, #52]	; (8002b08 <Shell_Loop+0x464>)
 8002ad4:	f005 fcb4 	bl	8008440 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8002ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8002adc:	221c      	movs	r2, #28
 8002ade:	4914      	ldr	r1, [pc, #80]	; (8002b30 <Shell_Loop+0x48c>)
 8002ae0:	4809      	ldr	r0, [pc, #36]	; (8002b08 <Shell_Loop+0x464>)
 8002ae2:	f005 fcad 	bl	8008440 <HAL_UART_Transmit>
		newCmdReady = 0;
 8002ae6:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <Shell_Loop+0x490>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
	}
}
 8002aec:	bf00      	nop
 8002aee:	3734      	adds	r7, #52	; 0x34
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd90      	pop	{r4, r7, pc}
 8002af4:	200005d0 	.word	0x200005d0
 8002af8:	0800bad8 	.word	0x0800bad8
 8002afc:	20000600 	.word	0x20000600
 8002b00:	0800bae0 	.word	0x0800bae0
 8002b04:	2000054c 	.word	0x2000054c
 8002b08:	200003d8 	.word	0x200003d8
 8002b0c:	0800baf0 	.word	0x0800baf0
 8002b10:	0800bb08 	.word	0x0800bb08
 8002b14:	20000534 	.word	0x20000534
 8002b18:	0800bb10 	.word	0x0800bb10
 8002b1c:	0800bb20 	.word	0x0800bb20
 8002b20:	20000604 	.word	0x20000604
 8002b24:	0800bb2c 	.word	0x0800bb2c
 8002b28:	0800bb48 	.word	0x0800bb48
 8002b2c:	2000009c 	.word	0x2000009c
 8002b30:	20000010 	.word	0x20000010
 8002b34:	200005fc 	.word	0x200005fc

08002b38 <HAL_UART_RxCpltCallback>:

/**
 * @brief Fonction Callback appelée lors de la réception d'un nouveau caractère
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <HAL_UART_RxCpltCallback+0x20>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002b46:	2201      	movs	r2, #1
 8002b48:	4904      	ldr	r1, [pc, #16]	; (8002b5c <HAL_UART_RxCpltCallback+0x24>)
 8002b4a:	4805      	ldr	r0, [pc, #20]	; (8002b60 <HAL_UART_RxCpltCallback+0x28>)
 8002b4c:	f005 fd0e 	bl	800856c <HAL_UART_Receive_IT>
}
 8002b50:	bf00      	nop
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20000544 	.word	0x20000544
 8002b5c:	20000548 	.word	0x20000548
 8002b60:	200003d8 	.word	0x200003d8

08002b64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b64:	480d      	ldr	r0, [pc, #52]	; (8002b9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b66:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b68:	480d      	ldr	r0, [pc, #52]	; (8002ba0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b6a:	490e      	ldr	r1, [pc, #56]	; (8002ba4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b6c:	4a0e      	ldr	r2, [pc, #56]	; (8002ba8 <LoopForever+0xe>)
  movs r3, #0
 8002b6e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002b70:	e002      	b.n	8002b78 <LoopCopyDataInit>

08002b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b76:	3304      	adds	r3, #4

08002b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b7c:	d3f9      	bcc.n	8002b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b7e:	4a0b      	ldr	r2, [pc, #44]	; (8002bac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b80:	4c0b      	ldr	r4, [pc, #44]	; (8002bb0 <LoopForever+0x16>)
  movs r3, #0
 8002b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b84:	e001      	b.n	8002b8a <LoopFillZerobss>

08002b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b88:	3204      	adds	r2, #4

08002b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b8c:	d3fb      	bcc.n	8002b86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b8e:	f7fe ff55 	bl	8001a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b92:	f007 fef5 	bl	800a980 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b96:	f7fe fc1b 	bl	80013d0 <main>

08002b9a <LoopForever>:

LoopForever:
    b LoopForever
 8002b9a:	e7fe      	b.n	8002b9a <LoopForever>
  ldr   r0, =_estack
 8002b9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ba4:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8002ba8:	0800bdbc 	.word	0x0800bdbc
  ldr r2, =_sbss
 8002bac:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8002bb0:	20000758 	.word	0x20000758

08002bb4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bb4:	e7fe      	b.n	8002bb4 <ADC3_IRQHandler>

08002bb6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bc0:	2003      	movs	r0, #3
 8002bc2:	f001 feec 	bl	800499e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bc6:	200f      	movs	r0, #15
 8002bc8:	f7fe fd84 	bl	80016d4 <HAL_InitTick>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d002      	beq.n	8002bd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	71fb      	strb	r3, [r7, #7]
 8002bd6:	e001      	b.n	8002bdc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002bd8:	f7fe fd58 	bl	800168c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002bdc:	79fb      	ldrb	r3, [r7, #7]

}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bec:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <HAL_IncTick+0x1c>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_IncTick+0x20>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	4a03      	ldr	r2, [pc, #12]	; (8002c04 <HAL_IncTick+0x1c>)
 8002bf8:	6013      	str	r3, [r2, #0]
}
 8002bfa:	bf00      	nop
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	20000608 	.word	0x20000608
 8002c08:	200000d0 	.word	0x200000d0

08002c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c10:	4b03      	ldr	r3, [pc, #12]	; (8002c20 <HAL_GetTick+0x14>)
 8002c12:	681b      	ldr	r3, [r3, #0]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	20000608 	.word	0x20000608

08002c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c2c:	f7ff ffee 	bl	8002c0c <HAL_GetTick>
 8002c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3c:	d004      	beq.n	8002c48 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c3e:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <HAL_Delay+0x40>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4413      	add	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c48:	bf00      	nop
 8002c4a:	f7ff ffdf 	bl	8002c0c <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d8f7      	bhi.n	8002c4a <HAL_Delay+0x26>
  {
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	bf00      	nop
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	200000d0 	.word	0x200000d0

08002c68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	609a      	str	r2, [r3, #8]
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	3360      	adds	r3, #96	; 0x60
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <LL_ADC_SetOffset+0x44>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002d08:	bf00      	nop
 8002d0a:	371c      	adds	r7, #28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	03fff000 	.word	0x03fff000

08002d18 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3360      	adds	r3, #96	; 0x60
 8002d26:	461a      	mov	r2, r3
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	3360      	adds	r3, #96	; 0x60
 8002d54:	461a      	mov	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002d6e:	bf00      	nop
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b087      	sub	sp, #28
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	3360      	adds	r3, #96	; 0x60
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002da4:	bf00      	nop
 8002da6:	371c      	adds	r7, #28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	3360      	adds	r3, #96	; 0x60
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002dda:	bf00      	nop
 8002ddc:	371c      	adds	r7, #28
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	615a      	str	r2, [r3, #20]
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b087      	sub	sp, #28
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3330      	adds	r3, #48	; 0x30
 8002e42:	461a      	mov	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	0a1b      	lsrs	r3, r3, #8
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	4413      	add	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f003 031f 	and.w	r3, r3, #31
 8002e5c:	211f      	movs	r1, #31
 8002e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	401a      	ands	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	0e9b      	lsrs	r3, r3, #26
 8002e6a:	f003 011f 	and.w	r1, r3, #31
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f003 031f 	and.w	r3, r3, #31
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e7e:	bf00      	nop
 8002e80:	371c      	adds	r7, #28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e96:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	3314      	adds	r3, #20
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	0e5b      	lsrs	r3, r3, #25
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	4413      	add	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	0d1b      	lsrs	r3, r3, #20
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	2107      	movs	r1, #7
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	401a      	ands	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	0d1b      	lsrs	r3, r3, #20
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002efa:	bf00      	nop
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a0f      	ldr	r2, [pc, #60]	; (8002f54 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d10a      	bne.n	8002f32 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002f30:	e00a      	b.n	8002f48 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	401a      	ands	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002f48:	bf00      	nop
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	407f0000 	.word	0x407f0000

08002f58 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 031f 	and.w	r3, r3, #31
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002fa0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6093      	str	r3, [r2, #8]
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fc8:	d101      	bne.n	8002fce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002fec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ff0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003014:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003018:	d101      	bne.n	800301e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800303c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003040:	f043 0201 	orr.w	r2, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <LL_ADC_IsEnabled+0x18>
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <LL_ADC_IsEnabled+0x1a>
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800308a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800308e:	f043 0204 	orr.w	r2, r3, #4
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d101      	bne.n	80030ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d101      	bne.n	80030e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
	...

080030f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030f0:	b590      	push	{r4, r7, lr}
 80030f2:	b089      	sub	sp, #36	; 0x24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e1af      	b.n	800346a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003114:	2b00      	cmp	r3, #0
 8003116:	d109      	bne.n	800312c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7fd ff65 	bl	8000fe8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff ff3f 	bl	8002fb4 <LL_ADC_IsDeepPowerDownEnabled>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d004      	beq.n	8003146 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff ff25 	bl	8002f90 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff ff5a 	bl	8003004 <LL_ADC_IsInternalRegulatorEnabled>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d115      	bne.n	8003182 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff ff3e 	bl	8002fdc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003160:	4b9f      	ldr	r3, [pc, #636]	; (80033e0 <HAL_ADC_Init+0x2f0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	099b      	lsrs	r3, r3, #6
 8003166:	4a9f      	ldr	r2, [pc, #636]	; (80033e4 <HAL_ADC_Init+0x2f4>)
 8003168:	fba2 2303 	umull	r2, r3, r2, r3
 800316c:	099b      	lsrs	r3, r3, #6
 800316e:	3301      	adds	r3, #1
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003174:	e002      	b.n	800317c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	3b01      	subs	r3, #1
 800317a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f9      	bne.n	8003176 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff ff3c 	bl	8003004 <LL_ADC_IsInternalRegulatorEnabled>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10d      	bne.n	80031ae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003196:	f043 0210 	orr.w	r2, r3, #16
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a2:	f043 0201 	orr.w	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff ff75 	bl	80030a2 <LL_ADC_REG_IsConversionOngoing>
 80031b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031be:	f003 0310 	and.w	r3, r3, #16
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f040 8148 	bne.w	8003458 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f040 8144 	bne.w	8003458 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80031d8:	f043 0202 	orr.w	r2, r3, #2
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ff35 	bl	8003054 <LL_ADC_IsEnabled>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d141      	bne.n	8003274 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031f8:	d004      	beq.n	8003204 <HAL_ADC_Init+0x114>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a7a      	ldr	r2, [pc, #488]	; (80033e8 <HAL_ADC_Init+0x2f8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d10f      	bne.n	8003224 <HAL_ADC_Init+0x134>
 8003204:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003208:	f7ff ff24 	bl	8003054 <LL_ADC_IsEnabled>
 800320c:	4604      	mov	r4, r0
 800320e:	4876      	ldr	r0, [pc, #472]	; (80033e8 <HAL_ADC_Init+0x2f8>)
 8003210:	f7ff ff20 	bl	8003054 <LL_ADC_IsEnabled>
 8003214:	4603      	mov	r3, r0
 8003216:	4323      	orrs	r3, r4
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	e012      	b.n	800324a <HAL_ADC_Init+0x15a>
 8003224:	4871      	ldr	r0, [pc, #452]	; (80033ec <HAL_ADC_Init+0x2fc>)
 8003226:	f7ff ff15 	bl	8003054 <LL_ADC_IsEnabled>
 800322a:	4604      	mov	r4, r0
 800322c:	4870      	ldr	r0, [pc, #448]	; (80033f0 <HAL_ADC_Init+0x300>)
 800322e:	f7ff ff11 	bl	8003054 <LL_ADC_IsEnabled>
 8003232:	4603      	mov	r3, r0
 8003234:	431c      	orrs	r4, r3
 8003236:	486f      	ldr	r0, [pc, #444]	; (80033f4 <HAL_ADC_Init+0x304>)
 8003238:	f7ff ff0c 	bl	8003054 <LL_ADC_IsEnabled>
 800323c:	4603      	mov	r3, r0
 800323e:	4323      	orrs	r3, r4
 8003240:	2b00      	cmp	r3, #0
 8003242:	bf0c      	ite	eq
 8003244:	2301      	moveq	r3, #1
 8003246:	2300      	movne	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d012      	beq.n	8003274 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003256:	d004      	beq.n	8003262 <HAL_ADC_Init+0x172>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a62      	ldr	r2, [pc, #392]	; (80033e8 <HAL_ADC_Init+0x2f8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d101      	bne.n	8003266 <HAL_ADC_Init+0x176>
 8003262:	4a65      	ldr	r2, [pc, #404]	; (80033f8 <HAL_ADC_Init+0x308>)
 8003264:	e000      	b.n	8003268 <HAL_ADC_Init+0x178>
 8003266:	4a65      	ldr	r2, [pc, #404]	; (80033fc <HAL_ADC_Init+0x30c>)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4619      	mov	r1, r3
 800326e:	4610      	mov	r0, r2
 8003270:	f7ff fcfa 	bl	8002c68 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	7f5b      	ldrb	r3, [r3, #29]
 8003278:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800327e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003284:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800328a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003292:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003294:	4313      	orrs	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d106      	bne.n	80032b0 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a6:	3b01      	subs	r3, #1
 80032a8:	045b      	lsls	r3, r3, #17
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d009      	beq.n	80032cc <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	4b4b      	ldr	r3, [pc, #300]	; (8003400 <HAL_ADC_Init+0x310>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6812      	ldr	r2, [r2, #0]
 80032da:	69b9      	ldr	r1, [r7, #24]
 80032dc:	430b      	orrs	r3, r1
 80032de:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fed1 	bl	80030a2 <LL_ADC_REG_IsConversionOngoing>
 8003300:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff fede 	bl	80030c8 <LL_ADC_INJ_IsConversionOngoing>
 800330c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d17f      	bne.n	8003414 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d17c      	bne.n	8003414 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800331e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003326:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003336:	f023 0302 	bic.w	r3, r3, #2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6812      	ldr	r2, [r2, #0]
 800333e:	69b9      	ldr	r1, [r7, #24]
 8003340:	430b      	orrs	r3, r1
 8003342:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d017      	beq.n	800337c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800335a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003364:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003368:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6911      	ldr	r1, [r2, #16]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	430b      	orrs	r3, r1
 8003376:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800337a:	e013      	b.n	80033a4 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800338a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800339c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033a0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d12a      	bne.n	8003404 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80033b8:	f023 0304 	bic.w	r3, r3, #4
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033c4:	4311      	orrs	r1, r2
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80033ca:	4311      	orrs	r1, r2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80033d0:	430a      	orrs	r2, r1
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f042 0201 	orr.w	r2, r2, #1
 80033dc:	611a      	str	r2, [r3, #16]
 80033de:	e019      	b.n	8003414 <HAL_ADC_Init+0x324>
 80033e0:	20000000 	.word	0x20000000
 80033e4:	053e2d63 	.word	0x053e2d63
 80033e8:	50000100 	.word	0x50000100
 80033ec:	50000400 	.word	0x50000400
 80033f0:	50000500 	.word	0x50000500
 80033f4:	50000600 	.word	0x50000600
 80033f8:	50000300 	.word	0x50000300
 80033fc:	50000700 	.word	0x50000700
 8003400:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	691a      	ldr	r2, [r3, #16]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0201 	bic.w	r2, r2, #1
 8003412:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d10c      	bne.n	8003436 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f023 010f 	bic.w	r1, r3, #15
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	1e5a      	subs	r2, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
 8003434:	e007      	b.n	8003446 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 020f 	bic.w	r2, r2, #15
 8003444:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344a:	f023 0303 	bic.w	r3, r3, #3
 800344e:	f043 0201 	orr.w	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	65da      	str	r2, [r3, #92]	; 0x5c
 8003456:	e007      	b.n	8003468 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345c:	f043 0210 	orr.w	r2, r3, #16
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003468:	7ffb      	ldrb	r3, [r7, #31]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3724      	adds	r7, #36	; 0x24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd90      	pop	{r4, r7, pc}
 8003472:	bf00      	nop

08003474 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003488:	d004      	beq.n	8003494 <HAL_ADC_Start_DMA+0x20>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a5a      	ldr	r2, [pc, #360]	; (80035f8 <HAL_ADC_Start_DMA+0x184>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d101      	bne.n	8003498 <HAL_ADC_Start_DMA+0x24>
 8003494:	4b59      	ldr	r3, [pc, #356]	; (80035fc <HAL_ADC_Start_DMA+0x188>)
 8003496:	e000      	b.n	800349a <HAL_ADC_Start_DMA+0x26>
 8003498:	4b59      	ldr	r3, [pc, #356]	; (8003600 <HAL_ADC_Start_DMA+0x18c>)
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fd5c 	bl	8002f58 <LL_ADC_GetMultimode>
 80034a0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fdfb 	bl	80030a2 <LL_ADC_REG_IsConversionOngoing>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f040 809b 	bne.w	80035ea <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_ADC_Start_DMA+0x4e>
 80034be:	2302      	movs	r3, #2
 80034c0:	e096      	b.n	80035f0 <HAL_ADC_Start_DMA+0x17c>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a4d      	ldr	r2, [pc, #308]	; (8003604 <HAL_ADC_Start_DMA+0x190>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d008      	beq.n	80034e6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d005      	beq.n	80034e6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b05      	cmp	r3, #5
 80034de:	d002      	beq.n	80034e6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	2b09      	cmp	r3, #9
 80034e4:	d17a      	bne.n	80035dc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 ff56 	bl	8004398 <ADC_Enable>
 80034ec:	4603      	mov	r3, r0
 80034ee:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d16d      	bne.n	80035d2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034fe:	f023 0301 	bic.w	r3, r3, #1
 8003502:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a3a      	ldr	r2, [pc, #232]	; (80035f8 <HAL_ADC_Start_DMA+0x184>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d009      	beq.n	8003528 <HAL_ADC_Start_DMA+0xb4>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a3b      	ldr	r2, [pc, #236]	; (8003608 <HAL_ADC_Start_DMA+0x194>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d002      	beq.n	8003524 <HAL_ADC_Start_DMA+0xb0>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	e003      	b.n	800352c <HAL_ADC_Start_DMA+0xb8>
 8003524:	4b39      	ldr	r3, [pc, #228]	; (800360c <HAL_ADC_Start_DMA+0x198>)
 8003526:	e001      	b.n	800352c <HAL_ADC_Start_DMA+0xb8>
 8003528:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	4293      	cmp	r3, r2
 8003532:	d002      	beq.n	800353a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d105      	bne.n	8003546 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d006      	beq.n	8003560 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003556:	f023 0206 	bic.w	r2, r3, #6
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	661a      	str	r2, [r3, #96]	; 0x60
 800355e:	e002      	b.n	8003566 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356a:	4a29      	ldr	r2, [pc, #164]	; (8003610 <HAL_ADC_Start_DMA+0x19c>)
 800356c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003572:	4a28      	ldr	r2, [pc, #160]	; (8003614 <HAL_ADC_Start_DMA+0x1a0>)
 8003574:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357a:	4a27      	ldr	r2, [pc, #156]	; (8003618 <HAL_ADC_Start_DMA+0x1a4>)
 800357c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	221c      	movs	r2, #28
 8003584:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0210 	orr.w	r2, r2, #16
 800359c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f042 0201 	orr.w	r2, r2, #1
 80035ac:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3340      	adds	r3, #64	; 0x40
 80035b8:	4619      	mov	r1, r3
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f001 fac9 	bl	8004b54 <HAL_DMA_Start_IT>
 80035c2:	4603      	mov	r3, r0
 80035c4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff fd55 	bl	800307a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80035d0:	e00d      	b.n	80035ee <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80035da:	e008      	b.n	80035ee <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80035e8:	e001      	b.n	80035ee <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80035ea:	2302      	movs	r3, #2
 80035ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80035ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	50000100 	.word	0x50000100
 80035fc:	50000300 	.word	0x50000300
 8003600:	50000700 	.word	0x50000700
 8003604:	50000600 	.word	0x50000600
 8003608:	50000500 	.word	0x50000500
 800360c:	50000400 	.word	0x50000400
 8003610:	0800445d 	.word	0x0800445d
 8003614:	08004535 	.word	0x08004535
 8003618:	08004551 	.word	0x08004551

0800361c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003624:	2300      	movs	r3, #0
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003640:	d004      	beq.n	800364c <HAL_ADC_IRQHandler+0x30>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a8e      	ldr	r2, [pc, #568]	; (8003880 <HAL_ADC_IRQHandler+0x264>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d101      	bne.n	8003650 <HAL_ADC_IRQHandler+0x34>
 800364c:	4b8d      	ldr	r3, [pc, #564]	; (8003884 <HAL_ADC_IRQHandler+0x268>)
 800364e:	e000      	b.n	8003652 <HAL_ADC_IRQHandler+0x36>
 8003650:	4b8d      	ldr	r3, [pc, #564]	; (8003888 <HAL_ADC_IRQHandler+0x26c>)
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff fc80 	bl	8002f58 <LL_ADC_GetMultimode>
 8003658:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d017      	beq.n	8003694 <HAL_ADC_IRQHandler+0x78>
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d012      	beq.n	8003694 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b00      	cmp	r3, #0
 8003678:	d105      	bne.n	8003686 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 ffca 	bl	8004620 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2202      	movs	r2, #2
 8003692:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d004      	beq.n	80036a8 <HAL_ADC_IRQHandler+0x8c>
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10b      	bne.n	80036c0 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 8094 	beq.w	80037dc <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 808e 	beq.w	80037dc <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d105      	bne.n	80036d8 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff fb95 	bl	8002e0c <LL_ADC_REG_IsTriggerSourceSWStart>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d072      	beq.n	80037ce <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a64      	ldr	r2, [pc, #400]	; (8003880 <HAL_ADC_IRQHandler+0x264>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d009      	beq.n	8003706 <HAL_ADC_IRQHandler+0xea>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a65      	ldr	r2, [pc, #404]	; (800388c <HAL_ADC_IRQHandler+0x270>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d002      	beq.n	8003702 <HAL_ADC_IRQHandler+0xe6>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	e003      	b.n	800370a <HAL_ADC_IRQHandler+0xee>
 8003702:	4b63      	ldr	r3, [pc, #396]	; (8003890 <HAL_ADC_IRQHandler+0x274>)
 8003704:	e001      	b.n	800370a <HAL_ADC_IRQHandler+0xee>
 8003706:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6812      	ldr	r2, [r2, #0]
 800370e:	4293      	cmp	r3, r2
 8003710:	d008      	beq.n	8003724 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2b05      	cmp	r3, #5
 800371c:	d002      	beq.n	8003724 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b09      	cmp	r3, #9
 8003722:	d104      	bne.n	800372e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	623b      	str	r3, [r7, #32]
 800372c:	e014      	b.n	8003758 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a53      	ldr	r2, [pc, #332]	; (8003880 <HAL_ADC_IRQHandler+0x264>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d009      	beq.n	800374c <HAL_ADC_IRQHandler+0x130>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a53      	ldr	r2, [pc, #332]	; (800388c <HAL_ADC_IRQHandler+0x270>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d002      	beq.n	8003748 <HAL_ADC_IRQHandler+0x12c>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	e003      	b.n	8003750 <HAL_ADC_IRQHandler+0x134>
 8003748:	4b51      	ldr	r3, [pc, #324]	; (8003890 <HAL_ADC_IRQHandler+0x274>)
 800374a:	e001      	b.n	8003750 <HAL_ADC_IRQHandler+0x134>
 800374c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003750:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d135      	bne.n	80037ce <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b08      	cmp	r3, #8
 800376e:	d12e      	bne.n	80037ce <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff fc94 	bl	80030a2 <LL_ADC_REG_IsConversionOngoing>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d11a      	bne.n	80037b6 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 020c 	bic.w	r2, r2, #12
 800378e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003794:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d112      	bne.n	80037ce <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ac:	f043 0201 	orr.w	r2, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80037b4:	e00b      	b.n	80037ce <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ba:	f043 0210 	orr.w	r2, r3, #16
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c6:	f043 0201 	orr.w	r2, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7fd feda 	bl	8001588 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	220c      	movs	r2, #12
 80037da:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d004      	beq.n	80037f0 <HAL_ADC_IRQHandler+0x1d4>
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10b      	bne.n	8003808 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 80b3 	beq.w	8003962 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 80ad 	beq.w	8003962 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380c:	f003 0310 	and.w	r3, r3, #16
 8003810:	2b00      	cmp	r3, #0
 8003812:	d105      	bne.n	8003820 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003818:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff fb30 	bl	8002e8a <LL_ADC_INJ_IsTriggerSourceSWStart>
 800382a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff faeb 	bl	8002e0c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003836:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a10      	ldr	r2, [pc, #64]	; (8003880 <HAL_ADC_IRQHandler+0x264>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d009      	beq.n	8003856 <HAL_ADC_IRQHandler+0x23a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a11      	ldr	r2, [pc, #68]	; (800388c <HAL_ADC_IRQHandler+0x270>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d002      	beq.n	8003852 <HAL_ADC_IRQHandler+0x236>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	e003      	b.n	800385a <HAL_ADC_IRQHandler+0x23e>
 8003852:	4b0f      	ldr	r3, [pc, #60]	; (8003890 <HAL_ADC_IRQHandler+0x274>)
 8003854:	e001      	b.n	800385a <HAL_ADC_IRQHandler+0x23e>
 8003856:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6812      	ldr	r2, [r2, #0]
 800385e:	4293      	cmp	r3, r2
 8003860:	d008      	beq.n	8003874 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2b06      	cmp	r3, #6
 800386c:	d002      	beq.n	8003874 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2b07      	cmp	r3, #7
 8003872:	d10f      	bne.n	8003894 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	623b      	str	r3, [r7, #32]
 800387c:	e01f      	b.n	80038be <HAL_ADC_IRQHandler+0x2a2>
 800387e:	bf00      	nop
 8003880:	50000100 	.word	0x50000100
 8003884:	50000300 	.word	0x50000300
 8003888:	50000700 	.word	0x50000700
 800388c:	50000500 	.word	0x50000500
 8003890:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a8b      	ldr	r2, [pc, #556]	; (8003ac8 <HAL_ADC_IRQHandler+0x4ac>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d009      	beq.n	80038b2 <HAL_ADC_IRQHandler+0x296>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a8a      	ldr	r2, [pc, #552]	; (8003acc <HAL_ADC_IRQHandler+0x4b0>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d002      	beq.n	80038ae <HAL_ADC_IRQHandler+0x292>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	e003      	b.n	80038b6 <HAL_ADC_IRQHandler+0x29a>
 80038ae:	4b88      	ldr	r3, [pc, #544]	; (8003ad0 <HAL_ADC_IRQHandler+0x4b4>)
 80038b0:	e001      	b.n	80038b6 <HAL_ADC_IRQHandler+0x29a>
 80038b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80038b6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d047      	beq.n	8003954 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d007      	beq.n	80038de <HAL_ADC_IRQHandler+0x2c2>
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d03f      	beq.n	8003954 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d13a      	bne.n	8003954 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e8:	2b40      	cmp	r3, #64	; 0x40
 80038ea:	d133      	bne.n	8003954 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d12e      	bne.n	8003954 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff fbe4 	bl	80030c8 <LL_ADC_INJ_IsConversionOngoing>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d11a      	bne.n	800393c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003914:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392a:	2b00      	cmp	r3, #0
 800392c:	d112      	bne.n	8003954 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003932:	f043 0201 	orr.w	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	65da      	str	r2, [r3, #92]	; 0x5c
 800393a:	e00b      	b.n	8003954 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003940:	f043 0210 	orr.w	r2, r3, #16
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800394c:	f043 0201 	orr.w	r2, r3, #1
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 fe3b 	bl	80045d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2260      	movs	r2, #96	; 0x60
 8003960:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003968:	2b00      	cmp	r3, #0
 800396a:	d011      	beq.n	8003990 <HAL_ADC_IRQHandler+0x374>
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00c      	beq.n	8003990 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f8b4 	bl	8003af0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2280      	movs	r2, #128	; 0x80
 800398e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003996:	2b00      	cmp	r3, #0
 8003998:	d012      	beq.n	80039c0 <HAL_ADC_IRQHandler+0x3a4>
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00d      	beq.n	80039c0 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 fe21 	bl	80045f8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d012      	beq.n	80039f0 <HAL_ADC_IRQHandler+0x3d4>
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00d      	beq.n	80039f0 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 fe13 	bl	800460c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d043      	beq.n	8003a82 <HAL_ADC_IRQHandler+0x466>
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	f003 0310 	and.w	r3, r3, #16
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d03e      	beq.n	8003a82 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d102      	bne.n	8003a12 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a10:	e021      	b.n	8003a56 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d015      	beq.n	8003a44 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a20:	d004      	beq.n	8003a2c <HAL_ADC_IRQHandler+0x410>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a28      	ldr	r2, [pc, #160]	; (8003ac8 <HAL_ADC_IRQHandler+0x4ac>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d101      	bne.n	8003a30 <HAL_ADC_IRQHandler+0x414>
 8003a2c:	4b29      	ldr	r3, [pc, #164]	; (8003ad4 <HAL_ADC_IRQHandler+0x4b8>)
 8003a2e:	e000      	b.n	8003a32 <HAL_ADC_IRQHandler+0x416>
 8003a30:	4b29      	ldr	r3, [pc, #164]	; (8003ad8 <HAL_ADC_IRQHandler+0x4bc>)
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff fa9e 	bl	8002f74 <LL_ADC_GetMultiDMATransfer>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00b      	beq.n	8003a56 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
 8003a42:	e008      	b.n	8003a56 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003a52:	2301      	movs	r3, #1
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d10e      	bne.n	8003a7a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6c:	f043 0202 	orr.w	r2, r3, #2
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f845 	bl	8003b04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2210      	movs	r2, #16
 8003a80:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d018      	beq.n	8003abe <HAL_ADC_IRQHandler+0x4a2>
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d013      	beq.n	8003abe <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa6:	f043 0208 	orr.w	r2, r3, #8
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ab6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fd93 	bl	80045e4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003abe:	bf00      	nop
 8003ac0:	3728      	adds	r7, #40	; 0x28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	50000100 	.word	0x50000100
 8003acc:	50000500 	.word	0x50000500
 8003ad0:	50000400 	.word	0x50000400
 8003ad4:	50000300 	.word	0x50000300
 8003ad8:	50000700 	.word	0x50000700

08003adc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b0b6      	sub	sp, #216	; 0xd8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d102      	bne.n	8003b3c <HAL_ADC_ConfigChannel+0x24>
 8003b36:	2302      	movs	r3, #2
 8003b38:	f000 bc13 	b.w	8004362 <HAL_ADC_ConfigChannel+0x84a>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff faaa 	bl	80030a2 <LL_ADC_REG_IsConversionOngoing>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f040 83f3 	bne.w	800433c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6818      	ldr	r0, [r3, #0]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	6859      	ldr	r1, [r3, #4]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	f7ff f965 	bl	8002e32 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff fa98 	bl	80030a2 <LL_ADC_REG_IsConversionOngoing>
 8003b72:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff faa4 	bl	80030c8 <LL_ADC_INJ_IsConversionOngoing>
 8003b80:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b84:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f040 81d9 	bne.w	8003f40 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f040 81d4 	bne.w	8003f40 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ba0:	d10f      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2200      	movs	r2, #0
 8003bac:	4619      	mov	r1, r3
 8003bae:	f7ff f97f 	bl	8002eb0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff f913 	bl	8002de6 <LL_ADC_SetSamplingTimeCommonConfig>
 8003bc0:	e00e      	b.n	8003be0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	6819      	ldr	r1, [r3, #0]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f7ff f96e 	bl	8002eb0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2100      	movs	r1, #0
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff f903 	bl	8002de6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	695a      	ldr	r2, [r3, #20]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	08db      	lsrs	r3, r3, #3
 8003bec:	f003 0303 	and.w	r3, r3, #3
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d022      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	6919      	ldr	r1, [r3, #16]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c12:	f7ff f85d 	bl	8002cd0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	6919      	ldr	r1, [r3, #16]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	461a      	mov	r2, r3
 8003c24:	f7ff f8a9 	bl	8002d7a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6818      	ldr	r0, [r3, #0]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	6919      	ldr	r1, [r3, #16]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	7f1b      	ldrb	r3, [r3, #28]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d102      	bne.n	8003c3e <HAL_ADC_ConfigChannel+0x126>
 8003c38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c3c:	e000      	b.n	8003c40 <HAL_ADC_ConfigChannel+0x128>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	461a      	mov	r2, r3
 8003c42:	f7ff f8b5 	bl	8002db0 <LL_ADC_SetOffsetSaturation>
 8003c46:	e17b      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff f862 	bl	8002d18 <LL_ADC_GetOffsetChannel>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10a      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x15c>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2100      	movs	r1, #0
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff f857 	bl	8002d18 <LL_ADC_GetOffsetChannel>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	0e9b      	lsrs	r3, r3, #26
 8003c6e:	f003 021f 	and.w	r2, r3, #31
 8003c72:	e01e      	b.n	8003cb2 <HAL_ADC_ConfigChannel+0x19a>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7ff f84c 	bl	8002d18 <LL_ADC_GetOffsetChannel>
 8003c80:	4603      	mov	r3, r0
 8003c82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c8a:	fa93 f3a3 	rbit	r3, r3
 8003c8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003ca2:	2320      	movs	r3, #32
 8003ca4:	e004      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003ca6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003caa:	fab3 f383 	clz	r3, r3
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d105      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x1b2>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	0e9b      	lsrs	r3, r3, #26
 8003cc4:	f003 031f 	and.w	r3, r3, #31
 8003cc8:	e018      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x1e4>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003cd6:	fa93 f3a3 	rbit	r3, r3
 8003cda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003cde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ce2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003ce6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003cee:	2320      	movs	r3, #32
 8003cf0:	e004      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003cf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003cf6:	fab3 f383 	clz	r3, r3
 8003cfa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d106      	bne.n	8003d0e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2200      	movs	r2, #0
 8003d06:	2100      	movs	r1, #0
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff f81b 	bl	8002d44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2101      	movs	r1, #1
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fe ffff 	bl	8002d18 <LL_ADC_GetOffsetChannel>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10a      	bne.n	8003d3a <HAL_ADC_ConfigChannel+0x222>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2101      	movs	r1, #1
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fe fff4 	bl	8002d18 <LL_ADC_GetOffsetChannel>
 8003d30:	4603      	mov	r3, r0
 8003d32:	0e9b      	lsrs	r3, r3, #26
 8003d34:	f003 021f 	and.w	r2, r3, #31
 8003d38:	e01e      	b.n	8003d78 <HAL_ADC_ConfigChannel+0x260>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2101      	movs	r1, #1
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fe ffe9 	bl	8002d18 <LL_ADC_GetOffsetChannel>
 8003d46:	4603      	mov	r3, r0
 8003d48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d50:	fa93 f3a3 	rbit	r3, r3
 8003d54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003d58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003d60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003d68:	2320      	movs	r3, #32
 8003d6a:	e004      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003d6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d70:	fab3 f383 	clz	r3, r3
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d105      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x278>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	0e9b      	lsrs	r3, r3, #26
 8003d8a:	f003 031f 	and.w	r3, r3, #31
 8003d8e:	e018      	b.n	8003dc2 <HAL_ADC_ConfigChannel+0x2aa>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d9c:	fa93 f3a3 	rbit	r3, r3
 8003da0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003da4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003da8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003dac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003db4:	2320      	movs	r3, #32
 8003db6:	e004      	b.n	8003dc2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003dbc:	fab3 f383 	clz	r3, r3
 8003dc0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d106      	bne.n	8003dd4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	2101      	movs	r1, #1
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fe ffb8 	bl	8002d44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2102      	movs	r1, #2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fe ff9c 	bl	8002d18 <LL_ADC_GetOffsetChannel>
 8003de0:	4603      	mov	r3, r0
 8003de2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10a      	bne.n	8003e00 <HAL_ADC_ConfigChannel+0x2e8>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2102      	movs	r1, #2
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fe ff91 	bl	8002d18 <LL_ADC_GetOffsetChannel>
 8003df6:	4603      	mov	r3, r0
 8003df8:	0e9b      	lsrs	r3, r3, #26
 8003dfa:	f003 021f 	and.w	r2, r3, #31
 8003dfe:	e01e      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x326>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2102      	movs	r1, #2
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fe ff86 	bl	8002d18 <LL_ADC_GetOffsetChannel>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e16:	fa93 f3a3 	rbit	r3, r3
 8003e1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003e1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003e26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003e2e:	2320      	movs	r3, #32
 8003e30:	e004      	b.n	8003e3c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003e32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e36:	fab3 f383 	clz	r3, r3
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d105      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x33e>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	0e9b      	lsrs	r3, r3, #26
 8003e50:	f003 031f 	and.w	r3, r3, #31
 8003e54:	e016      	b.n	8003e84 <HAL_ADC_ConfigChannel+0x36c>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e62:	fa93 f3a3 	rbit	r3, r3
 8003e66:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003e68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003e6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003e76:	2320      	movs	r3, #32
 8003e78:	e004      	b.n	8003e84 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003e7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e7e:	fab3 f383 	clz	r3, r3
 8003e82:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d106      	bne.n	8003e96 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2102      	movs	r1, #2
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fe ff57 	bl	8002d44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2103      	movs	r1, #3
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fe ff3b 	bl	8002d18 <LL_ADC_GetOffsetChannel>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10a      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x3aa>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2103      	movs	r1, #3
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fe ff30 	bl	8002d18 <LL_ADC_GetOffsetChannel>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	0e9b      	lsrs	r3, r3, #26
 8003ebc:	f003 021f 	and.w	r2, r3, #31
 8003ec0:	e017      	b.n	8003ef2 <HAL_ADC_ConfigChannel+0x3da>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2103      	movs	r1, #3
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fe ff25 	bl	8002d18 <LL_ADC_GetOffsetChannel>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ed4:	fa93 f3a3 	rbit	r3, r3
 8003ed8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003edc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003ede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003ee4:	2320      	movs	r3, #32
 8003ee6:	e003      	b.n	8003ef0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eea:	fab3 f383 	clz	r3, r3
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d105      	bne.n	8003f0a <HAL_ADC_ConfigChannel+0x3f2>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	0e9b      	lsrs	r3, r3, #26
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	e011      	b.n	8003f2e <HAL_ADC_ConfigChannel+0x416>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f12:	fa93 f3a3 	rbit	r3, r3
 8003f16:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003f22:	2320      	movs	r3, #32
 8003f24:	e003      	b.n	8003f2e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f28:	fab3 f383 	clz	r3, r3
 8003f2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d106      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2200      	movs	r2, #0
 8003f38:	2103      	movs	r1, #3
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fe ff02 	bl	8002d44 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff f885 	bl	8003054 <LL_ADC_IsEnabled>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f040 813d 	bne.w	80041cc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6818      	ldr	r0, [r3, #0]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	6819      	ldr	r1, [r3, #0]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f7fe ffd2 	bl	8002f08 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	4aa2      	ldr	r2, [pc, #648]	; (80041f4 <HAL_ADC_ConfigChannel+0x6dc>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	f040 812e 	bne.w	80041cc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10b      	bne.n	8003f98 <HAL_ADC_ConfigChannel+0x480>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	0e9b      	lsrs	r3, r3, #26
 8003f86:	3301      	adds	r3, #1
 8003f88:	f003 031f 	and.w	r3, r3, #31
 8003f8c:	2b09      	cmp	r3, #9
 8003f8e:	bf94      	ite	ls
 8003f90:	2301      	movls	r3, #1
 8003f92:	2300      	movhi	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	e019      	b.n	8003fcc <HAL_ADC_ConfigChannel+0x4b4>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fa0:	fa93 f3a3 	rbit	r3, r3
 8003fa4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003fa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fa8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003faa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003fb0:	2320      	movs	r3, #32
 8003fb2:	e003      	b.n	8003fbc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003fb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fb6:	fab3 f383 	clz	r3, r3
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	f003 031f 	and.w	r3, r3, #31
 8003fc2:	2b09      	cmp	r3, #9
 8003fc4:	bf94      	ite	ls
 8003fc6:	2301      	movls	r3, #1
 8003fc8:	2300      	movhi	r3, #0
 8003fca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d079      	beq.n	80040c4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d107      	bne.n	8003fec <HAL_ADC_ConfigChannel+0x4d4>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	0e9b      	lsrs	r3, r3, #26
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	069b      	lsls	r3, r3, #26
 8003fe6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fea:	e015      	b.n	8004018 <HAL_ADC_ConfigChannel+0x500>
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ff4:	fa93 f3a3 	rbit	r3, r3
 8003ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ffc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004004:	2320      	movs	r3, #32
 8004006:	e003      	b.n	8004010 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800400a:	fab3 f383 	clz	r3, r3
 800400e:	b2db      	uxtb	r3, r3
 8004010:	3301      	adds	r3, #1
 8004012:	069b      	lsls	r3, r3, #26
 8004014:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004020:	2b00      	cmp	r3, #0
 8004022:	d109      	bne.n	8004038 <HAL_ADC_ConfigChannel+0x520>
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	0e9b      	lsrs	r3, r3, #26
 800402a:	3301      	adds	r3, #1
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	2101      	movs	r1, #1
 8004032:	fa01 f303 	lsl.w	r3, r1, r3
 8004036:	e017      	b.n	8004068 <HAL_ADC_ConfigChannel+0x550>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004040:	fa93 f3a3 	rbit	r3, r3
 8004044:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004048:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800404a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004050:	2320      	movs	r3, #32
 8004052:	e003      	b.n	800405c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004056:	fab3 f383 	clz	r3, r3
 800405a:	b2db      	uxtb	r3, r3
 800405c:	3301      	adds	r3, #1
 800405e:	f003 031f 	and.w	r3, r3, #31
 8004062:	2101      	movs	r1, #1
 8004064:	fa01 f303 	lsl.w	r3, r1, r3
 8004068:	ea42 0103 	orr.w	r1, r2, r3
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10a      	bne.n	800408e <HAL_ADC_ConfigChannel+0x576>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	0e9b      	lsrs	r3, r3, #26
 800407e:	3301      	adds	r3, #1
 8004080:	f003 021f 	and.w	r2, r3, #31
 8004084:	4613      	mov	r3, r2
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	4413      	add	r3, r2
 800408a:	051b      	lsls	r3, r3, #20
 800408c:	e018      	b.n	80040c0 <HAL_ADC_ConfigChannel+0x5a8>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004096:	fa93 f3a3 	rbit	r3, r3
 800409a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800409c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800409e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80040a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80040a6:	2320      	movs	r3, #32
 80040a8:	e003      	b.n	80040b2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80040aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ac:	fab3 f383 	clz	r3, r3
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	3301      	adds	r3, #1
 80040b4:	f003 021f 	and.w	r2, r3, #31
 80040b8:	4613      	mov	r3, r2
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	4413      	add	r3, r2
 80040be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040c0:	430b      	orrs	r3, r1
 80040c2:	e07e      	b.n	80041c2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d107      	bne.n	80040e0 <HAL_ADC_ConfigChannel+0x5c8>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	0e9b      	lsrs	r3, r3, #26
 80040d6:	3301      	adds	r3, #1
 80040d8:	069b      	lsls	r3, r3, #26
 80040da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040de:	e015      	b.n	800410c <HAL_ADC_ConfigChannel+0x5f4>
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e8:	fa93 f3a3 	rbit	r3, r3
 80040ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80040f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80040f8:	2320      	movs	r3, #32
 80040fa:	e003      	b.n	8004104 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80040fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fe:	fab3 f383 	clz	r3, r3
 8004102:	b2db      	uxtb	r3, r3
 8004104:	3301      	adds	r3, #1
 8004106:	069b      	lsls	r3, r3, #26
 8004108:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004114:	2b00      	cmp	r3, #0
 8004116:	d109      	bne.n	800412c <HAL_ADC_ConfigChannel+0x614>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	0e9b      	lsrs	r3, r3, #26
 800411e:	3301      	adds	r3, #1
 8004120:	f003 031f 	and.w	r3, r3, #31
 8004124:	2101      	movs	r1, #1
 8004126:	fa01 f303 	lsl.w	r3, r1, r3
 800412a:	e017      	b.n	800415c <HAL_ADC_ConfigChannel+0x644>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	fa93 f3a3 	rbit	r3, r3
 8004138:	61fb      	str	r3, [r7, #28]
  return result;
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004144:	2320      	movs	r3, #32
 8004146:	e003      	b.n	8004150 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	fab3 f383 	clz	r3, r3
 800414e:	b2db      	uxtb	r3, r3
 8004150:	3301      	adds	r3, #1
 8004152:	f003 031f 	and.w	r3, r3, #31
 8004156:	2101      	movs	r1, #1
 8004158:	fa01 f303 	lsl.w	r3, r1, r3
 800415c:	ea42 0103 	orr.w	r1, r2, r3
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10d      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x670>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	0e9b      	lsrs	r3, r3, #26
 8004172:	3301      	adds	r3, #1
 8004174:	f003 021f 	and.w	r2, r3, #31
 8004178:	4613      	mov	r3, r2
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	4413      	add	r3, r2
 800417e:	3b1e      	subs	r3, #30
 8004180:	051b      	lsls	r3, r3, #20
 8004182:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004186:	e01b      	b.n	80041c0 <HAL_ADC_ConfigChannel+0x6a8>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	fa93 f3a3 	rbit	r3, r3
 8004194:	613b      	str	r3, [r7, #16]
  return result;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80041a0:	2320      	movs	r3, #32
 80041a2:	e003      	b.n	80041ac <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	fab3 f383 	clz	r3, r3
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	3301      	adds	r3, #1
 80041ae:	f003 021f 	and.w	r2, r3, #31
 80041b2:	4613      	mov	r3, r2
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	4413      	add	r3, r2
 80041b8:	3b1e      	subs	r3, #30
 80041ba:	051b      	lsls	r3, r3, #20
 80041bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041c0:	430b      	orrs	r3, r1
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	6892      	ldr	r2, [r2, #8]
 80041c6:	4619      	mov	r1, r3
 80041c8:	f7fe fe72 	bl	8002eb0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <HAL_ADC_ConfigChannel+0x6e0>)
 80041d2:	4013      	ands	r3, r2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 80be 	beq.w	8004356 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041e2:	d004      	beq.n	80041ee <HAL_ADC_ConfigChannel+0x6d6>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a04      	ldr	r2, [pc, #16]	; (80041fc <HAL_ADC_ConfigChannel+0x6e4>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d10a      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x6ec>
 80041ee:	4b04      	ldr	r3, [pc, #16]	; (8004200 <HAL_ADC_ConfigChannel+0x6e8>)
 80041f0:	e009      	b.n	8004206 <HAL_ADC_ConfigChannel+0x6ee>
 80041f2:	bf00      	nop
 80041f4:	407f0000 	.word	0x407f0000
 80041f8:	80080000 	.word	0x80080000
 80041fc:	50000100 	.word	0x50000100
 8004200:	50000300 	.word	0x50000300
 8004204:	4b59      	ldr	r3, [pc, #356]	; (800436c <HAL_ADC_ConfigChannel+0x854>)
 8004206:	4618      	mov	r0, r3
 8004208:	f7fe fd54 	bl	8002cb4 <LL_ADC_GetCommonPathInternalCh>
 800420c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a56      	ldr	r2, [pc, #344]	; (8004370 <HAL_ADC_ConfigChannel+0x858>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d004      	beq.n	8004224 <HAL_ADC_ConfigChannel+0x70c>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a55      	ldr	r2, [pc, #340]	; (8004374 <HAL_ADC_ConfigChannel+0x85c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d13a      	bne.n	800429a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004224:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004228:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d134      	bne.n	800429a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004238:	d005      	beq.n	8004246 <HAL_ADC_ConfigChannel+0x72e>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a4e      	ldr	r2, [pc, #312]	; (8004378 <HAL_ADC_ConfigChannel+0x860>)
 8004240:	4293      	cmp	r3, r2
 8004242:	f040 8085 	bne.w	8004350 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800424e:	d004      	beq.n	800425a <HAL_ADC_ConfigChannel+0x742>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a49      	ldr	r2, [pc, #292]	; (800437c <HAL_ADC_ConfigChannel+0x864>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d101      	bne.n	800425e <HAL_ADC_ConfigChannel+0x746>
 800425a:	4a49      	ldr	r2, [pc, #292]	; (8004380 <HAL_ADC_ConfigChannel+0x868>)
 800425c:	e000      	b.n	8004260 <HAL_ADC_ConfigChannel+0x748>
 800425e:	4a43      	ldr	r2, [pc, #268]	; (800436c <HAL_ADC_ConfigChannel+0x854>)
 8004260:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004264:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004268:	4619      	mov	r1, r3
 800426a:	4610      	mov	r0, r2
 800426c:	f7fe fd0f 	bl	8002c8e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004270:	4b44      	ldr	r3, [pc, #272]	; (8004384 <HAL_ADC_ConfigChannel+0x86c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	099b      	lsrs	r3, r3, #6
 8004276:	4a44      	ldr	r2, [pc, #272]	; (8004388 <HAL_ADC_ConfigChannel+0x870>)
 8004278:	fba2 2303 	umull	r2, r3, r2, r3
 800427c:	099b      	lsrs	r3, r3, #6
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	4613      	mov	r3, r2
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	4413      	add	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800428a:	e002      	b.n	8004292 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	3b01      	subs	r3, #1
 8004290:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1f9      	bne.n	800428c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004298:	e05a      	b.n	8004350 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a3b      	ldr	r2, [pc, #236]	; (800438c <HAL_ADC_ConfigChannel+0x874>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d125      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x7d8>
 80042a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d11f      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a31      	ldr	r2, [pc, #196]	; (800437c <HAL_ADC_ConfigChannel+0x864>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d104      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x7ac>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a34      	ldr	r2, [pc, #208]	; (8004390 <HAL_ADC_ConfigChannel+0x878>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d047      	beq.n	8004354 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042cc:	d004      	beq.n	80042d8 <HAL_ADC_ConfigChannel+0x7c0>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a2a      	ldr	r2, [pc, #168]	; (800437c <HAL_ADC_ConfigChannel+0x864>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d101      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x7c4>
 80042d8:	4a29      	ldr	r2, [pc, #164]	; (8004380 <HAL_ADC_ConfigChannel+0x868>)
 80042da:	e000      	b.n	80042de <HAL_ADC_ConfigChannel+0x7c6>
 80042dc:	4a23      	ldr	r2, [pc, #140]	; (800436c <HAL_ADC_ConfigChannel+0x854>)
 80042de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042e6:	4619      	mov	r1, r3
 80042e8:	4610      	mov	r0, r2
 80042ea:	f7fe fcd0 	bl	8002c8e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042ee:	e031      	b.n	8004354 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a27      	ldr	r2, [pc, #156]	; (8004394 <HAL_ADC_ConfigChannel+0x87c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d12d      	bne.n	8004356 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80042fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d127      	bne.n	8004356 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a1c      	ldr	r2, [pc, #112]	; (800437c <HAL_ADC_ConfigChannel+0x864>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d022      	beq.n	8004356 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004318:	d004      	beq.n	8004324 <HAL_ADC_ConfigChannel+0x80c>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a17      	ldr	r2, [pc, #92]	; (800437c <HAL_ADC_ConfigChannel+0x864>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d101      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x810>
 8004324:	4a16      	ldr	r2, [pc, #88]	; (8004380 <HAL_ADC_ConfigChannel+0x868>)
 8004326:	e000      	b.n	800432a <HAL_ADC_ConfigChannel+0x812>
 8004328:	4a10      	ldr	r2, [pc, #64]	; (800436c <HAL_ADC_ConfigChannel+0x854>)
 800432a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800432e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004332:	4619      	mov	r1, r3
 8004334:	4610      	mov	r0, r2
 8004336:	f7fe fcaa 	bl	8002c8e <LL_ADC_SetCommonPathInternalCh>
 800433a:	e00c      	b.n	8004356 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004340:	f043 0220 	orr.w	r2, r3, #32
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800434e:	e002      	b.n	8004356 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004350:	bf00      	nop
 8004352:	e000      	b.n	8004356 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004354:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800435e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004362:	4618      	mov	r0, r3
 8004364:	37d8      	adds	r7, #216	; 0xd8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	50000700 	.word	0x50000700
 8004370:	c3210000 	.word	0xc3210000
 8004374:	90c00010 	.word	0x90c00010
 8004378:	50000600 	.word	0x50000600
 800437c:	50000100 	.word	0x50000100
 8004380:	50000300 	.word	0x50000300
 8004384:	20000000 	.word	0x20000000
 8004388:	053e2d63 	.word	0x053e2d63
 800438c:	c7520000 	.word	0xc7520000
 8004390:	50000500 	.word	0x50000500
 8004394:	cb840000 	.word	0xcb840000

08004398 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fe fe55 	bl	8003054 <LL_ADC_IsEnabled>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d14d      	bne.n	800444c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	4b28      	ldr	r3, [pc, #160]	; (8004458 <ADC_Enable+0xc0>)
 80043b8:	4013      	ands	r3, r2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00d      	beq.n	80043da <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c2:	f043 0210 	orr.w	r2, r3, #16
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ce:	f043 0201 	orr.w	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e039      	b.n	800444e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fe fe24 	bl	800302c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80043e4:	f7fe fc12 	bl	8002c0c <HAL_GetTick>
 80043e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043ea:	e028      	b.n	800443e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fe fe2f 	bl	8003054 <LL_ADC_IsEnabled>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d104      	bne.n	8004406 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f7fe fe13 	bl	800302c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004406:	f7fe fc01 	bl	8002c0c <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d914      	bls.n	800443e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b01      	cmp	r3, #1
 8004420:	d00d      	beq.n	800443e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004426:	f043 0210 	orr.w	r2, r3, #16
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004432:	f043 0201 	orr.w	r2, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e007      	b.n	800444e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b01      	cmp	r3, #1
 800444a:	d1cf      	bne.n	80043ec <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	8000003f 	.word	0x8000003f

0800445c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004472:	2b00      	cmp	r3, #0
 8004474:	d14b      	bne.n	800450e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800447a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	2b00      	cmp	r3, #0
 800448e:	d021      	beq.n	80044d4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4618      	mov	r0, r3
 8004496:	f7fe fcb9 	bl	8002e0c <LL_ADC_REG_IsTriggerSourceSWStart>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d032      	beq.n	8004506 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d12b      	bne.n	8004506 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d11f      	bne.n	8004506 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ca:	f043 0201 	orr.w	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80044d2:	e018      	b.n	8004506 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d111      	bne.n	8004506 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d105      	bne.n	8004506 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044fe:	f043 0201 	orr.w	r2, r3, #1
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f7fd f83e 	bl	8001588 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800450c:	e00e      	b.n	800452c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004512:	f003 0310 	and.w	r3, r3, #16
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f7ff faf2 	bl	8003b04 <HAL_ADC_ErrorCallback>
}
 8004520:	e004      	b.n	800452c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	4798      	blx	r3
}
 800452c:	bf00      	nop
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004540:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f7ff faca 	bl	8003adc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004548:	bf00      	nop
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004562:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800456e:	f043 0204 	orr.w	r2, r3, #4
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f7ff fac4 	bl	8003b04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800457c:	bf00      	nop
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <LL_ADC_IsEnabled>:
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b01      	cmp	r3, #1
 8004596:	d101      	bne.n	800459c <LL_ADC_IsEnabled+0x18>
 8004598:	2301      	movs	r3, #1
 800459a:	e000      	b.n	800459e <LL_ADC_IsEnabled+0x1a>
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <LL_ADC_REG_IsConversionOngoing>:
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 0304 	and.w	r3, r3, #4
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d101      	bne.n	80045c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80045be:	2301      	movs	r3, #1
 80045c0:	e000      	b.n	80045c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004634:	b590      	push	{r4, r7, lr}
 8004636:	b0a1      	sub	sp, #132	; 0x84
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800464e:	2302      	movs	r3, #2
 8004650:	e0e7      	b.n	8004822 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800465a:	2300      	movs	r3, #0
 800465c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800465e:	2300      	movs	r3, #0
 8004660:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800466a:	d102      	bne.n	8004672 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800466c:	4b6f      	ldr	r3, [pc, #444]	; (800482c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800466e:	60bb      	str	r3, [r7, #8]
 8004670:	e009      	b.n	8004686 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a6e      	ldr	r2, [pc, #440]	; (8004830 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d102      	bne.n	8004682 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800467c:	4b6d      	ldr	r3, [pc, #436]	; (8004834 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800467e:	60bb      	str	r3, [r7, #8]
 8004680:	e001      	b.n	8004686 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004682:	2300      	movs	r3, #0
 8004684:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10b      	bne.n	80046a4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004690:	f043 0220 	orr.w	r2, r3, #32
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e0be      	b.n	8004822 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff ff7f 	bl	80045aa <LL_ADC_REG_IsConversionOngoing>
 80046ac:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff ff79 	bl	80045aa <LL_ADC_REG_IsConversionOngoing>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f040 80a0 	bne.w	8004800 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80046c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f040 809c 	bne.w	8004800 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046d0:	d004      	beq.n	80046dc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a55      	ldr	r2, [pc, #340]	; (800482c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d101      	bne.n	80046e0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80046dc:	4b56      	ldr	r3, [pc, #344]	; (8004838 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80046de:	e000      	b.n	80046e2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80046e0:	4b56      	ldr	r3, [pc, #344]	; (800483c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80046e2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d04b      	beq.n	8004784 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80046ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	6859      	ldr	r1, [r3, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046fe:	035b      	lsls	r3, r3, #13
 8004700:	430b      	orrs	r3, r1
 8004702:	431a      	orrs	r2, r3
 8004704:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004706:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004710:	d004      	beq.n	800471c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a45      	ldr	r2, [pc, #276]	; (800482c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d10f      	bne.n	800473c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800471c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004720:	f7ff ff30 	bl	8004584 <LL_ADC_IsEnabled>
 8004724:	4604      	mov	r4, r0
 8004726:	4841      	ldr	r0, [pc, #260]	; (800482c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004728:	f7ff ff2c 	bl	8004584 <LL_ADC_IsEnabled>
 800472c:	4603      	mov	r3, r0
 800472e:	4323      	orrs	r3, r4
 8004730:	2b00      	cmp	r3, #0
 8004732:	bf0c      	ite	eq
 8004734:	2301      	moveq	r3, #1
 8004736:	2300      	movne	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	e012      	b.n	8004762 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800473c:	483c      	ldr	r0, [pc, #240]	; (8004830 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800473e:	f7ff ff21 	bl	8004584 <LL_ADC_IsEnabled>
 8004742:	4604      	mov	r4, r0
 8004744:	483b      	ldr	r0, [pc, #236]	; (8004834 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004746:	f7ff ff1d 	bl	8004584 <LL_ADC_IsEnabled>
 800474a:	4603      	mov	r3, r0
 800474c:	431c      	orrs	r4, r3
 800474e:	483c      	ldr	r0, [pc, #240]	; (8004840 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004750:	f7ff ff18 	bl	8004584 <LL_ADC_IsEnabled>
 8004754:	4603      	mov	r3, r0
 8004756:	4323      	orrs	r3, r4
 8004758:	2b00      	cmp	r3, #0
 800475a:	bf0c      	ite	eq
 800475c:	2301      	moveq	r3, #1
 800475e:	2300      	movne	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d056      	beq.n	8004814 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800476e:	f023 030f 	bic.w	r3, r3, #15
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	6811      	ldr	r1, [r2, #0]
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	6892      	ldr	r2, [r2, #8]
 800477a:	430a      	orrs	r2, r1
 800477c:	431a      	orrs	r2, r3
 800477e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004780:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004782:	e047      	b.n	8004814 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800478c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800478e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004798:	d004      	beq.n	80047a4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a23      	ldr	r2, [pc, #140]	; (800482c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d10f      	bne.n	80047c4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80047a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80047a8:	f7ff feec 	bl	8004584 <LL_ADC_IsEnabled>
 80047ac:	4604      	mov	r4, r0
 80047ae:	481f      	ldr	r0, [pc, #124]	; (800482c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047b0:	f7ff fee8 	bl	8004584 <LL_ADC_IsEnabled>
 80047b4:	4603      	mov	r3, r0
 80047b6:	4323      	orrs	r3, r4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	bf0c      	ite	eq
 80047bc:	2301      	moveq	r3, #1
 80047be:	2300      	movne	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	e012      	b.n	80047ea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80047c4:	481a      	ldr	r0, [pc, #104]	; (8004830 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80047c6:	f7ff fedd 	bl	8004584 <LL_ADC_IsEnabled>
 80047ca:	4604      	mov	r4, r0
 80047cc:	4819      	ldr	r0, [pc, #100]	; (8004834 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80047ce:	f7ff fed9 	bl	8004584 <LL_ADC_IsEnabled>
 80047d2:	4603      	mov	r3, r0
 80047d4:	431c      	orrs	r4, r3
 80047d6:	481a      	ldr	r0, [pc, #104]	; (8004840 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80047d8:	f7ff fed4 	bl	8004584 <LL_ADC_IsEnabled>
 80047dc:	4603      	mov	r3, r0
 80047de:	4323      	orrs	r3, r4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	bf0c      	ite	eq
 80047e4:	2301      	moveq	r3, #1
 80047e6:	2300      	movne	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d012      	beq.n	8004814 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80047ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80047f6:	f023 030f 	bic.w	r3, r3, #15
 80047fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80047fc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047fe:	e009      	b.n	8004814 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004804:	f043 0220 	orr.w	r2, r3, #32
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004812:	e000      	b.n	8004816 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004814:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800481e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004822:	4618      	mov	r0, r3
 8004824:	3784      	adds	r7, #132	; 0x84
 8004826:	46bd      	mov	sp, r7
 8004828:	bd90      	pop	{r4, r7, pc}
 800482a:	bf00      	nop
 800482c:	50000100 	.word	0x50000100
 8004830:	50000400 	.word	0x50000400
 8004834:	50000500 	.word	0x50000500
 8004838:	50000300 	.word	0x50000300
 800483c:	50000700 	.word	0x50000700
 8004840:	50000600 	.word	0x50000600

08004844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004854:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <__NVIC_SetPriorityGrouping+0x44>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004860:	4013      	ands	r3, r2
 8004862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800486c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004876:	4a04      	ldr	r2, [pc, #16]	; (8004888 <__NVIC_SetPriorityGrouping+0x44>)
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	60d3      	str	r3, [r2, #12]
}
 800487c:	bf00      	nop
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	e000ed00 	.word	0xe000ed00

0800488c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004890:	4b04      	ldr	r3, [pc, #16]	; (80048a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	0a1b      	lsrs	r3, r3, #8
 8004896:	f003 0307 	and.w	r3, r3, #7
}
 800489a:	4618      	mov	r0, r3
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	e000ed00 	.word	0xe000ed00

080048a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	4603      	mov	r3, r0
 80048b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	db0b      	blt.n	80048d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048ba:	79fb      	ldrb	r3, [r7, #7]
 80048bc:	f003 021f 	and.w	r2, r3, #31
 80048c0:	4907      	ldr	r1, [pc, #28]	; (80048e0 <__NVIC_EnableIRQ+0x38>)
 80048c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	2001      	movs	r0, #1
 80048ca:	fa00 f202 	lsl.w	r2, r0, r2
 80048ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	e000e100 	.word	0xe000e100

080048e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	6039      	str	r1, [r7, #0]
 80048ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	db0a      	blt.n	800490e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	490c      	ldr	r1, [pc, #48]	; (8004930 <__NVIC_SetPriority+0x4c>)
 80048fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004902:	0112      	lsls	r2, r2, #4
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	440b      	add	r3, r1
 8004908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800490c:	e00a      	b.n	8004924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	b2da      	uxtb	r2, r3
 8004912:	4908      	ldr	r1, [pc, #32]	; (8004934 <__NVIC_SetPriority+0x50>)
 8004914:	79fb      	ldrb	r3, [r7, #7]
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	3b04      	subs	r3, #4
 800491c:	0112      	lsls	r2, r2, #4
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	440b      	add	r3, r1
 8004922:	761a      	strb	r2, [r3, #24]
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	e000e100 	.word	0xe000e100
 8004934:	e000ed00 	.word	0xe000ed00

08004938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004938:	b480      	push	{r7}
 800493a:	b089      	sub	sp, #36	; 0x24
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	f1c3 0307 	rsb	r3, r3, #7
 8004952:	2b04      	cmp	r3, #4
 8004954:	bf28      	it	cs
 8004956:	2304      	movcs	r3, #4
 8004958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	3304      	adds	r3, #4
 800495e:	2b06      	cmp	r3, #6
 8004960:	d902      	bls.n	8004968 <NVIC_EncodePriority+0x30>
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	3b03      	subs	r3, #3
 8004966:	e000      	b.n	800496a <NVIC_EncodePriority+0x32>
 8004968:	2300      	movs	r3, #0
 800496a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800496c:	f04f 32ff 	mov.w	r2, #4294967295
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	43da      	mvns	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	401a      	ands	r2, r3
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004980:	f04f 31ff 	mov.w	r1, #4294967295
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	fa01 f303 	lsl.w	r3, r1, r3
 800498a:	43d9      	mvns	r1, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004990:	4313      	orrs	r3, r2
         );
}
 8004992:	4618      	mov	r0, r3
 8004994:	3724      	adds	r7, #36	; 0x24
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b082      	sub	sp, #8
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7ff ff4c 	bl	8004844 <__NVIC_SetPriorityGrouping>
}
 80049ac:	bf00      	nop
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	4603      	mov	r3, r0
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049c2:	f7ff ff63 	bl	800488c <__NVIC_GetPriorityGrouping>
 80049c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	68b9      	ldr	r1, [r7, #8]
 80049cc:	6978      	ldr	r0, [r7, #20]
 80049ce:	f7ff ffb3 	bl	8004938 <NVIC_EncodePriority>
 80049d2:	4602      	mov	r2, r0
 80049d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049d8:	4611      	mov	r1, r2
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff ff82 	bl	80048e4 <__NVIC_SetPriority>
}
 80049e0:	bf00      	nop
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff ff56 	bl	80048a8 <__NVIC_EnableIRQ>
}
 80049fc:	bf00      	nop
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e08d      	b.n	8004b32 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	4b47      	ldr	r3, [pc, #284]	; (8004b3c <HAL_DMA_Init+0x138>)
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d80f      	bhi.n	8004a42 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	4b45      	ldr	r3, [pc, #276]	; (8004b40 <HAL_DMA_Init+0x13c>)
 8004a2a:	4413      	add	r3, r2
 8004a2c:	4a45      	ldr	r2, [pc, #276]	; (8004b44 <HAL_DMA_Init+0x140>)
 8004a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a32:	091b      	lsrs	r3, r3, #4
 8004a34:	009a      	lsls	r2, r3, #2
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a42      	ldr	r2, [pc, #264]	; (8004b48 <HAL_DMA_Init+0x144>)
 8004a3e:	641a      	str	r2, [r3, #64]	; 0x40
 8004a40:	e00e      	b.n	8004a60 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	4b40      	ldr	r3, [pc, #256]	; (8004b4c <HAL_DMA_Init+0x148>)
 8004a4a:	4413      	add	r3, r2
 8004a4c:	4a3d      	ldr	r2, [pc, #244]	; (8004b44 <HAL_DMA_Init+0x140>)
 8004a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a52:	091b      	lsrs	r3, r3, #4
 8004a54:	009a      	lsls	r2, r3, #2
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a3c      	ldr	r2, [pc, #240]	; (8004b50 <HAL_DMA_Init+0x14c>)
 8004a5e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004a84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fa76 	bl	8004fa4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ac0:	d102      	bne.n	8004ac8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004adc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d010      	beq.n	8004b08 <HAL_DMA_Init+0x104>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d80c      	bhi.n	8004b08 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 fa96 	bl	8005020 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b04:	605a      	str	r2, [r3, #4]
 8004b06:	e008      	b.n	8004b1a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	40020407 	.word	0x40020407
 8004b40:	bffdfff8 	.word	0xbffdfff8
 8004b44:	cccccccd 	.word	0xcccccccd
 8004b48:	40020000 	.word	0x40020000
 8004b4c:	bffdfbf8 	.word	0xbffdfbf8
 8004b50:	40020400 	.word	0x40020400

08004b54 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_DMA_Start_IT+0x20>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e066      	b.n	8004c42 <HAL_DMA_Start_IT+0xee>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d155      	bne.n	8004c34 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0201 	bic.w	r2, r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 f9bb 	bl	8004f28 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d008      	beq.n	8004bcc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f042 020e 	orr.w	r2, r2, #14
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	e00f      	b.n	8004bec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0204 	bic.w	r2, r2, #4
 8004bda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 020a 	orr.w	r2, r2, #10
 8004bea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d007      	beq.n	8004c0a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c08:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d007      	beq.n	8004c22 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c20:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f042 0201 	orr.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	e005      	b.n	8004c40 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b085      	sub	sp, #20
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d005      	beq.n	8004c6e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2204      	movs	r2, #4
 8004c66:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	73fb      	strb	r3, [r7, #15]
 8004c6c:	e037      	b.n	8004cde <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 020e 	bic.w	r2, r2, #14
 8004c7c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c8c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0201 	bic.w	r2, r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca2:	f003 021f 	and.w	r2, r3, #31
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	2101      	movs	r1, #1
 8004cac:	fa01 f202 	lsl.w	r2, r1, r2
 8004cb0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004cba:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00c      	beq.n	8004cde <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cd2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004cdc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d00d      	beq.n	8004d30 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2204      	movs	r2, #4
 8004d18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	73fb      	strb	r3, [r7, #15]
 8004d2e:	e047      	b.n	8004dc0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 020e 	bic.w	r2, r2, #14
 8004d3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0201 	bic.w	r2, r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d64:	f003 021f 	and.w	r2, r3, #31
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d72:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d7c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00c      	beq.n	8004da0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d94:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004d9e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	4798      	blx	r3
    }
  }
  return status;
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b084      	sub	sp, #16
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de6:	f003 031f 	and.w	r3, r3, #31
 8004dea:	2204      	movs	r2, #4
 8004dec:	409a      	lsls	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4013      	ands	r3, r2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d026      	beq.n	8004e44 <HAL_DMA_IRQHandler+0x7a>
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d021      	beq.n	8004e44 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0320 	and.w	r3, r3, #32
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d107      	bne.n	8004e1e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0204 	bic.w	r2, r2, #4
 8004e1c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e22:	f003 021f 	and.w	r2, r3, #31
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	2104      	movs	r1, #4
 8004e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e30:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d071      	beq.n	8004f1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004e42:	e06c      	b.n	8004f1e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e48:	f003 031f 	and.w	r3, r3, #31
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	409a      	lsls	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d02e      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d029      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0320 	and.w	r3, r3, #32
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10b      	bne.n	8004e88 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 020a 	bic.w	r2, r2, #10
 8004e7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8c:	f003 021f 	and.w	r2, r3, #31
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	2102      	movs	r1, #2
 8004e96:	fa01 f202 	lsl.w	r2, r1, r2
 8004e9a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d038      	beq.n	8004f1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004eb4:	e033      	b.n	8004f1e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eba:	f003 031f 	and.w	r3, r3, #31
 8004ebe:	2208      	movs	r2, #8
 8004ec0:	409a      	lsls	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d02a      	beq.n	8004f20 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d025      	beq.n	8004f20 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 020e 	bic.w	r2, r2, #14
 8004ee2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee8:	f003 021f 	and.w	r2, r3, #31
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ef6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d004      	beq.n	8004f20 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004f1e:	bf00      	nop
 8004f20:	bf00      	nop
}
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004f3e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d004      	beq.n	8004f52 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004f50:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f56:	f003 021f 	and.w	r2, r3, #31
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	2101      	movs	r1, #1
 8004f60:	fa01 f202 	lsl.w	r2, r1, r2
 8004f64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	2b10      	cmp	r3, #16
 8004f74:	d108      	bne.n	8004f88 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004f86:	e007      	b.n	8004f98 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	60da      	str	r2, [r3, #12]
}
 8004f98:	bf00      	nop
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4b16      	ldr	r3, [pc, #88]	; (800500c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d802      	bhi.n	8004fbe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004fb8:	4b15      	ldr	r3, [pc, #84]	; (8005010 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	e001      	b.n	8004fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004fbe:	4b15      	ldr	r3, [pc, #84]	; (8005014 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004fc0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	3b08      	subs	r3, #8
 8004fce:	4a12      	ldr	r2, [pc, #72]	; (8005018 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd4:	091b      	lsrs	r3, r3, #4
 8004fd6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fdc:	089b      	lsrs	r3, r3, #2
 8004fde:	009a      	lsls	r2, r3, #2
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a0b      	ldr	r2, [pc, #44]	; (800501c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004fee:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f003 031f 	and.w	r3, r3, #31
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	409a      	lsls	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ffe:	bf00      	nop
 8005000:	371c      	adds	r7, #28
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40020407 	.word	0x40020407
 8005010:	40020800 	.word	0x40020800
 8005014:	40020820 	.word	0x40020820
 8005018:	cccccccd 	.word	0xcccccccd
 800501c:	40020880 	.word	0x40020880

08005020 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005034:	4413      	add	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	461a      	mov	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a08      	ldr	r2, [pc, #32]	; (8005064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005042:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	3b01      	subs	r3, #1
 8005048:	f003 031f 	and.w	r3, r3, #31
 800504c:	2201      	movs	r2, #1
 800504e:	409a      	lsls	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005054:	bf00      	nop
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	1000823f 	.word	0x1000823f
 8005064:	40020940 	.word	0x40020940

08005068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005072:	2300      	movs	r3, #0
 8005074:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005076:	e15a      	b.n	800532e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	2101      	movs	r1, #1
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	fa01 f303 	lsl.w	r3, r1, r3
 8005084:	4013      	ands	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 814c 	beq.w	8005328 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f003 0303 	and.w	r3, r3, #3
 8005098:	2b01      	cmp	r3, #1
 800509a:	d005      	beq.n	80050a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d130      	bne.n	800510a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	2203      	movs	r2, #3
 80050b4:	fa02 f303 	lsl.w	r3, r2, r3
 80050b8:	43db      	mvns	r3, r3
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	4013      	ands	r3, r2
 80050be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050de:	2201      	movs	r2, #1
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	43db      	mvns	r3, r3
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	4013      	ands	r3, r2
 80050ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	091b      	lsrs	r3, r3, #4
 80050f4:	f003 0201 	and.w	r2, r3, #1
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	fa02 f303 	lsl.w	r3, r2, r3
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f003 0303 	and.w	r3, r3, #3
 8005112:	2b03      	cmp	r3, #3
 8005114:	d017      	beq.n	8005146 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	2203      	movs	r2, #3
 8005122:	fa02 f303 	lsl.w	r3, r2, r3
 8005126:	43db      	mvns	r3, r3
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	4013      	ands	r3, r2
 800512c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	689a      	ldr	r2, [r3, #8]
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	fa02 f303 	lsl.w	r3, r2, r3
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d123      	bne.n	800519a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	08da      	lsrs	r2, r3, #3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	3208      	adds	r2, #8
 800515a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800515e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f003 0307 	and.w	r3, r3, #7
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	220f      	movs	r2, #15
 800516a:	fa02 f303 	lsl.w	r3, r2, r3
 800516e:	43db      	mvns	r3, r3
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4013      	ands	r3, r2
 8005174:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	691a      	ldr	r2, [r3, #16]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	fa02 f303 	lsl.w	r3, r2, r3
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	4313      	orrs	r3, r2
 800518a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	08da      	lsrs	r2, r3, #3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3208      	adds	r2, #8
 8005194:	6939      	ldr	r1, [r7, #16]
 8005196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	2203      	movs	r2, #3
 80051a6:	fa02 f303 	lsl.w	r3, r2, r3
 80051aa:	43db      	mvns	r3, r3
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4013      	ands	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f003 0203 	and.w	r2, r3, #3
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	fa02 f303 	lsl.w	r3, r2, r3
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 80a6 	beq.w	8005328 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051dc:	4b5b      	ldr	r3, [pc, #364]	; (800534c <HAL_GPIO_Init+0x2e4>)
 80051de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e0:	4a5a      	ldr	r2, [pc, #360]	; (800534c <HAL_GPIO_Init+0x2e4>)
 80051e2:	f043 0301 	orr.w	r3, r3, #1
 80051e6:	6613      	str	r3, [r2, #96]	; 0x60
 80051e8:	4b58      	ldr	r3, [pc, #352]	; (800534c <HAL_GPIO_Init+0x2e4>)
 80051ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	60bb      	str	r3, [r7, #8]
 80051f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051f4:	4a56      	ldr	r2, [pc, #344]	; (8005350 <HAL_GPIO_Init+0x2e8>)
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	089b      	lsrs	r3, r3, #2
 80051fa:	3302      	adds	r3, #2
 80051fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005200:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f003 0303 	and.w	r3, r3, #3
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	220f      	movs	r2, #15
 800520c:	fa02 f303 	lsl.w	r3, r2, r3
 8005210:	43db      	mvns	r3, r3
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	4013      	ands	r3, r2
 8005216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800521e:	d01f      	beq.n	8005260 <HAL_GPIO_Init+0x1f8>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a4c      	ldr	r2, [pc, #304]	; (8005354 <HAL_GPIO_Init+0x2ec>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d019      	beq.n	800525c <HAL_GPIO_Init+0x1f4>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a4b      	ldr	r2, [pc, #300]	; (8005358 <HAL_GPIO_Init+0x2f0>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d013      	beq.n	8005258 <HAL_GPIO_Init+0x1f0>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a4a      	ldr	r2, [pc, #296]	; (800535c <HAL_GPIO_Init+0x2f4>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00d      	beq.n	8005254 <HAL_GPIO_Init+0x1ec>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a49      	ldr	r2, [pc, #292]	; (8005360 <HAL_GPIO_Init+0x2f8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d007      	beq.n	8005250 <HAL_GPIO_Init+0x1e8>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a48      	ldr	r2, [pc, #288]	; (8005364 <HAL_GPIO_Init+0x2fc>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d101      	bne.n	800524c <HAL_GPIO_Init+0x1e4>
 8005248:	2305      	movs	r3, #5
 800524a:	e00a      	b.n	8005262 <HAL_GPIO_Init+0x1fa>
 800524c:	2306      	movs	r3, #6
 800524e:	e008      	b.n	8005262 <HAL_GPIO_Init+0x1fa>
 8005250:	2304      	movs	r3, #4
 8005252:	e006      	b.n	8005262 <HAL_GPIO_Init+0x1fa>
 8005254:	2303      	movs	r3, #3
 8005256:	e004      	b.n	8005262 <HAL_GPIO_Init+0x1fa>
 8005258:	2302      	movs	r3, #2
 800525a:	e002      	b.n	8005262 <HAL_GPIO_Init+0x1fa>
 800525c:	2301      	movs	r3, #1
 800525e:	e000      	b.n	8005262 <HAL_GPIO_Init+0x1fa>
 8005260:	2300      	movs	r3, #0
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	f002 0203 	and.w	r2, r2, #3
 8005268:	0092      	lsls	r2, r2, #2
 800526a:	4093      	lsls	r3, r2
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	4313      	orrs	r3, r2
 8005270:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005272:	4937      	ldr	r1, [pc, #220]	; (8005350 <HAL_GPIO_Init+0x2e8>)
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	089b      	lsrs	r3, r3, #2
 8005278:	3302      	adds	r3, #2
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005280:	4b39      	ldr	r3, [pc, #228]	; (8005368 <HAL_GPIO_Init+0x300>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	43db      	mvns	r3, r3
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4013      	ands	r3, r2
 800528e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80052a4:	4a30      	ldr	r2, [pc, #192]	; (8005368 <HAL_GPIO_Init+0x300>)
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80052aa:	4b2f      	ldr	r3, [pc, #188]	; (8005368 <HAL_GPIO_Init+0x300>)
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	43db      	mvns	r3, r3
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	4013      	ands	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80052ce:	4a26      	ldr	r2, [pc, #152]	; (8005368 <HAL_GPIO_Init+0x300>)
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80052d4:	4b24      	ldr	r3, [pc, #144]	; (8005368 <HAL_GPIO_Init+0x300>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	43db      	mvns	r3, r3
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	4013      	ands	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80052f8:	4a1b      	ldr	r2, [pc, #108]	; (8005368 <HAL_GPIO_Init+0x300>)
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80052fe:	4b1a      	ldr	r3, [pc, #104]	; (8005368 <HAL_GPIO_Init+0x300>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	43db      	mvns	r3, r3
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	4013      	ands	r3, r2
 800530c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4313      	orrs	r3, r2
 8005320:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005322:	4a11      	ldr	r2, [pc, #68]	; (8005368 <HAL_GPIO_Init+0x300>)
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	3301      	adds	r3, #1
 800532c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	fa22 f303 	lsr.w	r3, r2, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	f47f ae9d 	bne.w	8005078 <HAL_GPIO_Init+0x10>
  }
}
 800533e:	bf00      	nop
 8005340:	bf00      	nop
 8005342:	371c      	adds	r7, #28
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	40021000 	.word	0x40021000
 8005350:	40010000 	.word	0x40010000
 8005354:	48000400 	.word	0x48000400
 8005358:	48000800 	.word	0x48000800
 800535c:	48000c00 	.word	0x48000c00
 8005360:	48001000 	.word	0x48001000
 8005364:	48001400 	.word	0x48001400
 8005368:	40010400 	.word	0x40010400

0800536c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	460b      	mov	r3, r1
 8005376:	807b      	strh	r3, [r7, #2]
 8005378:	4613      	mov	r3, r2
 800537a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800537c:	787b      	ldrb	r3, [r7, #1]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005382:	887a      	ldrh	r2, [r7, #2]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005388:	e002      	b.n	8005390 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800538a:	887a      	ldrh	r2, [r7, #2]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	4603      	mov	r3, r0
 80053a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80053a6:	4b08      	ldr	r3, [pc, #32]	; (80053c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053a8:	695a      	ldr	r2, [r3, #20]
 80053aa:	88fb      	ldrh	r3, [r7, #6]
 80053ac:	4013      	ands	r3, r2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d006      	beq.n	80053c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80053b2:	4a05      	ldr	r2, [pc, #20]	; (80053c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053b4:	88fb      	ldrh	r3, [r7, #6]
 80053b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80053b8:	88fb      	ldrh	r3, [r7, #6]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 f806 	bl	80053cc <HAL_GPIO_EXTI_Callback>
  }
}
 80053c0:	bf00      	nop
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	40010400 	.word	0x40010400

080053cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	4603      	mov	r3, r0
 80053d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80053d6:	bf00      	nop
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
	...

080053e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d141      	bne.n	8005476 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80053f2:	4b4b      	ldr	r3, [pc, #300]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053fe:	d131      	bne.n	8005464 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005400:	4b47      	ldr	r3, [pc, #284]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005406:	4a46      	ldr	r2, [pc, #280]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800540c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005410:	4b43      	ldr	r3, [pc, #268]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005418:	4a41      	ldr	r2, [pc, #260]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800541a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800541e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005420:	4b40      	ldr	r3, [pc, #256]	; (8005524 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2232      	movs	r2, #50	; 0x32
 8005426:	fb02 f303 	mul.w	r3, r2, r3
 800542a:	4a3f      	ldr	r2, [pc, #252]	; (8005528 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800542c:	fba2 2303 	umull	r2, r3, r2, r3
 8005430:	0c9b      	lsrs	r3, r3, #18
 8005432:	3301      	adds	r3, #1
 8005434:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005436:	e002      	b.n	800543e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	3b01      	subs	r3, #1
 800543c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800543e:	4b38      	ldr	r3, [pc, #224]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800544a:	d102      	bne.n	8005452 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1f2      	bne.n	8005438 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005452:	4b33      	ldr	r3, [pc, #204]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800545a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800545e:	d158      	bne.n	8005512 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e057      	b.n	8005514 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005464:	4b2e      	ldr	r3, [pc, #184]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800546a:	4a2d      	ldr	r2, [pc, #180]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800546c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005470:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005474:	e04d      	b.n	8005512 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800547c:	d141      	bne.n	8005502 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800547e:	4b28      	ldr	r3, [pc, #160]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548a:	d131      	bne.n	80054f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800548c:	4b24      	ldr	r3, [pc, #144]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800548e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005492:	4a23      	ldr	r2, [pc, #140]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005498:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800549c:	4b20      	ldr	r3, [pc, #128]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80054a4:	4a1e      	ldr	r2, [pc, #120]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054ac:	4b1d      	ldr	r3, [pc, #116]	; (8005524 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2232      	movs	r2, #50	; 0x32
 80054b2:	fb02 f303 	mul.w	r3, r2, r3
 80054b6:	4a1c      	ldr	r2, [pc, #112]	; (8005528 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80054b8:	fba2 2303 	umull	r2, r3, r2, r3
 80054bc:	0c9b      	lsrs	r3, r3, #18
 80054be:	3301      	adds	r3, #1
 80054c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054c2:	e002      	b.n	80054ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054ca:	4b15      	ldr	r3, [pc, #84]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d6:	d102      	bne.n	80054de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1f2      	bne.n	80054c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054de:	4b10      	ldr	r3, [pc, #64]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ea:	d112      	bne.n	8005512 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e011      	b.n	8005514 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054f0:	4b0b      	ldr	r3, [pc, #44]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054f6:	4a0a      	ldr	r2, [pc, #40]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005500:	e007      	b.n	8005512 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005502:	4b07      	ldr	r3, [pc, #28]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800550a:	4a05      	ldr	r2, [pc, #20]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800550c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005510:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	40007000 	.word	0x40007000
 8005524:	20000000 	.word	0x20000000
 8005528:	431bde83 	.word	0x431bde83

0800552c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005530:	4b05      	ldr	r3, [pc, #20]	; (8005548 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	4a04      	ldr	r2, [pc, #16]	; (8005548 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005536:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800553a:	6093      	str	r3, [r2, #8]
}
 800553c:	bf00      	nop
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	40007000 	.word	0x40007000

0800554c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e306      	b.n	8005b6c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d075      	beq.n	8005656 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800556a:	4b97      	ldr	r3, [pc, #604]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f003 030c 	and.w	r3, r3, #12
 8005572:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005574:	4b94      	ldr	r3, [pc, #592]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f003 0303 	and.w	r3, r3, #3
 800557c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	2b0c      	cmp	r3, #12
 8005582:	d102      	bne.n	800558a <HAL_RCC_OscConfig+0x3e>
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2b03      	cmp	r3, #3
 8005588:	d002      	beq.n	8005590 <HAL_RCC_OscConfig+0x44>
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	2b08      	cmp	r3, #8
 800558e:	d10b      	bne.n	80055a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005590:	4b8d      	ldr	r3, [pc, #564]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d05b      	beq.n	8005654 <HAL_RCC_OscConfig+0x108>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d157      	bne.n	8005654 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e2e1      	b.n	8005b6c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b0:	d106      	bne.n	80055c0 <HAL_RCC_OscConfig+0x74>
 80055b2:	4b85      	ldr	r3, [pc, #532]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a84      	ldr	r2, [pc, #528]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 80055b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	e01d      	b.n	80055fc <HAL_RCC_OscConfig+0xb0>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055c8:	d10c      	bne.n	80055e4 <HAL_RCC_OscConfig+0x98>
 80055ca:	4b7f      	ldr	r3, [pc, #508]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a7e      	ldr	r2, [pc, #504]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 80055d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	4b7c      	ldr	r3, [pc, #496]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a7b      	ldr	r2, [pc, #492]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 80055dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	e00b      	b.n	80055fc <HAL_RCC_OscConfig+0xb0>
 80055e4:	4b78      	ldr	r3, [pc, #480]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a77      	ldr	r2, [pc, #476]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 80055ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	4b75      	ldr	r3, [pc, #468]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a74      	ldr	r2, [pc, #464]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 80055f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d013      	beq.n	800562c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005604:	f7fd fb02 	bl	8002c0c <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800560c:	f7fd fafe 	bl	8002c0c <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b64      	cmp	r3, #100	; 0x64
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e2a6      	b.n	8005b6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800561e:	4b6a      	ldr	r3, [pc, #424]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0f0      	beq.n	800560c <HAL_RCC_OscConfig+0xc0>
 800562a:	e014      	b.n	8005656 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562c:	f7fd faee 	bl	8002c0c <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005634:	f7fd faea 	bl	8002c0c <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b64      	cmp	r3, #100	; 0x64
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e292      	b.n	8005b6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005646:	4b60      	ldr	r3, [pc, #384]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1f0      	bne.n	8005634 <HAL_RCC_OscConfig+0xe8>
 8005652:	e000      	b.n	8005656 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b00      	cmp	r3, #0
 8005660:	d075      	beq.n	800574e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005662:	4b59      	ldr	r3, [pc, #356]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f003 030c 	and.w	r3, r3, #12
 800566a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800566c:	4b56      	ldr	r3, [pc, #344]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f003 0303 	and.w	r3, r3, #3
 8005674:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	2b0c      	cmp	r3, #12
 800567a:	d102      	bne.n	8005682 <HAL_RCC_OscConfig+0x136>
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	2b02      	cmp	r3, #2
 8005680:	d002      	beq.n	8005688 <HAL_RCC_OscConfig+0x13c>
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	2b04      	cmp	r3, #4
 8005686:	d11f      	bne.n	80056c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005688:	4b4f      	ldr	r3, [pc, #316]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005690:	2b00      	cmp	r3, #0
 8005692:	d005      	beq.n	80056a0 <HAL_RCC_OscConfig+0x154>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e265      	b.n	8005b6c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056a0:	4b49      	ldr	r3, [pc, #292]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	061b      	lsls	r3, r3, #24
 80056ae:	4946      	ldr	r1, [pc, #280]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80056b4:	4b45      	ldr	r3, [pc, #276]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7fc f80b 	bl	80016d4 <HAL_InitTick>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d043      	beq.n	800574c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e251      	b.n	8005b6c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d023      	beq.n	8005718 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056d0:	4b3d      	ldr	r3, [pc, #244]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a3c      	ldr	r2, [pc, #240]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 80056d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056dc:	f7fd fa96 	bl	8002c0c <HAL_GetTick>
 80056e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056e2:	e008      	b.n	80056f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056e4:	f7fd fa92 	bl	8002c0c <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e23a      	b.n	8005b6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056f6:	4b34      	ldr	r3, [pc, #208]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0f0      	beq.n	80056e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005702:	4b31      	ldr	r3, [pc, #196]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	061b      	lsls	r3, r3, #24
 8005710:	492d      	ldr	r1, [pc, #180]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 8005712:	4313      	orrs	r3, r2
 8005714:	604b      	str	r3, [r1, #4]
 8005716:	e01a      	b.n	800574e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005718:	4b2b      	ldr	r3, [pc, #172]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a2a      	ldr	r2, [pc, #168]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 800571e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005724:	f7fd fa72 	bl	8002c0c <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800572c:	f7fd fa6e 	bl	8002c0c <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e216      	b.n	8005b6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800573e:	4b22      	ldr	r3, [pc, #136]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1f0      	bne.n	800572c <HAL_RCC_OscConfig+0x1e0>
 800574a:	e000      	b.n	800574e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800574c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0308 	and.w	r3, r3, #8
 8005756:	2b00      	cmp	r3, #0
 8005758:	d041      	beq.n	80057de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d01c      	beq.n	800579c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005762:	4b19      	ldr	r3, [pc, #100]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 8005764:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005768:	4a17      	ldr	r2, [pc, #92]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 800576a:	f043 0301 	orr.w	r3, r3, #1
 800576e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005772:	f7fd fa4b 	bl	8002c0c <HAL_GetTick>
 8005776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005778:	e008      	b.n	800578c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800577a:	f7fd fa47 	bl	8002c0c <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e1ef      	b.n	8005b6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800578c:	4b0e      	ldr	r3, [pc, #56]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 800578e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0ef      	beq.n	800577a <HAL_RCC_OscConfig+0x22e>
 800579a:	e020      	b.n	80057de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800579c:	4b0a      	ldr	r3, [pc, #40]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 800579e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057a2:	4a09      	ldr	r2, [pc, #36]	; (80057c8 <HAL_RCC_OscConfig+0x27c>)
 80057a4:	f023 0301 	bic.w	r3, r3, #1
 80057a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ac:	f7fd fa2e 	bl	8002c0c <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057b2:	e00d      	b.n	80057d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057b4:	f7fd fa2a 	bl	8002c0c <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d906      	bls.n	80057d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e1d2      	b.n	8005b6c <HAL_RCC_OscConfig+0x620>
 80057c6:	bf00      	nop
 80057c8:	40021000 	.word	0x40021000
 80057cc:	200000cc 	.word	0x200000cc
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057d0:	4b8c      	ldr	r3, [pc, #560]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 80057d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1ea      	bne.n	80057b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0304 	and.w	r3, r3, #4
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 80a6 	beq.w	8005938 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057ec:	2300      	movs	r3, #0
 80057ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057f0:	4b84      	ldr	r3, [pc, #528]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 80057f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <HAL_RCC_OscConfig+0x2b4>
 80057fc:	2301      	movs	r3, #1
 80057fe:	e000      	b.n	8005802 <HAL_RCC_OscConfig+0x2b6>
 8005800:	2300      	movs	r3, #0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00d      	beq.n	8005822 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005806:	4b7f      	ldr	r3, [pc, #508]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 8005808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580a:	4a7e      	ldr	r2, [pc, #504]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 800580c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005810:	6593      	str	r3, [r2, #88]	; 0x58
 8005812:	4b7c      	ldr	r3, [pc, #496]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 8005814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800581e:	2301      	movs	r3, #1
 8005820:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005822:	4b79      	ldr	r3, [pc, #484]	; (8005a08 <HAL_RCC_OscConfig+0x4bc>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582a:	2b00      	cmp	r3, #0
 800582c:	d118      	bne.n	8005860 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800582e:	4b76      	ldr	r3, [pc, #472]	; (8005a08 <HAL_RCC_OscConfig+0x4bc>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a75      	ldr	r2, [pc, #468]	; (8005a08 <HAL_RCC_OscConfig+0x4bc>)
 8005834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800583a:	f7fd f9e7 	bl	8002c0c <HAL_GetTick>
 800583e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005840:	e008      	b.n	8005854 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005842:	f7fd f9e3 	bl	8002c0c <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	2b02      	cmp	r3, #2
 800584e:	d901      	bls.n	8005854 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e18b      	b.n	8005b6c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005854:	4b6c      	ldr	r3, [pc, #432]	; (8005a08 <HAL_RCC_OscConfig+0x4bc>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0f0      	beq.n	8005842 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d108      	bne.n	800587a <HAL_RCC_OscConfig+0x32e>
 8005868:	4b66      	ldr	r3, [pc, #408]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 800586a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586e:	4a65      	ldr	r2, [pc, #404]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 8005870:	f043 0301 	orr.w	r3, r3, #1
 8005874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005878:	e024      	b.n	80058c4 <HAL_RCC_OscConfig+0x378>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	2b05      	cmp	r3, #5
 8005880:	d110      	bne.n	80058a4 <HAL_RCC_OscConfig+0x358>
 8005882:	4b60      	ldr	r3, [pc, #384]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 8005884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005888:	4a5e      	ldr	r2, [pc, #376]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 800588a:	f043 0304 	orr.w	r3, r3, #4
 800588e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005892:	4b5c      	ldr	r3, [pc, #368]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 8005894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005898:	4a5a      	ldr	r2, [pc, #360]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 800589a:	f043 0301 	orr.w	r3, r3, #1
 800589e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058a2:	e00f      	b.n	80058c4 <HAL_RCC_OscConfig+0x378>
 80058a4:	4b57      	ldr	r3, [pc, #348]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 80058a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058aa:	4a56      	ldr	r2, [pc, #344]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 80058ac:	f023 0301 	bic.w	r3, r3, #1
 80058b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058b4:	4b53      	ldr	r3, [pc, #332]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 80058b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ba:	4a52      	ldr	r2, [pc, #328]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 80058bc:	f023 0304 	bic.w	r3, r3, #4
 80058c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d016      	beq.n	80058fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058cc:	f7fd f99e 	bl	8002c0c <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058d2:	e00a      	b.n	80058ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058d4:	f7fd f99a 	bl	8002c0c <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e140      	b.n	8005b6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ea:	4b46      	ldr	r3, [pc, #280]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 80058ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0ed      	beq.n	80058d4 <HAL_RCC_OscConfig+0x388>
 80058f8:	e015      	b.n	8005926 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058fa:	f7fd f987 	bl	8002c0c <HAL_GetTick>
 80058fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005900:	e00a      	b.n	8005918 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005902:	f7fd f983 	bl	8002c0c <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005910:	4293      	cmp	r3, r2
 8005912:	d901      	bls.n	8005918 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e129      	b.n	8005b6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005918:	4b3a      	ldr	r3, [pc, #232]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 800591a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1ed      	bne.n	8005902 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005926:	7ffb      	ldrb	r3, [r7, #31]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d105      	bne.n	8005938 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800592c:	4b35      	ldr	r3, [pc, #212]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 800592e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005930:	4a34      	ldr	r2, [pc, #208]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 8005932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005936:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0320 	and.w	r3, r3, #32
 8005940:	2b00      	cmp	r3, #0
 8005942:	d03c      	beq.n	80059be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d01c      	beq.n	8005986 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800594c:	4b2d      	ldr	r3, [pc, #180]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 800594e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005952:	4a2c      	ldr	r2, [pc, #176]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 8005954:	f043 0301 	orr.w	r3, r3, #1
 8005958:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800595c:	f7fd f956 	bl	8002c0c <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005964:	f7fd f952 	bl	8002c0c <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e0fa      	b.n	8005b6c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005976:	4b23      	ldr	r3, [pc, #140]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 8005978:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0ef      	beq.n	8005964 <HAL_RCC_OscConfig+0x418>
 8005984:	e01b      	b.n	80059be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005986:	4b1f      	ldr	r3, [pc, #124]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 8005988:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800598c:	4a1d      	ldr	r2, [pc, #116]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 800598e:	f023 0301 	bic.w	r3, r3, #1
 8005992:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005996:	f7fd f939 	bl	8002c0c <HAL_GetTick>
 800599a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800599c:	e008      	b.n	80059b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800599e:	f7fd f935 	bl	8002c0c <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d901      	bls.n	80059b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e0dd      	b.n	8005b6c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059b0:	4b14      	ldr	r3, [pc, #80]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 80059b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1ef      	bne.n	800599e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 80d1 	beq.w	8005b6a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059c8:	4b0e      	ldr	r3, [pc, #56]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f003 030c 	and.w	r3, r3, #12
 80059d0:	2b0c      	cmp	r3, #12
 80059d2:	f000 808b 	beq.w	8005aec <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d15e      	bne.n	8005a9c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059de:	4b09      	ldr	r3, [pc, #36]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a08      	ldr	r2, [pc, #32]	; (8005a04 <HAL_RCC_OscConfig+0x4b8>)
 80059e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ea:	f7fd f90f 	bl	8002c0c <HAL_GetTick>
 80059ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059f0:	e00c      	b.n	8005a0c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059f2:	f7fd f90b 	bl	8002c0c <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d905      	bls.n	8005a0c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e0b3      	b.n	8005b6c <HAL_RCC_OscConfig+0x620>
 8005a04:	40021000 	.word	0x40021000
 8005a08:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a0c:	4b59      	ldr	r3, [pc, #356]	; (8005b74 <HAL_RCC_OscConfig+0x628>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1ec      	bne.n	80059f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a18:	4b56      	ldr	r3, [pc, #344]	; (8005b74 <HAL_RCC_OscConfig+0x628>)
 8005a1a:	68da      	ldr	r2, [r3, #12]
 8005a1c:	4b56      	ldr	r3, [pc, #344]	; (8005b78 <HAL_RCC_OscConfig+0x62c>)
 8005a1e:	4013      	ands	r3, r2
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6a11      	ldr	r1, [r2, #32]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a28:	3a01      	subs	r2, #1
 8005a2a:	0112      	lsls	r2, r2, #4
 8005a2c:	4311      	orrs	r1, r2
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005a32:	0212      	lsls	r2, r2, #8
 8005a34:	4311      	orrs	r1, r2
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a3a:	0852      	lsrs	r2, r2, #1
 8005a3c:	3a01      	subs	r2, #1
 8005a3e:	0552      	lsls	r2, r2, #21
 8005a40:	4311      	orrs	r1, r2
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a46:	0852      	lsrs	r2, r2, #1
 8005a48:	3a01      	subs	r2, #1
 8005a4a:	0652      	lsls	r2, r2, #25
 8005a4c:	4311      	orrs	r1, r2
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a52:	06d2      	lsls	r2, r2, #27
 8005a54:	430a      	orrs	r2, r1
 8005a56:	4947      	ldr	r1, [pc, #284]	; (8005b74 <HAL_RCC_OscConfig+0x628>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a5c:	4b45      	ldr	r3, [pc, #276]	; (8005b74 <HAL_RCC_OscConfig+0x628>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a44      	ldr	r2, [pc, #272]	; (8005b74 <HAL_RCC_OscConfig+0x628>)
 8005a62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a66:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a68:	4b42      	ldr	r3, [pc, #264]	; (8005b74 <HAL_RCC_OscConfig+0x628>)
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	4a41      	ldr	r2, [pc, #260]	; (8005b74 <HAL_RCC_OscConfig+0x628>)
 8005a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a74:	f7fd f8ca 	bl	8002c0c <HAL_GetTick>
 8005a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a7c:	f7fd f8c6 	bl	8002c0c <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e06e      	b.n	8005b6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a8e:	4b39      	ldr	r3, [pc, #228]	; (8005b74 <HAL_RCC_OscConfig+0x628>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0f0      	beq.n	8005a7c <HAL_RCC_OscConfig+0x530>
 8005a9a:	e066      	b.n	8005b6a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a9c:	4b35      	ldr	r3, [pc, #212]	; (8005b74 <HAL_RCC_OscConfig+0x628>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a34      	ldr	r2, [pc, #208]	; (8005b74 <HAL_RCC_OscConfig+0x628>)
 8005aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aa6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005aa8:	4b32      	ldr	r3, [pc, #200]	; (8005b74 <HAL_RCC_OscConfig+0x628>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	4a31      	ldr	r2, [pc, #196]	; (8005b74 <HAL_RCC_OscConfig+0x628>)
 8005aae:	f023 0303 	bic.w	r3, r3, #3
 8005ab2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005ab4:	4b2f      	ldr	r3, [pc, #188]	; (8005b74 <HAL_RCC_OscConfig+0x628>)
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	4a2e      	ldr	r2, [pc, #184]	; (8005b74 <HAL_RCC_OscConfig+0x628>)
 8005aba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ac2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac4:	f7fd f8a2 	bl	8002c0c <HAL_GetTick>
 8005ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005aca:	e008      	b.n	8005ade <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005acc:	f7fd f89e 	bl	8002c0c <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e046      	b.n	8005b6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ade:	4b25      	ldr	r3, [pc, #148]	; (8005b74 <HAL_RCC_OscConfig+0x628>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1f0      	bne.n	8005acc <HAL_RCC_OscConfig+0x580>
 8005aea:	e03e      	b.n	8005b6a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d101      	bne.n	8005af8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e039      	b.n	8005b6c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005af8:	4b1e      	ldr	r3, [pc, #120]	; (8005b74 <HAL_RCC_OscConfig+0x628>)
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f003 0203 	and.w	r2, r3, #3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d12c      	bne.n	8005b66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b16:	3b01      	subs	r3, #1
 8005b18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d123      	bne.n	8005b66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b28:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d11b      	bne.n	8005b66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b38:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d113      	bne.n	8005b66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b48:	085b      	lsrs	r3, r3, #1
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d109      	bne.n	8005b66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5c:	085b      	lsrs	r3, r3, #1
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d001      	beq.n	8005b6a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e000      	b.n	8005b6c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3720      	adds	r7, #32
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	40021000 	.word	0x40021000
 8005b78:	019f800c 	.word	0x019f800c

08005b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005b86:	2300      	movs	r3, #0
 8005b88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e11e      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b94:	4b91      	ldr	r3, [pc, #580]	; (8005ddc <HAL_RCC_ClockConfig+0x260>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 030f 	and.w	r3, r3, #15
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d910      	bls.n	8005bc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ba2:	4b8e      	ldr	r3, [pc, #568]	; (8005ddc <HAL_RCC_ClockConfig+0x260>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f023 020f 	bic.w	r2, r3, #15
 8005baa:	498c      	ldr	r1, [pc, #560]	; (8005ddc <HAL_RCC_ClockConfig+0x260>)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb2:	4b8a      	ldr	r3, [pc, #552]	; (8005ddc <HAL_RCC_ClockConfig+0x260>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d001      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e106      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d073      	beq.n	8005cb8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	2b03      	cmp	r3, #3
 8005bd6:	d129      	bne.n	8005c2c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bd8:	4b81      	ldr	r3, [pc, #516]	; (8005de0 <HAL_RCC_ClockConfig+0x264>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e0f4      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005be8:	f000 f9d0 	bl	8005f8c <RCC_GetSysClockFreqFromPLLSource>
 8005bec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	4a7c      	ldr	r2, [pc, #496]	; (8005de4 <HAL_RCC_ClockConfig+0x268>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d93f      	bls.n	8005c76 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005bf6:	4b7a      	ldr	r3, [pc, #488]	; (8005de0 <HAL_RCC_ClockConfig+0x264>)
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d009      	beq.n	8005c16 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d033      	beq.n	8005c76 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d12f      	bne.n	8005c76 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c16:	4b72      	ldr	r3, [pc, #456]	; (8005de0 <HAL_RCC_ClockConfig+0x264>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c1e:	4a70      	ldr	r2, [pc, #448]	; (8005de0 <HAL_RCC_ClockConfig+0x264>)
 8005c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c24:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c26:	2380      	movs	r3, #128	; 0x80
 8005c28:	617b      	str	r3, [r7, #20]
 8005c2a:	e024      	b.n	8005c76 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d107      	bne.n	8005c44 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c34:	4b6a      	ldr	r3, [pc, #424]	; (8005de0 <HAL_RCC_ClockConfig+0x264>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d109      	bne.n	8005c54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e0c6      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c44:	4b66      	ldr	r3, [pc, #408]	; (8005de0 <HAL_RCC_ClockConfig+0x264>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e0be      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005c54:	f000 f8ce 	bl	8005df4 <HAL_RCC_GetSysClockFreq>
 8005c58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	4a61      	ldr	r2, [pc, #388]	; (8005de4 <HAL_RCC_ClockConfig+0x268>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d909      	bls.n	8005c76 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c62:	4b5f      	ldr	r3, [pc, #380]	; (8005de0 <HAL_RCC_ClockConfig+0x264>)
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c6a:	4a5d      	ldr	r2, [pc, #372]	; (8005de0 <HAL_RCC_ClockConfig+0x264>)
 8005c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c70:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005c72:	2380      	movs	r3, #128	; 0x80
 8005c74:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c76:	4b5a      	ldr	r3, [pc, #360]	; (8005de0 <HAL_RCC_ClockConfig+0x264>)
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f023 0203 	bic.w	r2, r3, #3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	4957      	ldr	r1, [pc, #348]	; (8005de0 <HAL_RCC_ClockConfig+0x264>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c88:	f7fc ffc0 	bl	8002c0c <HAL_GetTick>
 8005c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c8e:	e00a      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c90:	f7fc ffbc 	bl	8002c0c <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e095      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca6:	4b4e      	ldr	r3, [pc, #312]	; (8005de0 <HAL_RCC_ClockConfig+0x264>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 020c 	and.w	r2, r3, #12
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d1eb      	bne.n	8005c90 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d023      	beq.n	8005d0c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d005      	beq.n	8005cdc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cd0:	4b43      	ldr	r3, [pc, #268]	; (8005de0 <HAL_RCC_ClockConfig+0x264>)
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	4a42      	ldr	r2, [pc, #264]	; (8005de0 <HAL_RCC_ClockConfig+0x264>)
 8005cd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005cda:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0308 	and.w	r3, r3, #8
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d007      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005ce8:	4b3d      	ldr	r3, [pc, #244]	; (8005de0 <HAL_RCC_ClockConfig+0x264>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005cf0:	4a3b      	ldr	r2, [pc, #236]	; (8005de0 <HAL_RCC_ClockConfig+0x264>)
 8005cf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005cf6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cf8:	4b39      	ldr	r3, [pc, #228]	; (8005de0 <HAL_RCC_ClockConfig+0x264>)
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	4936      	ldr	r1, [pc, #216]	; (8005de0 <HAL_RCC_ClockConfig+0x264>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	608b      	str	r3, [r1, #8]
 8005d0a:	e008      	b.n	8005d1e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	2b80      	cmp	r3, #128	; 0x80
 8005d10:	d105      	bne.n	8005d1e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d12:	4b33      	ldr	r3, [pc, #204]	; (8005de0 <HAL_RCC_ClockConfig+0x264>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	4a32      	ldr	r2, [pc, #200]	; (8005de0 <HAL_RCC_ClockConfig+0x264>)
 8005d18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d1c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d1e:	4b2f      	ldr	r3, [pc, #188]	; (8005ddc <HAL_RCC_ClockConfig+0x260>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d21d      	bcs.n	8005d68 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d2c:	4b2b      	ldr	r3, [pc, #172]	; (8005ddc <HAL_RCC_ClockConfig+0x260>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f023 020f 	bic.w	r2, r3, #15
 8005d34:	4929      	ldr	r1, [pc, #164]	; (8005ddc <HAL_RCC_ClockConfig+0x260>)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d3c:	f7fc ff66 	bl	8002c0c <HAL_GetTick>
 8005d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d42:	e00a      	b.n	8005d5a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d44:	f7fc ff62 	bl	8002c0c <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e03b      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d5a:	4b20      	ldr	r3, [pc, #128]	; (8005ddc <HAL_RCC_ClockConfig+0x260>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 030f 	and.w	r3, r3, #15
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d1ed      	bne.n	8005d44 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0304 	and.w	r3, r3, #4
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d008      	beq.n	8005d86 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d74:	4b1a      	ldr	r3, [pc, #104]	; (8005de0 <HAL_RCC_ClockConfig+0x264>)
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	4917      	ldr	r1, [pc, #92]	; (8005de0 <HAL_RCC_ClockConfig+0x264>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0308 	and.w	r3, r3, #8
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d009      	beq.n	8005da6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d92:	4b13      	ldr	r3, [pc, #76]	; (8005de0 <HAL_RCC_ClockConfig+0x264>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	00db      	lsls	r3, r3, #3
 8005da0:	490f      	ldr	r1, [pc, #60]	; (8005de0 <HAL_RCC_ClockConfig+0x264>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005da6:	f000 f825 	bl	8005df4 <HAL_RCC_GetSysClockFreq>
 8005daa:	4602      	mov	r2, r0
 8005dac:	4b0c      	ldr	r3, [pc, #48]	; (8005de0 <HAL_RCC_ClockConfig+0x264>)
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	091b      	lsrs	r3, r3, #4
 8005db2:	f003 030f 	and.w	r3, r3, #15
 8005db6:	490c      	ldr	r1, [pc, #48]	; (8005de8 <HAL_RCC_ClockConfig+0x26c>)
 8005db8:	5ccb      	ldrb	r3, [r1, r3]
 8005dba:	f003 031f 	and.w	r3, r3, #31
 8005dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc2:	4a0a      	ldr	r2, [pc, #40]	; (8005dec <HAL_RCC_ClockConfig+0x270>)
 8005dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005dc6:	4b0a      	ldr	r3, [pc, #40]	; (8005df0 <HAL_RCC_ClockConfig+0x274>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fb fc82 	bl	80016d4 <HAL_InitTick>
 8005dd0:	4603      	mov	r3, r0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3718      	adds	r7, #24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	40022000 	.word	0x40022000
 8005de0:	40021000 	.word	0x40021000
 8005de4:	04c4b400 	.word	0x04c4b400
 8005de8:	0800bb88 	.word	0x0800bb88
 8005dec:	20000000 	.word	0x20000000
 8005df0:	200000cc 	.word	0x200000cc

08005df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005dfa:	4b2c      	ldr	r3, [pc, #176]	; (8005eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f003 030c 	and.w	r3, r3, #12
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d102      	bne.n	8005e0c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e06:	4b2a      	ldr	r3, [pc, #168]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	e047      	b.n	8005e9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005e0c:	4b27      	ldr	r3, [pc, #156]	; (8005eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f003 030c 	and.w	r3, r3, #12
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d102      	bne.n	8005e1e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e18:	4b26      	ldr	r3, [pc, #152]	; (8005eb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	e03e      	b.n	8005e9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005e1e:	4b23      	ldr	r3, [pc, #140]	; (8005eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 030c 	and.w	r3, r3, #12
 8005e26:	2b0c      	cmp	r3, #12
 8005e28:	d136      	bne.n	8005e98 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e2a:	4b20      	ldr	r3, [pc, #128]	; (8005eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e34:	4b1d      	ldr	r3, [pc, #116]	; (8005eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	091b      	lsrs	r3, r3, #4
 8005e3a:	f003 030f 	and.w	r3, r3, #15
 8005e3e:	3301      	adds	r3, #1
 8005e40:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2b03      	cmp	r3, #3
 8005e46:	d10c      	bne.n	8005e62 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e48:	4a1a      	ldr	r2, [pc, #104]	; (8005eb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e50:	4a16      	ldr	r2, [pc, #88]	; (8005eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e52:	68d2      	ldr	r2, [r2, #12]
 8005e54:	0a12      	lsrs	r2, r2, #8
 8005e56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e5a:	fb02 f303 	mul.w	r3, r2, r3
 8005e5e:	617b      	str	r3, [r7, #20]
      break;
 8005e60:	e00c      	b.n	8005e7c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e62:	4a13      	ldr	r2, [pc, #76]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6a:	4a10      	ldr	r2, [pc, #64]	; (8005eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e6c:	68d2      	ldr	r2, [r2, #12]
 8005e6e:	0a12      	lsrs	r2, r2, #8
 8005e70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e74:	fb02 f303 	mul.w	r3, r2, r3
 8005e78:	617b      	str	r3, [r7, #20]
      break;
 8005e7a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e7c:	4b0b      	ldr	r3, [pc, #44]	; (8005eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	0e5b      	lsrs	r3, r3, #25
 8005e82:	f003 0303 	and.w	r3, r3, #3
 8005e86:	3301      	adds	r3, #1
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e94:	613b      	str	r3, [r7, #16]
 8005e96:	e001      	b.n	8005e9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005e9c:	693b      	ldr	r3, [r7, #16]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	371c      	adds	r7, #28
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	00f42400 	.word	0x00f42400
 8005eb4:	016e3600 	.word	0x016e3600

08005eb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ebc:	4b03      	ldr	r3, [pc, #12]	; (8005ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	20000000 	.word	0x20000000

08005ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ed4:	f7ff fff0 	bl	8005eb8 <HAL_RCC_GetHCLKFreq>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	0a1b      	lsrs	r3, r3, #8
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	4904      	ldr	r1, [pc, #16]	; (8005ef8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ee6:	5ccb      	ldrb	r3, [r1, r3]
 8005ee8:	f003 031f 	and.w	r3, r3, #31
 8005eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	40021000 	.word	0x40021000
 8005ef8:	0800bb98 	.word	0x0800bb98

08005efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f00:	f7ff ffda 	bl	8005eb8 <HAL_RCC_GetHCLKFreq>
 8005f04:	4602      	mov	r2, r0
 8005f06:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	0adb      	lsrs	r3, r3, #11
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	4904      	ldr	r1, [pc, #16]	; (8005f24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f12:	5ccb      	ldrb	r3, [r1, r3]
 8005f14:	f003 031f 	and.w	r3, r3, #31
 8005f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	40021000 	.word	0x40021000
 8005f24:	0800bb98 	.word	0x0800bb98

08005f28 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	220f      	movs	r2, #15
 8005f36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005f38:	4b12      	ldr	r3, [pc, #72]	; (8005f84 <HAL_RCC_GetClockConfig+0x5c>)
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f003 0203 	and.w	r2, r3, #3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005f44:	4b0f      	ldr	r3, [pc, #60]	; (8005f84 <HAL_RCC_GetClockConfig+0x5c>)
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005f50:	4b0c      	ldr	r3, [pc, #48]	; (8005f84 <HAL_RCC_GetClockConfig+0x5c>)
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005f5c:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <HAL_RCC_GetClockConfig+0x5c>)
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	08db      	lsrs	r3, r3, #3
 8005f62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005f6a:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <HAL_RCC_GetClockConfig+0x60>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 020f 	and.w	r2, r3, #15
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	601a      	str	r2, [r3, #0]
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	40021000 	.word	0x40021000
 8005f88:	40022000 	.word	0x40022000

08005f8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f92:	4b1e      	ldr	r3, [pc, #120]	; (800600c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	f003 0303 	and.w	r3, r3, #3
 8005f9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f9c:	4b1b      	ldr	r3, [pc, #108]	; (800600c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	091b      	lsrs	r3, r3, #4
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d10c      	bne.n	8005fca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fb0:	4a17      	ldr	r2, [pc, #92]	; (8006010 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb8:	4a14      	ldr	r2, [pc, #80]	; (800600c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fba:	68d2      	ldr	r2, [r2, #12]
 8005fbc:	0a12      	lsrs	r2, r2, #8
 8005fbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005fc2:	fb02 f303 	mul.w	r3, r2, r3
 8005fc6:	617b      	str	r3, [r7, #20]
    break;
 8005fc8:	e00c      	b.n	8005fe4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fca:	4a12      	ldr	r2, [pc, #72]	; (8006014 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd2:	4a0e      	ldr	r2, [pc, #56]	; (800600c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fd4:	68d2      	ldr	r2, [r2, #12]
 8005fd6:	0a12      	lsrs	r2, r2, #8
 8005fd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005fdc:	fb02 f303 	mul.w	r3, r2, r3
 8005fe0:	617b      	str	r3, [r7, #20]
    break;
 8005fe2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fe4:	4b09      	ldr	r3, [pc, #36]	; (800600c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	0e5b      	lsrs	r3, r3, #25
 8005fea:	f003 0303 	and.w	r3, r3, #3
 8005fee:	3301      	adds	r3, #1
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ffc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005ffe:	687b      	ldr	r3, [r7, #4]
}
 8006000:	4618      	mov	r0, r3
 8006002:	371c      	adds	r7, #28
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	40021000 	.word	0x40021000
 8006010:	016e3600 	.word	0x016e3600
 8006014:	00f42400 	.word	0x00f42400

08006018 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006020:	2300      	movs	r3, #0
 8006022:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006024:	2300      	movs	r3, #0
 8006026:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 8098 	beq.w	8006166 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006036:	2300      	movs	r3, #0
 8006038:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800603a:	4b43      	ldr	r3, [pc, #268]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800603c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800603e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10d      	bne.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006046:	4b40      	ldr	r3, [pc, #256]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800604a:	4a3f      	ldr	r2, [pc, #252]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800604c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006050:	6593      	str	r3, [r2, #88]	; 0x58
 8006052:	4b3d      	ldr	r3, [pc, #244]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800605a:	60bb      	str	r3, [r7, #8]
 800605c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800605e:	2301      	movs	r3, #1
 8006060:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006062:	4b3a      	ldr	r3, [pc, #232]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a39      	ldr	r2, [pc, #228]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800606c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800606e:	f7fc fdcd 	bl	8002c0c <HAL_GetTick>
 8006072:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006074:	e009      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006076:	f7fc fdc9 	bl	8002c0c <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d902      	bls.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	74fb      	strb	r3, [r7, #19]
        break;
 8006088:	e005      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800608a:	4b30      	ldr	r3, [pc, #192]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006092:	2b00      	cmp	r3, #0
 8006094:	d0ef      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006096:	7cfb      	ldrb	r3, [r7, #19]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d159      	bne.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800609c:	4b2a      	ldr	r3, [pc, #168]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800609e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060a6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d01e      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d019      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060b8:	4b23      	ldr	r3, [pc, #140]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060c4:	4b20      	ldr	r3, [pc, #128]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ca:	4a1f      	ldr	r2, [pc, #124]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060d4:	4b1c      	ldr	r3, [pc, #112]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060da:	4a1b      	ldr	r2, [pc, #108]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060e4:	4a18      	ldr	r2, [pc, #96]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d016      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f6:	f7fc fd89 	bl	8002c0c <HAL_GetTick>
 80060fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060fc:	e00b      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060fe:	f7fc fd85 	bl	8002c0c <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	f241 3288 	movw	r2, #5000	; 0x1388
 800610c:	4293      	cmp	r3, r2
 800610e:	d902      	bls.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	74fb      	strb	r3, [r7, #19]
            break;
 8006114:	e006      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006116:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611c:	f003 0302 	and.w	r3, r3, #2
 8006120:	2b00      	cmp	r3, #0
 8006122:	d0ec      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006124:	7cfb      	ldrb	r3, [r7, #19]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10b      	bne.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800612a:	4b07      	ldr	r3, [pc, #28]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800612c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006138:	4903      	ldr	r1, [pc, #12]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800613a:	4313      	orrs	r3, r2
 800613c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006140:	e008      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006142:	7cfb      	ldrb	r3, [r7, #19]
 8006144:	74bb      	strb	r3, [r7, #18]
 8006146:	e005      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006148:	40021000 	.word	0x40021000
 800614c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006150:	7cfb      	ldrb	r3, [r7, #19]
 8006152:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006154:	7c7b      	ldrb	r3, [r7, #17]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d105      	bne.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800615a:	4ba7      	ldr	r3, [pc, #668]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800615c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800615e:	4aa6      	ldr	r2, [pc, #664]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006164:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00a      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006172:	4ba1      	ldr	r3, [pc, #644]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006178:	f023 0203 	bic.w	r2, r3, #3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	499d      	ldr	r1, [pc, #628]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006182:	4313      	orrs	r3, r2
 8006184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00a      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006194:	4b98      	ldr	r3, [pc, #608]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800619a:	f023 020c 	bic.w	r2, r3, #12
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	4995      	ldr	r1, [pc, #596]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0304 	and.w	r3, r3, #4
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00a      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061b6:	4b90      	ldr	r3, [pc, #576]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	498c      	ldr	r1, [pc, #560]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0308 	and.w	r3, r3, #8
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00a      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061d8:	4b87      	ldr	r3, [pc, #540]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	4984      	ldr	r1, [pc, #528]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0310 	and.w	r3, r3, #16
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061fa:	4b7f      	ldr	r3, [pc, #508]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006200:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	497b      	ldr	r1, [pc, #492]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800620a:	4313      	orrs	r3, r2
 800620c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0320 	and.w	r3, r3, #32
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00a      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800621c:	4b76      	ldr	r3, [pc, #472]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800621e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006222:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	4973      	ldr	r1, [pc, #460]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800622c:	4313      	orrs	r3, r2
 800622e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800623e:	4b6e      	ldr	r3, [pc, #440]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006244:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	496a      	ldr	r1, [pc, #424]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800624e:	4313      	orrs	r3, r2
 8006250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006260:	4b65      	ldr	r3, [pc, #404]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006266:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	4962      	ldr	r1, [pc, #392]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006270:	4313      	orrs	r3, r2
 8006272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006282:	4b5d      	ldr	r3, [pc, #372]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006288:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	4959      	ldr	r1, [pc, #356]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006292:	4313      	orrs	r3, r2
 8006294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00a      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80062a4:	4b54      	ldr	r3, [pc, #336]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062aa:	f023 0203 	bic.w	r2, r3, #3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b2:	4951      	ldr	r1, [pc, #324]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062c6:	4b4c      	ldr	r3, [pc, #304]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d4:	4948      	ldr	r1, [pc, #288]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d015      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062e8:	4b43      	ldr	r3, [pc, #268]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f6:	4940      	ldr	r1, [pc, #256]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006306:	d105      	bne.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006308:	4b3b      	ldr	r3, [pc, #236]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	4a3a      	ldr	r2, [pc, #232]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800630e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006312:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800631c:	2b00      	cmp	r3, #0
 800631e:	d015      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006320:	4b35      	ldr	r3, [pc, #212]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006326:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800632e:	4932      	ldr	r1, [pc, #200]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006330:	4313      	orrs	r3, r2
 8006332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800633e:	d105      	bne.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006340:	4b2d      	ldr	r3, [pc, #180]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	4a2c      	ldr	r2, [pc, #176]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006346:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800634a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d015      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006358:	4b27      	ldr	r3, [pc, #156]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800635a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800635e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006366:	4924      	ldr	r1, [pc, #144]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006368:	4313      	orrs	r3, r2
 800636a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006372:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006376:	d105      	bne.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006378:	4b1f      	ldr	r3, [pc, #124]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	4a1e      	ldr	r2, [pc, #120]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800637e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006382:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d015      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006390:	4b19      	ldr	r3, [pc, #100]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006396:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639e:	4916      	ldr	r1, [pc, #88]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063ae:	d105      	bne.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063b0:	4b11      	ldr	r3, [pc, #68]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	4a10      	ldr	r2, [pc, #64]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d019      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80063c8:	4b0b      	ldr	r3, [pc, #44]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	4908      	ldr	r1, [pc, #32]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063e6:	d109      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063e8:	4b03      	ldr	r3, [pc, #12]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	4a02      	ldr	r2, [pc, #8]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063f2:	60d3      	str	r3, [r2, #12]
 80063f4:	e002      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80063f6:	bf00      	nop
 80063f8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d015      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006408:	4b29      	ldr	r3, [pc, #164]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800640a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800640e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006416:	4926      	ldr	r1, [pc, #152]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006418:	4313      	orrs	r3, r2
 800641a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006422:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006426:	d105      	bne.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006428:	4b21      	ldr	r3, [pc, #132]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	4a20      	ldr	r2, [pc, #128]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800642e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006432:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d015      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006440:	4b1b      	ldr	r3, [pc, #108]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006446:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800644e:	4918      	ldr	r1, [pc, #96]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006450:	4313      	orrs	r3, r2
 8006452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800645a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800645e:	d105      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006460:	4b13      	ldr	r3, [pc, #76]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	4a12      	ldr	r2, [pc, #72]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800646a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d015      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006478:	4b0d      	ldr	r3, [pc, #52]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800647a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800647e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006486:	490a      	ldr	r1, [pc, #40]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006488:	4313      	orrs	r3, r2
 800648a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006492:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006496:	d105      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006498:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	4a04      	ldr	r2, [pc, #16]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800649e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80064a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	40021000 	.word	0x40021000

080064b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e049      	b.n	800655a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d106      	bne.n	80064e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7fb fc0e 	bl	8001cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	3304      	adds	r3, #4
 80064f0:	4619      	mov	r1, r3
 80064f2:	4610      	mov	r0, r2
 80064f4:	f000 ffda 	bl	80074ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
	...

08006564 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b01      	cmp	r3, #1
 8006576:	d001      	beq.n	800657c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e054      	b.n	8006626 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2202      	movs	r2, #2
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68da      	ldr	r2, [r3, #12]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0201 	orr.w	r2, r2, #1
 8006592:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a26      	ldr	r2, [pc, #152]	; (8006634 <HAL_TIM_Base_Start_IT+0xd0>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d022      	beq.n	80065e4 <HAL_TIM_Base_Start_IT+0x80>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065a6:	d01d      	beq.n	80065e4 <HAL_TIM_Base_Start_IT+0x80>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a22      	ldr	r2, [pc, #136]	; (8006638 <HAL_TIM_Base_Start_IT+0xd4>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d018      	beq.n	80065e4 <HAL_TIM_Base_Start_IT+0x80>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a21      	ldr	r2, [pc, #132]	; (800663c <HAL_TIM_Base_Start_IT+0xd8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d013      	beq.n	80065e4 <HAL_TIM_Base_Start_IT+0x80>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a1f      	ldr	r2, [pc, #124]	; (8006640 <HAL_TIM_Base_Start_IT+0xdc>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d00e      	beq.n	80065e4 <HAL_TIM_Base_Start_IT+0x80>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a1e      	ldr	r2, [pc, #120]	; (8006644 <HAL_TIM_Base_Start_IT+0xe0>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d009      	beq.n	80065e4 <HAL_TIM_Base_Start_IT+0x80>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a1c      	ldr	r2, [pc, #112]	; (8006648 <HAL_TIM_Base_Start_IT+0xe4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d004      	beq.n	80065e4 <HAL_TIM_Base_Start_IT+0x80>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a1b      	ldr	r2, [pc, #108]	; (800664c <HAL_TIM_Base_Start_IT+0xe8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d115      	bne.n	8006610 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689a      	ldr	r2, [r3, #8]
 80065ea:	4b19      	ldr	r3, [pc, #100]	; (8006650 <HAL_TIM_Base_Start_IT+0xec>)
 80065ec:	4013      	ands	r3, r2
 80065ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2b06      	cmp	r3, #6
 80065f4:	d015      	beq.n	8006622 <HAL_TIM_Base_Start_IT+0xbe>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065fc:	d011      	beq.n	8006622 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f042 0201 	orr.w	r2, r2, #1
 800660c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800660e:	e008      	b.n	8006622 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f042 0201 	orr.w	r2, r2, #1
 800661e:	601a      	str	r2, [r3, #0]
 8006620:	e000      	b.n	8006624 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006622:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	40012c00 	.word	0x40012c00
 8006638:	40000400 	.word	0x40000400
 800663c:	40000800 	.word	0x40000800
 8006640:	40000c00 	.word	0x40000c00
 8006644:	40013400 	.word	0x40013400
 8006648:	40014000 	.word	0x40014000
 800664c:	40015000 	.word	0x40015000
 8006650:	00010007 	.word	0x00010007

08006654 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e049      	b.n	80066fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d106      	bne.n	8006680 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f841 	bl	8006702 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	3304      	adds	r3, #4
 8006690:	4619      	mov	r1, r3
 8006692:	4610      	mov	r0, r2
 8006694:	f000 ff0a 	bl	80074ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006702:	b480      	push	{r7}
 8006704:	b083      	sub	sp, #12
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800670a:	bf00      	nop
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
	...

08006718 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d109      	bne.n	800673c <HAL_TIM_PWM_Start+0x24>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b01      	cmp	r3, #1
 8006732:	bf14      	ite	ne
 8006734:	2301      	movne	r3, #1
 8006736:	2300      	moveq	r3, #0
 8006738:	b2db      	uxtb	r3, r3
 800673a:	e03c      	b.n	80067b6 <HAL_TIM_PWM_Start+0x9e>
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	2b04      	cmp	r3, #4
 8006740:	d109      	bne.n	8006756 <HAL_TIM_PWM_Start+0x3e>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b01      	cmp	r3, #1
 800674c:	bf14      	ite	ne
 800674e:	2301      	movne	r3, #1
 8006750:	2300      	moveq	r3, #0
 8006752:	b2db      	uxtb	r3, r3
 8006754:	e02f      	b.n	80067b6 <HAL_TIM_PWM_Start+0x9e>
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	2b08      	cmp	r3, #8
 800675a:	d109      	bne.n	8006770 <HAL_TIM_PWM_Start+0x58>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b01      	cmp	r3, #1
 8006766:	bf14      	ite	ne
 8006768:	2301      	movne	r3, #1
 800676a:	2300      	moveq	r3, #0
 800676c:	b2db      	uxtb	r3, r3
 800676e:	e022      	b.n	80067b6 <HAL_TIM_PWM_Start+0x9e>
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2b0c      	cmp	r3, #12
 8006774:	d109      	bne.n	800678a <HAL_TIM_PWM_Start+0x72>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b01      	cmp	r3, #1
 8006780:	bf14      	ite	ne
 8006782:	2301      	movne	r3, #1
 8006784:	2300      	moveq	r3, #0
 8006786:	b2db      	uxtb	r3, r3
 8006788:	e015      	b.n	80067b6 <HAL_TIM_PWM_Start+0x9e>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b10      	cmp	r3, #16
 800678e:	d109      	bne.n	80067a4 <HAL_TIM_PWM_Start+0x8c>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b01      	cmp	r3, #1
 800679a:	bf14      	ite	ne
 800679c:	2301      	movne	r3, #1
 800679e:	2300      	moveq	r3, #0
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	e008      	b.n	80067b6 <HAL_TIM_PWM_Start+0x9e>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	bf14      	ite	ne
 80067b0:	2301      	movne	r3, #1
 80067b2:	2300      	moveq	r3, #0
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e0a6      	b.n	800690c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d104      	bne.n	80067ce <HAL_TIM_PWM_Start+0xb6>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2202      	movs	r2, #2
 80067c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067cc:	e023      	b.n	8006816 <HAL_TIM_PWM_Start+0xfe>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b04      	cmp	r3, #4
 80067d2:	d104      	bne.n	80067de <HAL_TIM_PWM_Start+0xc6>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067dc:	e01b      	b.n	8006816 <HAL_TIM_PWM_Start+0xfe>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d104      	bne.n	80067ee <HAL_TIM_PWM_Start+0xd6>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2202      	movs	r2, #2
 80067e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067ec:	e013      	b.n	8006816 <HAL_TIM_PWM_Start+0xfe>
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b0c      	cmp	r3, #12
 80067f2:	d104      	bne.n	80067fe <HAL_TIM_PWM_Start+0xe6>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067fc:	e00b      	b.n	8006816 <HAL_TIM_PWM_Start+0xfe>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2b10      	cmp	r3, #16
 8006802:	d104      	bne.n	800680e <HAL_TIM_PWM_Start+0xf6>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2202      	movs	r2, #2
 8006808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800680c:	e003      	b.n	8006816 <HAL_TIM_PWM_Start+0xfe>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2202      	movs	r2, #2
 8006812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2201      	movs	r2, #1
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	4618      	mov	r0, r3
 8006820:	f001 fab2 	bl	8007d88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a3a      	ldr	r2, [pc, #232]	; (8006914 <HAL_TIM_PWM_Start+0x1fc>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d018      	beq.n	8006860 <HAL_TIM_PWM_Start+0x148>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a39      	ldr	r2, [pc, #228]	; (8006918 <HAL_TIM_PWM_Start+0x200>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d013      	beq.n	8006860 <HAL_TIM_PWM_Start+0x148>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a37      	ldr	r2, [pc, #220]	; (800691c <HAL_TIM_PWM_Start+0x204>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00e      	beq.n	8006860 <HAL_TIM_PWM_Start+0x148>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a36      	ldr	r2, [pc, #216]	; (8006920 <HAL_TIM_PWM_Start+0x208>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d009      	beq.n	8006860 <HAL_TIM_PWM_Start+0x148>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a34      	ldr	r2, [pc, #208]	; (8006924 <HAL_TIM_PWM_Start+0x20c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d004      	beq.n	8006860 <HAL_TIM_PWM_Start+0x148>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a33      	ldr	r2, [pc, #204]	; (8006928 <HAL_TIM_PWM_Start+0x210>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d101      	bne.n	8006864 <HAL_TIM_PWM_Start+0x14c>
 8006860:	2301      	movs	r3, #1
 8006862:	e000      	b.n	8006866 <HAL_TIM_PWM_Start+0x14e>
 8006864:	2300      	movs	r3, #0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d007      	beq.n	800687a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006878:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a25      	ldr	r2, [pc, #148]	; (8006914 <HAL_TIM_PWM_Start+0x1fc>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d022      	beq.n	80068ca <HAL_TIM_PWM_Start+0x1b2>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800688c:	d01d      	beq.n	80068ca <HAL_TIM_PWM_Start+0x1b2>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a26      	ldr	r2, [pc, #152]	; (800692c <HAL_TIM_PWM_Start+0x214>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d018      	beq.n	80068ca <HAL_TIM_PWM_Start+0x1b2>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a24      	ldr	r2, [pc, #144]	; (8006930 <HAL_TIM_PWM_Start+0x218>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d013      	beq.n	80068ca <HAL_TIM_PWM_Start+0x1b2>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a23      	ldr	r2, [pc, #140]	; (8006934 <HAL_TIM_PWM_Start+0x21c>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d00e      	beq.n	80068ca <HAL_TIM_PWM_Start+0x1b2>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a19      	ldr	r2, [pc, #100]	; (8006918 <HAL_TIM_PWM_Start+0x200>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d009      	beq.n	80068ca <HAL_TIM_PWM_Start+0x1b2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a18      	ldr	r2, [pc, #96]	; (800691c <HAL_TIM_PWM_Start+0x204>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d004      	beq.n	80068ca <HAL_TIM_PWM_Start+0x1b2>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a18      	ldr	r2, [pc, #96]	; (8006928 <HAL_TIM_PWM_Start+0x210>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d115      	bne.n	80068f6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689a      	ldr	r2, [r3, #8]
 80068d0:	4b19      	ldr	r3, [pc, #100]	; (8006938 <HAL_TIM_PWM_Start+0x220>)
 80068d2:	4013      	ands	r3, r2
 80068d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2b06      	cmp	r3, #6
 80068da:	d015      	beq.n	8006908 <HAL_TIM_PWM_Start+0x1f0>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068e2:	d011      	beq.n	8006908 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f042 0201 	orr.w	r2, r2, #1
 80068f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068f4:	e008      	b.n	8006908 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0201 	orr.w	r2, r2, #1
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	e000      	b.n	800690a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006908:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	40012c00 	.word	0x40012c00
 8006918:	40013400 	.word	0x40013400
 800691c:	40014000 	.word	0x40014000
 8006920:	40014400 	.word	0x40014400
 8006924:	40014800 	.word	0x40014800
 8006928:	40015000 	.word	0x40015000
 800692c:	40000400 	.word	0x40000400
 8006930:	40000800 	.word	0x40000800
 8006934:	40000c00 	.word	0x40000c00
 8006938:	00010007 	.word	0x00010007

0800693c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2200      	movs	r2, #0
 800694c:	6839      	ldr	r1, [r7, #0]
 800694e:	4618      	mov	r0, r3
 8006950:	f001 fa1a 	bl	8007d88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a40      	ldr	r2, [pc, #256]	; (8006a5c <HAL_TIM_PWM_Stop+0x120>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d018      	beq.n	8006990 <HAL_TIM_PWM_Stop+0x54>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a3f      	ldr	r2, [pc, #252]	; (8006a60 <HAL_TIM_PWM_Stop+0x124>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d013      	beq.n	8006990 <HAL_TIM_PWM_Stop+0x54>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a3d      	ldr	r2, [pc, #244]	; (8006a64 <HAL_TIM_PWM_Stop+0x128>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d00e      	beq.n	8006990 <HAL_TIM_PWM_Stop+0x54>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a3c      	ldr	r2, [pc, #240]	; (8006a68 <HAL_TIM_PWM_Stop+0x12c>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d009      	beq.n	8006990 <HAL_TIM_PWM_Stop+0x54>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a3a      	ldr	r2, [pc, #232]	; (8006a6c <HAL_TIM_PWM_Stop+0x130>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d004      	beq.n	8006990 <HAL_TIM_PWM_Stop+0x54>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a39      	ldr	r2, [pc, #228]	; (8006a70 <HAL_TIM_PWM_Stop+0x134>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d101      	bne.n	8006994 <HAL_TIM_PWM_Stop+0x58>
 8006990:	2301      	movs	r3, #1
 8006992:	e000      	b.n	8006996 <HAL_TIM_PWM_Stop+0x5a>
 8006994:	2300      	movs	r3, #0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d017      	beq.n	80069ca <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6a1a      	ldr	r2, [r3, #32]
 80069a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80069a4:	4013      	ands	r3, r2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10f      	bne.n	80069ca <HAL_TIM_PWM_Stop+0x8e>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6a1a      	ldr	r2, [r3, #32]
 80069b0:	f244 4344 	movw	r3, #17476	; 0x4444
 80069b4:	4013      	ands	r3, r2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d107      	bne.n	80069ca <HAL_TIM_PWM_Stop+0x8e>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6a1a      	ldr	r2, [r3, #32]
 80069d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80069d4:	4013      	ands	r3, r2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10f      	bne.n	80069fa <HAL_TIM_PWM_Stop+0xbe>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6a1a      	ldr	r2, [r3, #32]
 80069e0:	f244 4344 	movw	r3, #17476	; 0x4444
 80069e4:	4013      	ands	r3, r2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d107      	bne.n	80069fa <HAL_TIM_PWM_Stop+0xbe>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 0201 	bic.w	r2, r2, #1
 80069f8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d104      	bne.n	8006a0a <HAL_TIM_PWM_Stop+0xce>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a08:	e023      	b.n	8006a52 <HAL_TIM_PWM_Stop+0x116>
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b04      	cmp	r3, #4
 8006a0e:	d104      	bne.n	8006a1a <HAL_TIM_PWM_Stop+0xde>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a18:	e01b      	b.n	8006a52 <HAL_TIM_PWM_Stop+0x116>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b08      	cmp	r3, #8
 8006a1e:	d104      	bne.n	8006a2a <HAL_TIM_PWM_Stop+0xee>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a28:	e013      	b.n	8006a52 <HAL_TIM_PWM_Stop+0x116>
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b0c      	cmp	r3, #12
 8006a2e:	d104      	bne.n	8006a3a <HAL_TIM_PWM_Stop+0xfe>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a38:	e00b      	b.n	8006a52 <HAL_TIM_PWM_Stop+0x116>
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2b10      	cmp	r3, #16
 8006a3e:	d104      	bne.n	8006a4a <HAL_TIM_PWM_Stop+0x10e>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a48:	e003      	b.n	8006a52 <HAL_TIM_PWM_Stop+0x116>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3708      	adds	r7, #8
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	40012c00 	.word	0x40012c00
 8006a60:	40013400 	.word	0x40013400
 8006a64:	40014000 	.word	0x40014000
 8006a68:	40014400 	.word	0x40014400
 8006a6c:	40014800 	.word	0x40014800
 8006a70:	40015000 	.word	0x40015000

08006a74 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e097      	b.n	8006bb8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d106      	bne.n	8006aa2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f7fb f96f 	bl	8001d80 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	6812      	ldr	r2, [r2, #0]
 8006ab4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006ab8:	f023 0307 	bic.w	r3, r3, #7
 8006abc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	4610      	mov	r0, r2
 8006aca:	f000 fcef 	bl	80074ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
 8006ae4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006af6:	f023 0303 	bic.w	r3, r3, #3
 8006afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	689a      	ldr	r2, [r3, #8]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	021b      	lsls	r3, r3, #8
 8006b06:	4313      	orrs	r3, r2
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006b14:	f023 030c 	bic.w	r3, r3, #12
 8006b18:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	021b      	lsls	r3, r3, #8
 8006b30:	4313      	orrs	r3, r2
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	011a      	lsls	r2, r3, #4
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	031b      	lsls	r3, r3, #12
 8006b44:	4313      	orrs	r3, r2
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006b52:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006b5a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	011b      	lsls	r3, r3, #4
 8006b66:	4313      	orrs	r3, r2
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3718      	adds	r7, #24
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bd0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006bd8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006be0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006be8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d110      	bne.n	8006c12 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d102      	bne.n	8006bfc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bf6:	7b7b      	ldrb	r3, [r7, #13]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d001      	beq.n	8006c00 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e089      	b.n	8006d14 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2202      	movs	r2, #2
 8006c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c10:	e031      	b.n	8006c76 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2b04      	cmp	r3, #4
 8006c16:	d110      	bne.n	8006c3a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c18:	7bbb      	ldrb	r3, [r7, #14]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d102      	bne.n	8006c24 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c1e:	7b3b      	ldrb	r3, [r7, #12]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d001      	beq.n	8006c28 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e075      	b.n	8006d14 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c38:	e01d      	b.n	8006c76 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d108      	bne.n	8006c52 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c40:	7bbb      	ldrb	r3, [r7, #14]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d105      	bne.n	8006c52 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c46:	7b7b      	ldrb	r3, [r7, #13]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d102      	bne.n	8006c52 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c4c:	7b3b      	ldrb	r3, [r7, #12]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d001      	beq.n	8006c56 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e05e      	b.n	8006d14 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2202      	movs	r2, #2
 8006c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2202      	movs	r2, #2
 8006c62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2202      	movs	r2, #2
 8006c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2202      	movs	r2, #2
 8006c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <HAL_TIM_Encoder_Start_IT+0xc4>
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d010      	beq.n	8006ca4 <HAL_TIM_Encoder_Start_IT+0xe4>
 8006c82:	e01f      	b.n	8006cc4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f001 f87b 	bl	8007d88 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68da      	ldr	r2, [r3, #12]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f042 0202 	orr.w	r2, r2, #2
 8006ca0:	60da      	str	r2, [r3, #12]
      break;
 8006ca2:	e02e      	b.n	8006d02 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	2104      	movs	r1, #4
 8006cac:	4618      	mov	r0, r3
 8006cae:	f001 f86b 	bl	8007d88 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68da      	ldr	r2, [r3, #12]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f042 0204 	orr.w	r2, r2, #4
 8006cc0:	60da      	str	r2, [r3, #12]
      break;
 8006cc2:	e01e      	b.n	8006d02 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	2100      	movs	r1, #0
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f001 f85b 	bl	8007d88 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	2104      	movs	r1, #4
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f001 f854 	bl	8007d88 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68da      	ldr	r2, [r3, #12]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f042 0202 	orr.w	r2, r2, #2
 8006cee:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68da      	ldr	r2, [r3, #12]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0204 	orr.w	r2, r2, #4
 8006cfe:	60da      	str	r2, [r3, #12]
      break;
 8006d00:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f042 0201 	orr.w	r2, r2, #1
 8006d10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d122      	bne.n	8006d78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f003 0302 	and.w	r3, r3, #2
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d11b      	bne.n	8006d78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f06f 0202 	mvn.w	r2, #2
 8006d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	f003 0303 	and.w	r3, r3, #3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7fb fb66 	bl	8002430 <HAL_TIM_IC_CaptureCallback>
 8006d64:	e005      	b.n	8006d72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 fb82 	bl	8007470 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fb89 	bl	8007484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	f003 0304 	and.w	r3, r3, #4
 8006d82:	2b04      	cmp	r3, #4
 8006d84:	d122      	bne.n	8006dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f003 0304 	and.w	r3, r3, #4
 8006d90:	2b04      	cmp	r3, #4
 8006d92:	d11b      	bne.n	8006dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f06f 0204 	mvn.w	r2, #4
 8006d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2202      	movs	r2, #2
 8006da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7fb fb3c 	bl	8002430 <HAL_TIM_IC_CaptureCallback>
 8006db8:	e005      	b.n	8006dc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fb58 	bl	8007470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fb5f 	bl	8007484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	f003 0308 	and.w	r3, r3, #8
 8006dd6:	2b08      	cmp	r3, #8
 8006dd8:	d122      	bne.n	8006e20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	f003 0308 	and.w	r3, r3, #8
 8006de4:	2b08      	cmp	r3, #8
 8006de6:	d11b      	bne.n	8006e20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f06f 0208 	mvn.w	r2, #8
 8006df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2204      	movs	r2, #4
 8006df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	f003 0303 	and.w	r3, r3, #3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7fb fb12 	bl	8002430 <HAL_TIM_IC_CaptureCallback>
 8006e0c:	e005      	b.n	8006e1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fb2e 	bl	8007470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fb35 	bl	8007484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	f003 0310 	and.w	r3, r3, #16
 8006e2a:	2b10      	cmp	r3, #16
 8006e2c:	d122      	bne.n	8006e74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	f003 0310 	and.w	r3, r3, #16
 8006e38:	2b10      	cmp	r3, #16
 8006e3a:	d11b      	bne.n	8006e74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f06f 0210 	mvn.w	r2, #16
 8006e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2208      	movs	r2, #8
 8006e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7fb fae8 	bl	8002430 <HAL_TIM_IC_CaptureCallback>
 8006e60:	e005      	b.n	8006e6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fb04 	bl	8007470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fb0b 	bl	8007484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d10e      	bne.n	8006ea0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d107      	bne.n	8006ea0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f06f 0201 	mvn.w	r2, #1
 8006e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7fa fbbc 	bl	8001618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eaa:	2b80      	cmp	r3, #128	; 0x80
 8006eac:	d10e      	bne.n	8006ecc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb8:	2b80      	cmp	r3, #128	; 0x80
 8006eba:	d107      	bne.n	8006ecc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f001 fa09 	bl	80082de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eda:	d10e      	bne.n	8006efa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee6:	2b80      	cmp	r3, #128	; 0x80
 8006ee8:	d107      	bne.n	8006efa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f001 f9fc 	bl	80082f2 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f04:	2b40      	cmp	r3, #64	; 0x40
 8006f06:	d10e      	bne.n	8006f26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f12:	2b40      	cmp	r3, #64	; 0x40
 8006f14:	d107      	bne.n	8006f26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fab9 	bl	8007498 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	f003 0320 	and.w	r3, r3, #32
 8006f30:	2b20      	cmp	r3, #32
 8006f32:	d10e      	bne.n	8006f52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	f003 0320 	and.w	r3, r3, #32
 8006f3e:	2b20      	cmp	r3, #32
 8006f40:	d107      	bne.n	8006f52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f06f 0220 	mvn.w	r2, #32
 8006f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f001 f9bc 	bl	80082ca <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f60:	d10f      	bne.n	8006f82 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f70:	d107      	bne.n	8006f82 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f001 f9c2 	bl	8008306 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f90:	d10f      	bne.n	8006fb2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fa0:	d107      	bne.n	8006fb2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f001 f9b4 	bl	800831a <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fc0:	d10f      	bne.n	8006fe2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fd0:	d107      	bne.n	8006fe2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f001 f9a6 	bl	800832e <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ff0:	d10f      	bne.n	8007012 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ffc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007000:	d107      	bne.n	8007012 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800700a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f001 f998 	bl	8008342 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007012:	bf00      	nop
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
	...

0800701c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007028:	2300      	movs	r3, #0
 800702a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007032:	2b01      	cmp	r3, #1
 8007034:	d101      	bne.n	800703a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007036:	2302      	movs	r3, #2
 8007038:	e0ff      	b.n	800723a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2b14      	cmp	r3, #20
 8007046:	f200 80f0 	bhi.w	800722a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800704a:	a201      	add	r2, pc, #4	; (adr r2, 8007050 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800704c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007050:	080070a5 	.word	0x080070a5
 8007054:	0800722b 	.word	0x0800722b
 8007058:	0800722b 	.word	0x0800722b
 800705c:	0800722b 	.word	0x0800722b
 8007060:	080070e5 	.word	0x080070e5
 8007064:	0800722b 	.word	0x0800722b
 8007068:	0800722b 	.word	0x0800722b
 800706c:	0800722b 	.word	0x0800722b
 8007070:	08007127 	.word	0x08007127
 8007074:	0800722b 	.word	0x0800722b
 8007078:	0800722b 	.word	0x0800722b
 800707c:	0800722b 	.word	0x0800722b
 8007080:	08007167 	.word	0x08007167
 8007084:	0800722b 	.word	0x0800722b
 8007088:	0800722b 	.word	0x0800722b
 800708c:	0800722b 	.word	0x0800722b
 8007090:	080071a9 	.word	0x080071a9
 8007094:	0800722b 	.word	0x0800722b
 8007098:	0800722b 	.word	0x0800722b
 800709c:	0800722b 	.word	0x0800722b
 80070a0:	080071e9 	.word	0x080071e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68b9      	ldr	r1, [r7, #8]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 faa6 	bl	80075fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	699a      	ldr	r2, [r3, #24]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f042 0208 	orr.w	r2, r2, #8
 80070be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699a      	ldr	r2, [r3, #24]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f022 0204 	bic.w	r2, r2, #4
 80070ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6999      	ldr	r1, [r3, #24]
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	691a      	ldr	r2, [r3, #16]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	619a      	str	r2, [r3, #24]
      break;
 80070e2:	e0a5      	b.n	8007230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68b9      	ldr	r1, [r7, #8]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 fb20 	bl	8007730 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	699a      	ldr	r2, [r3, #24]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	699a      	ldr	r2, [r3, #24]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800710e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6999      	ldr	r1, [r3, #24]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	021a      	lsls	r2, r3, #8
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	430a      	orrs	r2, r1
 8007122:	619a      	str	r2, [r3, #24]
      break;
 8007124:	e084      	b.n	8007230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68b9      	ldr	r1, [r7, #8]
 800712c:	4618      	mov	r0, r3
 800712e:	f000 fb93 	bl	8007858 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	69da      	ldr	r2, [r3, #28]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f042 0208 	orr.w	r2, r2, #8
 8007140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	69da      	ldr	r2, [r3, #28]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 0204 	bic.w	r2, r2, #4
 8007150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	69d9      	ldr	r1, [r3, #28]
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	691a      	ldr	r2, [r3, #16]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	430a      	orrs	r2, r1
 8007162:	61da      	str	r2, [r3, #28]
      break;
 8007164:	e064      	b.n	8007230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68b9      	ldr	r1, [r7, #8]
 800716c:	4618      	mov	r0, r3
 800716e:	f000 fc05 	bl	800797c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	69da      	ldr	r2, [r3, #28]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	69da      	ldr	r2, [r3, #28]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	69d9      	ldr	r1, [r3, #28]
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	021a      	lsls	r2, r3, #8
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	430a      	orrs	r2, r1
 80071a4:	61da      	str	r2, [r3, #28]
      break;
 80071a6:	e043      	b.n	8007230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68b9      	ldr	r1, [r7, #8]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 fc78 	bl	8007aa4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0208 	orr.w	r2, r2, #8
 80071c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f022 0204 	bic.w	r2, r2, #4
 80071d2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	691a      	ldr	r2, [r3, #16]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80071e6:	e023      	b.n	8007230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68b9      	ldr	r1, [r7, #8]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 fcc2 	bl	8007b78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007202:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007212:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	021a      	lsls	r2, r3, #8
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007228:	e002      	b.n	8007230 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	75fb      	strb	r3, [r7, #23]
      break;
 800722e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007238:	7dfb      	ldrb	r3, [r7, #23]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop

08007244 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800724e:	2300      	movs	r3, #0
 8007250:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007258:	2b01      	cmp	r3, #1
 800725a:	d101      	bne.n	8007260 <HAL_TIM_ConfigClockSource+0x1c>
 800725c:	2302      	movs	r3, #2
 800725e:	e0f6      	b.n	800744e <HAL_TIM_ConfigClockSource+0x20a>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800727e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800728a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a6f      	ldr	r2, [pc, #444]	; (8007458 <HAL_TIM_ConfigClockSource+0x214>)
 800729a:	4293      	cmp	r3, r2
 800729c:	f000 80c1 	beq.w	8007422 <HAL_TIM_ConfigClockSource+0x1de>
 80072a0:	4a6d      	ldr	r2, [pc, #436]	; (8007458 <HAL_TIM_ConfigClockSource+0x214>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	f200 80c6 	bhi.w	8007434 <HAL_TIM_ConfigClockSource+0x1f0>
 80072a8:	4a6c      	ldr	r2, [pc, #432]	; (800745c <HAL_TIM_ConfigClockSource+0x218>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	f000 80b9 	beq.w	8007422 <HAL_TIM_ConfigClockSource+0x1de>
 80072b0:	4a6a      	ldr	r2, [pc, #424]	; (800745c <HAL_TIM_ConfigClockSource+0x218>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	f200 80be 	bhi.w	8007434 <HAL_TIM_ConfigClockSource+0x1f0>
 80072b8:	4a69      	ldr	r2, [pc, #420]	; (8007460 <HAL_TIM_ConfigClockSource+0x21c>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	f000 80b1 	beq.w	8007422 <HAL_TIM_ConfigClockSource+0x1de>
 80072c0:	4a67      	ldr	r2, [pc, #412]	; (8007460 <HAL_TIM_ConfigClockSource+0x21c>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	f200 80b6 	bhi.w	8007434 <HAL_TIM_ConfigClockSource+0x1f0>
 80072c8:	4a66      	ldr	r2, [pc, #408]	; (8007464 <HAL_TIM_ConfigClockSource+0x220>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	f000 80a9 	beq.w	8007422 <HAL_TIM_ConfigClockSource+0x1de>
 80072d0:	4a64      	ldr	r2, [pc, #400]	; (8007464 <HAL_TIM_ConfigClockSource+0x220>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	f200 80ae 	bhi.w	8007434 <HAL_TIM_ConfigClockSource+0x1f0>
 80072d8:	4a63      	ldr	r2, [pc, #396]	; (8007468 <HAL_TIM_ConfigClockSource+0x224>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	f000 80a1 	beq.w	8007422 <HAL_TIM_ConfigClockSource+0x1de>
 80072e0:	4a61      	ldr	r2, [pc, #388]	; (8007468 <HAL_TIM_ConfigClockSource+0x224>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	f200 80a6 	bhi.w	8007434 <HAL_TIM_ConfigClockSource+0x1f0>
 80072e8:	4a60      	ldr	r2, [pc, #384]	; (800746c <HAL_TIM_ConfigClockSource+0x228>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	f000 8099 	beq.w	8007422 <HAL_TIM_ConfigClockSource+0x1de>
 80072f0:	4a5e      	ldr	r2, [pc, #376]	; (800746c <HAL_TIM_ConfigClockSource+0x228>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	f200 809e 	bhi.w	8007434 <HAL_TIM_ConfigClockSource+0x1f0>
 80072f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80072fc:	f000 8091 	beq.w	8007422 <HAL_TIM_ConfigClockSource+0x1de>
 8007300:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007304:	f200 8096 	bhi.w	8007434 <HAL_TIM_ConfigClockSource+0x1f0>
 8007308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800730c:	f000 8089 	beq.w	8007422 <HAL_TIM_ConfigClockSource+0x1de>
 8007310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007314:	f200 808e 	bhi.w	8007434 <HAL_TIM_ConfigClockSource+0x1f0>
 8007318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800731c:	d03e      	beq.n	800739c <HAL_TIM_ConfigClockSource+0x158>
 800731e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007322:	f200 8087 	bhi.w	8007434 <HAL_TIM_ConfigClockSource+0x1f0>
 8007326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800732a:	f000 8086 	beq.w	800743a <HAL_TIM_ConfigClockSource+0x1f6>
 800732e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007332:	d87f      	bhi.n	8007434 <HAL_TIM_ConfigClockSource+0x1f0>
 8007334:	2b70      	cmp	r3, #112	; 0x70
 8007336:	d01a      	beq.n	800736e <HAL_TIM_ConfigClockSource+0x12a>
 8007338:	2b70      	cmp	r3, #112	; 0x70
 800733a:	d87b      	bhi.n	8007434 <HAL_TIM_ConfigClockSource+0x1f0>
 800733c:	2b60      	cmp	r3, #96	; 0x60
 800733e:	d050      	beq.n	80073e2 <HAL_TIM_ConfigClockSource+0x19e>
 8007340:	2b60      	cmp	r3, #96	; 0x60
 8007342:	d877      	bhi.n	8007434 <HAL_TIM_ConfigClockSource+0x1f0>
 8007344:	2b50      	cmp	r3, #80	; 0x50
 8007346:	d03c      	beq.n	80073c2 <HAL_TIM_ConfigClockSource+0x17e>
 8007348:	2b50      	cmp	r3, #80	; 0x50
 800734a:	d873      	bhi.n	8007434 <HAL_TIM_ConfigClockSource+0x1f0>
 800734c:	2b40      	cmp	r3, #64	; 0x40
 800734e:	d058      	beq.n	8007402 <HAL_TIM_ConfigClockSource+0x1be>
 8007350:	2b40      	cmp	r3, #64	; 0x40
 8007352:	d86f      	bhi.n	8007434 <HAL_TIM_ConfigClockSource+0x1f0>
 8007354:	2b30      	cmp	r3, #48	; 0x30
 8007356:	d064      	beq.n	8007422 <HAL_TIM_ConfigClockSource+0x1de>
 8007358:	2b30      	cmp	r3, #48	; 0x30
 800735a:	d86b      	bhi.n	8007434 <HAL_TIM_ConfigClockSource+0x1f0>
 800735c:	2b20      	cmp	r3, #32
 800735e:	d060      	beq.n	8007422 <HAL_TIM_ConfigClockSource+0x1de>
 8007360:	2b20      	cmp	r3, #32
 8007362:	d867      	bhi.n	8007434 <HAL_TIM_ConfigClockSource+0x1f0>
 8007364:	2b00      	cmp	r3, #0
 8007366:	d05c      	beq.n	8007422 <HAL_TIM_ConfigClockSource+0x1de>
 8007368:	2b10      	cmp	r3, #16
 800736a:	d05a      	beq.n	8007422 <HAL_TIM_ConfigClockSource+0x1de>
 800736c:	e062      	b.n	8007434 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6818      	ldr	r0, [r3, #0]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	6899      	ldr	r1, [r3, #8]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	685a      	ldr	r2, [r3, #4]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	f000 fce3 	bl	8007d48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007390:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	609a      	str	r2, [r3, #8]
      break;
 800739a:	e04f      	b.n	800743c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6818      	ldr	r0, [r3, #0]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	6899      	ldr	r1, [r3, #8]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	f000 fccc 	bl	8007d48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	689a      	ldr	r2, [r3, #8]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073be:	609a      	str	r2, [r3, #8]
      break;
 80073c0:	e03c      	b.n	800743c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6818      	ldr	r0, [r3, #0]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	6859      	ldr	r1, [r3, #4]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	461a      	mov	r2, r3
 80073d0:	f000 fc3e 	bl	8007c50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2150      	movs	r1, #80	; 0x50
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 fc97 	bl	8007d0e <TIM_ITRx_SetConfig>
      break;
 80073e0:	e02c      	b.n	800743c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6818      	ldr	r0, [r3, #0]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	6859      	ldr	r1, [r3, #4]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	461a      	mov	r2, r3
 80073f0:	f000 fc5d 	bl	8007cae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2160      	movs	r1, #96	; 0x60
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 fc87 	bl	8007d0e <TIM_ITRx_SetConfig>
      break;
 8007400:	e01c      	b.n	800743c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6818      	ldr	r0, [r3, #0]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	6859      	ldr	r1, [r3, #4]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	461a      	mov	r2, r3
 8007410:	f000 fc1e 	bl	8007c50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2140      	movs	r1, #64	; 0x40
 800741a:	4618      	mov	r0, r3
 800741c:	f000 fc77 	bl	8007d0e <TIM_ITRx_SetConfig>
      break;
 8007420:	e00c      	b.n	800743c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4619      	mov	r1, r3
 800742c:	4610      	mov	r0, r2
 800742e:	f000 fc6e 	bl	8007d0e <TIM_ITRx_SetConfig>
      break;
 8007432:	e003      	b.n	800743c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	73fb      	strb	r3, [r7, #15]
      break;
 8007438:	e000      	b.n	800743c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800743a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800744c:	7bfb      	ldrb	r3, [r7, #15]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	00100070 	.word	0x00100070
 800745c:	00100060 	.word	0x00100060
 8007460:	00100050 	.word	0x00100050
 8007464:	00100040 	.word	0x00100040
 8007468:	00100030 	.word	0x00100030
 800746c:	00100020 	.word	0x00100020

08007470 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a46      	ldr	r2, [pc, #280]	; (80075d8 <TIM_Base_SetConfig+0x12c>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d017      	beq.n	80074f4 <TIM_Base_SetConfig+0x48>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ca:	d013      	beq.n	80074f4 <TIM_Base_SetConfig+0x48>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a43      	ldr	r2, [pc, #268]	; (80075dc <TIM_Base_SetConfig+0x130>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d00f      	beq.n	80074f4 <TIM_Base_SetConfig+0x48>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a42      	ldr	r2, [pc, #264]	; (80075e0 <TIM_Base_SetConfig+0x134>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d00b      	beq.n	80074f4 <TIM_Base_SetConfig+0x48>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a41      	ldr	r2, [pc, #260]	; (80075e4 <TIM_Base_SetConfig+0x138>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d007      	beq.n	80074f4 <TIM_Base_SetConfig+0x48>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a40      	ldr	r2, [pc, #256]	; (80075e8 <TIM_Base_SetConfig+0x13c>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d003      	beq.n	80074f4 <TIM_Base_SetConfig+0x48>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a3f      	ldr	r2, [pc, #252]	; (80075ec <TIM_Base_SetConfig+0x140>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d108      	bne.n	8007506 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	4313      	orrs	r3, r2
 8007504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a33      	ldr	r2, [pc, #204]	; (80075d8 <TIM_Base_SetConfig+0x12c>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d023      	beq.n	8007556 <TIM_Base_SetConfig+0xaa>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007514:	d01f      	beq.n	8007556 <TIM_Base_SetConfig+0xaa>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a30      	ldr	r2, [pc, #192]	; (80075dc <TIM_Base_SetConfig+0x130>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d01b      	beq.n	8007556 <TIM_Base_SetConfig+0xaa>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a2f      	ldr	r2, [pc, #188]	; (80075e0 <TIM_Base_SetConfig+0x134>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d017      	beq.n	8007556 <TIM_Base_SetConfig+0xaa>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a2e      	ldr	r2, [pc, #184]	; (80075e4 <TIM_Base_SetConfig+0x138>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d013      	beq.n	8007556 <TIM_Base_SetConfig+0xaa>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a2d      	ldr	r2, [pc, #180]	; (80075e8 <TIM_Base_SetConfig+0x13c>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d00f      	beq.n	8007556 <TIM_Base_SetConfig+0xaa>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a2d      	ldr	r2, [pc, #180]	; (80075f0 <TIM_Base_SetConfig+0x144>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d00b      	beq.n	8007556 <TIM_Base_SetConfig+0xaa>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a2c      	ldr	r2, [pc, #176]	; (80075f4 <TIM_Base_SetConfig+0x148>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d007      	beq.n	8007556 <TIM_Base_SetConfig+0xaa>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a2b      	ldr	r2, [pc, #172]	; (80075f8 <TIM_Base_SetConfig+0x14c>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d003      	beq.n	8007556 <TIM_Base_SetConfig+0xaa>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a26      	ldr	r2, [pc, #152]	; (80075ec <TIM_Base_SetConfig+0x140>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d108      	bne.n	8007568 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800755c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	4313      	orrs	r3, r2
 8007566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	4313      	orrs	r3, r2
 8007574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	689a      	ldr	r2, [r3, #8]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a12      	ldr	r2, [pc, #72]	; (80075d8 <TIM_Base_SetConfig+0x12c>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d013      	beq.n	80075bc <TIM_Base_SetConfig+0x110>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a14      	ldr	r2, [pc, #80]	; (80075e8 <TIM_Base_SetConfig+0x13c>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d00f      	beq.n	80075bc <TIM_Base_SetConfig+0x110>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a14      	ldr	r2, [pc, #80]	; (80075f0 <TIM_Base_SetConfig+0x144>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d00b      	beq.n	80075bc <TIM_Base_SetConfig+0x110>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a13      	ldr	r2, [pc, #76]	; (80075f4 <TIM_Base_SetConfig+0x148>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d007      	beq.n	80075bc <TIM_Base_SetConfig+0x110>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a12      	ldr	r2, [pc, #72]	; (80075f8 <TIM_Base_SetConfig+0x14c>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d003      	beq.n	80075bc <TIM_Base_SetConfig+0x110>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a0d      	ldr	r2, [pc, #52]	; (80075ec <TIM_Base_SetConfig+0x140>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d103      	bne.n	80075c4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	691a      	ldr	r2, [r3, #16]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	615a      	str	r2, [r3, #20]
}
 80075ca:	bf00      	nop
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	40012c00 	.word	0x40012c00
 80075dc:	40000400 	.word	0x40000400
 80075e0:	40000800 	.word	0x40000800
 80075e4:	40000c00 	.word	0x40000c00
 80075e8:	40013400 	.word	0x40013400
 80075ec:	40015000 	.word	0x40015000
 80075f0:	40014000 	.word	0x40014000
 80075f4:	40014400 	.word	0x40014400
 80075f8:	40014800 	.word	0x40014800

080075fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b087      	sub	sp, #28
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	f023 0201 	bic.w	r2, r3, #1
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800762a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800762e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f023 0303 	bic.w	r3, r3, #3
 8007636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f023 0302 	bic.w	r3, r3, #2
 8007648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	4313      	orrs	r3, r2
 8007652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a30      	ldr	r2, [pc, #192]	; (8007718 <TIM_OC1_SetConfig+0x11c>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d013      	beq.n	8007684 <TIM_OC1_SetConfig+0x88>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a2f      	ldr	r2, [pc, #188]	; (800771c <TIM_OC1_SetConfig+0x120>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d00f      	beq.n	8007684 <TIM_OC1_SetConfig+0x88>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a2e      	ldr	r2, [pc, #184]	; (8007720 <TIM_OC1_SetConfig+0x124>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d00b      	beq.n	8007684 <TIM_OC1_SetConfig+0x88>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a2d      	ldr	r2, [pc, #180]	; (8007724 <TIM_OC1_SetConfig+0x128>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d007      	beq.n	8007684 <TIM_OC1_SetConfig+0x88>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a2c      	ldr	r2, [pc, #176]	; (8007728 <TIM_OC1_SetConfig+0x12c>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d003      	beq.n	8007684 <TIM_OC1_SetConfig+0x88>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a2b      	ldr	r2, [pc, #172]	; (800772c <TIM_OC1_SetConfig+0x130>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d10c      	bne.n	800769e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f023 0308 	bic.w	r3, r3, #8
 800768a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	4313      	orrs	r3, r2
 8007694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f023 0304 	bic.w	r3, r3, #4
 800769c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a1d      	ldr	r2, [pc, #116]	; (8007718 <TIM_OC1_SetConfig+0x11c>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d013      	beq.n	80076ce <TIM_OC1_SetConfig+0xd2>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a1c      	ldr	r2, [pc, #112]	; (800771c <TIM_OC1_SetConfig+0x120>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d00f      	beq.n	80076ce <TIM_OC1_SetConfig+0xd2>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a1b      	ldr	r2, [pc, #108]	; (8007720 <TIM_OC1_SetConfig+0x124>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d00b      	beq.n	80076ce <TIM_OC1_SetConfig+0xd2>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a1a      	ldr	r2, [pc, #104]	; (8007724 <TIM_OC1_SetConfig+0x128>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d007      	beq.n	80076ce <TIM_OC1_SetConfig+0xd2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a19      	ldr	r2, [pc, #100]	; (8007728 <TIM_OC1_SetConfig+0x12c>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d003      	beq.n	80076ce <TIM_OC1_SetConfig+0xd2>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a18      	ldr	r2, [pc, #96]	; (800772c <TIM_OC1_SetConfig+0x130>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d111      	bne.n	80076f2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	621a      	str	r2, [r3, #32]
}
 800770c:	bf00      	nop
 800770e:	371c      	adds	r7, #28
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr
 8007718:	40012c00 	.word	0x40012c00
 800771c:	40013400 	.word	0x40013400
 8007720:	40014000 	.word	0x40014000
 8007724:	40014400 	.word	0x40014400
 8007728:	40014800 	.word	0x40014800
 800772c:	40015000 	.word	0x40015000

08007730 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007730:	b480      	push	{r7}
 8007732:	b087      	sub	sp, #28
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	f023 0210 	bic.w	r2, r3, #16
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800775e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800776a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	021b      	lsls	r3, r3, #8
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	4313      	orrs	r3, r2
 8007776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	f023 0320 	bic.w	r3, r3, #32
 800777e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	011b      	lsls	r3, r3, #4
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	4313      	orrs	r3, r2
 800778a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4a2c      	ldr	r2, [pc, #176]	; (8007840 <TIM_OC2_SetConfig+0x110>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d007      	beq.n	80077a4 <TIM_OC2_SetConfig+0x74>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a2b      	ldr	r2, [pc, #172]	; (8007844 <TIM_OC2_SetConfig+0x114>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d003      	beq.n	80077a4 <TIM_OC2_SetConfig+0x74>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a2a      	ldr	r2, [pc, #168]	; (8007848 <TIM_OC2_SetConfig+0x118>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d10d      	bne.n	80077c0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	011b      	lsls	r3, r3, #4
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a1f      	ldr	r2, [pc, #124]	; (8007840 <TIM_OC2_SetConfig+0x110>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d013      	beq.n	80077f0 <TIM_OC2_SetConfig+0xc0>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a1e      	ldr	r2, [pc, #120]	; (8007844 <TIM_OC2_SetConfig+0x114>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d00f      	beq.n	80077f0 <TIM_OC2_SetConfig+0xc0>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a1e      	ldr	r2, [pc, #120]	; (800784c <TIM_OC2_SetConfig+0x11c>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d00b      	beq.n	80077f0 <TIM_OC2_SetConfig+0xc0>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a1d      	ldr	r2, [pc, #116]	; (8007850 <TIM_OC2_SetConfig+0x120>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d007      	beq.n	80077f0 <TIM_OC2_SetConfig+0xc0>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a1c      	ldr	r2, [pc, #112]	; (8007854 <TIM_OC2_SetConfig+0x124>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d003      	beq.n	80077f0 <TIM_OC2_SetConfig+0xc0>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a17      	ldr	r2, [pc, #92]	; (8007848 <TIM_OC2_SetConfig+0x118>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d113      	bne.n	8007818 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	695b      	ldr	r3, [r3, #20]
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	4313      	orrs	r3, r2
 800780a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	693a      	ldr	r2, [r7, #16]
 8007814:	4313      	orrs	r3, r2
 8007816:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	621a      	str	r2, [r3, #32]
}
 8007832:	bf00      	nop
 8007834:	371c      	adds	r7, #28
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	40012c00 	.word	0x40012c00
 8007844:	40013400 	.word	0x40013400
 8007848:	40015000 	.word	0x40015000
 800784c:	40014000 	.word	0x40014000
 8007850:	40014400 	.word	0x40014400
 8007854:	40014800 	.word	0x40014800

08007858 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007858:	b480      	push	{r7}
 800785a:	b087      	sub	sp, #28
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800788a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f023 0303 	bic.w	r3, r3, #3
 8007892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	4313      	orrs	r3, r2
 800789c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	021b      	lsls	r3, r3, #8
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a2b      	ldr	r2, [pc, #172]	; (8007964 <TIM_OC3_SetConfig+0x10c>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d007      	beq.n	80078ca <TIM_OC3_SetConfig+0x72>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a2a      	ldr	r2, [pc, #168]	; (8007968 <TIM_OC3_SetConfig+0x110>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d003      	beq.n	80078ca <TIM_OC3_SetConfig+0x72>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a29      	ldr	r2, [pc, #164]	; (800796c <TIM_OC3_SetConfig+0x114>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d10d      	bne.n	80078e6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	021b      	lsls	r3, r3, #8
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	4313      	orrs	r3, r2
 80078dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a1e      	ldr	r2, [pc, #120]	; (8007964 <TIM_OC3_SetConfig+0x10c>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d013      	beq.n	8007916 <TIM_OC3_SetConfig+0xbe>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a1d      	ldr	r2, [pc, #116]	; (8007968 <TIM_OC3_SetConfig+0x110>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d00f      	beq.n	8007916 <TIM_OC3_SetConfig+0xbe>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a1d      	ldr	r2, [pc, #116]	; (8007970 <TIM_OC3_SetConfig+0x118>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d00b      	beq.n	8007916 <TIM_OC3_SetConfig+0xbe>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a1c      	ldr	r2, [pc, #112]	; (8007974 <TIM_OC3_SetConfig+0x11c>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d007      	beq.n	8007916 <TIM_OC3_SetConfig+0xbe>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a1b      	ldr	r2, [pc, #108]	; (8007978 <TIM_OC3_SetConfig+0x120>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d003      	beq.n	8007916 <TIM_OC3_SetConfig+0xbe>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a16      	ldr	r2, [pc, #88]	; (800796c <TIM_OC3_SetConfig+0x114>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d113      	bne.n	800793e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800791c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	011b      	lsls	r3, r3, #4
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	4313      	orrs	r3, r2
 8007930:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	011b      	lsls	r3, r3, #4
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	4313      	orrs	r3, r2
 800793c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	685a      	ldr	r2, [r3, #4]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	621a      	str	r2, [r3, #32]
}
 8007958:	bf00      	nop
 800795a:	371c      	adds	r7, #28
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	40012c00 	.word	0x40012c00
 8007968:	40013400 	.word	0x40013400
 800796c:	40015000 	.word	0x40015000
 8007970:	40014000 	.word	0x40014000
 8007974:	40014400 	.word	0x40014400
 8007978:	40014800 	.word	0x40014800

0800797c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800797c:	b480      	push	{r7}
 800797e:	b087      	sub	sp, #28
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a1b      	ldr	r3, [r3, #32]
 800798a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	021b      	lsls	r3, r3, #8
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	031b      	lsls	r3, r3, #12
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a2c      	ldr	r2, [pc, #176]	; (8007a8c <TIM_OC4_SetConfig+0x110>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d007      	beq.n	80079f0 <TIM_OC4_SetConfig+0x74>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a2b      	ldr	r2, [pc, #172]	; (8007a90 <TIM_OC4_SetConfig+0x114>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d003      	beq.n	80079f0 <TIM_OC4_SetConfig+0x74>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a2a      	ldr	r2, [pc, #168]	; (8007a94 <TIM_OC4_SetConfig+0x118>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d10d      	bne.n	8007a0c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80079f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	031b      	lsls	r3, r3, #12
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a1f      	ldr	r2, [pc, #124]	; (8007a8c <TIM_OC4_SetConfig+0x110>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d013      	beq.n	8007a3c <TIM_OC4_SetConfig+0xc0>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a1e      	ldr	r2, [pc, #120]	; (8007a90 <TIM_OC4_SetConfig+0x114>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d00f      	beq.n	8007a3c <TIM_OC4_SetConfig+0xc0>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a1e      	ldr	r2, [pc, #120]	; (8007a98 <TIM_OC4_SetConfig+0x11c>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d00b      	beq.n	8007a3c <TIM_OC4_SetConfig+0xc0>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a1d      	ldr	r2, [pc, #116]	; (8007a9c <TIM_OC4_SetConfig+0x120>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d007      	beq.n	8007a3c <TIM_OC4_SetConfig+0xc0>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a1c      	ldr	r2, [pc, #112]	; (8007aa0 <TIM_OC4_SetConfig+0x124>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d003      	beq.n	8007a3c <TIM_OC4_SetConfig+0xc0>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a17      	ldr	r2, [pc, #92]	; (8007a94 <TIM_OC4_SetConfig+0x118>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d113      	bne.n	8007a64 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a42:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a4a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	695b      	ldr	r3, [r3, #20]
 8007a50:	019b      	lsls	r3, r3, #6
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	019b      	lsls	r3, r3, #6
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	693a      	ldr	r2, [r7, #16]
 8007a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	685a      	ldr	r2, [r3, #4]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	621a      	str	r2, [r3, #32]
}
 8007a7e:	bf00      	nop
 8007a80:	371c      	adds	r7, #28
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	40012c00 	.word	0x40012c00
 8007a90:	40013400 	.word	0x40013400
 8007a94:	40015000 	.word	0x40015000
 8007a98:	40014000 	.word	0x40014000
 8007a9c:	40014400 	.word	0x40014400
 8007aa0:	40014800 	.word	0x40014800

08007aa4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b087      	sub	sp, #28
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a1b      	ldr	r3, [r3, #32]
 8007ab2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a1b      	ldr	r3, [r3, #32]
 8007abe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007ae8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	041b      	lsls	r3, r3, #16
 8007af0:	693a      	ldr	r2, [r7, #16]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a19      	ldr	r2, [pc, #100]	; (8007b60 <TIM_OC5_SetConfig+0xbc>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d013      	beq.n	8007b26 <TIM_OC5_SetConfig+0x82>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a18      	ldr	r2, [pc, #96]	; (8007b64 <TIM_OC5_SetConfig+0xc0>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d00f      	beq.n	8007b26 <TIM_OC5_SetConfig+0x82>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a17      	ldr	r2, [pc, #92]	; (8007b68 <TIM_OC5_SetConfig+0xc4>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d00b      	beq.n	8007b26 <TIM_OC5_SetConfig+0x82>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a16      	ldr	r2, [pc, #88]	; (8007b6c <TIM_OC5_SetConfig+0xc8>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d007      	beq.n	8007b26 <TIM_OC5_SetConfig+0x82>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a15      	ldr	r2, [pc, #84]	; (8007b70 <TIM_OC5_SetConfig+0xcc>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d003      	beq.n	8007b26 <TIM_OC5_SetConfig+0x82>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a14      	ldr	r2, [pc, #80]	; (8007b74 <TIM_OC5_SetConfig+0xd0>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d109      	bne.n	8007b3a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	021b      	lsls	r3, r3, #8
 8007b34:	697a      	ldr	r2, [r7, #20]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	685a      	ldr	r2, [r3, #4]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	621a      	str	r2, [r3, #32]
}
 8007b54:	bf00      	nop
 8007b56:	371c      	adds	r7, #28
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr
 8007b60:	40012c00 	.word	0x40012c00
 8007b64:	40013400 	.word	0x40013400
 8007b68:	40014000 	.word	0x40014000
 8007b6c:	40014400 	.word	0x40014400
 8007b70:	40014800 	.word	0x40014800
 8007b74:	40015000 	.word	0x40015000

08007b78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b087      	sub	sp, #28
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	021b      	lsls	r3, r3, #8
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	051b      	lsls	r3, r3, #20
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a1a      	ldr	r2, [pc, #104]	; (8007c38 <TIM_OC6_SetConfig+0xc0>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d013      	beq.n	8007bfc <TIM_OC6_SetConfig+0x84>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a19      	ldr	r2, [pc, #100]	; (8007c3c <TIM_OC6_SetConfig+0xc4>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d00f      	beq.n	8007bfc <TIM_OC6_SetConfig+0x84>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a18      	ldr	r2, [pc, #96]	; (8007c40 <TIM_OC6_SetConfig+0xc8>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d00b      	beq.n	8007bfc <TIM_OC6_SetConfig+0x84>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a17      	ldr	r2, [pc, #92]	; (8007c44 <TIM_OC6_SetConfig+0xcc>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d007      	beq.n	8007bfc <TIM_OC6_SetConfig+0x84>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a16      	ldr	r2, [pc, #88]	; (8007c48 <TIM_OC6_SetConfig+0xd0>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d003      	beq.n	8007bfc <TIM_OC6_SetConfig+0x84>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a15      	ldr	r2, [pc, #84]	; (8007c4c <TIM_OC6_SetConfig+0xd4>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d109      	bne.n	8007c10 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	695b      	ldr	r3, [r3, #20]
 8007c08:	029b      	lsls	r3, r3, #10
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	621a      	str	r2, [r3, #32]
}
 8007c2a:	bf00      	nop
 8007c2c:	371c      	adds	r7, #28
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	40012c00 	.word	0x40012c00
 8007c3c:	40013400 	.word	0x40013400
 8007c40:	40014000 	.word	0x40014000
 8007c44:	40014400 	.word	0x40014400
 8007c48:	40014800 	.word	0x40014800
 8007c4c:	40015000 	.word	0x40015000

08007c50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b087      	sub	sp, #28
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6a1b      	ldr	r3, [r3, #32]
 8007c60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6a1b      	ldr	r3, [r3, #32]
 8007c66:	f023 0201 	bic.w	r2, r3, #1
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	011b      	lsls	r3, r3, #4
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f023 030a 	bic.w	r3, r3, #10
 8007c8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	621a      	str	r2, [r3, #32]
}
 8007ca2:	bf00      	nop
 8007ca4:	371c      	adds	r7, #28
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b087      	sub	sp, #28
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	60f8      	str	r0, [r7, #12]
 8007cb6:	60b9      	str	r1, [r7, #8]
 8007cb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	f023 0210 	bic.w	r2, r3, #16
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6a1b      	ldr	r3, [r3, #32]
 8007cd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	031b      	lsls	r3, r3, #12
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007cea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	011b      	lsls	r3, r3, #4
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	621a      	str	r2, [r3, #32]
}
 8007d02:	bf00      	nop
 8007d04:	371c      	adds	r7, #28
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b085      	sub	sp, #20
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	f043 0307 	orr.w	r3, r3, #7
 8007d34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	609a      	str	r2, [r3, #8]
}
 8007d3c:	bf00      	nop
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b087      	sub	sp, #28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
 8007d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	021a      	lsls	r2, r3, #8
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	697a      	ldr	r2, [r7, #20]
 8007d7a:	609a      	str	r2, [r3, #8]
}
 8007d7c:	bf00      	nop
 8007d7e:	371c      	adds	r7, #28
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	f003 031f 	and.w	r3, r3, #31
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007da0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6a1a      	ldr	r2, [r3, #32]
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	43db      	mvns	r3, r3
 8007daa:	401a      	ands	r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6a1a      	ldr	r2, [r3, #32]
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	f003 031f 	and.w	r3, r3, #31
 8007dba:	6879      	ldr	r1, [r7, #4]
 8007dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8007dc0:	431a      	orrs	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	621a      	str	r2, [r3, #32]
}
 8007dc6:	bf00      	nop
 8007dc8:	371c      	adds	r7, #28
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
	...

08007dd4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d109      	bne.n	8007df8 <HAL_TIMEx_PWMN_Start+0x24>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	bf14      	ite	ne
 8007df0:	2301      	movne	r3, #1
 8007df2:	2300      	moveq	r3, #0
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	e022      	b.n	8007e3e <HAL_TIMEx_PWMN_Start+0x6a>
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	2b04      	cmp	r3, #4
 8007dfc:	d109      	bne.n	8007e12 <HAL_TIMEx_PWMN_Start+0x3e>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	bf14      	ite	ne
 8007e0a:	2301      	movne	r3, #1
 8007e0c:	2300      	moveq	r3, #0
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	e015      	b.n	8007e3e <HAL_TIMEx_PWMN_Start+0x6a>
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	2b08      	cmp	r3, #8
 8007e16:	d109      	bne.n	8007e2c <HAL_TIMEx_PWMN_Start+0x58>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	bf14      	ite	ne
 8007e24:	2301      	movne	r3, #1
 8007e26:	2300      	moveq	r3, #0
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	e008      	b.n	8007e3e <HAL_TIMEx_PWMN_Start+0x6a>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	bf14      	ite	ne
 8007e38:	2301      	movne	r3, #1
 8007e3a:	2300      	moveq	r3, #0
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e073      	b.n	8007f2e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d104      	bne.n	8007e56 <HAL_TIMEx_PWMN_Start+0x82>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e54:	e013      	b.n	8007e7e <HAL_TIMEx_PWMN_Start+0xaa>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b04      	cmp	r3, #4
 8007e5a:	d104      	bne.n	8007e66 <HAL_TIMEx_PWMN_Start+0x92>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e64:	e00b      	b.n	8007e7e <HAL_TIMEx_PWMN_Start+0xaa>
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b08      	cmp	r3, #8
 8007e6a:	d104      	bne.n	8007e76 <HAL_TIMEx_PWMN_Start+0xa2>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e74:	e003      	b.n	8007e7e <HAL_TIMEx_PWMN_Start+0xaa>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2202      	movs	r2, #2
 8007e7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2204      	movs	r2, #4
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 fa65 	bl	8008356 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a25      	ldr	r2, [pc, #148]	; (8007f38 <HAL_TIMEx_PWMN_Start+0x164>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d022      	beq.n	8007eec <HAL_TIMEx_PWMN_Start+0x118>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eae:	d01d      	beq.n	8007eec <HAL_TIMEx_PWMN_Start+0x118>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a21      	ldr	r2, [pc, #132]	; (8007f3c <HAL_TIMEx_PWMN_Start+0x168>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d018      	beq.n	8007eec <HAL_TIMEx_PWMN_Start+0x118>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a20      	ldr	r2, [pc, #128]	; (8007f40 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d013      	beq.n	8007eec <HAL_TIMEx_PWMN_Start+0x118>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a1e      	ldr	r2, [pc, #120]	; (8007f44 <HAL_TIMEx_PWMN_Start+0x170>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d00e      	beq.n	8007eec <HAL_TIMEx_PWMN_Start+0x118>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a1d      	ldr	r2, [pc, #116]	; (8007f48 <HAL_TIMEx_PWMN_Start+0x174>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d009      	beq.n	8007eec <HAL_TIMEx_PWMN_Start+0x118>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a1b      	ldr	r2, [pc, #108]	; (8007f4c <HAL_TIMEx_PWMN_Start+0x178>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d004      	beq.n	8007eec <HAL_TIMEx_PWMN_Start+0x118>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a1a      	ldr	r2, [pc, #104]	; (8007f50 <HAL_TIMEx_PWMN_Start+0x17c>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d115      	bne.n	8007f18 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	689a      	ldr	r2, [r3, #8]
 8007ef2:	4b18      	ldr	r3, [pc, #96]	; (8007f54 <HAL_TIMEx_PWMN_Start+0x180>)
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2b06      	cmp	r3, #6
 8007efc:	d015      	beq.n	8007f2a <HAL_TIMEx_PWMN_Start+0x156>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f04:	d011      	beq.n	8007f2a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f042 0201 	orr.w	r2, r2, #1
 8007f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f16:	e008      	b.n	8007f2a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f042 0201 	orr.w	r2, r2, #1
 8007f26:	601a      	str	r2, [r3, #0]
 8007f28:	e000      	b.n	8007f2c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	40012c00 	.word	0x40012c00
 8007f3c:	40000400 	.word	0x40000400
 8007f40:	40000800 	.word	0x40000800
 8007f44:	40000c00 	.word	0x40000c00
 8007f48:	40013400 	.word	0x40013400
 8007f4c:	40014000 	.word	0x40014000
 8007f50:	40015000 	.word	0x40015000
 8007f54:	00010007 	.word	0x00010007

08007f58 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2200      	movs	r2, #0
 8007f68:	6839      	ldr	r1, [r7, #0]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 f9f3 	bl	8008356 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6a1a      	ldr	r2, [r3, #32]
 8007f76:	f241 1311 	movw	r3, #4369	; 0x1111
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10f      	bne.n	8007fa0 <HAL_TIMEx_PWMN_Stop+0x48>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6a1a      	ldr	r2, [r3, #32]
 8007f86:	f244 4344 	movw	r3, #17476	; 0x4444
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d107      	bne.n	8007fa0 <HAL_TIMEx_PWMN_Stop+0x48>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f9e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	6a1a      	ldr	r2, [r3, #32]
 8007fa6:	f241 1311 	movw	r3, #4369	; 0x1111
 8007faa:	4013      	ands	r3, r2
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10f      	bne.n	8007fd0 <HAL_TIMEx_PWMN_Stop+0x78>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6a1a      	ldr	r2, [r3, #32]
 8007fb6:	f244 4344 	movw	r3, #17476	; 0x4444
 8007fba:	4013      	ands	r3, r2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d107      	bne.n	8007fd0 <HAL_TIMEx_PWMN_Stop+0x78>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f022 0201 	bic.w	r2, r2, #1
 8007fce:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d104      	bne.n	8007fe0 <HAL_TIMEx_PWMN_Stop+0x88>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fde:	e013      	b.n	8008008 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	2b04      	cmp	r3, #4
 8007fe4:	d104      	bne.n	8007ff0 <HAL_TIMEx_PWMN_Stop+0x98>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fee:	e00b      	b.n	8008008 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	2b08      	cmp	r3, #8
 8007ff4:	d104      	bne.n	8008000 <HAL_TIMEx_PWMN_Stop+0xa8>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ffe:	e003      	b.n	8008008 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
	...

08008014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008024:	2b01      	cmp	r3, #1
 8008026:	d101      	bne.n	800802c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008028:	2302      	movs	r3, #2
 800802a:	e074      	b.n	8008116 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2202      	movs	r2, #2
 8008038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a34      	ldr	r2, [pc, #208]	; (8008124 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d009      	beq.n	800806a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a33      	ldr	r2, [pc, #204]	; (8008128 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d004      	beq.n	800806a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a31      	ldr	r2, [pc, #196]	; (800812c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d108      	bne.n	800807c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008070:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	4313      	orrs	r3, r2
 800807a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008086:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	4313      	orrs	r3, r2
 8008090:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a21      	ldr	r2, [pc, #132]	; (8008124 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d022      	beq.n	80080ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ac:	d01d      	beq.n	80080ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a1f      	ldr	r2, [pc, #124]	; (8008130 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d018      	beq.n	80080ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a1d      	ldr	r2, [pc, #116]	; (8008134 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d013      	beq.n	80080ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a1c      	ldr	r2, [pc, #112]	; (8008138 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d00e      	beq.n	80080ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a15      	ldr	r2, [pc, #84]	; (8008128 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d009      	beq.n	80080ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a18      	ldr	r2, [pc, #96]	; (800813c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d004      	beq.n	80080ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a11      	ldr	r2, [pc, #68]	; (800812c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d10c      	bne.n	8008104 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68ba      	ldr	r2, [r7, #8]
 8008102:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3714      	adds	r7, #20
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	40012c00 	.word	0x40012c00
 8008128:	40013400 	.word	0x40013400
 800812c:	40015000 	.word	0x40015000
 8008130:	40000400 	.word	0x40000400
 8008134:	40000800 	.word	0x40000800
 8008138:	40000c00 	.word	0x40000c00
 800813c:	40014000 	.word	0x40014000

08008140 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800814a:	2300      	movs	r3, #0
 800814c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008154:	2b01      	cmp	r3, #1
 8008156:	d101      	bne.n	800815c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008158:	2302      	movs	r3, #2
 800815a:	e096      	b.n	800828a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	4313      	orrs	r3, r2
 8008170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	4313      	orrs	r3, r2
 800817e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	4313      	orrs	r3, r2
 800818c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4313      	orrs	r3, r2
 800819a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	699b      	ldr	r3, [r3, #24]
 80081d0:	041b      	lsls	r3, r3, #16
 80081d2:	4313      	orrs	r3, r2
 80081d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a2f      	ldr	r2, [pc, #188]	; (8008298 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d009      	beq.n	80081f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a2d      	ldr	r2, [pc, #180]	; (800829c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d004      	beq.n	80081f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a2c      	ldr	r2, [pc, #176]	; (80082a0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d106      	bne.n	8008202 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	4313      	orrs	r3, r2
 8008200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a24      	ldr	r2, [pc, #144]	; (8008298 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d009      	beq.n	8008220 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a22      	ldr	r2, [pc, #136]	; (800829c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d004      	beq.n	8008220 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a21      	ldr	r2, [pc, #132]	; (80082a0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d12b      	bne.n	8008278 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822a:	051b      	lsls	r3, r3, #20
 800822c:	4313      	orrs	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	4313      	orrs	r3, r2
 800823c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008248:	4313      	orrs	r3, r2
 800824a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a11      	ldr	r2, [pc, #68]	; (8008298 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d009      	beq.n	800826a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a10      	ldr	r2, [pc, #64]	; (800829c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d004      	beq.n	800826a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a0e      	ldr	r2, [pc, #56]	; (80082a0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d106      	bne.n	8008278 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008274:	4313      	orrs	r3, r2
 8008276:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3714      	adds	r7, #20
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	40012c00 	.word	0x40012c00
 800829c:	40013400 	.word	0x40013400
 80082a0:	40015000 	.word	0x40015000

080082a4 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80082ba:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	370c      	adds	r7, #12
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr

080082ca <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082ca:	b480      	push	{r7}
 80082cc:	b083      	sub	sp, #12
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082d2:	bf00      	nop
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082de:	b480      	push	{r7}
 80082e0:	b083      	sub	sp, #12
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082e6:	bf00      	nop
 80082e8:	370c      	adds	r7, #12
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b083      	sub	sp, #12
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80082fa:	bf00      	nop
 80082fc:	370c      	adds	r7, #12
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr

08008306 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008306:	b480      	push	{r7}
 8008308:	b083      	sub	sp, #12
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800830e:	bf00      	nop
 8008310:	370c      	adds	r7, #12
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800831a:	b480      	push	{r7}
 800831c:	b083      	sub	sp, #12
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008322:	bf00      	nop
 8008324:	370c      	adds	r7, #12
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800832e:	b480      	push	{r7}
 8008330:	b083      	sub	sp, #12
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008336:	bf00      	nop
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008342:	b480      	push	{r7}
 8008344:	b083      	sub	sp, #12
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800834a:	bf00      	nop
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008356:	b480      	push	{r7}
 8008358:	b087      	sub	sp, #28
 800835a:	af00      	add	r7, sp, #0
 800835c:	60f8      	str	r0, [r7, #12]
 800835e:	60b9      	str	r1, [r7, #8]
 8008360:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	f003 031f 	and.w	r3, r3, #31
 8008368:	2204      	movs	r2, #4
 800836a:	fa02 f303 	lsl.w	r3, r2, r3
 800836e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6a1a      	ldr	r2, [r3, #32]
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	43db      	mvns	r3, r3
 8008378:	401a      	ands	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6a1a      	ldr	r2, [r3, #32]
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	f003 031f 	and.w	r3, r3, #31
 8008388:	6879      	ldr	r1, [r7, #4]
 800838a:	fa01 f303 	lsl.w	r3, r1, r3
 800838e:	431a      	orrs	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	621a      	str	r2, [r3, #32]
}
 8008394:	bf00      	nop
 8008396:	371c      	adds	r7, #28
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e042      	b.n	8008438 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d106      	bne.n	80083ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f7f9 fe45 	bl	8002054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2224      	movs	r2, #36	; 0x24
 80083ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f022 0201 	bic.w	r2, r2, #1
 80083e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fc50 	bl	8008c88 <UART_SetConfig>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d101      	bne.n	80083f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e022      	b.n	8008438 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d002      	beq.n	8008400 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 ff40 	bl	8009280 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	685a      	ldr	r2, [r3, #4]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800840e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	689a      	ldr	r2, [r3, #8]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800841e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f042 0201 	orr.w	r2, r2, #1
 800842e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 ffc7 	bl	80093c4 <UART_CheckIdleState>
 8008436:	4603      	mov	r3, r0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b08a      	sub	sp, #40	; 0x28
 8008444:	af02      	add	r7, sp, #8
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	603b      	str	r3, [r7, #0]
 800844c:	4613      	mov	r3, r2
 800844e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008456:	2b20      	cmp	r3, #32
 8008458:	f040 8083 	bne.w	8008562 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d002      	beq.n	8008468 <HAL_UART_Transmit+0x28>
 8008462:	88fb      	ldrh	r3, [r7, #6]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d101      	bne.n	800846c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	e07b      	b.n	8008564 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008472:	2b01      	cmp	r3, #1
 8008474:	d101      	bne.n	800847a <HAL_UART_Transmit+0x3a>
 8008476:	2302      	movs	r3, #2
 8008478:	e074      	b.n	8008564 <HAL_UART_Transmit+0x124>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2221      	movs	r2, #33	; 0x21
 800848e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008492:	f7fa fbbb 	bl	8002c0c <HAL_GetTick>
 8008496:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	88fa      	ldrh	r2, [r7, #6]
 800849c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	88fa      	ldrh	r2, [r7, #6]
 80084a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b0:	d108      	bne.n	80084c4 <HAL_UART_Transmit+0x84>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d104      	bne.n	80084c4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80084ba:	2300      	movs	r3, #0
 80084bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	61bb      	str	r3, [r7, #24]
 80084c2:	e003      	b.n	80084cc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084c8:	2300      	movs	r3, #0
 80084ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80084d4:	e02c      	b.n	8008530 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	2200      	movs	r2, #0
 80084de:	2180      	movs	r1, #128	; 0x80
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f000 ffba 	bl	800945a <UART_WaitOnFlagUntilTimeout>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	e039      	b.n	8008564 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10b      	bne.n	800850e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	461a      	mov	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008504:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	3302      	adds	r3, #2
 800850a:	61bb      	str	r3, [r7, #24]
 800850c:	e007      	b.n	800851e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	781a      	ldrb	r2, [r3, #0]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	3301      	adds	r3, #1
 800851c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008524:	b29b      	uxth	r3, r3
 8008526:	3b01      	subs	r3, #1
 8008528:	b29a      	uxth	r2, r3
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008536:	b29b      	uxth	r3, r3
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1cc      	bne.n	80084d6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	9300      	str	r3, [sp, #0]
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	2200      	movs	r2, #0
 8008544:	2140      	movs	r1, #64	; 0x40
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f000 ff87 	bl	800945a <UART_WaitOnFlagUntilTimeout>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008552:	2303      	movs	r3, #3
 8008554:	e006      	b.n	8008564 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2220      	movs	r2, #32
 800855a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	e000      	b.n	8008564 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008562:	2302      	movs	r3, #2
  }
}
 8008564:	4618      	mov	r0, r3
 8008566:	3720      	adds	r7, #32
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b08a      	sub	sp, #40	; 0x28
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	4613      	mov	r3, r2
 8008578:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008580:	2b20      	cmp	r3, #32
 8008582:	d142      	bne.n	800860a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <HAL_UART_Receive_IT+0x24>
 800858a:	88fb      	ldrh	r3, [r7, #6]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d101      	bne.n	8008594 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e03b      	b.n	800860c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800859a:	2b01      	cmp	r3, #1
 800859c:	d101      	bne.n	80085a2 <HAL_UART_Receive_IT+0x36>
 800859e:	2302      	movs	r3, #2
 80085a0:	e034      	b.n	800860c <HAL_UART_Receive_IT+0xa0>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2201      	movs	r2, #1
 80085a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a17      	ldr	r2, [pc, #92]	; (8008614 <HAL_UART_Receive_IT+0xa8>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d01f      	beq.n	80085fa <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d018      	beq.n	80085fa <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	e853 3f00 	ldrex	r3, [r3]
 80085d4:	613b      	str	r3, [r7, #16]
   return(result);
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80085dc:	627b      	str	r3, [r7, #36]	; 0x24
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	461a      	mov	r2, r3
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	623b      	str	r3, [r7, #32]
 80085e8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ea:	69f9      	ldr	r1, [r7, #28]
 80085ec:	6a3a      	ldr	r2, [r7, #32]
 80085ee:	e841 2300 	strex	r3, r2, [r1]
 80085f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1e6      	bne.n	80085c8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80085fa:	88fb      	ldrh	r3, [r7, #6]
 80085fc:	461a      	mov	r2, r3
 80085fe:	68b9      	ldr	r1, [r7, #8]
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f000 fff3 	bl	80095ec <UART_Start_Receive_IT>
 8008606:	4603      	mov	r3, r0
 8008608:	e000      	b.n	800860c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800860a:	2302      	movs	r3, #2
  }
}
 800860c:	4618      	mov	r0, r3
 800860e:	3728      	adds	r7, #40	; 0x28
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	40008000 	.word	0x40008000

08008618 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b0ba      	sub	sp, #232	; 0xe8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	69db      	ldr	r3, [r3, #28]
 8008626:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800863e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008642:	f640 030f 	movw	r3, #2063	; 0x80f
 8008646:	4013      	ands	r3, r2
 8008648:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800864c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008650:	2b00      	cmp	r3, #0
 8008652:	d11b      	bne.n	800868c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008658:	f003 0320 	and.w	r3, r3, #32
 800865c:	2b00      	cmp	r3, #0
 800865e:	d015      	beq.n	800868c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008664:	f003 0320 	and.w	r3, r3, #32
 8008668:	2b00      	cmp	r3, #0
 800866a:	d105      	bne.n	8008678 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800866c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008674:	2b00      	cmp	r3, #0
 8008676:	d009      	beq.n	800868c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800867c:	2b00      	cmp	r3, #0
 800867e:	f000 82d6 	beq.w	8008c2e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	4798      	blx	r3
      }
      return;
 800868a:	e2d0      	b.n	8008c2e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800868c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008690:	2b00      	cmp	r3, #0
 8008692:	f000 811f 	beq.w	80088d4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008696:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800869a:	4b8b      	ldr	r3, [pc, #556]	; (80088c8 <HAL_UART_IRQHandler+0x2b0>)
 800869c:	4013      	ands	r3, r2
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d106      	bne.n	80086b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80086a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80086a6:	4b89      	ldr	r3, [pc, #548]	; (80088cc <HAL_UART_IRQHandler+0x2b4>)
 80086a8:	4013      	ands	r3, r2
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f000 8112 	beq.w	80088d4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086b4:	f003 0301 	and.w	r3, r3, #1
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d011      	beq.n	80086e0 <HAL_UART_IRQHandler+0xc8>
 80086bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00b      	beq.n	80086e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2201      	movs	r2, #1
 80086ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086d6:	f043 0201 	orr.w	r2, r3, #1
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086e4:	f003 0302 	and.w	r3, r3, #2
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d011      	beq.n	8008710 <HAL_UART_IRQHandler+0xf8>
 80086ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00b      	beq.n	8008710 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2202      	movs	r2, #2
 80086fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008706:	f043 0204 	orr.w	r2, r3, #4
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008714:	f003 0304 	and.w	r3, r3, #4
 8008718:	2b00      	cmp	r3, #0
 800871a:	d011      	beq.n	8008740 <HAL_UART_IRQHandler+0x128>
 800871c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008720:	f003 0301 	and.w	r3, r3, #1
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00b      	beq.n	8008740 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2204      	movs	r2, #4
 800872e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008736:	f043 0202 	orr.w	r2, r3, #2
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008744:	f003 0308 	and.w	r3, r3, #8
 8008748:	2b00      	cmp	r3, #0
 800874a:	d017      	beq.n	800877c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800874c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008750:	f003 0320 	and.w	r3, r3, #32
 8008754:	2b00      	cmp	r3, #0
 8008756:	d105      	bne.n	8008764 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008758:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800875c:	4b5a      	ldr	r3, [pc, #360]	; (80088c8 <HAL_UART_IRQHandler+0x2b0>)
 800875e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00b      	beq.n	800877c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2208      	movs	r2, #8
 800876a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008772:	f043 0208 	orr.w	r2, r3, #8
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800877c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008784:	2b00      	cmp	r3, #0
 8008786:	d012      	beq.n	80087ae <HAL_UART_IRQHandler+0x196>
 8008788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800878c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00c      	beq.n	80087ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800879c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087a4:	f043 0220 	orr.w	r2, r3, #32
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f000 823c 	beq.w	8008c32 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80087ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087be:	f003 0320 	and.w	r3, r3, #32
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d013      	beq.n	80087ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80087c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087ca:	f003 0320 	and.w	r3, r3, #32
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d105      	bne.n	80087de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80087d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d007      	beq.n	80087ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008802:	2b40      	cmp	r3, #64	; 0x40
 8008804:	d005      	beq.n	8008812 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800880a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800880e:	2b00      	cmp	r3, #0
 8008810:	d04f      	beq.n	80088b2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f001 f814 	bl	8009840 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008822:	2b40      	cmp	r3, #64	; 0x40
 8008824:	d141      	bne.n	80088aa <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	3308      	adds	r3, #8
 800882c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008830:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008834:	e853 3f00 	ldrex	r3, [r3]
 8008838:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800883c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3308      	adds	r3, #8
 800884e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008852:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008856:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800885e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008862:	e841 2300 	strex	r3, r2, [r1]
 8008866:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800886a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1d9      	bne.n	8008826 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008876:	2b00      	cmp	r3, #0
 8008878:	d013      	beq.n	80088a2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800887e:	4a14      	ldr	r2, [pc, #80]	; (80088d0 <HAL_UART_IRQHandler+0x2b8>)
 8008880:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008886:	4618      	mov	r0, r3
 8008888:	f7fc fa38 	bl	8004cfc <HAL_DMA_Abort_IT>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d017      	beq.n	80088c2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800889c:	4610      	mov	r0, r2
 800889e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088a0:	e00f      	b.n	80088c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f9da 	bl	8008c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088a8:	e00b      	b.n	80088c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f9d6 	bl	8008c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088b0:	e007      	b.n	80088c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f9d2 	bl	8008c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80088c0:	e1b7      	b.n	8008c32 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088c2:	bf00      	nop
    return;
 80088c4:	e1b5      	b.n	8008c32 <HAL_UART_IRQHandler+0x61a>
 80088c6:	bf00      	nop
 80088c8:	10000001 	.word	0x10000001
 80088cc:	04000120 	.word	0x04000120
 80088d0:	0800990d 	.word	0x0800990d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088d8:	2b01      	cmp	r3, #1
 80088da:	f040 814a 	bne.w	8008b72 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80088de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088e2:	f003 0310 	and.w	r3, r3, #16
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f000 8143 	beq.w	8008b72 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80088ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088f0:	f003 0310 	and.w	r3, r3, #16
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f000 813c 	beq.w	8008b72 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2210      	movs	r2, #16
 8008900:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800890c:	2b40      	cmp	r3, #64	; 0x40
 800890e:	f040 80b5 	bne.w	8008a7c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800891e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008922:	2b00      	cmp	r3, #0
 8008924:	f000 8187 	beq.w	8008c36 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800892e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008932:	429a      	cmp	r2, r3
 8008934:	f080 817f 	bcs.w	8008c36 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800893e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 0320 	and.w	r3, r3, #32
 800894e:	2b00      	cmp	r3, #0
 8008950:	f040 8086 	bne.w	8008a60 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008960:	e853 3f00 	ldrex	r3, [r3]
 8008964:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008968:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800896c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008970:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	461a      	mov	r2, r3
 800897a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800897e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008982:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008986:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800898a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800898e:	e841 2300 	strex	r3, r2, [r1]
 8008992:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008996:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1da      	bne.n	8008954 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	3308      	adds	r3, #8
 80089a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089a8:	e853 3f00 	ldrex	r3, [r3]
 80089ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80089ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089b0:	f023 0301 	bic.w	r3, r3, #1
 80089b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	3308      	adds	r3, #8
 80089be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80089c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80089c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80089ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80089ce:	e841 2300 	strex	r3, r2, [r1]
 80089d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80089d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1e1      	bne.n	800899e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	3308      	adds	r3, #8
 80089e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089e4:	e853 3f00 	ldrex	r3, [r3]
 80089e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80089ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	3308      	adds	r3, #8
 80089fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80089fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008a00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008a04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008a06:	e841 2300 	strex	r3, r2, [r1]
 8008a0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008a0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1e3      	bne.n	80089da <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2220      	movs	r2, #32
 8008a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a28:	e853 3f00 	ldrex	r3, [r3]
 8008a2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a30:	f023 0310 	bic.w	r3, r3, #16
 8008a34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a42:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a44:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1e4      	bne.n	8008a20 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fc f8f5 	bl	8004c4a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	4619      	mov	r1, r3
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f8fb 	bl	8008c70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a7a:	e0dc      	b.n	8008c36 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 80ce 	beq.w	8008c3a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8008a9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 80c9 	beq.w	8008c3a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab0:	e853 3f00 	ldrex	r3, [r3]
 8008ab4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008abc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008aca:	647b      	str	r3, [r7, #68]	; 0x44
 8008acc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ace:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ad0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ad2:	e841 2300 	strex	r3, r2, [r1]
 8008ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1e4      	bne.n	8008aa8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	3308      	adds	r3, #8
 8008ae4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	e853 3f00 	ldrex	r3, [r3]
 8008aec:	623b      	str	r3, [r7, #32]
   return(result);
 8008aee:	6a3b      	ldr	r3, [r7, #32]
 8008af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008af4:	f023 0301 	bic.w	r3, r3, #1
 8008af8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	3308      	adds	r3, #8
 8008b02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008b06:	633a      	str	r2, [r7, #48]	; 0x30
 8008b08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b0e:	e841 2300 	strex	r3, r2, [r1]
 8008b12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1e1      	bne.n	8008ade <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2220      	movs	r2, #32
 8008b1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	e853 3f00 	ldrex	r3, [r3]
 8008b3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f023 0310 	bic.w	r3, r3, #16
 8008b42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008b50:	61fb      	str	r3, [r7, #28]
 8008b52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b54:	69b9      	ldr	r1, [r7, #24]
 8008b56:	69fa      	ldr	r2, [r7, #28]
 8008b58:	e841 2300 	strex	r3, r2, [r1]
 8008b5c:	617b      	str	r3, [r7, #20]
   return(result);
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d1e4      	bne.n	8008b2e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b68:	4619      	mov	r1, r3
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 f880 	bl	8008c70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b70:	e063      	b.n	8008c3a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00e      	beq.n	8008b9c <HAL_UART_IRQHandler+0x584>
 8008b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d008      	beq.n	8008b9c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008b92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f001 fb57 	bl	800a248 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b9a:	e051      	b.n	8008c40 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d014      	beq.n	8008bd2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d105      	bne.n	8008bc0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d008      	beq.n	8008bd2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d03a      	beq.n	8008c3e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	4798      	blx	r3
    }
    return;
 8008bd0:	e035      	b.n	8008c3e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d009      	beq.n	8008bf2 <HAL_UART_IRQHandler+0x5da>
 8008bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d003      	beq.n	8008bf2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 fea4 	bl	8009938 <UART_EndTransmit_IT>
    return;
 8008bf0:	e026      	b.n	8008c40 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d009      	beq.n	8008c12 <HAL_UART_IRQHandler+0x5fa>
 8008bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d003      	beq.n	8008c12 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f001 fb30 	bl	800a270 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c10:	e016      	b.n	8008c40 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d010      	beq.n	8008c40 <HAL_UART_IRQHandler+0x628>
 8008c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	da0c      	bge.n	8008c40 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f001 fb18 	bl	800a25c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c2c:	e008      	b.n	8008c40 <HAL_UART_IRQHandler+0x628>
      return;
 8008c2e:	bf00      	nop
 8008c30:	e006      	b.n	8008c40 <HAL_UART_IRQHandler+0x628>
    return;
 8008c32:	bf00      	nop
 8008c34:	e004      	b.n	8008c40 <HAL_UART_IRQHandler+0x628>
      return;
 8008c36:	bf00      	nop
 8008c38:	e002      	b.n	8008c40 <HAL_UART_IRQHandler+0x628>
      return;
 8008c3a:	bf00      	nop
 8008c3c:	e000      	b.n	8008c40 <HAL_UART_IRQHandler+0x628>
    return;
 8008c3e:	bf00      	nop
  }
}
 8008c40:	37e8      	adds	r7, #232	; 0xe8
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop

08008c48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c8c:	b08c      	sub	sp, #48	; 0x30
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c92:	2300      	movs	r3, #0
 8008c94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	689a      	ldr	r2, [r3, #8]
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	691b      	ldr	r3, [r3, #16]
 8008ca0:	431a      	orrs	r2, r3
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	431a      	orrs	r2, r3
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	69db      	ldr	r3, [r3, #28]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	4baa      	ldr	r3, [pc, #680]	; (8008f60 <UART_SetConfig+0x2d8>)
 8008cb8:	4013      	ands	r3, r2
 8008cba:	697a      	ldr	r2, [r7, #20]
 8008cbc:	6812      	ldr	r2, [r2, #0]
 8008cbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cc0:	430b      	orrs	r3, r1
 8008cc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	68da      	ldr	r2, [r3, #12]
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	699b      	ldr	r3, [r3, #24]
 8008cde:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a9f      	ldr	r2, [pc, #636]	; (8008f64 <UART_SetConfig+0x2dc>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d004      	beq.n	8008cf4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	6a1b      	ldr	r3, [r3, #32]
 8008cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008cfe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	6812      	ldr	r2, [r2, #0]
 8008d06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d08:	430b      	orrs	r3, r1
 8008d0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d12:	f023 010f 	bic.w	r1, r3, #15
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a90      	ldr	r2, [pc, #576]	; (8008f68 <UART_SetConfig+0x2e0>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d125      	bne.n	8008d78 <UART_SetConfig+0xf0>
 8008d2c:	4b8f      	ldr	r3, [pc, #572]	; (8008f6c <UART_SetConfig+0x2e4>)
 8008d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d32:	f003 0303 	and.w	r3, r3, #3
 8008d36:	2b03      	cmp	r3, #3
 8008d38:	d81a      	bhi.n	8008d70 <UART_SetConfig+0xe8>
 8008d3a:	a201      	add	r2, pc, #4	; (adr r2, 8008d40 <UART_SetConfig+0xb8>)
 8008d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d40:	08008d51 	.word	0x08008d51
 8008d44:	08008d61 	.word	0x08008d61
 8008d48:	08008d59 	.word	0x08008d59
 8008d4c:	08008d69 	.word	0x08008d69
 8008d50:	2301      	movs	r3, #1
 8008d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d56:	e116      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008d58:	2302      	movs	r3, #2
 8008d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d5e:	e112      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008d60:	2304      	movs	r3, #4
 8008d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d66:	e10e      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008d68:	2308      	movs	r3, #8
 8008d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d6e:	e10a      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008d70:	2310      	movs	r3, #16
 8008d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d76:	e106      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a7c      	ldr	r2, [pc, #496]	; (8008f70 <UART_SetConfig+0x2e8>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d138      	bne.n	8008df4 <UART_SetConfig+0x16c>
 8008d82:	4b7a      	ldr	r3, [pc, #488]	; (8008f6c <UART_SetConfig+0x2e4>)
 8008d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d88:	f003 030c 	and.w	r3, r3, #12
 8008d8c:	2b0c      	cmp	r3, #12
 8008d8e:	d82d      	bhi.n	8008dec <UART_SetConfig+0x164>
 8008d90:	a201      	add	r2, pc, #4	; (adr r2, 8008d98 <UART_SetConfig+0x110>)
 8008d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d96:	bf00      	nop
 8008d98:	08008dcd 	.word	0x08008dcd
 8008d9c:	08008ded 	.word	0x08008ded
 8008da0:	08008ded 	.word	0x08008ded
 8008da4:	08008ded 	.word	0x08008ded
 8008da8:	08008ddd 	.word	0x08008ddd
 8008dac:	08008ded 	.word	0x08008ded
 8008db0:	08008ded 	.word	0x08008ded
 8008db4:	08008ded 	.word	0x08008ded
 8008db8:	08008dd5 	.word	0x08008dd5
 8008dbc:	08008ded 	.word	0x08008ded
 8008dc0:	08008ded 	.word	0x08008ded
 8008dc4:	08008ded 	.word	0x08008ded
 8008dc8:	08008de5 	.word	0x08008de5
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dd2:	e0d8      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008dd4:	2302      	movs	r3, #2
 8008dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dda:	e0d4      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008ddc:	2304      	movs	r3, #4
 8008dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008de2:	e0d0      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008de4:	2308      	movs	r3, #8
 8008de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dea:	e0cc      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008dec:	2310      	movs	r3, #16
 8008dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008df2:	e0c8      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a5e      	ldr	r2, [pc, #376]	; (8008f74 <UART_SetConfig+0x2ec>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d125      	bne.n	8008e4a <UART_SetConfig+0x1c2>
 8008dfe:	4b5b      	ldr	r3, [pc, #364]	; (8008f6c <UART_SetConfig+0x2e4>)
 8008e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e08:	2b30      	cmp	r3, #48	; 0x30
 8008e0a:	d016      	beq.n	8008e3a <UART_SetConfig+0x1b2>
 8008e0c:	2b30      	cmp	r3, #48	; 0x30
 8008e0e:	d818      	bhi.n	8008e42 <UART_SetConfig+0x1ba>
 8008e10:	2b20      	cmp	r3, #32
 8008e12:	d00a      	beq.n	8008e2a <UART_SetConfig+0x1a2>
 8008e14:	2b20      	cmp	r3, #32
 8008e16:	d814      	bhi.n	8008e42 <UART_SetConfig+0x1ba>
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d002      	beq.n	8008e22 <UART_SetConfig+0x19a>
 8008e1c:	2b10      	cmp	r3, #16
 8008e1e:	d008      	beq.n	8008e32 <UART_SetConfig+0x1aa>
 8008e20:	e00f      	b.n	8008e42 <UART_SetConfig+0x1ba>
 8008e22:	2300      	movs	r3, #0
 8008e24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e28:	e0ad      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e30:	e0a9      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008e32:	2304      	movs	r3, #4
 8008e34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e38:	e0a5      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008e3a:	2308      	movs	r3, #8
 8008e3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e40:	e0a1      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008e42:	2310      	movs	r3, #16
 8008e44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e48:	e09d      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a4a      	ldr	r2, [pc, #296]	; (8008f78 <UART_SetConfig+0x2f0>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d125      	bne.n	8008ea0 <UART_SetConfig+0x218>
 8008e54:	4b45      	ldr	r3, [pc, #276]	; (8008f6c <UART_SetConfig+0x2e4>)
 8008e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e5e:	2bc0      	cmp	r3, #192	; 0xc0
 8008e60:	d016      	beq.n	8008e90 <UART_SetConfig+0x208>
 8008e62:	2bc0      	cmp	r3, #192	; 0xc0
 8008e64:	d818      	bhi.n	8008e98 <UART_SetConfig+0x210>
 8008e66:	2b80      	cmp	r3, #128	; 0x80
 8008e68:	d00a      	beq.n	8008e80 <UART_SetConfig+0x1f8>
 8008e6a:	2b80      	cmp	r3, #128	; 0x80
 8008e6c:	d814      	bhi.n	8008e98 <UART_SetConfig+0x210>
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d002      	beq.n	8008e78 <UART_SetConfig+0x1f0>
 8008e72:	2b40      	cmp	r3, #64	; 0x40
 8008e74:	d008      	beq.n	8008e88 <UART_SetConfig+0x200>
 8008e76:	e00f      	b.n	8008e98 <UART_SetConfig+0x210>
 8008e78:	2300      	movs	r3, #0
 8008e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e7e:	e082      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008e80:	2302      	movs	r3, #2
 8008e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e86:	e07e      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008e88:	2304      	movs	r3, #4
 8008e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e8e:	e07a      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008e90:	2308      	movs	r3, #8
 8008e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e96:	e076      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008e98:	2310      	movs	r3, #16
 8008e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e9e:	e072      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a35      	ldr	r2, [pc, #212]	; (8008f7c <UART_SetConfig+0x2f4>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d12a      	bne.n	8008f00 <UART_SetConfig+0x278>
 8008eaa:	4b30      	ldr	r3, [pc, #192]	; (8008f6c <UART_SetConfig+0x2e4>)
 8008eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008eb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008eb8:	d01a      	beq.n	8008ef0 <UART_SetConfig+0x268>
 8008eba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ebe:	d81b      	bhi.n	8008ef8 <UART_SetConfig+0x270>
 8008ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ec4:	d00c      	beq.n	8008ee0 <UART_SetConfig+0x258>
 8008ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eca:	d815      	bhi.n	8008ef8 <UART_SetConfig+0x270>
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d003      	beq.n	8008ed8 <UART_SetConfig+0x250>
 8008ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ed4:	d008      	beq.n	8008ee8 <UART_SetConfig+0x260>
 8008ed6:	e00f      	b.n	8008ef8 <UART_SetConfig+0x270>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ede:	e052      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ee6:	e04e      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008ee8:	2304      	movs	r3, #4
 8008eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008eee:	e04a      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008ef0:	2308      	movs	r3, #8
 8008ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ef6:	e046      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008ef8:	2310      	movs	r3, #16
 8008efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008efe:	e042      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a17      	ldr	r2, [pc, #92]	; (8008f64 <UART_SetConfig+0x2dc>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d13a      	bne.n	8008f80 <UART_SetConfig+0x2f8>
 8008f0a:	4b18      	ldr	r3, [pc, #96]	; (8008f6c <UART_SetConfig+0x2e4>)
 8008f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008f14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f18:	d01a      	beq.n	8008f50 <UART_SetConfig+0x2c8>
 8008f1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f1e:	d81b      	bhi.n	8008f58 <UART_SetConfig+0x2d0>
 8008f20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f24:	d00c      	beq.n	8008f40 <UART_SetConfig+0x2b8>
 8008f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f2a:	d815      	bhi.n	8008f58 <UART_SetConfig+0x2d0>
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d003      	beq.n	8008f38 <UART_SetConfig+0x2b0>
 8008f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f34:	d008      	beq.n	8008f48 <UART_SetConfig+0x2c0>
 8008f36:	e00f      	b.n	8008f58 <UART_SetConfig+0x2d0>
 8008f38:	2300      	movs	r3, #0
 8008f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f3e:	e022      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008f40:	2302      	movs	r3, #2
 8008f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f46:	e01e      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008f48:	2304      	movs	r3, #4
 8008f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f4e:	e01a      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008f50:	2308      	movs	r3, #8
 8008f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f56:	e016      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008f58:	2310      	movs	r3, #16
 8008f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f5e:	e012      	b.n	8008f86 <UART_SetConfig+0x2fe>
 8008f60:	cfff69f3 	.word	0xcfff69f3
 8008f64:	40008000 	.word	0x40008000
 8008f68:	40013800 	.word	0x40013800
 8008f6c:	40021000 	.word	0x40021000
 8008f70:	40004400 	.word	0x40004400
 8008f74:	40004800 	.word	0x40004800
 8008f78:	40004c00 	.word	0x40004c00
 8008f7c:	40005000 	.word	0x40005000
 8008f80:	2310      	movs	r3, #16
 8008f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4aae      	ldr	r2, [pc, #696]	; (8009244 <UART_SetConfig+0x5bc>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	f040 8097 	bne.w	80090c0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f96:	2b08      	cmp	r3, #8
 8008f98:	d823      	bhi.n	8008fe2 <UART_SetConfig+0x35a>
 8008f9a:	a201      	add	r2, pc, #4	; (adr r2, 8008fa0 <UART_SetConfig+0x318>)
 8008f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa0:	08008fc5 	.word	0x08008fc5
 8008fa4:	08008fe3 	.word	0x08008fe3
 8008fa8:	08008fcd 	.word	0x08008fcd
 8008fac:	08008fe3 	.word	0x08008fe3
 8008fb0:	08008fd3 	.word	0x08008fd3
 8008fb4:	08008fe3 	.word	0x08008fe3
 8008fb8:	08008fe3 	.word	0x08008fe3
 8008fbc:	08008fe3 	.word	0x08008fe3
 8008fc0:	08008fdb 	.word	0x08008fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fc4:	f7fc ff84 	bl	8005ed0 <HAL_RCC_GetPCLK1Freq>
 8008fc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008fca:	e010      	b.n	8008fee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fcc:	4b9e      	ldr	r3, [pc, #632]	; (8009248 <UART_SetConfig+0x5c0>)
 8008fce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008fd0:	e00d      	b.n	8008fee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fd2:	f7fc ff0f 	bl	8005df4 <HAL_RCC_GetSysClockFreq>
 8008fd6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008fd8:	e009      	b.n	8008fee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008fe0:	e005      	b.n	8008fee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008fec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 8130 	beq.w	8009256 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffa:	4a94      	ldr	r2, [pc, #592]	; (800924c <UART_SetConfig+0x5c4>)
 8008ffc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009000:	461a      	mov	r2, r3
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	fbb3 f3f2 	udiv	r3, r3, r2
 8009008:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	685a      	ldr	r2, [r3, #4]
 800900e:	4613      	mov	r3, r2
 8009010:	005b      	lsls	r3, r3, #1
 8009012:	4413      	add	r3, r2
 8009014:	69ba      	ldr	r2, [r7, #24]
 8009016:	429a      	cmp	r2, r3
 8009018:	d305      	bcc.n	8009026 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009020:	69ba      	ldr	r2, [r7, #24]
 8009022:	429a      	cmp	r2, r3
 8009024:	d903      	bls.n	800902e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800902c:	e113      	b.n	8009256 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800902e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009030:	2200      	movs	r2, #0
 8009032:	60bb      	str	r3, [r7, #8]
 8009034:	60fa      	str	r2, [r7, #12]
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903a:	4a84      	ldr	r2, [pc, #528]	; (800924c <UART_SetConfig+0x5c4>)
 800903c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009040:	b29b      	uxth	r3, r3
 8009042:	2200      	movs	r2, #0
 8009044:	603b      	str	r3, [r7, #0]
 8009046:	607a      	str	r2, [r7, #4]
 8009048:	e9d7 2300 	ldrd	r2, r3, [r7]
 800904c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009050:	f7f7 fd6c 	bl	8000b2c <__aeabi_uldivmod>
 8009054:	4602      	mov	r2, r0
 8009056:	460b      	mov	r3, r1
 8009058:	4610      	mov	r0, r2
 800905a:	4619      	mov	r1, r3
 800905c:	f04f 0200 	mov.w	r2, #0
 8009060:	f04f 0300 	mov.w	r3, #0
 8009064:	020b      	lsls	r3, r1, #8
 8009066:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800906a:	0202      	lsls	r2, r0, #8
 800906c:	6979      	ldr	r1, [r7, #20]
 800906e:	6849      	ldr	r1, [r1, #4]
 8009070:	0849      	lsrs	r1, r1, #1
 8009072:	2000      	movs	r0, #0
 8009074:	460c      	mov	r4, r1
 8009076:	4605      	mov	r5, r0
 8009078:	eb12 0804 	adds.w	r8, r2, r4
 800907c:	eb43 0905 	adc.w	r9, r3, r5
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	469a      	mov	sl, r3
 8009088:	4693      	mov	fp, r2
 800908a:	4652      	mov	r2, sl
 800908c:	465b      	mov	r3, fp
 800908e:	4640      	mov	r0, r8
 8009090:	4649      	mov	r1, r9
 8009092:	f7f7 fd4b 	bl	8000b2c <__aeabi_uldivmod>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	4613      	mov	r3, r2
 800909c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800909e:	6a3b      	ldr	r3, [r7, #32]
 80090a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090a4:	d308      	bcc.n	80090b8 <UART_SetConfig+0x430>
 80090a6:	6a3b      	ldr	r3, [r7, #32]
 80090a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090ac:	d204      	bcs.n	80090b8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	6a3a      	ldr	r2, [r7, #32]
 80090b4:	60da      	str	r2, [r3, #12]
 80090b6:	e0ce      	b.n	8009256 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80090be:	e0ca      	b.n	8009256 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	69db      	ldr	r3, [r3, #28]
 80090c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090c8:	d166      	bne.n	8009198 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80090ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80090ce:	2b08      	cmp	r3, #8
 80090d0:	d827      	bhi.n	8009122 <UART_SetConfig+0x49a>
 80090d2:	a201      	add	r2, pc, #4	; (adr r2, 80090d8 <UART_SetConfig+0x450>)
 80090d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d8:	080090fd 	.word	0x080090fd
 80090dc:	08009105 	.word	0x08009105
 80090e0:	0800910d 	.word	0x0800910d
 80090e4:	08009123 	.word	0x08009123
 80090e8:	08009113 	.word	0x08009113
 80090ec:	08009123 	.word	0x08009123
 80090f0:	08009123 	.word	0x08009123
 80090f4:	08009123 	.word	0x08009123
 80090f8:	0800911b 	.word	0x0800911b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090fc:	f7fc fee8 	bl	8005ed0 <HAL_RCC_GetPCLK1Freq>
 8009100:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009102:	e014      	b.n	800912e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009104:	f7fc fefa 	bl	8005efc <HAL_RCC_GetPCLK2Freq>
 8009108:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800910a:	e010      	b.n	800912e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800910c:	4b4e      	ldr	r3, [pc, #312]	; (8009248 <UART_SetConfig+0x5c0>)
 800910e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009110:	e00d      	b.n	800912e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009112:	f7fc fe6f 	bl	8005df4 <HAL_RCC_GetSysClockFreq>
 8009116:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009118:	e009      	b.n	800912e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800911a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800911e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009120:	e005      	b.n	800912e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009122:	2300      	movs	r3, #0
 8009124:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800912c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800912e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009130:	2b00      	cmp	r3, #0
 8009132:	f000 8090 	beq.w	8009256 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913a:	4a44      	ldr	r2, [pc, #272]	; (800924c <UART_SetConfig+0x5c4>)
 800913c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009140:	461a      	mov	r2, r3
 8009142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009144:	fbb3 f3f2 	udiv	r3, r3, r2
 8009148:	005a      	lsls	r2, r3, #1
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	085b      	lsrs	r3, r3, #1
 8009150:	441a      	add	r2, r3
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	fbb2 f3f3 	udiv	r3, r2, r3
 800915a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800915c:	6a3b      	ldr	r3, [r7, #32]
 800915e:	2b0f      	cmp	r3, #15
 8009160:	d916      	bls.n	8009190 <UART_SetConfig+0x508>
 8009162:	6a3b      	ldr	r3, [r7, #32]
 8009164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009168:	d212      	bcs.n	8009190 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800916a:	6a3b      	ldr	r3, [r7, #32]
 800916c:	b29b      	uxth	r3, r3
 800916e:	f023 030f 	bic.w	r3, r3, #15
 8009172:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009174:	6a3b      	ldr	r3, [r7, #32]
 8009176:	085b      	lsrs	r3, r3, #1
 8009178:	b29b      	uxth	r3, r3
 800917a:	f003 0307 	and.w	r3, r3, #7
 800917e:	b29a      	uxth	r2, r3
 8009180:	8bfb      	ldrh	r3, [r7, #30]
 8009182:	4313      	orrs	r3, r2
 8009184:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	8bfa      	ldrh	r2, [r7, #30]
 800918c:	60da      	str	r2, [r3, #12]
 800918e:	e062      	b.n	8009256 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009196:	e05e      	b.n	8009256 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009198:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800919c:	2b08      	cmp	r3, #8
 800919e:	d828      	bhi.n	80091f2 <UART_SetConfig+0x56a>
 80091a0:	a201      	add	r2, pc, #4	; (adr r2, 80091a8 <UART_SetConfig+0x520>)
 80091a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a6:	bf00      	nop
 80091a8:	080091cd 	.word	0x080091cd
 80091ac:	080091d5 	.word	0x080091d5
 80091b0:	080091dd 	.word	0x080091dd
 80091b4:	080091f3 	.word	0x080091f3
 80091b8:	080091e3 	.word	0x080091e3
 80091bc:	080091f3 	.word	0x080091f3
 80091c0:	080091f3 	.word	0x080091f3
 80091c4:	080091f3 	.word	0x080091f3
 80091c8:	080091eb 	.word	0x080091eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091cc:	f7fc fe80 	bl	8005ed0 <HAL_RCC_GetPCLK1Freq>
 80091d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80091d2:	e014      	b.n	80091fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091d4:	f7fc fe92 	bl	8005efc <HAL_RCC_GetPCLK2Freq>
 80091d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80091da:	e010      	b.n	80091fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091dc:	4b1a      	ldr	r3, [pc, #104]	; (8009248 <UART_SetConfig+0x5c0>)
 80091de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80091e0:	e00d      	b.n	80091fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091e2:	f7fc fe07 	bl	8005df4 <HAL_RCC_GetSysClockFreq>
 80091e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80091e8:	e009      	b.n	80091fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80091f0:	e005      	b.n	80091fe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80091f2:	2300      	movs	r3, #0
 80091f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80091fc:	bf00      	nop
    }

    if (pclk != 0U)
 80091fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009200:	2b00      	cmp	r3, #0
 8009202:	d028      	beq.n	8009256 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009208:	4a10      	ldr	r2, [pc, #64]	; (800924c <UART_SetConfig+0x5c4>)
 800920a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800920e:	461a      	mov	r2, r3
 8009210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009212:	fbb3 f2f2 	udiv	r2, r3, r2
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	085b      	lsrs	r3, r3, #1
 800921c:	441a      	add	r2, r3
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	fbb2 f3f3 	udiv	r3, r2, r3
 8009226:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009228:	6a3b      	ldr	r3, [r7, #32]
 800922a:	2b0f      	cmp	r3, #15
 800922c:	d910      	bls.n	8009250 <UART_SetConfig+0x5c8>
 800922e:	6a3b      	ldr	r3, [r7, #32]
 8009230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009234:	d20c      	bcs.n	8009250 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009236:	6a3b      	ldr	r3, [r7, #32]
 8009238:	b29a      	uxth	r2, r3
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	60da      	str	r2, [r3, #12]
 8009240:	e009      	b.n	8009256 <UART_SetConfig+0x5ce>
 8009242:	bf00      	nop
 8009244:	40008000 	.word	0x40008000
 8009248:	00f42400 	.word	0x00f42400
 800924c:	0800bba0 	.word	0x0800bba0
      }
      else
      {
        ret = HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	2201      	movs	r2, #1
 800925a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	2201      	movs	r2, #1
 8009262:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	2200      	movs	r2, #0
 800926a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	2200      	movs	r2, #0
 8009270:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009272:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009276:	4618      	mov	r0, r3
 8009278:	3730      	adds	r7, #48	; 0x30
 800927a:	46bd      	mov	sp, r7
 800927c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009280 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800928c:	f003 0301 	and.w	r3, r3, #1
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00a      	beq.n	80092aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	430a      	orrs	r2, r1
 80092a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ae:	f003 0302 	and.w	r3, r3, #2
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00a      	beq.n	80092cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	430a      	orrs	r2, r1
 80092ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d0:	f003 0304 	and.w	r3, r3, #4
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00a      	beq.n	80092ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	430a      	orrs	r2, r1
 80092ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f2:	f003 0308 	and.w	r3, r3, #8
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00a      	beq.n	8009310 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	430a      	orrs	r2, r1
 800930e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009314:	f003 0310 	and.w	r3, r3, #16
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00a      	beq.n	8009332 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	430a      	orrs	r2, r1
 8009330:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009336:	f003 0320 	and.w	r3, r3, #32
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00a      	beq.n	8009354 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	430a      	orrs	r2, r1
 8009352:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800935c:	2b00      	cmp	r3, #0
 800935e:	d01a      	beq.n	8009396 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	430a      	orrs	r2, r1
 8009374:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800937a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800937e:	d10a      	bne.n	8009396 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	430a      	orrs	r2, r1
 8009394:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800939a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00a      	beq.n	80093b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	430a      	orrs	r2, r1
 80093b6:	605a      	str	r2, [r3, #4]
  }
}
 80093b8:	bf00      	nop
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b086      	sub	sp, #24
 80093c8:	af02      	add	r7, sp, #8
 80093ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093d4:	f7f9 fc1a 	bl	8002c0c <HAL_GetTick>
 80093d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 0308 	and.w	r3, r3, #8
 80093e4:	2b08      	cmp	r3, #8
 80093e6:	d10e      	bne.n	8009406 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f82f 	bl	800945a <UART_WaitOnFlagUntilTimeout>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d001      	beq.n	8009406 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009402:	2303      	movs	r3, #3
 8009404:	e025      	b.n	8009452 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 0304 	and.w	r3, r3, #4
 8009410:	2b04      	cmp	r3, #4
 8009412:	d10e      	bne.n	8009432 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009414:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009418:	9300      	str	r3, [sp, #0]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2200      	movs	r2, #0
 800941e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f819 	bl	800945a <UART_WaitOnFlagUntilTimeout>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800942e:	2303      	movs	r3, #3
 8009430:	e00f      	b.n	8009452 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2220      	movs	r2, #32
 8009436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2220      	movs	r2, #32
 800943e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b09c      	sub	sp, #112	; 0x70
 800945e:	af00      	add	r7, sp, #0
 8009460:	60f8      	str	r0, [r7, #12]
 8009462:	60b9      	str	r1, [r7, #8]
 8009464:	603b      	str	r3, [r7, #0]
 8009466:	4613      	mov	r3, r2
 8009468:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800946a:	e0a9      	b.n	80095c0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800946c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800946e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009472:	f000 80a5 	beq.w	80095c0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009476:	f7f9 fbc9 	bl	8002c0c <HAL_GetTick>
 800947a:	4602      	mov	r2, r0
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009482:	429a      	cmp	r2, r3
 8009484:	d302      	bcc.n	800948c <UART_WaitOnFlagUntilTimeout+0x32>
 8009486:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009488:	2b00      	cmp	r3, #0
 800948a:	d140      	bne.n	800950e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009494:	e853 3f00 	ldrex	r3, [r3]
 8009498:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800949a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800949c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80094a0:	667b      	str	r3, [r7, #100]	; 0x64
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094ac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80094b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80094b2:	e841 2300 	strex	r3, r2, [r1]
 80094b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80094b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1e6      	bne.n	800948c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3308      	adds	r3, #8
 80094c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094c8:	e853 3f00 	ldrex	r3, [r3]
 80094cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d0:	f023 0301 	bic.w	r3, r3, #1
 80094d4:	663b      	str	r3, [r7, #96]	; 0x60
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	3308      	adds	r3, #8
 80094dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80094de:	64ba      	str	r2, [r7, #72]	; 0x48
 80094e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80094e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094e6:	e841 2300 	strex	r3, r2, [r1]
 80094ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80094ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1e5      	bne.n	80094be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2220      	movs	r2, #32
 80094f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2220      	movs	r2, #32
 80094fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800950a:	2303      	movs	r3, #3
 800950c:	e069      	b.n	80095e2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 0304 	and.w	r3, r3, #4
 8009518:	2b00      	cmp	r3, #0
 800951a:	d051      	beq.n	80095c0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	69db      	ldr	r3, [r3, #28]
 8009522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800952a:	d149      	bne.n	80095c0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009534:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953e:	e853 3f00 	ldrex	r3, [r3]
 8009542:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009546:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800954a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	461a      	mov	r2, r3
 8009552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009554:	637b      	str	r3, [r7, #52]	; 0x34
 8009556:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009558:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800955a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800955c:	e841 2300 	strex	r3, r2, [r1]
 8009560:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1e6      	bne.n	8009536 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	3308      	adds	r3, #8
 800956e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	e853 3f00 	ldrex	r3, [r3]
 8009576:	613b      	str	r3, [r7, #16]
   return(result);
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	f023 0301 	bic.w	r3, r3, #1
 800957e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	3308      	adds	r3, #8
 8009586:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009588:	623a      	str	r2, [r7, #32]
 800958a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958c:	69f9      	ldr	r1, [r7, #28]
 800958e:	6a3a      	ldr	r2, [r7, #32]
 8009590:	e841 2300 	strex	r3, r2, [r1]
 8009594:	61bb      	str	r3, [r7, #24]
   return(result);
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1e5      	bne.n	8009568 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2220      	movs	r2, #32
 80095a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2220      	movs	r2, #32
 80095a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2220      	movs	r2, #32
 80095b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80095bc:	2303      	movs	r3, #3
 80095be:	e010      	b.n	80095e2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	69da      	ldr	r2, [r3, #28]
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	4013      	ands	r3, r2
 80095ca:	68ba      	ldr	r2, [r7, #8]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	bf0c      	ite	eq
 80095d0:	2301      	moveq	r3, #1
 80095d2:	2300      	movne	r3, #0
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	461a      	mov	r2, r3
 80095d8:	79fb      	ldrb	r3, [r7, #7]
 80095da:	429a      	cmp	r2, r3
 80095dc:	f43f af46 	beq.w	800946c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3770      	adds	r7, #112	; 0x70
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
	...

080095ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b0a3      	sub	sp, #140	; 0x8c
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	4613      	mov	r3, r2
 80095f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	68ba      	ldr	r2, [r7, #8]
 80095fe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	88fa      	ldrh	r2, [r7, #6]
 8009604:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	88fa      	ldrh	r2, [r7, #6]
 800960c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2200      	movs	r2, #0
 8009614:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800961e:	d10e      	bne.n	800963e <UART_Start_Receive_IT+0x52>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d105      	bne.n	8009634 <UART_Start_Receive_IT+0x48>
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800962e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009632:	e02d      	b.n	8009690 <UART_Start_Receive_IT+0xa4>
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	22ff      	movs	r2, #255	; 0xff
 8009638:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800963c:	e028      	b.n	8009690 <UART_Start_Receive_IT+0xa4>
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d10d      	bne.n	8009662 <UART_Start_Receive_IT+0x76>
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d104      	bne.n	8009658 <UART_Start_Receive_IT+0x6c>
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	22ff      	movs	r2, #255	; 0xff
 8009652:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009656:	e01b      	b.n	8009690 <UART_Start_Receive_IT+0xa4>
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	227f      	movs	r2, #127	; 0x7f
 800965c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009660:	e016      	b.n	8009690 <UART_Start_Receive_IT+0xa4>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800966a:	d10d      	bne.n	8009688 <UART_Start_Receive_IT+0x9c>
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d104      	bne.n	800967e <UART_Start_Receive_IT+0x92>
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	227f      	movs	r2, #127	; 0x7f
 8009678:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800967c:	e008      	b.n	8009690 <UART_Start_Receive_IT+0xa4>
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	223f      	movs	r2, #63	; 0x3f
 8009682:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009686:	e003      	b.n	8009690 <UART_Start_Receive_IT+0xa4>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2200      	movs	r2, #0
 8009694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2222      	movs	r2, #34	; 0x22
 800969c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3308      	adds	r3, #8
 80096a6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096aa:	e853 3f00 	ldrex	r3, [r3]
 80096ae:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80096b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096b2:	f043 0301 	orr.w	r3, r3, #1
 80096b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	3308      	adds	r3, #8
 80096c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80096c4:	673a      	str	r2, [r7, #112]	; 0x70
 80096c6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80096ca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80096cc:	e841 2300 	strex	r3, r2, [r1]
 80096d0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80096d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1e3      	bne.n	80096a0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096e0:	d153      	bne.n	800978a <UART_Start_Receive_IT+0x19e>
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80096e8:	88fa      	ldrh	r2, [r7, #6]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d34d      	bcc.n	800978a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096f6:	d107      	bne.n	8009708 <UART_Start_Receive_IT+0x11c>
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	691b      	ldr	r3, [r3, #16]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d103      	bne.n	8009708 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	4a4b      	ldr	r2, [pc, #300]	; (8009830 <UART_Start_Receive_IT+0x244>)
 8009704:	671a      	str	r2, [r3, #112]	; 0x70
 8009706:	e002      	b.n	800970e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	4a4a      	ldr	r2, [pc, #296]	; (8009834 <UART_Start_Receive_IT+0x248>)
 800970c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	691b      	ldr	r3, [r3, #16]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d01a      	beq.n	8009754 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009726:	e853 3f00 	ldrex	r3, [r3]
 800972a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800972c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800972e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009732:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	461a      	mov	r2, r3
 800973c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009740:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009742:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009744:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009746:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009748:	e841 2300 	strex	r3, r2, [r1]
 800974c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800974e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1e4      	bne.n	800971e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	3308      	adds	r3, #8
 800975a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800975e:	e853 3f00 	ldrex	r3, [r3]
 8009762:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800976a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	3308      	adds	r3, #8
 8009772:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009774:	64ba      	str	r2, [r7, #72]	; 0x48
 8009776:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009778:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800977a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800977c:	e841 2300 	strex	r3, r2, [r1]
 8009780:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1e5      	bne.n	8009754 <UART_Start_Receive_IT+0x168>
 8009788:	e04a      	b.n	8009820 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009792:	d107      	bne.n	80097a4 <UART_Start_Receive_IT+0x1b8>
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d103      	bne.n	80097a4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	4a26      	ldr	r2, [pc, #152]	; (8009838 <UART_Start_Receive_IT+0x24c>)
 80097a0:	671a      	str	r2, [r3, #112]	; 0x70
 80097a2:	e002      	b.n	80097aa <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	4a25      	ldr	r2, [pc, #148]	; (800983c <UART_Start_Receive_IT+0x250>)
 80097a8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d019      	beq.n	80097ee <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c2:	e853 3f00 	ldrex	r3, [r3]
 80097c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80097ce:	677b      	str	r3, [r7, #116]	; 0x74
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	461a      	mov	r2, r3
 80097d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097d8:	637b      	str	r3, [r7, #52]	; 0x34
 80097da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80097de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097e0:	e841 2300 	strex	r3, r2, [r1]
 80097e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80097e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1e6      	bne.n	80097ba <UART_Start_Receive_IT+0x1ce>
 80097ec:	e018      	b.n	8009820 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	e853 3f00 	ldrex	r3, [r3]
 80097fa:	613b      	str	r3, [r7, #16]
   return(result);
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	f043 0320 	orr.w	r3, r3, #32
 8009802:	67bb      	str	r3, [r7, #120]	; 0x78
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	461a      	mov	r2, r3
 800980a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800980c:	623b      	str	r3, [r7, #32]
 800980e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009810:	69f9      	ldr	r1, [r7, #28]
 8009812:	6a3a      	ldr	r2, [r7, #32]
 8009814:	e841 2300 	strex	r3, r2, [r1]
 8009818:	61bb      	str	r3, [r7, #24]
   return(result);
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1e6      	bne.n	80097ee <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	378c      	adds	r7, #140	; 0x8c
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop
 8009830:	08009f49 	.word	0x08009f49
 8009834:	08009c51 	.word	0x08009c51
 8009838:	08009aef 	.word	0x08009aef
 800983c:	0800998f 	.word	0x0800998f

08009840 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009840:	b480      	push	{r7}
 8009842:	b095      	sub	sp, #84	; 0x54
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009850:	e853 3f00 	ldrex	r3, [r3]
 8009854:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800985c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	461a      	mov	r2, r3
 8009864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009866:	643b      	str	r3, [r7, #64]	; 0x40
 8009868:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800986c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800986e:	e841 2300 	strex	r3, r2, [r1]
 8009872:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1e6      	bne.n	8009848 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3308      	adds	r3, #8
 8009880:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009882:	6a3b      	ldr	r3, [r7, #32]
 8009884:	e853 3f00 	ldrex	r3, [r3]
 8009888:	61fb      	str	r3, [r7, #28]
   return(result);
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009890:	f023 0301 	bic.w	r3, r3, #1
 8009894:	64bb      	str	r3, [r7, #72]	; 0x48
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	3308      	adds	r3, #8
 800989c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800989e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80098a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098a6:	e841 2300 	strex	r3, r2, [r1]
 80098aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1e3      	bne.n	800987a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d118      	bne.n	80098ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	e853 3f00 	ldrex	r3, [r3]
 80098c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	f023 0310 	bic.w	r3, r3, #16
 80098ce:	647b      	str	r3, [r7, #68]	; 0x44
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	461a      	mov	r2, r3
 80098d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098d8:	61bb      	str	r3, [r7, #24]
 80098da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098dc:	6979      	ldr	r1, [r7, #20]
 80098de:	69ba      	ldr	r2, [r7, #24]
 80098e0:	e841 2300 	strex	r3, r2, [r1]
 80098e4:	613b      	str	r3, [r7, #16]
   return(result);
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1e6      	bne.n	80098ba <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2220      	movs	r2, #32
 80098f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009900:	bf00      	nop
 8009902:	3754      	adds	r7, #84	; 0x54
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009918:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2200      	movs	r2, #0
 800991e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2200      	movs	r2, #0
 8009926:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800992a:	68f8      	ldr	r0, [r7, #12]
 800992c:	f7ff f996 	bl	8008c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009930:	bf00      	nop
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b088      	sub	sp, #32
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	e853 3f00 	ldrex	r3, [r3]
 800994c:	60bb      	str	r3, [r7, #8]
   return(result);
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009954:	61fb      	str	r3, [r7, #28]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	461a      	mov	r2, r3
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	61bb      	str	r3, [r7, #24]
 8009960:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009962:	6979      	ldr	r1, [r7, #20]
 8009964:	69ba      	ldr	r2, [r7, #24]
 8009966:	e841 2300 	strex	r3, r2, [r1]
 800996a:	613b      	str	r3, [r7, #16]
   return(result);
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1e6      	bne.n	8009940 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2220      	movs	r2, #32
 8009976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7ff f961 	bl	8008c48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009986:	bf00      	nop
 8009988:	3720      	adds	r7, #32
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b096      	sub	sp, #88	; 0x58
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800999c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099a6:	2b22      	cmp	r3, #34	; 0x22
 80099a8:	f040 8095 	bne.w	8009ad6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80099b6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80099ba:	b2d9      	uxtb	r1, r3
 80099bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80099c0:	b2da      	uxtb	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099c6:	400a      	ands	r2, r1
 80099c8:	b2d2      	uxtb	r2, r2
 80099ca:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099d0:	1c5a      	adds	r2, r3, #1
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099dc:	b29b      	uxth	r3, r3
 80099de:	3b01      	subs	r3, #1
 80099e0:	b29a      	uxth	r2, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d178      	bne.n	8009ae6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fc:	e853 3f00 	ldrex	r3, [r3]
 8009a00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a08:	653b      	str	r3, [r7, #80]	; 0x50
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	461a      	mov	r2, r3
 8009a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a12:	647b      	str	r3, [r7, #68]	; 0x44
 8009a14:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a1a:	e841 2300 	strex	r3, r2, [r1]
 8009a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d1e6      	bne.n	80099f4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	3308      	adds	r3, #8
 8009a2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a30:	e853 3f00 	ldrex	r3, [r3]
 8009a34:	623b      	str	r3, [r7, #32]
   return(result);
 8009a36:	6a3b      	ldr	r3, [r7, #32]
 8009a38:	f023 0301 	bic.w	r3, r3, #1
 8009a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	3308      	adds	r3, #8
 8009a44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a46:	633a      	str	r2, [r7, #48]	; 0x30
 8009a48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a4e:	e841 2300 	strex	r3, r2, [r1]
 8009a52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1e5      	bne.n	8009a26 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2220      	movs	r2, #32
 8009a5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d12e      	bne.n	8009ace <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	e853 3f00 	ldrex	r3, [r3]
 8009a82:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f023 0310 	bic.w	r3, r3, #16
 8009a8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	461a      	mov	r2, r3
 8009a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a94:	61fb      	str	r3, [r7, #28]
 8009a96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a98:	69b9      	ldr	r1, [r7, #24]
 8009a9a:	69fa      	ldr	r2, [r7, #28]
 8009a9c:	e841 2300 	strex	r3, r2, [r1]
 8009aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1e6      	bne.n	8009a76 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	69db      	ldr	r3, [r3, #28]
 8009aae:	f003 0310 	and.w	r3, r3, #16
 8009ab2:	2b10      	cmp	r3, #16
 8009ab4:	d103      	bne.n	8009abe <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2210      	movs	r2, #16
 8009abc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7ff f8d2 	bl	8008c70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009acc:	e00b      	b.n	8009ae6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7f9 f832 	bl	8002b38 <HAL_UART_RxCpltCallback>
}
 8009ad4:	e007      	b.n	8009ae6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	699a      	ldr	r2, [r3, #24]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f042 0208 	orr.w	r2, r2, #8
 8009ae4:	619a      	str	r2, [r3, #24]
}
 8009ae6:	bf00      	nop
 8009ae8:	3758      	adds	r7, #88	; 0x58
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b096      	sub	sp, #88	; 0x58
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009afc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b06:	2b22      	cmp	r3, #34	; 0x22
 8009b08:	f040 8095 	bne.w	8009c36 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b12:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b1a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009b1c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009b20:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009b24:	4013      	ands	r3, r2
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b2a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b30:	1c9a      	adds	r2, r3, #2
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d178      	bne.n	8009c46 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b5c:	e853 3f00 	ldrex	r3, [r3]
 8009b60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	461a      	mov	r2, r3
 8009b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b72:	643b      	str	r3, [r7, #64]	; 0x40
 8009b74:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b7a:	e841 2300 	strex	r3, r2, [r1]
 8009b7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d1e6      	bne.n	8009b54 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	3308      	adds	r3, #8
 8009b8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8e:	6a3b      	ldr	r3, [r7, #32]
 8009b90:	e853 3f00 	ldrex	r3, [r3]
 8009b94:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	f023 0301 	bic.w	r3, r3, #1
 8009b9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	3308      	adds	r3, #8
 8009ba4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ba6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ba8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009baa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bae:	e841 2300 	strex	r3, r2, [r1]
 8009bb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1e5      	bne.n	8009b86 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2220      	movs	r2, #32
 8009bbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d12e      	bne.n	8009c2e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	e853 3f00 	ldrex	r3, [r3]
 8009be2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	f023 0310 	bic.w	r3, r3, #16
 8009bea:	647b      	str	r3, [r7, #68]	; 0x44
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bf4:	61bb      	str	r3, [r7, #24]
 8009bf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf8:	6979      	ldr	r1, [r7, #20]
 8009bfa:	69ba      	ldr	r2, [r7, #24]
 8009bfc:	e841 2300 	strex	r3, r2, [r1]
 8009c00:	613b      	str	r3, [r7, #16]
   return(result);
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1e6      	bne.n	8009bd6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	69db      	ldr	r3, [r3, #28]
 8009c0e:	f003 0310 	and.w	r3, r3, #16
 8009c12:	2b10      	cmp	r3, #16
 8009c14:	d103      	bne.n	8009c1e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2210      	movs	r2, #16
 8009c1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c24:	4619      	mov	r1, r3
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f7ff f822 	bl	8008c70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c2c:	e00b      	b.n	8009c46 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f7f8 ff82 	bl	8002b38 <HAL_UART_RxCpltCallback>
}
 8009c34:	e007      	b.n	8009c46 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	699a      	ldr	r2, [r3, #24]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f042 0208 	orr.w	r2, r2, #8
 8009c44:	619a      	str	r2, [r3, #24]
}
 8009c46:	bf00      	nop
 8009c48:	3758      	adds	r7, #88	; 0x58
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
	...

08009c50 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b0a6      	sub	sp, #152	; 0x98
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c5e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	69db      	ldr	r3, [r3, #28]
 8009c68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c86:	2b22      	cmp	r3, #34	; 0x22
 8009c88:	f040 814f 	bne.w	8009f2a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c92:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c96:	e0f6      	b.n	8009e86 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009ca2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009ca6:	b2d9      	uxtb	r1, r3
 8009ca8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009cac:	b2da      	uxtb	r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cb2:	400a      	ands	r2, r1
 8009cb4:	b2d2      	uxtb	r2, r2
 8009cb6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cbc:	1c5a      	adds	r2, r3, #1
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	69db      	ldr	r3, [r3, #28]
 8009cda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009cde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009ce2:	f003 0307 	and.w	r3, r3, #7
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d053      	beq.n	8009d92 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009cea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009cee:	f003 0301 	and.w	r3, r3, #1
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d011      	beq.n	8009d1a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00b      	beq.n	8009d1a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2201      	movs	r2, #1
 8009d08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d10:	f043 0201 	orr.w	r2, r3, #1
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009d1e:	f003 0302 	and.w	r3, r3, #2
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d011      	beq.n	8009d4a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009d26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d2a:	f003 0301 	and.w	r3, r3, #1
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00b      	beq.n	8009d4a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2202      	movs	r2, #2
 8009d38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d40:	f043 0204 	orr.w	r2, r3, #4
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009d4e:	f003 0304 	and.w	r3, r3, #4
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d011      	beq.n	8009d7a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009d56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d5a:	f003 0301 	and.w	r3, r3, #1
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00b      	beq.n	8009d7a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2204      	movs	r2, #4
 8009d68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d70:	f043 0202 	orr.w	r2, r3, #2
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d006      	beq.n	8009d92 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f7fe ff69 	bl	8008c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d173      	bne.n	8009e86 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009da6:	e853 3f00 	ldrex	r3, [r3]
 8009daa:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009dac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009dae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009db2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	461a      	mov	r2, r3
 8009dbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009dc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8009dc2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009dc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009dc8:	e841 2300 	strex	r3, r2, [r1]
 8009dcc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009dce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d1e4      	bne.n	8009d9e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	3308      	adds	r3, #8
 8009dda:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dde:	e853 3f00 	ldrex	r3, [r3]
 8009de2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009de6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009dea:	f023 0301 	bic.w	r3, r3, #1
 8009dee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	3308      	adds	r3, #8
 8009df6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009df8:	657a      	str	r2, [r7, #84]	; 0x54
 8009dfa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009dfe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e00:	e841 2300 	strex	r3, r2, [r1]
 8009e04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d1e3      	bne.n	8009dd4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2220      	movs	r2, #32
 8009e10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d12e      	bne.n	8009e80 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e30:	e853 3f00 	ldrex	r3, [r3]
 8009e34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e38:	f023 0310 	bic.w	r3, r3, #16
 8009e3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	461a      	mov	r2, r3
 8009e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e46:	643b      	str	r3, [r7, #64]	; 0x40
 8009e48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e4e:	e841 2300 	strex	r3, r2, [r1]
 8009e52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1e6      	bne.n	8009e28 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	69db      	ldr	r3, [r3, #28]
 8009e60:	f003 0310 	and.w	r3, r3, #16
 8009e64:	2b10      	cmp	r3, #16
 8009e66:	d103      	bne.n	8009e70 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2210      	movs	r2, #16
 8009e6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009e76:	4619      	mov	r1, r3
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f7fe fef9 	bl	8008c70 <HAL_UARTEx_RxEventCallback>
 8009e7e:	e002      	b.n	8009e86 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f7f8 fe59 	bl	8002b38 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e86:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d006      	beq.n	8009e9c <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009e8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009e92:	f003 0320 	and.w	r3, r3, #32
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	f47f aefe 	bne.w	8009c98 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ea2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009ea6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d045      	beq.n	8009f3a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009eb4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d23e      	bcs.n	8009f3a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	3308      	adds	r3, #8
 8009ec2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec4:	6a3b      	ldr	r3, [r7, #32]
 8009ec6:	e853 3f00 	ldrex	r3, [r3]
 8009eca:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ecc:	69fb      	ldr	r3, [r7, #28]
 8009ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ed2:	673b      	str	r3, [r7, #112]	; 0x70
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	3308      	adds	r3, #8
 8009eda:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009edc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ede:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ee4:	e841 2300 	strex	r3, r2, [r1]
 8009ee8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d1e5      	bne.n	8009ebc <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	4a14      	ldr	r2, [pc, #80]	; (8009f44 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009ef4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	e853 3f00 	ldrex	r3, [r3]
 8009f02:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	f043 0320 	orr.w	r3, r3, #32
 8009f0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	461a      	mov	r2, r3
 8009f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f14:	61bb      	str	r3, [r7, #24]
 8009f16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f18:	6979      	ldr	r1, [r7, #20]
 8009f1a:	69ba      	ldr	r2, [r7, #24]
 8009f1c:	e841 2300 	strex	r3, r2, [r1]
 8009f20:	613b      	str	r3, [r7, #16]
   return(result);
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d1e6      	bne.n	8009ef6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f28:	e007      	b.n	8009f3a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	699a      	ldr	r2, [r3, #24]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f042 0208 	orr.w	r2, r2, #8
 8009f38:	619a      	str	r2, [r3, #24]
}
 8009f3a:	bf00      	nop
 8009f3c:	3798      	adds	r7, #152	; 0x98
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	0800998f 	.word	0x0800998f

08009f48 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b0a8      	sub	sp, #160	; 0xa0
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f56:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	69db      	ldr	r3, [r3, #28]
 8009f60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f7e:	2b22      	cmp	r3, #34	; 0x22
 8009f80:	f040 8153 	bne.w	800a22a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009f8a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f8e:	e0fa      	b.n	800a186 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f96:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009fa2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009fa6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009faa:	4013      	ands	r3, r2
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009fb2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fb8:	1c9a      	adds	r2, r3, #2
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	69db      	ldr	r3, [r3, #28]
 8009fd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009fda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009fde:	f003 0307 	and.w	r3, r3, #7
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d053      	beq.n	800a08e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009fe6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009fea:	f003 0301 	and.w	r3, r3, #1
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d011      	beq.n	800a016 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009ff2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00b      	beq.n	800a016 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2201      	movs	r2, #1
 800a004:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a00c:	f043 0201 	orr.w	r2, r3, #1
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a016:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a01a:	f003 0302 	and.w	r3, r3, #2
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d011      	beq.n	800a046 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a022:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a026:	f003 0301 	and.w	r3, r3, #1
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00b      	beq.n	800a046 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2202      	movs	r2, #2
 800a034:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a03c:	f043 0204 	orr.w	r2, r3, #4
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a046:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a04a:	f003 0304 	and.w	r3, r3, #4
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d011      	beq.n	800a076 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a052:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a056:	f003 0301 	and.w	r3, r3, #1
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00b      	beq.n	800a076 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2204      	movs	r2, #4
 800a064:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a06c:	f043 0202 	orr.w	r2, r3, #2
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d006      	beq.n	800a08e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f7fe fdeb 	bl	8008c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a094:	b29b      	uxth	r3, r3
 800a096:	2b00      	cmp	r3, #0
 800a098:	d175      	bne.n	800a186 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0a2:	e853 3f00 	ldrex	r3, [r3]
 800a0a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a0a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a0bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a0be:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a0c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a0c4:	e841 2300 	strex	r3, r2, [r1]
 800a0c8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a0ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d1e4      	bne.n	800a09a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	3308      	adds	r3, #8
 800a0d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0da:	e853 3f00 	ldrex	r3, [r3]
 800a0de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a0e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0e6:	f023 0301 	bic.w	r3, r3, #1
 800a0ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	3308      	adds	r3, #8
 800a0f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a0f8:	65ba      	str	r2, [r7, #88]	; 0x58
 800a0fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a0fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a100:	e841 2300 	strex	r3, r2, [r1]
 800a104:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1e1      	bne.n	800a0d0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2220      	movs	r2, #32
 800a110:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d12e      	bne.n	800a180 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a130:	e853 3f00 	ldrex	r3, [r3]
 800a134:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a138:	f023 0310 	bic.w	r3, r3, #16
 800a13c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	461a      	mov	r2, r3
 800a144:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a146:	647b      	str	r3, [r7, #68]	; 0x44
 800a148:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a14c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a14e:	e841 2300 	strex	r3, r2, [r1]
 800a152:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a156:	2b00      	cmp	r3, #0
 800a158:	d1e6      	bne.n	800a128 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	69db      	ldr	r3, [r3, #28]
 800a160:	f003 0310 	and.w	r3, r3, #16
 800a164:	2b10      	cmp	r3, #16
 800a166:	d103      	bne.n	800a170 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2210      	movs	r2, #16
 800a16e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a176:	4619      	mov	r1, r3
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f7fe fd79 	bl	8008c70 <HAL_UARTEx_RxEventCallback>
 800a17e:	e002      	b.n	800a186 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f7f8 fcd9 	bl	8002b38 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a186:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d006      	beq.n	800a19c <UART_RxISR_16BIT_FIFOEN+0x254>
 800a18e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a192:	f003 0320 	and.w	r3, r3, #32
 800a196:	2b00      	cmp	r3, #0
 800a198:	f47f aefa 	bne.w	8009f90 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1a2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a1a6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d045      	beq.n	800a23a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a1b4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d23e      	bcs.n	800a23a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	3308      	adds	r3, #8
 800a1c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c6:	e853 3f00 	ldrex	r3, [r3]
 800a1ca:	623b      	str	r3, [r7, #32]
   return(result);
 800a1cc:	6a3b      	ldr	r3, [r7, #32]
 800a1ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1d2:	677b      	str	r3, [r7, #116]	; 0x74
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	3308      	adds	r3, #8
 800a1da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a1dc:	633a      	str	r2, [r7, #48]	; 0x30
 800a1de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1e4:	e841 2300 	strex	r3, r2, [r1]
 800a1e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d1e5      	bne.n	800a1bc <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a14      	ldr	r2, [pc, #80]	; (800a244 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800a1f4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	e853 3f00 	ldrex	r3, [r3]
 800a202:	60fb      	str	r3, [r7, #12]
   return(result);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f043 0320 	orr.w	r3, r3, #32
 800a20a:	673b      	str	r3, [r7, #112]	; 0x70
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	461a      	mov	r2, r3
 800a212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a214:	61fb      	str	r3, [r7, #28]
 800a216:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a218:	69b9      	ldr	r1, [r7, #24]
 800a21a:	69fa      	ldr	r2, [r7, #28]
 800a21c:	e841 2300 	strex	r3, r2, [r1]
 800a220:	617b      	str	r3, [r7, #20]
   return(result);
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d1e6      	bne.n	800a1f6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a228:	e007      	b.n	800a23a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	699a      	ldr	r2, [r3, #24]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f042 0208 	orr.w	r2, r2, #8
 800a238:	619a      	str	r2, [r3, #24]
}
 800a23a:	bf00      	nop
 800a23c:	37a0      	adds	r7, #160	; 0xa0
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	08009aef 	.word	0x08009aef

0800a248 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a250:	bf00      	nop
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a278:	bf00      	nop
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a284:	b480      	push	{r7}
 800a286:	b085      	sub	sp, #20
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a292:	2b01      	cmp	r3, #1
 800a294:	d101      	bne.n	800a29a <HAL_UARTEx_DisableFifoMode+0x16>
 800a296:	2302      	movs	r3, #2
 800a298:	e027      	b.n	800a2ea <HAL_UARTEx_DisableFifoMode+0x66>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2201      	movs	r2, #1
 800a29e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2224      	movs	r2, #36	; 0x24
 800a2a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f022 0201 	bic.w	r2, r2, #1
 800a2c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a2c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	68fa      	ldr	r2, [r7, #12]
 800a2d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2220      	movs	r2, #32
 800a2dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3714      	adds	r7, #20
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b084      	sub	sp, #16
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
 800a2fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a306:	2b01      	cmp	r3, #1
 800a308:	d101      	bne.n	800a30e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a30a:	2302      	movs	r3, #2
 800a30c:	e02d      	b.n	800a36a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2201      	movs	r2, #1
 800a312:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2224      	movs	r2, #36	; 0x24
 800a31a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f022 0201 	bic.w	r2, r2, #1
 800a334:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	683a      	ldr	r2, [r7, #0]
 800a346:	430a      	orrs	r2, r1
 800a348:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 f850 	bl	800a3f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2220      	movs	r2, #32
 800a35c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a368:	2300      	movs	r3, #0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b084      	sub	sp, #16
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a382:	2b01      	cmp	r3, #1
 800a384:	d101      	bne.n	800a38a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a386:	2302      	movs	r3, #2
 800a388:	e02d      	b.n	800a3e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2201      	movs	r2, #1
 800a38e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2224      	movs	r2, #36	; 0x24
 800a396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f022 0201 	bic.w	r2, r2, #1
 800a3b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	683a      	ldr	r2, [r7, #0]
 800a3c2:	430a      	orrs	r2, r1
 800a3c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f812 	bl	800a3f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2220      	movs	r2, #32
 800a3d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
	...

0800a3f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d108      	bne.n	800a412 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2201      	movs	r2, #1
 800a404:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a410:	e031      	b.n	800a476 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a412:	2308      	movs	r3, #8
 800a414:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a416:	2308      	movs	r3, #8
 800a418:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	0e5b      	lsrs	r3, r3, #25
 800a422:	b2db      	uxtb	r3, r3
 800a424:	f003 0307 	and.w	r3, r3, #7
 800a428:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	0f5b      	lsrs	r3, r3, #29
 800a432:	b2db      	uxtb	r3, r3
 800a434:	f003 0307 	and.w	r3, r3, #7
 800a438:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a43a:	7bbb      	ldrb	r3, [r7, #14]
 800a43c:	7b3a      	ldrb	r2, [r7, #12]
 800a43e:	4911      	ldr	r1, [pc, #68]	; (800a484 <UARTEx_SetNbDataToProcess+0x94>)
 800a440:	5c8a      	ldrb	r2, [r1, r2]
 800a442:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a446:	7b3a      	ldrb	r2, [r7, #12]
 800a448:	490f      	ldr	r1, [pc, #60]	; (800a488 <UARTEx_SetNbDataToProcess+0x98>)
 800a44a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a44c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a450:	b29a      	uxth	r2, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a458:	7bfb      	ldrb	r3, [r7, #15]
 800a45a:	7b7a      	ldrb	r2, [r7, #13]
 800a45c:	4909      	ldr	r1, [pc, #36]	; (800a484 <UARTEx_SetNbDataToProcess+0x94>)
 800a45e:	5c8a      	ldrb	r2, [r1, r2]
 800a460:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a464:	7b7a      	ldrb	r2, [r7, #13]
 800a466:	4908      	ldr	r1, [pc, #32]	; (800a488 <UARTEx_SetNbDataToProcess+0x98>)
 800a468:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a46a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a46e:	b29a      	uxth	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a476:	bf00      	nop
 800a478:	3714      	adds	r7, #20
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	0800bbb8 	.word	0x0800bbb8
 800a488:	0800bbc0 	.word	0x0800bbc0

0800a48c <atoi>:
 800a48c:	220a      	movs	r2, #10
 800a48e:	2100      	movs	r1, #0
 800a490:	f000 b882 	b.w	800a598 <strtol>

0800a494 <_strtol_l.constprop.0>:
 800a494:	2b01      	cmp	r3, #1
 800a496:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a49a:	d001      	beq.n	800a4a0 <_strtol_l.constprop.0+0xc>
 800a49c:	2b24      	cmp	r3, #36	; 0x24
 800a49e:	d906      	bls.n	800a4ae <_strtol_l.constprop.0+0x1a>
 800a4a0:	f000 fa68 	bl	800a974 <__errno>
 800a4a4:	2316      	movs	r3, #22
 800a4a6:	6003      	str	r3, [r0, #0]
 800a4a8:	2000      	movs	r0, #0
 800a4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a594 <_strtol_l.constprop.0+0x100>
 800a4b2:	460d      	mov	r5, r1
 800a4b4:	462e      	mov	r6, r5
 800a4b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4ba:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a4be:	f017 0708 	ands.w	r7, r7, #8
 800a4c2:	d1f7      	bne.n	800a4b4 <_strtol_l.constprop.0+0x20>
 800a4c4:	2c2d      	cmp	r4, #45	; 0x2d
 800a4c6:	d132      	bne.n	800a52e <_strtol_l.constprop.0+0x9a>
 800a4c8:	782c      	ldrb	r4, [r5, #0]
 800a4ca:	2701      	movs	r7, #1
 800a4cc:	1cb5      	adds	r5, r6, #2
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d05b      	beq.n	800a58a <_strtol_l.constprop.0+0xf6>
 800a4d2:	2b10      	cmp	r3, #16
 800a4d4:	d109      	bne.n	800a4ea <_strtol_l.constprop.0+0x56>
 800a4d6:	2c30      	cmp	r4, #48	; 0x30
 800a4d8:	d107      	bne.n	800a4ea <_strtol_l.constprop.0+0x56>
 800a4da:	782c      	ldrb	r4, [r5, #0]
 800a4dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a4e0:	2c58      	cmp	r4, #88	; 0x58
 800a4e2:	d14d      	bne.n	800a580 <_strtol_l.constprop.0+0xec>
 800a4e4:	786c      	ldrb	r4, [r5, #1]
 800a4e6:	2310      	movs	r3, #16
 800a4e8:	3502      	adds	r5, #2
 800a4ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a4ee:	f108 38ff 	add.w	r8, r8, #4294967295
 800a4f2:	f04f 0e00 	mov.w	lr, #0
 800a4f6:	fbb8 f9f3 	udiv	r9, r8, r3
 800a4fa:	4676      	mov	r6, lr
 800a4fc:	fb03 8a19 	mls	sl, r3, r9, r8
 800a500:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a504:	f1bc 0f09 	cmp.w	ip, #9
 800a508:	d816      	bhi.n	800a538 <_strtol_l.constprop.0+0xa4>
 800a50a:	4664      	mov	r4, ip
 800a50c:	42a3      	cmp	r3, r4
 800a50e:	dd24      	ble.n	800a55a <_strtol_l.constprop.0+0xc6>
 800a510:	f1be 3fff 	cmp.w	lr, #4294967295
 800a514:	d008      	beq.n	800a528 <_strtol_l.constprop.0+0x94>
 800a516:	45b1      	cmp	r9, r6
 800a518:	d31c      	bcc.n	800a554 <_strtol_l.constprop.0+0xc0>
 800a51a:	d101      	bne.n	800a520 <_strtol_l.constprop.0+0x8c>
 800a51c:	45a2      	cmp	sl, r4
 800a51e:	db19      	blt.n	800a554 <_strtol_l.constprop.0+0xc0>
 800a520:	fb06 4603 	mla	r6, r6, r3, r4
 800a524:	f04f 0e01 	mov.w	lr, #1
 800a528:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a52c:	e7e8      	b.n	800a500 <_strtol_l.constprop.0+0x6c>
 800a52e:	2c2b      	cmp	r4, #43	; 0x2b
 800a530:	bf04      	itt	eq
 800a532:	782c      	ldrbeq	r4, [r5, #0]
 800a534:	1cb5      	addeq	r5, r6, #2
 800a536:	e7ca      	b.n	800a4ce <_strtol_l.constprop.0+0x3a>
 800a538:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a53c:	f1bc 0f19 	cmp.w	ip, #25
 800a540:	d801      	bhi.n	800a546 <_strtol_l.constprop.0+0xb2>
 800a542:	3c37      	subs	r4, #55	; 0x37
 800a544:	e7e2      	b.n	800a50c <_strtol_l.constprop.0+0x78>
 800a546:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a54a:	f1bc 0f19 	cmp.w	ip, #25
 800a54e:	d804      	bhi.n	800a55a <_strtol_l.constprop.0+0xc6>
 800a550:	3c57      	subs	r4, #87	; 0x57
 800a552:	e7db      	b.n	800a50c <_strtol_l.constprop.0+0x78>
 800a554:	f04f 3eff 	mov.w	lr, #4294967295
 800a558:	e7e6      	b.n	800a528 <_strtol_l.constprop.0+0x94>
 800a55a:	f1be 3fff 	cmp.w	lr, #4294967295
 800a55e:	d105      	bne.n	800a56c <_strtol_l.constprop.0+0xd8>
 800a560:	2322      	movs	r3, #34	; 0x22
 800a562:	6003      	str	r3, [r0, #0]
 800a564:	4646      	mov	r6, r8
 800a566:	b942      	cbnz	r2, 800a57a <_strtol_l.constprop.0+0xe6>
 800a568:	4630      	mov	r0, r6
 800a56a:	e79e      	b.n	800a4aa <_strtol_l.constprop.0+0x16>
 800a56c:	b107      	cbz	r7, 800a570 <_strtol_l.constprop.0+0xdc>
 800a56e:	4276      	negs	r6, r6
 800a570:	2a00      	cmp	r2, #0
 800a572:	d0f9      	beq.n	800a568 <_strtol_l.constprop.0+0xd4>
 800a574:	f1be 0f00 	cmp.w	lr, #0
 800a578:	d000      	beq.n	800a57c <_strtol_l.constprop.0+0xe8>
 800a57a:	1e69      	subs	r1, r5, #1
 800a57c:	6011      	str	r1, [r2, #0]
 800a57e:	e7f3      	b.n	800a568 <_strtol_l.constprop.0+0xd4>
 800a580:	2430      	movs	r4, #48	; 0x30
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1b1      	bne.n	800a4ea <_strtol_l.constprop.0+0x56>
 800a586:	2308      	movs	r3, #8
 800a588:	e7af      	b.n	800a4ea <_strtol_l.constprop.0+0x56>
 800a58a:	2c30      	cmp	r4, #48	; 0x30
 800a58c:	d0a5      	beq.n	800a4da <_strtol_l.constprop.0+0x46>
 800a58e:	230a      	movs	r3, #10
 800a590:	e7ab      	b.n	800a4ea <_strtol_l.constprop.0+0x56>
 800a592:	bf00      	nop
 800a594:	0800bbc9 	.word	0x0800bbc9

0800a598 <strtol>:
 800a598:	4613      	mov	r3, r2
 800a59a:	460a      	mov	r2, r1
 800a59c:	4601      	mov	r1, r0
 800a59e:	4802      	ldr	r0, [pc, #8]	; (800a5a8 <strtol+0x10>)
 800a5a0:	6800      	ldr	r0, [r0, #0]
 800a5a2:	f7ff bf77 	b.w	800a494 <_strtol_l.constprop.0>
 800a5a6:	bf00      	nop
 800a5a8:	2000012c 	.word	0x2000012c

0800a5ac <std>:
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	b510      	push	{r4, lr}
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	e9c0 3300 	strd	r3, r3, [r0]
 800a5b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5ba:	6083      	str	r3, [r0, #8]
 800a5bc:	8181      	strh	r1, [r0, #12]
 800a5be:	6643      	str	r3, [r0, #100]	; 0x64
 800a5c0:	81c2      	strh	r2, [r0, #14]
 800a5c2:	6183      	str	r3, [r0, #24]
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	2208      	movs	r2, #8
 800a5c8:	305c      	adds	r0, #92	; 0x5c
 800a5ca:	f000 f928 	bl	800a81e <memset>
 800a5ce:	4b0d      	ldr	r3, [pc, #52]	; (800a604 <std+0x58>)
 800a5d0:	6263      	str	r3, [r4, #36]	; 0x24
 800a5d2:	4b0d      	ldr	r3, [pc, #52]	; (800a608 <std+0x5c>)
 800a5d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5d6:	4b0d      	ldr	r3, [pc, #52]	; (800a60c <std+0x60>)
 800a5d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5da:	4b0d      	ldr	r3, [pc, #52]	; (800a610 <std+0x64>)
 800a5dc:	6323      	str	r3, [r4, #48]	; 0x30
 800a5de:	4b0d      	ldr	r3, [pc, #52]	; (800a614 <std+0x68>)
 800a5e0:	6224      	str	r4, [r4, #32]
 800a5e2:	429c      	cmp	r4, r3
 800a5e4:	d006      	beq.n	800a5f4 <std+0x48>
 800a5e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a5ea:	4294      	cmp	r4, r2
 800a5ec:	d002      	beq.n	800a5f4 <std+0x48>
 800a5ee:	33d0      	adds	r3, #208	; 0xd0
 800a5f0:	429c      	cmp	r4, r3
 800a5f2:	d105      	bne.n	800a600 <std+0x54>
 800a5f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a5f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5fc:	f000 b9e4 	b.w	800a9c8 <__retarget_lock_init_recursive>
 800a600:	bd10      	pop	{r4, pc}
 800a602:	bf00      	nop
 800a604:	0800a799 	.word	0x0800a799
 800a608:	0800a7bb 	.word	0x0800a7bb
 800a60c:	0800a7f3 	.word	0x0800a7f3
 800a610:	0800a817 	.word	0x0800a817
 800a614:	2000060c 	.word	0x2000060c

0800a618 <stdio_exit_handler>:
 800a618:	4a02      	ldr	r2, [pc, #8]	; (800a624 <stdio_exit_handler+0xc>)
 800a61a:	4903      	ldr	r1, [pc, #12]	; (800a628 <stdio_exit_handler+0x10>)
 800a61c:	4803      	ldr	r0, [pc, #12]	; (800a62c <stdio_exit_handler+0x14>)
 800a61e:	f000 b869 	b.w	800a6f4 <_fwalk_sglue>
 800a622:	bf00      	nop
 800a624:	200000d4 	.word	0x200000d4
 800a628:	0800b2e9 	.word	0x0800b2e9
 800a62c:	200000e0 	.word	0x200000e0

0800a630 <cleanup_stdio>:
 800a630:	6841      	ldr	r1, [r0, #4]
 800a632:	4b0c      	ldr	r3, [pc, #48]	; (800a664 <cleanup_stdio+0x34>)
 800a634:	4299      	cmp	r1, r3
 800a636:	b510      	push	{r4, lr}
 800a638:	4604      	mov	r4, r0
 800a63a:	d001      	beq.n	800a640 <cleanup_stdio+0x10>
 800a63c:	f000 fe54 	bl	800b2e8 <_fflush_r>
 800a640:	68a1      	ldr	r1, [r4, #8]
 800a642:	4b09      	ldr	r3, [pc, #36]	; (800a668 <cleanup_stdio+0x38>)
 800a644:	4299      	cmp	r1, r3
 800a646:	d002      	beq.n	800a64e <cleanup_stdio+0x1e>
 800a648:	4620      	mov	r0, r4
 800a64a:	f000 fe4d 	bl	800b2e8 <_fflush_r>
 800a64e:	68e1      	ldr	r1, [r4, #12]
 800a650:	4b06      	ldr	r3, [pc, #24]	; (800a66c <cleanup_stdio+0x3c>)
 800a652:	4299      	cmp	r1, r3
 800a654:	d004      	beq.n	800a660 <cleanup_stdio+0x30>
 800a656:	4620      	mov	r0, r4
 800a658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a65c:	f000 be44 	b.w	800b2e8 <_fflush_r>
 800a660:	bd10      	pop	{r4, pc}
 800a662:	bf00      	nop
 800a664:	2000060c 	.word	0x2000060c
 800a668:	20000674 	.word	0x20000674
 800a66c:	200006dc 	.word	0x200006dc

0800a670 <global_stdio_init.part.0>:
 800a670:	b510      	push	{r4, lr}
 800a672:	4b0b      	ldr	r3, [pc, #44]	; (800a6a0 <global_stdio_init.part.0+0x30>)
 800a674:	4c0b      	ldr	r4, [pc, #44]	; (800a6a4 <global_stdio_init.part.0+0x34>)
 800a676:	4a0c      	ldr	r2, [pc, #48]	; (800a6a8 <global_stdio_init.part.0+0x38>)
 800a678:	601a      	str	r2, [r3, #0]
 800a67a:	4620      	mov	r0, r4
 800a67c:	2200      	movs	r2, #0
 800a67e:	2104      	movs	r1, #4
 800a680:	f7ff ff94 	bl	800a5ac <std>
 800a684:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a688:	2201      	movs	r2, #1
 800a68a:	2109      	movs	r1, #9
 800a68c:	f7ff ff8e 	bl	800a5ac <std>
 800a690:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a694:	2202      	movs	r2, #2
 800a696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a69a:	2112      	movs	r1, #18
 800a69c:	f7ff bf86 	b.w	800a5ac <std>
 800a6a0:	20000744 	.word	0x20000744
 800a6a4:	2000060c 	.word	0x2000060c
 800a6a8:	0800a619 	.word	0x0800a619

0800a6ac <__sfp_lock_acquire>:
 800a6ac:	4801      	ldr	r0, [pc, #4]	; (800a6b4 <__sfp_lock_acquire+0x8>)
 800a6ae:	f000 b98c 	b.w	800a9ca <__retarget_lock_acquire_recursive>
 800a6b2:	bf00      	nop
 800a6b4:	2000074d 	.word	0x2000074d

0800a6b8 <__sfp_lock_release>:
 800a6b8:	4801      	ldr	r0, [pc, #4]	; (800a6c0 <__sfp_lock_release+0x8>)
 800a6ba:	f000 b987 	b.w	800a9cc <__retarget_lock_release_recursive>
 800a6be:	bf00      	nop
 800a6c0:	2000074d 	.word	0x2000074d

0800a6c4 <__sinit>:
 800a6c4:	b510      	push	{r4, lr}
 800a6c6:	4604      	mov	r4, r0
 800a6c8:	f7ff fff0 	bl	800a6ac <__sfp_lock_acquire>
 800a6cc:	6a23      	ldr	r3, [r4, #32]
 800a6ce:	b11b      	cbz	r3, 800a6d8 <__sinit+0x14>
 800a6d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6d4:	f7ff bff0 	b.w	800a6b8 <__sfp_lock_release>
 800a6d8:	4b04      	ldr	r3, [pc, #16]	; (800a6ec <__sinit+0x28>)
 800a6da:	6223      	str	r3, [r4, #32]
 800a6dc:	4b04      	ldr	r3, [pc, #16]	; (800a6f0 <__sinit+0x2c>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1f5      	bne.n	800a6d0 <__sinit+0xc>
 800a6e4:	f7ff ffc4 	bl	800a670 <global_stdio_init.part.0>
 800a6e8:	e7f2      	b.n	800a6d0 <__sinit+0xc>
 800a6ea:	bf00      	nop
 800a6ec:	0800a631 	.word	0x0800a631
 800a6f0:	20000744 	.word	0x20000744

0800a6f4 <_fwalk_sglue>:
 800a6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6f8:	4607      	mov	r7, r0
 800a6fa:	4688      	mov	r8, r1
 800a6fc:	4614      	mov	r4, r2
 800a6fe:	2600      	movs	r6, #0
 800a700:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a704:	f1b9 0901 	subs.w	r9, r9, #1
 800a708:	d505      	bpl.n	800a716 <_fwalk_sglue+0x22>
 800a70a:	6824      	ldr	r4, [r4, #0]
 800a70c:	2c00      	cmp	r4, #0
 800a70e:	d1f7      	bne.n	800a700 <_fwalk_sglue+0xc>
 800a710:	4630      	mov	r0, r6
 800a712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a716:	89ab      	ldrh	r3, [r5, #12]
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d907      	bls.n	800a72c <_fwalk_sglue+0x38>
 800a71c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a720:	3301      	adds	r3, #1
 800a722:	d003      	beq.n	800a72c <_fwalk_sglue+0x38>
 800a724:	4629      	mov	r1, r5
 800a726:	4638      	mov	r0, r7
 800a728:	47c0      	blx	r8
 800a72a:	4306      	orrs	r6, r0
 800a72c:	3568      	adds	r5, #104	; 0x68
 800a72e:	e7e9      	b.n	800a704 <_fwalk_sglue+0x10>

0800a730 <sniprintf>:
 800a730:	b40c      	push	{r2, r3}
 800a732:	b530      	push	{r4, r5, lr}
 800a734:	4b17      	ldr	r3, [pc, #92]	; (800a794 <sniprintf+0x64>)
 800a736:	1e0c      	subs	r4, r1, #0
 800a738:	681d      	ldr	r5, [r3, #0]
 800a73a:	b09d      	sub	sp, #116	; 0x74
 800a73c:	da08      	bge.n	800a750 <sniprintf+0x20>
 800a73e:	238b      	movs	r3, #139	; 0x8b
 800a740:	602b      	str	r3, [r5, #0]
 800a742:	f04f 30ff 	mov.w	r0, #4294967295
 800a746:	b01d      	add	sp, #116	; 0x74
 800a748:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a74c:	b002      	add	sp, #8
 800a74e:	4770      	bx	lr
 800a750:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a754:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a758:	bf14      	ite	ne
 800a75a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a75e:	4623      	moveq	r3, r4
 800a760:	9304      	str	r3, [sp, #16]
 800a762:	9307      	str	r3, [sp, #28]
 800a764:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a768:	9002      	str	r0, [sp, #8]
 800a76a:	9006      	str	r0, [sp, #24]
 800a76c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a770:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a772:	ab21      	add	r3, sp, #132	; 0x84
 800a774:	a902      	add	r1, sp, #8
 800a776:	4628      	mov	r0, r5
 800a778:	9301      	str	r3, [sp, #4]
 800a77a:	f000 faa1 	bl	800acc0 <_svfiprintf_r>
 800a77e:	1c43      	adds	r3, r0, #1
 800a780:	bfbc      	itt	lt
 800a782:	238b      	movlt	r3, #139	; 0x8b
 800a784:	602b      	strlt	r3, [r5, #0]
 800a786:	2c00      	cmp	r4, #0
 800a788:	d0dd      	beq.n	800a746 <sniprintf+0x16>
 800a78a:	9b02      	ldr	r3, [sp, #8]
 800a78c:	2200      	movs	r2, #0
 800a78e:	701a      	strb	r2, [r3, #0]
 800a790:	e7d9      	b.n	800a746 <sniprintf+0x16>
 800a792:	bf00      	nop
 800a794:	2000012c 	.word	0x2000012c

0800a798 <__sread>:
 800a798:	b510      	push	{r4, lr}
 800a79a:	460c      	mov	r4, r1
 800a79c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7a0:	f000 f8c4 	bl	800a92c <_read_r>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	bfab      	itete	ge
 800a7a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a7aa:	89a3      	ldrhlt	r3, [r4, #12]
 800a7ac:	181b      	addge	r3, r3, r0
 800a7ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a7b2:	bfac      	ite	ge
 800a7b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a7b6:	81a3      	strhlt	r3, [r4, #12]
 800a7b8:	bd10      	pop	{r4, pc}

0800a7ba <__swrite>:
 800a7ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7be:	461f      	mov	r7, r3
 800a7c0:	898b      	ldrh	r3, [r1, #12]
 800a7c2:	05db      	lsls	r3, r3, #23
 800a7c4:	4605      	mov	r5, r0
 800a7c6:	460c      	mov	r4, r1
 800a7c8:	4616      	mov	r6, r2
 800a7ca:	d505      	bpl.n	800a7d8 <__swrite+0x1e>
 800a7cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f000 f898 	bl	800a908 <_lseek_r>
 800a7d8:	89a3      	ldrh	r3, [r4, #12]
 800a7da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7e2:	81a3      	strh	r3, [r4, #12]
 800a7e4:	4632      	mov	r2, r6
 800a7e6:	463b      	mov	r3, r7
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ee:	f000 b8af 	b.w	800a950 <_write_r>

0800a7f2 <__sseek>:
 800a7f2:	b510      	push	{r4, lr}
 800a7f4:	460c      	mov	r4, r1
 800a7f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7fa:	f000 f885 	bl	800a908 <_lseek_r>
 800a7fe:	1c43      	adds	r3, r0, #1
 800a800:	89a3      	ldrh	r3, [r4, #12]
 800a802:	bf15      	itete	ne
 800a804:	6560      	strne	r0, [r4, #84]	; 0x54
 800a806:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a80a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a80e:	81a3      	strheq	r3, [r4, #12]
 800a810:	bf18      	it	ne
 800a812:	81a3      	strhne	r3, [r4, #12]
 800a814:	bd10      	pop	{r4, pc}

0800a816 <__sclose>:
 800a816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a81a:	f000 b865 	b.w	800a8e8 <_close_r>

0800a81e <memset>:
 800a81e:	4402      	add	r2, r0
 800a820:	4603      	mov	r3, r0
 800a822:	4293      	cmp	r3, r2
 800a824:	d100      	bne.n	800a828 <memset+0xa>
 800a826:	4770      	bx	lr
 800a828:	f803 1b01 	strb.w	r1, [r3], #1
 800a82c:	e7f9      	b.n	800a822 <memset+0x4>
	...

0800a830 <strtok>:
 800a830:	4b16      	ldr	r3, [pc, #88]	; (800a88c <strtok+0x5c>)
 800a832:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a834:	681e      	ldr	r6, [r3, #0]
 800a836:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800a838:	4605      	mov	r5, r0
 800a83a:	b9fc      	cbnz	r4, 800a87c <strtok+0x4c>
 800a83c:	2050      	movs	r0, #80	; 0x50
 800a83e:	9101      	str	r1, [sp, #4]
 800a840:	f000 f930 	bl	800aaa4 <malloc>
 800a844:	9901      	ldr	r1, [sp, #4]
 800a846:	6470      	str	r0, [r6, #68]	; 0x44
 800a848:	4602      	mov	r2, r0
 800a84a:	b920      	cbnz	r0, 800a856 <strtok+0x26>
 800a84c:	4b10      	ldr	r3, [pc, #64]	; (800a890 <strtok+0x60>)
 800a84e:	4811      	ldr	r0, [pc, #68]	; (800a894 <strtok+0x64>)
 800a850:	215b      	movs	r1, #91	; 0x5b
 800a852:	f000 f8bd 	bl	800a9d0 <__assert_func>
 800a856:	e9c0 4400 	strd	r4, r4, [r0]
 800a85a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a85e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a862:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a866:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a86a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a86e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a872:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a876:	6184      	str	r4, [r0, #24]
 800a878:	7704      	strb	r4, [r0, #28]
 800a87a:	6244      	str	r4, [r0, #36]	; 0x24
 800a87c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800a87e:	2301      	movs	r3, #1
 800a880:	4628      	mov	r0, r5
 800a882:	b002      	add	sp, #8
 800a884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a888:	f000 b806 	b.w	800a898 <__strtok_r>
 800a88c:	2000012c 	.word	0x2000012c
 800a890:	0800bcc9 	.word	0x0800bcc9
 800a894:	0800bce0 	.word	0x0800bce0

0800a898 <__strtok_r>:
 800a898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a89a:	b908      	cbnz	r0, 800a8a0 <__strtok_r+0x8>
 800a89c:	6810      	ldr	r0, [r2, #0]
 800a89e:	b188      	cbz	r0, 800a8c4 <__strtok_r+0x2c>
 800a8a0:	4604      	mov	r4, r0
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a8a8:	460f      	mov	r7, r1
 800a8aa:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a8ae:	b91e      	cbnz	r6, 800a8b8 <__strtok_r+0x20>
 800a8b0:	b965      	cbnz	r5, 800a8cc <__strtok_r+0x34>
 800a8b2:	6015      	str	r5, [r2, #0]
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	e005      	b.n	800a8c4 <__strtok_r+0x2c>
 800a8b8:	42b5      	cmp	r5, r6
 800a8ba:	d1f6      	bne.n	800a8aa <__strtok_r+0x12>
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d1f0      	bne.n	800a8a2 <__strtok_r+0xa>
 800a8c0:	6014      	str	r4, [r2, #0]
 800a8c2:	7003      	strb	r3, [r0, #0]
 800a8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8c6:	461c      	mov	r4, r3
 800a8c8:	e00c      	b.n	800a8e4 <__strtok_r+0x4c>
 800a8ca:	b915      	cbnz	r5, 800a8d2 <__strtok_r+0x3a>
 800a8cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a8d0:	460e      	mov	r6, r1
 800a8d2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a8d6:	42ab      	cmp	r3, r5
 800a8d8:	d1f7      	bne.n	800a8ca <__strtok_r+0x32>
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d0f3      	beq.n	800a8c6 <__strtok_r+0x2e>
 800a8de:	2300      	movs	r3, #0
 800a8e0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a8e4:	6014      	str	r4, [r2, #0]
 800a8e6:	e7ed      	b.n	800a8c4 <__strtok_r+0x2c>

0800a8e8 <_close_r>:
 800a8e8:	b538      	push	{r3, r4, r5, lr}
 800a8ea:	4d06      	ldr	r5, [pc, #24]	; (800a904 <_close_r+0x1c>)
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	4604      	mov	r4, r0
 800a8f0:	4608      	mov	r0, r1
 800a8f2:	602b      	str	r3, [r5, #0]
 800a8f4:	f7f7 f837 	bl	8001966 <_close>
 800a8f8:	1c43      	adds	r3, r0, #1
 800a8fa:	d102      	bne.n	800a902 <_close_r+0x1a>
 800a8fc:	682b      	ldr	r3, [r5, #0]
 800a8fe:	b103      	cbz	r3, 800a902 <_close_r+0x1a>
 800a900:	6023      	str	r3, [r4, #0]
 800a902:	bd38      	pop	{r3, r4, r5, pc}
 800a904:	20000748 	.word	0x20000748

0800a908 <_lseek_r>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	4d07      	ldr	r5, [pc, #28]	; (800a928 <_lseek_r+0x20>)
 800a90c:	4604      	mov	r4, r0
 800a90e:	4608      	mov	r0, r1
 800a910:	4611      	mov	r1, r2
 800a912:	2200      	movs	r2, #0
 800a914:	602a      	str	r2, [r5, #0]
 800a916:	461a      	mov	r2, r3
 800a918:	f7f7 f84c 	bl	80019b4 <_lseek>
 800a91c:	1c43      	adds	r3, r0, #1
 800a91e:	d102      	bne.n	800a926 <_lseek_r+0x1e>
 800a920:	682b      	ldr	r3, [r5, #0]
 800a922:	b103      	cbz	r3, 800a926 <_lseek_r+0x1e>
 800a924:	6023      	str	r3, [r4, #0]
 800a926:	bd38      	pop	{r3, r4, r5, pc}
 800a928:	20000748 	.word	0x20000748

0800a92c <_read_r>:
 800a92c:	b538      	push	{r3, r4, r5, lr}
 800a92e:	4d07      	ldr	r5, [pc, #28]	; (800a94c <_read_r+0x20>)
 800a930:	4604      	mov	r4, r0
 800a932:	4608      	mov	r0, r1
 800a934:	4611      	mov	r1, r2
 800a936:	2200      	movs	r2, #0
 800a938:	602a      	str	r2, [r5, #0]
 800a93a:	461a      	mov	r2, r3
 800a93c:	f7f6 ffda 	bl	80018f4 <_read>
 800a940:	1c43      	adds	r3, r0, #1
 800a942:	d102      	bne.n	800a94a <_read_r+0x1e>
 800a944:	682b      	ldr	r3, [r5, #0]
 800a946:	b103      	cbz	r3, 800a94a <_read_r+0x1e>
 800a948:	6023      	str	r3, [r4, #0]
 800a94a:	bd38      	pop	{r3, r4, r5, pc}
 800a94c:	20000748 	.word	0x20000748

0800a950 <_write_r>:
 800a950:	b538      	push	{r3, r4, r5, lr}
 800a952:	4d07      	ldr	r5, [pc, #28]	; (800a970 <_write_r+0x20>)
 800a954:	4604      	mov	r4, r0
 800a956:	4608      	mov	r0, r1
 800a958:	4611      	mov	r1, r2
 800a95a:	2200      	movs	r2, #0
 800a95c:	602a      	str	r2, [r5, #0]
 800a95e:	461a      	mov	r2, r3
 800a960:	f7f6 ffe5 	bl	800192e <_write>
 800a964:	1c43      	adds	r3, r0, #1
 800a966:	d102      	bne.n	800a96e <_write_r+0x1e>
 800a968:	682b      	ldr	r3, [r5, #0]
 800a96a:	b103      	cbz	r3, 800a96e <_write_r+0x1e>
 800a96c:	6023      	str	r3, [r4, #0]
 800a96e:	bd38      	pop	{r3, r4, r5, pc}
 800a970:	20000748 	.word	0x20000748

0800a974 <__errno>:
 800a974:	4b01      	ldr	r3, [pc, #4]	; (800a97c <__errno+0x8>)
 800a976:	6818      	ldr	r0, [r3, #0]
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop
 800a97c:	2000012c 	.word	0x2000012c

0800a980 <__libc_init_array>:
 800a980:	b570      	push	{r4, r5, r6, lr}
 800a982:	4d0d      	ldr	r5, [pc, #52]	; (800a9b8 <__libc_init_array+0x38>)
 800a984:	4c0d      	ldr	r4, [pc, #52]	; (800a9bc <__libc_init_array+0x3c>)
 800a986:	1b64      	subs	r4, r4, r5
 800a988:	10a4      	asrs	r4, r4, #2
 800a98a:	2600      	movs	r6, #0
 800a98c:	42a6      	cmp	r6, r4
 800a98e:	d109      	bne.n	800a9a4 <__libc_init_array+0x24>
 800a990:	4d0b      	ldr	r5, [pc, #44]	; (800a9c0 <__libc_init_array+0x40>)
 800a992:	4c0c      	ldr	r4, [pc, #48]	; (800a9c4 <__libc_init_array+0x44>)
 800a994:	f000 fffa 	bl	800b98c <_init>
 800a998:	1b64      	subs	r4, r4, r5
 800a99a:	10a4      	asrs	r4, r4, #2
 800a99c:	2600      	movs	r6, #0
 800a99e:	42a6      	cmp	r6, r4
 800a9a0:	d105      	bne.n	800a9ae <__libc_init_array+0x2e>
 800a9a2:	bd70      	pop	{r4, r5, r6, pc}
 800a9a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9a8:	4798      	blx	r3
 800a9aa:	3601      	adds	r6, #1
 800a9ac:	e7ee      	b.n	800a98c <__libc_init_array+0xc>
 800a9ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9b2:	4798      	blx	r3
 800a9b4:	3601      	adds	r6, #1
 800a9b6:	e7f2      	b.n	800a99e <__libc_init_array+0x1e>
 800a9b8:	0800bdb4 	.word	0x0800bdb4
 800a9bc:	0800bdb4 	.word	0x0800bdb4
 800a9c0:	0800bdb4 	.word	0x0800bdb4
 800a9c4:	0800bdb8 	.word	0x0800bdb8

0800a9c8 <__retarget_lock_init_recursive>:
 800a9c8:	4770      	bx	lr

0800a9ca <__retarget_lock_acquire_recursive>:
 800a9ca:	4770      	bx	lr

0800a9cc <__retarget_lock_release_recursive>:
 800a9cc:	4770      	bx	lr
	...

0800a9d0 <__assert_func>:
 800a9d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9d2:	4614      	mov	r4, r2
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	4b09      	ldr	r3, [pc, #36]	; (800a9fc <__assert_func+0x2c>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4605      	mov	r5, r0
 800a9dc:	68d8      	ldr	r0, [r3, #12]
 800a9de:	b14c      	cbz	r4, 800a9f4 <__assert_func+0x24>
 800a9e0:	4b07      	ldr	r3, [pc, #28]	; (800aa00 <__assert_func+0x30>)
 800a9e2:	9100      	str	r1, [sp, #0]
 800a9e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9e8:	4906      	ldr	r1, [pc, #24]	; (800aa04 <__assert_func+0x34>)
 800a9ea:	462b      	mov	r3, r5
 800a9ec:	f000 fca4 	bl	800b338 <fiprintf>
 800a9f0:	f000 fcec 	bl	800b3cc <abort>
 800a9f4:	4b04      	ldr	r3, [pc, #16]	; (800aa08 <__assert_func+0x38>)
 800a9f6:	461c      	mov	r4, r3
 800a9f8:	e7f3      	b.n	800a9e2 <__assert_func+0x12>
 800a9fa:	bf00      	nop
 800a9fc:	2000012c 	.word	0x2000012c
 800aa00:	0800bd3a 	.word	0x0800bd3a
 800aa04:	0800bd47 	.word	0x0800bd47
 800aa08:	0800bd75 	.word	0x0800bd75

0800aa0c <_free_r>:
 800aa0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa0e:	2900      	cmp	r1, #0
 800aa10:	d044      	beq.n	800aa9c <_free_r+0x90>
 800aa12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa16:	9001      	str	r0, [sp, #4]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f1a1 0404 	sub.w	r4, r1, #4
 800aa1e:	bfb8      	it	lt
 800aa20:	18e4      	addlt	r4, r4, r3
 800aa22:	f000 f8e7 	bl	800abf4 <__malloc_lock>
 800aa26:	4a1e      	ldr	r2, [pc, #120]	; (800aaa0 <_free_r+0x94>)
 800aa28:	9801      	ldr	r0, [sp, #4]
 800aa2a:	6813      	ldr	r3, [r2, #0]
 800aa2c:	b933      	cbnz	r3, 800aa3c <_free_r+0x30>
 800aa2e:	6063      	str	r3, [r4, #4]
 800aa30:	6014      	str	r4, [r2, #0]
 800aa32:	b003      	add	sp, #12
 800aa34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa38:	f000 b8e2 	b.w	800ac00 <__malloc_unlock>
 800aa3c:	42a3      	cmp	r3, r4
 800aa3e:	d908      	bls.n	800aa52 <_free_r+0x46>
 800aa40:	6825      	ldr	r5, [r4, #0]
 800aa42:	1961      	adds	r1, r4, r5
 800aa44:	428b      	cmp	r3, r1
 800aa46:	bf01      	itttt	eq
 800aa48:	6819      	ldreq	r1, [r3, #0]
 800aa4a:	685b      	ldreq	r3, [r3, #4]
 800aa4c:	1949      	addeq	r1, r1, r5
 800aa4e:	6021      	streq	r1, [r4, #0]
 800aa50:	e7ed      	b.n	800aa2e <_free_r+0x22>
 800aa52:	461a      	mov	r2, r3
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	b10b      	cbz	r3, 800aa5c <_free_r+0x50>
 800aa58:	42a3      	cmp	r3, r4
 800aa5a:	d9fa      	bls.n	800aa52 <_free_r+0x46>
 800aa5c:	6811      	ldr	r1, [r2, #0]
 800aa5e:	1855      	adds	r5, r2, r1
 800aa60:	42a5      	cmp	r5, r4
 800aa62:	d10b      	bne.n	800aa7c <_free_r+0x70>
 800aa64:	6824      	ldr	r4, [r4, #0]
 800aa66:	4421      	add	r1, r4
 800aa68:	1854      	adds	r4, r2, r1
 800aa6a:	42a3      	cmp	r3, r4
 800aa6c:	6011      	str	r1, [r2, #0]
 800aa6e:	d1e0      	bne.n	800aa32 <_free_r+0x26>
 800aa70:	681c      	ldr	r4, [r3, #0]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	6053      	str	r3, [r2, #4]
 800aa76:	440c      	add	r4, r1
 800aa78:	6014      	str	r4, [r2, #0]
 800aa7a:	e7da      	b.n	800aa32 <_free_r+0x26>
 800aa7c:	d902      	bls.n	800aa84 <_free_r+0x78>
 800aa7e:	230c      	movs	r3, #12
 800aa80:	6003      	str	r3, [r0, #0]
 800aa82:	e7d6      	b.n	800aa32 <_free_r+0x26>
 800aa84:	6825      	ldr	r5, [r4, #0]
 800aa86:	1961      	adds	r1, r4, r5
 800aa88:	428b      	cmp	r3, r1
 800aa8a:	bf04      	itt	eq
 800aa8c:	6819      	ldreq	r1, [r3, #0]
 800aa8e:	685b      	ldreq	r3, [r3, #4]
 800aa90:	6063      	str	r3, [r4, #4]
 800aa92:	bf04      	itt	eq
 800aa94:	1949      	addeq	r1, r1, r5
 800aa96:	6021      	streq	r1, [r4, #0]
 800aa98:	6054      	str	r4, [r2, #4]
 800aa9a:	e7ca      	b.n	800aa32 <_free_r+0x26>
 800aa9c:	b003      	add	sp, #12
 800aa9e:	bd30      	pop	{r4, r5, pc}
 800aaa0:	20000750 	.word	0x20000750

0800aaa4 <malloc>:
 800aaa4:	4b02      	ldr	r3, [pc, #8]	; (800aab0 <malloc+0xc>)
 800aaa6:	4601      	mov	r1, r0
 800aaa8:	6818      	ldr	r0, [r3, #0]
 800aaaa:	f000 b823 	b.w	800aaf4 <_malloc_r>
 800aaae:	bf00      	nop
 800aab0:	2000012c 	.word	0x2000012c

0800aab4 <sbrk_aligned>:
 800aab4:	b570      	push	{r4, r5, r6, lr}
 800aab6:	4e0e      	ldr	r6, [pc, #56]	; (800aaf0 <sbrk_aligned+0x3c>)
 800aab8:	460c      	mov	r4, r1
 800aaba:	6831      	ldr	r1, [r6, #0]
 800aabc:	4605      	mov	r5, r0
 800aabe:	b911      	cbnz	r1, 800aac6 <sbrk_aligned+0x12>
 800aac0:	f000 fc66 	bl	800b390 <_sbrk_r>
 800aac4:	6030      	str	r0, [r6, #0]
 800aac6:	4621      	mov	r1, r4
 800aac8:	4628      	mov	r0, r5
 800aaca:	f000 fc61 	bl	800b390 <_sbrk_r>
 800aace:	1c43      	adds	r3, r0, #1
 800aad0:	d00a      	beq.n	800aae8 <sbrk_aligned+0x34>
 800aad2:	1cc4      	adds	r4, r0, #3
 800aad4:	f024 0403 	bic.w	r4, r4, #3
 800aad8:	42a0      	cmp	r0, r4
 800aada:	d007      	beq.n	800aaec <sbrk_aligned+0x38>
 800aadc:	1a21      	subs	r1, r4, r0
 800aade:	4628      	mov	r0, r5
 800aae0:	f000 fc56 	bl	800b390 <_sbrk_r>
 800aae4:	3001      	adds	r0, #1
 800aae6:	d101      	bne.n	800aaec <sbrk_aligned+0x38>
 800aae8:	f04f 34ff 	mov.w	r4, #4294967295
 800aaec:	4620      	mov	r0, r4
 800aaee:	bd70      	pop	{r4, r5, r6, pc}
 800aaf0:	20000754 	.word	0x20000754

0800aaf4 <_malloc_r>:
 800aaf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaf8:	1ccd      	adds	r5, r1, #3
 800aafa:	f025 0503 	bic.w	r5, r5, #3
 800aafe:	3508      	adds	r5, #8
 800ab00:	2d0c      	cmp	r5, #12
 800ab02:	bf38      	it	cc
 800ab04:	250c      	movcc	r5, #12
 800ab06:	2d00      	cmp	r5, #0
 800ab08:	4607      	mov	r7, r0
 800ab0a:	db01      	blt.n	800ab10 <_malloc_r+0x1c>
 800ab0c:	42a9      	cmp	r1, r5
 800ab0e:	d905      	bls.n	800ab1c <_malloc_r+0x28>
 800ab10:	230c      	movs	r3, #12
 800ab12:	603b      	str	r3, [r7, #0]
 800ab14:	2600      	movs	r6, #0
 800ab16:	4630      	mov	r0, r6
 800ab18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800abf0 <_malloc_r+0xfc>
 800ab20:	f000 f868 	bl	800abf4 <__malloc_lock>
 800ab24:	f8d8 3000 	ldr.w	r3, [r8]
 800ab28:	461c      	mov	r4, r3
 800ab2a:	bb5c      	cbnz	r4, 800ab84 <_malloc_r+0x90>
 800ab2c:	4629      	mov	r1, r5
 800ab2e:	4638      	mov	r0, r7
 800ab30:	f7ff ffc0 	bl	800aab4 <sbrk_aligned>
 800ab34:	1c43      	adds	r3, r0, #1
 800ab36:	4604      	mov	r4, r0
 800ab38:	d155      	bne.n	800abe6 <_malloc_r+0xf2>
 800ab3a:	f8d8 4000 	ldr.w	r4, [r8]
 800ab3e:	4626      	mov	r6, r4
 800ab40:	2e00      	cmp	r6, #0
 800ab42:	d145      	bne.n	800abd0 <_malloc_r+0xdc>
 800ab44:	2c00      	cmp	r4, #0
 800ab46:	d048      	beq.n	800abda <_malloc_r+0xe6>
 800ab48:	6823      	ldr	r3, [r4, #0]
 800ab4a:	4631      	mov	r1, r6
 800ab4c:	4638      	mov	r0, r7
 800ab4e:	eb04 0903 	add.w	r9, r4, r3
 800ab52:	f000 fc1d 	bl	800b390 <_sbrk_r>
 800ab56:	4581      	cmp	r9, r0
 800ab58:	d13f      	bne.n	800abda <_malloc_r+0xe6>
 800ab5a:	6821      	ldr	r1, [r4, #0]
 800ab5c:	1a6d      	subs	r5, r5, r1
 800ab5e:	4629      	mov	r1, r5
 800ab60:	4638      	mov	r0, r7
 800ab62:	f7ff ffa7 	bl	800aab4 <sbrk_aligned>
 800ab66:	3001      	adds	r0, #1
 800ab68:	d037      	beq.n	800abda <_malloc_r+0xe6>
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	442b      	add	r3, r5
 800ab6e:	6023      	str	r3, [r4, #0]
 800ab70:	f8d8 3000 	ldr.w	r3, [r8]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d038      	beq.n	800abea <_malloc_r+0xf6>
 800ab78:	685a      	ldr	r2, [r3, #4]
 800ab7a:	42a2      	cmp	r2, r4
 800ab7c:	d12b      	bne.n	800abd6 <_malloc_r+0xe2>
 800ab7e:	2200      	movs	r2, #0
 800ab80:	605a      	str	r2, [r3, #4]
 800ab82:	e00f      	b.n	800aba4 <_malloc_r+0xb0>
 800ab84:	6822      	ldr	r2, [r4, #0]
 800ab86:	1b52      	subs	r2, r2, r5
 800ab88:	d41f      	bmi.n	800abca <_malloc_r+0xd6>
 800ab8a:	2a0b      	cmp	r2, #11
 800ab8c:	d917      	bls.n	800abbe <_malloc_r+0xca>
 800ab8e:	1961      	adds	r1, r4, r5
 800ab90:	42a3      	cmp	r3, r4
 800ab92:	6025      	str	r5, [r4, #0]
 800ab94:	bf18      	it	ne
 800ab96:	6059      	strne	r1, [r3, #4]
 800ab98:	6863      	ldr	r3, [r4, #4]
 800ab9a:	bf08      	it	eq
 800ab9c:	f8c8 1000 	streq.w	r1, [r8]
 800aba0:	5162      	str	r2, [r4, r5]
 800aba2:	604b      	str	r3, [r1, #4]
 800aba4:	4638      	mov	r0, r7
 800aba6:	f104 060b 	add.w	r6, r4, #11
 800abaa:	f000 f829 	bl	800ac00 <__malloc_unlock>
 800abae:	f026 0607 	bic.w	r6, r6, #7
 800abb2:	1d23      	adds	r3, r4, #4
 800abb4:	1af2      	subs	r2, r6, r3
 800abb6:	d0ae      	beq.n	800ab16 <_malloc_r+0x22>
 800abb8:	1b9b      	subs	r3, r3, r6
 800abba:	50a3      	str	r3, [r4, r2]
 800abbc:	e7ab      	b.n	800ab16 <_malloc_r+0x22>
 800abbe:	42a3      	cmp	r3, r4
 800abc0:	6862      	ldr	r2, [r4, #4]
 800abc2:	d1dd      	bne.n	800ab80 <_malloc_r+0x8c>
 800abc4:	f8c8 2000 	str.w	r2, [r8]
 800abc8:	e7ec      	b.n	800aba4 <_malloc_r+0xb0>
 800abca:	4623      	mov	r3, r4
 800abcc:	6864      	ldr	r4, [r4, #4]
 800abce:	e7ac      	b.n	800ab2a <_malloc_r+0x36>
 800abd0:	4634      	mov	r4, r6
 800abd2:	6876      	ldr	r6, [r6, #4]
 800abd4:	e7b4      	b.n	800ab40 <_malloc_r+0x4c>
 800abd6:	4613      	mov	r3, r2
 800abd8:	e7cc      	b.n	800ab74 <_malloc_r+0x80>
 800abda:	230c      	movs	r3, #12
 800abdc:	603b      	str	r3, [r7, #0]
 800abde:	4638      	mov	r0, r7
 800abe0:	f000 f80e 	bl	800ac00 <__malloc_unlock>
 800abe4:	e797      	b.n	800ab16 <_malloc_r+0x22>
 800abe6:	6025      	str	r5, [r4, #0]
 800abe8:	e7dc      	b.n	800aba4 <_malloc_r+0xb0>
 800abea:	605b      	str	r3, [r3, #4]
 800abec:	deff      	udf	#255	; 0xff
 800abee:	bf00      	nop
 800abf0:	20000750 	.word	0x20000750

0800abf4 <__malloc_lock>:
 800abf4:	4801      	ldr	r0, [pc, #4]	; (800abfc <__malloc_lock+0x8>)
 800abf6:	f7ff bee8 	b.w	800a9ca <__retarget_lock_acquire_recursive>
 800abfa:	bf00      	nop
 800abfc:	2000074c 	.word	0x2000074c

0800ac00 <__malloc_unlock>:
 800ac00:	4801      	ldr	r0, [pc, #4]	; (800ac08 <__malloc_unlock+0x8>)
 800ac02:	f7ff bee3 	b.w	800a9cc <__retarget_lock_release_recursive>
 800ac06:	bf00      	nop
 800ac08:	2000074c 	.word	0x2000074c

0800ac0c <__ssputs_r>:
 800ac0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac10:	688e      	ldr	r6, [r1, #8]
 800ac12:	461f      	mov	r7, r3
 800ac14:	42be      	cmp	r6, r7
 800ac16:	680b      	ldr	r3, [r1, #0]
 800ac18:	4682      	mov	sl, r0
 800ac1a:	460c      	mov	r4, r1
 800ac1c:	4690      	mov	r8, r2
 800ac1e:	d82c      	bhi.n	800ac7a <__ssputs_r+0x6e>
 800ac20:	898a      	ldrh	r2, [r1, #12]
 800ac22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac26:	d026      	beq.n	800ac76 <__ssputs_r+0x6a>
 800ac28:	6965      	ldr	r5, [r4, #20]
 800ac2a:	6909      	ldr	r1, [r1, #16]
 800ac2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac30:	eba3 0901 	sub.w	r9, r3, r1
 800ac34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac38:	1c7b      	adds	r3, r7, #1
 800ac3a:	444b      	add	r3, r9
 800ac3c:	106d      	asrs	r5, r5, #1
 800ac3e:	429d      	cmp	r5, r3
 800ac40:	bf38      	it	cc
 800ac42:	461d      	movcc	r5, r3
 800ac44:	0553      	lsls	r3, r2, #21
 800ac46:	d527      	bpl.n	800ac98 <__ssputs_r+0x8c>
 800ac48:	4629      	mov	r1, r5
 800ac4a:	f7ff ff53 	bl	800aaf4 <_malloc_r>
 800ac4e:	4606      	mov	r6, r0
 800ac50:	b360      	cbz	r0, 800acac <__ssputs_r+0xa0>
 800ac52:	6921      	ldr	r1, [r4, #16]
 800ac54:	464a      	mov	r2, r9
 800ac56:	f000 fbab 	bl	800b3b0 <memcpy>
 800ac5a:	89a3      	ldrh	r3, [r4, #12]
 800ac5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac64:	81a3      	strh	r3, [r4, #12]
 800ac66:	6126      	str	r6, [r4, #16]
 800ac68:	6165      	str	r5, [r4, #20]
 800ac6a:	444e      	add	r6, r9
 800ac6c:	eba5 0509 	sub.w	r5, r5, r9
 800ac70:	6026      	str	r6, [r4, #0]
 800ac72:	60a5      	str	r5, [r4, #8]
 800ac74:	463e      	mov	r6, r7
 800ac76:	42be      	cmp	r6, r7
 800ac78:	d900      	bls.n	800ac7c <__ssputs_r+0x70>
 800ac7a:	463e      	mov	r6, r7
 800ac7c:	6820      	ldr	r0, [r4, #0]
 800ac7e:	4632      	mov	r2, r6
 800ac80:	4641      	mov	r1, r8
 800ac82:	f000 fb6b 	bl	800b35c <memmove>
 800ac86:	68a3      	ldr	r3, [r4, #8]
 800ac88:	1b9b      	subs	r3, r3, r6
 800ac8a:	60a3      	str	r3, [r4, #8]
 800ac8c:	6823      	ldr	r3, [r4, #0]
 800ac8e:	4433      	add	r3, r6
 800ac90:	6023      	str	r3, [r4, #0]
 800ac92:	2000      	movs	r0, #0
 800ac94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac98:	462a      	mov	r2, r5
 800ac9a:	f000 fb9e 	bl	800b3da <_realloc_r>
 800ac9e:	4606      	mov	r6, r0
 800aca0:	2800      	cmp	r0, #0
 800aca2:	d1e0      	bne.n	800ac66 <__ssputs_r+0x5a>
 800aca4:	6921      	ldr	r1, [r4, #16]
 800aca6:	4650      	mov	r0, sl
 800aca8:	f7ff feb0 	bl	800aa0c <_free_r>
 800acac:	230c      	movs	r3, #12
 800acae:	f8ca 3000 	str.w	r3, [sl]
 800acb2:	89a3      	ldrh	r3, [r4, #12]
 800acb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acb8:	81a3      	strh	r3, [r4, #12]
 800acba:	f04f 30ff 	mov.w	r0, #4294967295
 800acbe:	e7e9      	b.n	800ac94 <__ssputs_r+0x88>

0800acc0 <_svfiprintf_r>:
 800acc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc4:	4698      	mov	r8, r3
 800acc6:	898b      	ldrh	r3, [r1, #12]
 800acc8:	061b      	lsls	r3, r3, #24
 800acca:	b09d      	sub	sp, #116	; 0x74
 800accc:	4607      	mov	r7, r0
 800acce:	460d      	mov	r5, r1
 800acd0:	4614      	mov	r4, r2
 800acd2:	d50e      	bpl.n	800acf2 <_svfiprintf_r+0x32>
 800acd4:	690b      	ldr	r3, [r1, #16]
 800acd6:	b963      	cbnz	r3, 800acf2 <_svfiprintf_r+0x32>
 800acd8:	2140      	movs	r1, #64	; 0x40
 800acda:	f7ff ff0b 	bl	800aaf4 <_malloc_r>
 800acde:	6028      	str	r0, [r5, #0]
 800ace0:	6128      	str	r0, [r5, #16]
 800ace2:	b920      	cbnz	r0, 800acee <_svfiprintf_r+0x2e>
 800ace4:	230c      	movs	r3, #12
 800ace6:	603b      	str	r3, [r7, #0]
 800ace8:	f04f 30ff 	mov.w	r0, #4294967295
 800acec:	e0d0      	b.n	800ae90 <_svfiprintf_r+0x1d0>
 800acee:	2340      	movs	r3, #64	; 0x40
 800acf0:	616b      	str	r3, [r5, #20]
 800acf2:	2300      	movs	r3, #0
 800acf4:	9309      	str	r3, [sp, #36]	; 0x24
 800acf6:	2320      	movs	r3, #32
 800acf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad00:	2330      	movs	r3, #48	; 0x30
 800ad02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aea8 <_svfiprintf_r+0x1e8>
 800ad06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad0a:	f04f 0901 	mov.w	r9, #1
 800ad0e:	4623      	mov	r3, r4
 800ad10:	469a      	mov	sl, r3
 800ad12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad16:	b10a      	cbz	r2, 800ad1c <_svfiprintf_r+0x5c>
 800ad18:	2a25      	cmp	r2, #37	; 0x25
 800ad1a:	d1f9      	bne.n	800ad10 <_svfiprintf_r+0x50>
 800ad1c:	ebba 0b04 	subs.w	fp, sl, r4
 800ad20:	d00b      	beq.n	800ad3a <_svfiprintf_r+0x7a>
 800ad22:	465b      	mov	r3, fp
 800ad24:	4622      	mov	r2, r4
 800ad26:	4629      	mov	r1, r5
 800ad28:	4638      	mov	r0, r7
 800ad2a:	f7ff ff6f 	bl	800ac0c <__ssputs_r>
 800ad2e:	3001      	adds	r0, #1
 800ad30:	f000 80a9 	beq.w	800ae86 <_svfiprintf_r+0x1c6>
 800ad34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad36:	445a      	add	r2, fp
 800ad38:	9209      	str	r2, [sp, #36]	; 0x24
 800ad3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	f000 80a1 	beq.w	800ae86 <_svfiprintf_r+0x1c6>
 800ad44:	2300      	movs	r3, #0
 800ad46:	f04f 32ff 	mov.w	r2, #4294967295
 800ad4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad4e:	f10a 0a01 	add.w	sl, sl, #1
 800ad52:	9304      	str	r3, [sp, #16]
 800ad54:	9307      	str	r3, [sp, #28]
 800ad56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad5a:	931a      	str	r3, [sp, #104]	; 0x68
 800ad5c:	4654      	mov	r4, sl
 800ad5e:	2205      	movs	r2, #5
 800ad60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad64:	4850      	ldr	r0, [pc, #320]	; (800aea8 <_svfiprintf_r+0x1e8>)
 800ad66:	f7f5 fa73 	bl	8000250 <memchr>
 800ad6a:	9a04      	ldr	r2, [sp, #16]
 800ad6c:	b9d8      	cbnz	r0, 800ada6 <_svfiprintf_r+0xe6>
 800ad6e:	06d0      	lsls	r0, r2, #27
 800ad70:	bf44      	itt	mi
 800ad72:	2320      	movmi	r3, #32
 800ad74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad78:	0711      	lsls	r1, r2, #28
 800ad7a:	bf44      	itt	mi
 800ad7c:	232b      	movmi	r3, #43	; 0x2b
 800ad7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad82:	f89a 3000 	ldrb.w	r3, [sl]
 800ad86:	2b2a      	cmp	r3, #42	; 0x2a
 800ad88:	d015      	beq.n	800adb6 <_svfiprintf_r+0xf6>
 800ad8a:	9a07      	ldr	r2, [sp, #28]
 800ad8c:	4654      	mov	r4, sl
 800ad8e:	2000      	movs	r0, #0
 800ad90:	f04f 0c0a 	mov.w	ip, #10
 800ad94:	4621      	mov	r1, r4
 800ad96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad9a:	3b30      	subs	r3, #48	; 0x30
 800ad9c:	2b09      	cmp	r3, #9
 800ad9e:	d94d      	bls.n	800ae3c <_svfiprintf_r+0x17c>
 800ada0:	b1b0      	cbz	r0, 800add0 <_svfiprintf_r+0x110>
 800ada2:	9207      	str	r2, [sp, #28]
 800ada4:	e014      	b.n	800add0 <_svfiprintf_r+0x110>
 800ada6:	eba0 0308 	sub.w	r3, r0, r8
 800adaa:	fa09 f303 	lsl.w	r3, r9, r3
 800adae:	4313      	orrs	r3, r2
 800adb0:	9304      	str	r3, [sp, #16]
 800adb2:	46a2      	mov	sl, r4
 800adb4:	e7d2      	b.n	800ad5c <_svfiprintf_r+0x9c>
 800adb6:	9b03      	ldr	r3, [sp, #12]
 800adb8:	1d19      	adds	r1, r3, #4
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	9103      	str	r1, [sp, #12]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	bfbb      	ittet	lt
 800adc2:	425b      	neglt	r3, r3
 800adc4:	f042 0202 	orrlt.w	r2, r2, #2
 800adc8:	9307      	strge	r3, [sp, #28]
 800adca:	9307      	strlt	r3, [sp, #28]
 800adcc:	bfb8      	it	lt
 800adce:	9204      	strlt	r2, [sp, #16]
 800add0:	7823      	ldrb	r3, [r4, #0]
 800add2:	2b2e      	cmp	r3, #46	; 0x2e
 800add4:	d10c      	bne.n	800adf0 <_svfiprintf_r+0x130>
 800add6:	7863      	ldrb	r3, [r4, #1]
 800add8:	2b2a      	cmp	r3, #42	; 0x2a
 800adda:	d134      	bne.n	800ae46 <_svfiprintf_r+0x186>
 800addc:	9b03      	ldr	r3, [sp, #12]
 800adde:	1d1a      	adds	r2, r3, #4
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	9203      	str	r2, [sp, #12]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	bfb8      	it	lt
 800ade8:	f04f 33ff 	movlt.w	r3, #4294967295
 800adec:	3402      	adds	r4, #2
 800adee:	9305      	str	r3, [sp, #20]
 800adf0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800aeb8 <_svfiprintf_r+0x1f8>
 800adf4:	7821      	ldrb	r1, [r4, #0]
 800adf6:	2203      	movs	r2, #3
 800adf8:	4650      	mov	r0, sl
 800adfa:	f7f5 fa29 	bl	8000250 <memchr>
 800adfe:	b138      	cbz	r0, 800ae10 <_svfiprintf_r+0x150>
 800ae00:	9b04      	ldr	r3, [sp, #16]
 800ae02:	eba0 000a 	sub.w	r0, r0, sl
 800ae06:	2240      	movs	r2, #64	; 0x40
 800ae08:	4082      	lsls	r2, r0
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	3401      	adds	r4, #1
 800ae0e:	9304      	str	r3, [sp, #16]
 800ae10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae14:	4825      	ldr	r0, [pc, #148]	; (800aeac <_svfiprintf_r+0x1ec>)
 800ae16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae1a:	2206      	movs	r2, #6
 800ae1c:	f7f5 fa18 	bl	8000250 <memchr>
 800ae20:	2800      	cmp	r0, #0
 800ae22:	d038      	beq.n	800ae96 <_svfiprintf_r+0x1d6>
 800ae24:	4b22      	ldr	r3, [pc, #136]	; (800aeb0 <_svfiprintf_r+0x1f0>)
 800ae26:	bb1b      	cbnz	r3, 800ae70 <_svfiprintf_r+0x1b0>
 800ae28:	9b03      	ldr	r3, [sp, #12]
 800ae2a:	3307      	adds	r3, #7
 800ae2c:	f023 0307 	bic.w	r3, r3, #7
 800ae30:	3308      	adds	r3, #8
 800ae32:	9303      	str	r3, [sp, #12]
 800ae34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae36:	4433      	add	r3, r6
 800ae38:	9309      	str	r3, [sp, #36]	; 0x24
 800ae3a:	e768      	b.n	800ad0e <_svfiprintf_r+0x4e>
 800ae3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae40:	460c      	mov	r4, r1
 800ae42:	2001      	movs	r0, #1
 800ae44:	e7a6      	b.n	800ad94 <_svfiprintf_r+0xd4>
 800ae46:	2300      	movs	r3, #0
 800ae48:	3401      	adds	r4, #1
 800ae4a:	9305      	str	r3, [sp, #20]
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	f04f 0c0a 	mov.w	ip, #10
 800ae52:	4620      	mov	r0, r4
 800ae54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae58:	3a30      	subs	r2, #48	; 0x30
 800ae5a:	2a09      	cmp	r2, #9
 800ae5c:	d903      	bls.n	800ae66 <_svfiprintf_r+0x1a6>
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d0c6      	beq.n	800adf0 <_svfiprintf_r+0x130>
 800ae62:	9105      	str	r1, [sp, #20]
 800ae64:	e7c4      	b.n	800adf0 <_svfiprintf_r+0x130>
 800ae66:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae6a:	4604      	mov	r4, r0
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	e7f0      	b.n	800ae52 <_svfiprintf_r+0x192>
 800ae70:	ab03      	add	r3, sp, #12
 800ae72:	9300      	str	r3, [sp, #0]
 800ae74:	462a      	mov	r2, r5
 800ae76:	4b0f      	ldr	r3, [pc, #60]	; (800aeb4 <_svfiprintf_r+0x1f4>)
 800ae78:	a904      	add	r1, sp, #16
 800ae7a:	4638      	mov	r0, r7
 800ae7c:	f3af 8000 	nop.w
 800ae80:	1c42      	adds	r2, r0, #1
 800ae82:	4606      	mov	r6, r0
 800ae84:	d1d6      	bne.n	800ae34 <_svfiprintf_r+0x174>
 800ae86:	89ab      	ldrh	r3, [r5, #12]
 800ae88:	065b      	lsls	r3, r3, #25
 800ae8a:	f53f af2d 	bmi.w	800ace8 <_svfiprintf_r+0x28>
 800ae8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae90:	b01d      	add	sp, #116	; 0x74
 800ae92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae96:	ab03      	add	r3, sp, #12
 800ae98:	9300      	str	r3, [sp, #0]
 800ae9a:	462a      	mov	r2, r5
 800ae9c:	4b05      	ldr	r3, [pc, #20]	; (800aeb4 <_svfiprintf_r+0x1f4>)
 800ae9e:	a904      	add	r1, sp, #16
 800aea0:	4638      	mov	r0, r7
 800aea2:	f000 f879 	bl	800af98 <_printf_i>
 800aea6:	e7eb      	b.n	800ae80 <_svfiprintf_r+0x1c0>
 800aea8:	0800bd76 	.word	0x0800bd76
 800aeac:	0800bd80 	.word	0x0800bd80
 800aeb0:	00000000 	.word	0x00000000
 800aeb4:	0800ac0d 	.word	0x0800ac0d
 800aeb8:	0800bd7c 	.word	0x0800bd7c

0800aebc <_printf_common>:
 800aebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aec0:	4616      	mov	r6, r2
 800aec2:	4699      	mov	r9, r3
 800aec4:	688a      	ldr	r2, [r1, #8]
 800aec6:	690b      	ldr	r3, [r1, #16]
 800aec8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aecc:	4293      	cmp	r3, r2
 800aece:	bfb8      	it	lt
 800aed0:	4613      	movlt	r3, r2
 800aed2:	6033      	str	r3, [r6, #0]
 800aed4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aed8:	4607      	mov	r7, r0
 800aeda:	460c      	mov	r4, r1
 800aedc:	b10a      	cbz	r2, 800aee2 <_printf_common+0x26>
 800aede:	3301      	adds	r3, #1
 800aee0:	6033      	str	r3, [r6, #0]
 800aee2:	6823      	ldr	r3, [r4, #0]
 800aee4:	0699      	lsls	r1, r3, #26
 800aee6:	bf42      	ittt	mi
 800aee8:	6833      	ldrmi	r3, [r6, #0]
 800aeea:	3302      	addmi	r3, #2
 800aeec:	6033      	strmi	r3, [r6, #0]
 800aeee:	6825      	ldr	r5, [r4, #0]
 800aef0:	f015 0506 	ands.w	r5, r5, #6
 800aef4:	d106      	bne.n	800af04 <_printf_common+0x48>
 800aef6:	f104 0a19 	add.w	sl, r4, #25
 800aefa:	68e3      	ldr	r3, [r4, #12]
 800aefc:	6832      	ldr	r2, [r6, #0]
 800aefe:	1a9b      	subs	r3, r3, r2
 800af00:	42ab      	cmp	r3, r5
 800af02:	dc26      	bgt.n	800af52 <_printf_common+0x96>
 800af04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af08:	1e13      	subs	r3, r2, #0
 800af0a:	6822      	ldr	r2, [r4, #0]
 800af0c:	bf18      	it	ne
 800af0e:	2301      	movne	r3, #1
 800af10:	0692      	lsls	r2, r2, #26
 800af12:	d42b      	bmi.n	800af6c <_printf_common+0xb0>
 800af14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af18:	4649      	mov	r1, r9
 800af1a:	4638      	mov	r0, r7
 800af1c:	47c0      	blx	r8
 800af1e:	3001      	adds	r0, #1
 800af20:	d01e      	beq.n	800af60 <_printf_common+0xa4>
 800af22:	6823      	ldr	r3, [r4, #0]
 800af24:	6922      	ldr	r2, [r4, #16]
 800af26:	f003 0306 	and.w	r3, r3, #6
 800af2a:	2b04      	cmp	r3, #4
 800af2c:	bf02      	ittt	eq
 800af2e:	68e5      	ldreq	r5, [r4, #12]
 800af30:	6833      	ldreq	r3, [r6, #0]
 800af32:	1aed      	subeq	r5, r5, r3
 800af34:	68a3      	ldr	r3, [r4, #8]
 800af36:	bf0c      	ite	eq
 800af38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af3c:	2500      	movne	r5, #0
 800af3e:	4293      	cmp	r3, r2
 800af40:	bfc4      	itt	gt
 800af42:	1a9b      	subgt	r3, r3, r2
 800af44:	18ed      	addgt	r5, r5, r3
 800af46:	2600      	movs	r6, #0
 800af48:	341a      	adds	r4, #26
 800af4a:	42b5      	cmp	r5, r6
 800af4c:	d11a      	bne.n	800af84 <_printf_common+0xc8>
 800af4e:	2000      	movs	r0, #0
 800af50:	e008      	b.n	800af64 <_printf_common+0xa8>
 800af52:	2301      	movs	r3, #1
 800af54:	4652      	mov	r2, sl
 800af56:	4649      	mov	r1, r9
 800af58:	4638      	mov	r0, r7
 800af5a:	47c0      	blx	r8
 800af5c:	3001      	adds	r0, #1
 800af5e:	d103      	bne.n	800af68 <_printf_common+0xac>
 800af60:	f04f 30ff 	mov.w	r0, #4294967295
 800af64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af68:	3501      	adds	r5, #1
 800af6a:	e7c6      	b.n	800aefa <_printf_common+0x3e>
 800af6c:	18e1      	adds	r1, r4, r3
 800af6e:	1c5a      	adds	r2, r3, #1
 800af70:	2030      	movs	r0, #48	; 0x30
 800af72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af76:	4422      	add	r2, r4
 800af78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af80:	3302      	adds	r3, #2
 800af82:	e7c7      	b.n	800af14 <_printf_common+0x58>
 800af84:	2301      	movs	r3, #1
 800af86:	4622      	mov	r2, r4
 800af88:	4649      	mov	r1, r9
 800af8a:	4638      	mov	r0, r7
 800af8c:	47c0      	blx	r8
 800af8e:	3001      	adds	r0, #1
 800af90:	d0e6      	beq.n	800af60 <_printf_common+0xa4>
 800af92:	3601      	adds	r6, #1
 800af94:	e7d9      	b.n	800af4a <_printf_common+0x8e>
	...

0800af98 <_printf_i>:
 800af98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af9c:	7e0f      	ldrb	r7, [r1, #24]
 800af9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800afa0:	2f78      	cmp	r7, #120	; 0x78
 800afa2:	4691      	mov	r9, r2
 800afa4:	4680      	mov	r8, r0
 800afa6:	460c      	mov	r4, r1
 800afa8:	469a      	mov	sl, r3
 800afaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800afae:	d807      	bhi.n	800afc0 <_printf_i+0x28>
 800afb0:	2f62      	cmp	r7, #98	; 0x62
 800afb2:	d80a      	bhi.n	800afca <_printf_i+0x32>
 800afb4:	2f00      	cmp	r7, #0
 800afb6:	f000 80d4 	beq.w	800b162 <_printf_i+0x1ca>
 800afba:	2f58      	cmp	r7, #88	; 0x58
 800afbc:	f000 80c0 	beq.w	800b140 <_printf_i+0x1a8>
 800afc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800afc8:	e03a      	b.n	800b040 <_printf_i+0xa8>
 800afca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800afce:	2b15      	cmp	r3, #21
 800afd0:	d8f6      	bhi.n	800afc0 <_printf_i+0x28>
 800afd2:	a101      	add	r1, pc, #4	; (adr r1, 800afd8 <_printf_i+0x40>)
 800afd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800afd8:	0800b031 	.word	0x0800b031
 800afdc:	0800b045 	.word	0x0800b045
 800afe0:	0800afc1 	.word	0x0800afc1
 800afe4:	0800afc1 	.word	0x0800afc1
 800afe8:	0800afc1 	.word	0x0800afc1
 800afec:	0800afc1 	.word	0x0800afc1
 800aff0:	0800b045 	.word	0x0800b045
 800aff4:	0800afc1 	.word	0x0800afc1
 800aff8:	0800afc1 	.word	0x0800afc1
 800affc:	0800afc1 	.word	0x0800afc1
 800b000:	0800afc1 	.word	0x0800afc1
 800b004:	0800b149 	.word	0x0800b149
 800b008:	0800b071 	.word	0x0800b071
 800b00c:	0800b103 	.word	0x0800b103
 800b010:	0800afc1 	.word	0x0800afc1
 800b014:	0800afc1 	.word	0x0800afc1
 800b018:	0800b16b 	.word	0x0800b16b
 800b01c:	0800afc1 	.word	0x0800afc1
 800b020:	0800b071 	.word	0x0800b071
 800b024:	0800afc1 	.word	0x0800afc1
 800b028:	0800afc1 	.word	0x0800afc1
 800b02c:	0800b10b 	.word	0x0800b10b
 800b030:	682b      	ldr	r3, [r5, #0]
 800b032:	1d1a      	adds	r2, r3, #4
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	602a      	str	r2, [r5, #0]
 800b038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b03c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b040:	2301      	movs	r3, #1
 800b042:	e09f      	b.n	800b184 <_printf_i+0x1ec>
 800b044:	6820      	ldr	r0, [r4, #0]
 800b046:	682b      	ldr	r3, [r5, #0]
 800b048:	0607      	lsls	r7, r0, #24
 800b04a:	f103 0104 	add.w	r1, r3, #4
 800b04e:	6029      	str	r1, [r5, #0]
 800b050:	d501      	bpl.n	800b056 <_printf_i+0xbe>
 800b052:	681e      	ldr	r6, [r3, #0]
 800b054:	e003      	b.n	800b05e <_printf_i+0xc6>
 800b056:	0646      	lsls	r6, r0, #25
 800b058:	d5fb      	bpl.n	800b052 <_printf_i+0xba>
 800b05a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b05e:	2e00      	cmp	r6, #0
 800b060:	da03      	bge.n	800b06a <_printf_i+0xd2>
 800b062:	232d      	movs	r3, #45	; 0x2d
 800b064:	4276      	negs	r6, r6
 800b066:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b06a:	485a      	ldr	r0, [pc, #360]	; (800b1d4 <_printf_i+0x23c>)
 800b06c:	230a      	movs	r3, #10
 800b06e:	e012      	b.n	800b096 <_printf_i+0xfe>
 800b070:	682b      	ldr	r3, [r5, #0]
 800b072:	6820      	ldr	r0, [r4, #0]
 800b074:	1d19      	adds	r1, r3, #4
 800b076:	6029      	str	r1, [r5, #0]
 800b078:	0605      	lsls	r5, r0, #24
 800b07a:	d501      	bpl.n	800b080 <_printf_i+0xe8>
 800b07c:	681e      	ldr	r6, [r3, #0]
 800b07e:	e002      	b.n	800b086 <_printf_i+0xee>
 800b080:	0641      	lsls	r1, r0, #25
 800b082:	d5fb      	bpl.n	800b07c <_printf_i+0xe4>
 800b084:	881e      	ldrh	r6, [r3, #0]
 800b086:	4853      	ldr	r0, [pc, #332]	; (800b1d4 <_printf_i+0x23c>)
 800b088:	2f6f      	cmp	r7, #111	; 0x6f
 800b08a:	bf0c      	ite	eq
 800b08c:	2308      	moveq	r3, #8
 800b08e:	230a      	movne	r3, #10
 800b090:	2100      	movs	r1, #0
 800b092:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b096:	6865      	ldr	r5, [r4, #4]
 800b098:	60a5      	str	r5, [r4, #8]
 800b09a:	2d00      	cmp	r5, #0
 800b09c:	bfa2      	ittt	ge
 800b09e:	6821      	ldrge	r1, [r4, #0]
 800b0a0:	f021 0104 	bicge.w	r1, r1, #4
 800b0a4:	6021      	strge	r1, [r4, #0]
 800b0a6:	b90e      	cbnz	r6, 800b0ac <_printf_i+0x114>
 800b0a8:	2d00      	cmp	r5, #0
 800b0aa:	d04b      	beq.n	800b144 <_printf_i+0x1ac>
 800b0ac:	4615      	mov	r5, r2
 800b0ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800b0b2:	fb03 6711 	mls	r7, r3, r1, r6
 800b0b6:	5dc7      	ldrb	r7, [r0, r7]
 800b0b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b0bc:	4637      	mov	r7, r6
 800b0be:	42bb      	cmp	r3, r7
 800b0c0:	460e      	mov	r6, r1
 800b0c2:	d9f4      	bls.n	800b0ae <_printf_i+0x116>
 800b0c4:	2b08      	cmp	r3, #8
 800b0c6:	d10b      	bne.n	800b0e0 <_printf_i+0x148>
 800b0c8:	6823      	ldr	r3, [r4, #0]
 800b0ca:	07de      	lsls	r6, r3, #31
 800b0cc:	d508      	bpl.n	800b0e0 <_printf_i+0x148>
 800b0ce:	6923      	ldr	r3, [r4, #16]
 800b0d0:	6861      	ldr	r1, [r4, #4]
 800b0d2:	4299      	cmp	r1, r3
 800b0d4:	bfde      	ittt	le
 800b0d6:	2330      	movle	r3, #48	; 0x30
 800b0d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b0dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b0e0:	1b52      	subs	r2, r2, r5
 800b0e2:	6122      	str	r2, [r4, #16]
 800b0e4:	f8cd a000 	str.w	sl, [sp]
 800b0e8:	464b      	mov	r3, r9
 800b0ea:	aa03      	add	r2, sp, #12
 800b0ec:	4621      	mov	r1, r4
 800b0ee:	4640      	mov	r0, r8
 800b0f0:	f7ff fee4 	bl	800aebc <_printf_common>
 800b0f4:	3001      	adds	r0, #1
 800b0f6:	d14a      	bne.n	800b18e <_printf_i+0x1f6>
 800b0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0fc:	b004      	add	sp, #16
 800b0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b102:	6823      	ldr	r3, [r4, #0]
 800b104:	f043 0320 	orr.w	r3, r3, #32
 800b108:	6023      	str	r3, [r4, #0]
 800b10a:	4833      	ldr	r0, [pc, #204]	; (800b1d8 <_printf_i+0x240>)
 800b10c:	2778      	movs	r7, #120	; 0x78
 800b10e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b112:	6823      	ldr	r3, [r4, #0]
 800b114:	6829      	ldr	r1, [r5, #0]
 800b116:	061f      	lsls	r7, r3, #24
 800b118:	f851 6b04 	ldr.w	r6, [r1], #4
 800b11c:	d402      	bmi.n	800b124 <_printf_i+0x18c>
 800b11e:	065f      	lsls	r7, r3, #25
 800b120:	bf48      	it	mi
 800b122:	b2b6      	uxthmi	r6, r6
 800b124:	07df      	lsls	r7, r3, #31
 800b126:	bf48      	it	mi
 800b128:	f043 0320 	orrmi.w	r3, r3, #32
 800b12c:	6029      	str	r1, [r5, #0]
 800b12e:	bf48      	it	mi
 800b130:	6023      	strmi	r3, [r4, #0]
 800b132:	b91e      	cbnz	r6, 800b13c <_printf_i+0x1a4>
 800b134:	6823      	ldr	r3, [r4, #0]
 800b136:	f023 0320 	bic.w	r3, r3, #32
 800b13a:	6023      	str	r3, [r4, #0]
 800b13c:	2310      	movs	r3, #16
 800b13e:	e7a7      	b.n	800b090 <_printf_i+0xf8>
 800b140:	4824      	ldr	r0, [pc, #144]	; (800b1d4 <_printf_i+0x23c>)
 800b142:	e7e4      	b.n	800b10e <_printf_i+0x176>
 800b144:	4615      	mov	r5, r2
 800b146:	e7bd      	b.n	800b0c4 <_printf_i+0x12c>
 800b148:	682b      	ldr	r3, [r5, #0]
 800b14a:	6826      	ldr	r6, [r4, #0]
 800b14c:	6961      	ldr	r1, [r4, #20]
 800b14e:	1d18      	adds	r0, r3, #4
 800b150:	6028      	str	r0, [r5, #0]
 800b152:	0635      	lsls	r5, r6, #24
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	d501      	bpl.n	800b15c <_printf_i+0x1c4>
 800b158:	6019      	str	r1, [r3, #0]
 800b15a:	e002      	b.n	800b162 <_printf_i+0x1ca>
 800b15c:	0670      	lsls	r0, r6, #25
 800b15e:	d5fb      	bpl.n	800b158 <_printf_i+0x1c0>
 800b160:	8019      	strh	r1, [r3, #0]
 800b162:	2300      	movs	r3, #0
 800b164:	6123      	str	r3, [r4, #16]
 800b166:	4615      	mov	r5, r2
 800b168:	e7bc      	b.n	800b0e4 <_printf_i+0x14c>
 800b16a:	682b      	ldr	r3, [r5, #0]
 800b16c:	1d1a      	adds	r2, r3, #4
 800b16e:	602a      	str	r2, [r5, #0]
 800b170:	681d      	ldr	r5, [r3, #0]
 800b172:	6862      	ldr	r2, [r4, #4]
 800b174:	2100      	movs	r1, #0
 800b176:	4628      	mov	r0, r5
 800b178:	f7f5 f86a 	bl	8000250 <memchr>
 800b17c:	b108      	cbz	r0, 800b182 <_printf_i+0x1ea>
 800b17e:	1b40      	subs	r0, r0, r5
 800b180:	6060      	str	r0, [r4, #4]
 800b182:	6863      	ldr	r3, [r4, #4]
 800b184:	6123      	str	r3, [r4, #16]
 800b186:	2300      	movs	r3, #0
 800b188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b18c:	e7aa      	b.n	800b0e4 <_printf_i+0x14c>
 800b18e:	6923      	ldr	r3, [r4, #16]
 800b190:	462a      	mov	r2, r5
 800b192:	4649      	mov	r1, r9
 800b194:	4640      	mov	r0, r8
 800b196:	47d0      	blx	sl
 800b198:	3001      	adds	r0, #1
 800b19a:	d0ad      	beq.n	800b0f8 <_printf_i+0x160>
 800b19c:	6823      	ldr	r3, [r4, #0]
 800b19e:	079b      	lsls	r3, r3, #30
 800b1a0:	d413      	bmi.n	800b1ca <_printf_i+0x232>
 800b1a2:	68e0      	ldr	r0, [r4, #12]
 800b1a4:	9b03      	ldr	r3, [sp, #12]
 800b1a6:	4298      	cmp	r0, r3
 800b1a8:	bfb8      	it	lt
 800b1aa:	4618      	movlt	r0, r3
 800b1ac:	e7a6      	b.n	800b0fc <_printf_i+0x164>
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	4632      	mov	r2, r6
 800b1b2:	4649      	mov	r1, r9
 800b1b4:	4640      	mov	r0, r8
 800b1b6:	47d0      	blx	sl
 800b1b8:	3001      	adds	r0, #1
 800b1ba:	d09d      	beq.n	800b0f8 <_printf_i+0x160>
 800b1bc:	3501      	adds	r5, #1
 800b1be:	68e3      	ldr	r3, [r4, #12]
 800b1c0:	9903      	ldr	r1, [sp, #12]
 800b1c2:	1a5b      	subs	r3, r3, r1
 800b1c4:	42ab      	cmp	r3, r5
 800b1c6:	dcf2      	bgt.n	800b1ae <_printf_i+0x216>
 800b1c8:	e7eb      	b.n	800b1a2 <_printf_i+0x20a>
 800b1ca:	2500      	movs	r5, #0
 800b1cc:	f104 0619 	add.w	r6, r4, #25
 800b1d0:	e7f5      	b.n	800b1be <_printf_i+0x226>
 800b1d2:	bf00      	nop
 800b1d4:	0800bd87 	.word	0x0800bd87
 800b1d8:	0800bd98 	.word	0x0800bd98

0800b1dc <__sflush_r>:
 800b1dc:	898a      	ldrh	r2, [r1, #12]
 800b1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1e2:	4605      	mov	r5, r0
 800b1e4:	0710      	lsls	r0, r2, #28
 800b1e6:	460c      	mov	r4, r1
 800b1e8:	d458      	bmi.n	800b29c <__sflush_r+0xc0>
 800b1ea:	684b      	ldr	r3, [r1, #4]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	dc05      	bgt.n	800b1fc <__sflush_r+0x20>
 800b1f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	dc02      	bgt.n	800b1fc <__sflush_r+0x20>
 800b1f6:	2000      	movs	r0, #0
 800b1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1fe:	2e00      	cmp	r6, #0
 800b200:	d0f9      	beq.n	800b1f6 <__sflush_r+0x1a>
 800b202:	2300      	movs	r3, #0
 800b204:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b208:	682f      	ldr	r7, [r5, #0]
 800b20a:	6a21      	ldr	r1, [r4, #32]
 800b20c:	602b      	str	r3, [r5, #0]
 800b20e:	d032      	beq.n	800b276 <__sflush_r+0x9a>
 800b210:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b212:	89a3      	ldrh	r3, [r4, #12]
 800b214:	075a      	lsls	r2, r3, #29
 800b216:	d505      	bpl.n	800b224 <__sflush_r+0x48>
 800b218:	6863      	ldr	r3, [r4, #4]
 800b21a:	1ac0      	subs	r0, r0, r3
 800b21c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b21e:	b10b      	cbz	r3, 800b224 <__sflush_r+0x48>
 800b220:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b222:	1ac0      	subs	r0, r0, r3
 800b224:	2300      	movs	r3, #0
 800b226:	4602      	mov	r2, r0
 800b228:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b22a:	6a21      	ldr	r1, [r4, #32]
 800b22c:	4628      	mov	r0, r5
 800b22e:	47b0      	blx	r6
 800b230:	1c43      	adds	r3, r0, #1
 800b232:	89a3      	ldrh	r3, [r4, #12]
 800b234:	d106      	bne.n	800b244 <__sflush_r+0x68>
 800b236:	6829      	ldr	r1, [r5, #0]
 800b238:	291d      	cmp	r1, #29
 800b23a:	d82b      	bhi.n	800b294 <__sflush_r+0xb8>
 800b23c:	4a29      	ldr	r2, [pc, #164]	; (800b2e4 <__sflush_r+0x108>)
 800b23e:	410a      	asrs	r2, r1
 800b240:	07d6      	lsls	r6, r2, #31
 800b242:	d427      	bmi.n	800b294 <__sflush_r+0xb8>
 800b244:	2200      	movs	r2, #0
 800b246:	6062      	str	r2, [r4, #4]
 800b248:	04d9      	lsls	r1, r3, #19
 800b24a:	6922      	ldr	r2, [r4, #16]
 800b24c:	6022      	str	r2, [r4, #0]
 800b24e:	d504      	bpl.n	800b25a <__sflush_r+0x7e>
 800b250:	1c42      	adds	r2, r0, #1
 800b252:	d101      	bne.n	800b258 <__sflush_r+0x7c>
 800b254:	682b      	ldr	r3, [r5, #0]
 800b256:	b903      	cbnz	r3, 800b25a <__sflush_r+0x7e>
 800b258:	6560      	str	r0, [r4, #84]	; 0x54
 800b25a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b25c:	602f      	str	r7, [r5, #0]
 800b25e:	2900      	cmp	r1, #0
 800b260:	d0c9      	beq.n	800b1f6 <__sflush_r+0x1a>
 800b262:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b266:	4299      	cmp	r1, r3
 800b268:	d002      	beq.n	800b270 <__sflush_r+0x94>
 800b26a:	4628      	mov	r0, r5
 800b26c:	f7ff fbce 	bl	800aa0c <_free_r>
 800b270:	2000      	movs	r0, #0
 800b272:	6360      	str	r0, [r4, #52]	; 0x34
 800b274:	e7c0      	b.n	800b1f8 <__sflush_r+0x1c>
 800b276:	2301      	movs	r3, #1
 800b278:	4628      	mov	r0, r5
 800b27a:	47b0      	blx	r6
 800b27c:	1c41      	adds	r1, r0, #1
 800b27e:	d1c8      	bne.n	800b212 <__sflush_r+0x36>
 800b280:	682b      	ldr	r3, [r5, #0]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d0c5      	beq.n	800b212 <__sflush_r+0x36>
 800b286:	2b1d      	cmp	r3, #29
 800b288:	d001      	beq.n	800b28e <__sflush_r+0xb2>
 800b28a:	2b16      	cmp	r3, #22
 800b28c:	d101      	bne.n	800b292 <__sflush_r+0xb6>
 800b28e:	602f      	str	r7, [r5, #0]
 800b290:	e7b1      	b.n	800b1f6 <__sflush_r+0x1a>
 800b292:	89a3      	ldrh	r3, [r4, #12]
 800b294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b298:	81a3      	strh	r3, [r4, #12]
 800b29a:	e7ad      	b.n	800b1f8 <__sflush_r+0x1c>
 800b29c:	690f      	ldr	r7, [r1, #16]
 800b29e:	2f00      	cmp	r7, #0
 800b2a0:	d0a9      	beq.n	800b1f6 <__sflush_r+0x1a>
 800b2a2:	0793      	lsls	r3, r2, #30
 800b2a4:	680e      	ldr	r6, [r1, #0]
 800b2a6:	bf08      	it	eq
 800b2a8:	694b      	ldreq	r3, [r1, #20]
 800b2aa:	600f      	str	r7, [r1, #0]
 800b2ac:	bf18      	it	ne
 800b2ae:	2300      	movne	r3, #0
 800b2b0:	eba6 0807 	sub.w	r8, r6, r7
 800b2b4:	608b      	str	r3, [r1, #8]
 800b2b6:	f1b8 0f00 	cmp.w	r8, #0
 800b2ba:	dd9c      	ble.n	800b1f6 <__sflush_r+0x1a>
 800b2bc:	6a21      	ldr	r1, [r4, #32]
 800b2be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b2c0:	4643      	mov	r3, r8
 800b2c2:	463a      	mov	r2, r7
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	47b0      	blx	r6
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	dc06      	bgt.n	800b2da <__sflush_r+0xfe>
 800b2cc:	89a3      	ldrh	r3, [r4, #12]
 800b2ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2d2:	81a3      	strh	r3, [r4, #12]
 800b2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2d8:	e78e      	b.n	800b1f8 <__sflush_r+0x1c>
 800b2da:	4407      	add	r7, r0
 800b2dc:	eba8 0800 	sub.w	r8, r8, r0
 800b2e0:	e7e9      	b.n	800b2b6 <__sflush_r+0xda>
 800b2e2:	bf00      	nop
 800b2e4:	dfbffffe 	.word	0xdfbffffe

0800b2e8 <_fflush_r>:
 800b2e8:	b538      	push	{r3, r4, r5, lr}
 800b2ea:	690b      	ldr	r3, [r1, #16]
 800b2ec:	4605      	mov	r5, r0
 800b2ee:	460c      	mov	r4, r1
 800b2f0:	b913      	cbnz	r3, 800b2f8 <_fflush_r+0x10>
 800b2f2:	2500      	movs	r5, #0
 800b2f4:	4628      	mov	r0, r5
 800b2f6:	bd38      	pop	{r3, r4, r5, pc}
 800b2f8:	b118      	cbz	r0, 800b302 <_fflush_r+0x1a>
 800b2fa:	6a03      	ldr	r3, [r0, #32]
 800b2fc:	b90b      	cbnz	r3, 800b302 <_fflush_r+0x1a>
 800b2fe:	f7ff f9e1 	bl	800a6c4 <__sinit>
 800b302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d0f3      	beq.n	800b2f2 <_fflush_r+0xa>
 800b30a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b30c:	07d0      	lsls	r0, r2, #31
 800b30e:	d404      	bmi.n	800b31a <_fflush_r+0x32>
 800b310:	0599      	lsls	r1, r3, #22
 800b312:	d402      	bmi.n	800b31a <_fflush_r+0x32>
 800b314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b316:	f7ff fb58 	bl	800a9ca <__retarget_lock_acquire_recursive>
 800b31a:	4628      	mov	r0, r5
 800b31c:	4621      	mov	r1, r4
 800b31e:	f7ff ff5d 	bl	800b1dc <__sflush_r>
 800b322:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b324:	07da      	lsls	r2, r3, #31
 800b326:	4605      	mov	r5, r0
 800b328:	d4e4      	bmi.n	800b2f4 <_fflush_r+0xc>
 800b32a:	89a3      	ldrh	r3, [r4, #12]
 800b32c:	059b      	lsls	r3, r3, #22
 800b32e:	d4e1      	bmi.n	800b2f4 <_fflush_r+0xc>
 800b330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b332:	f7ff fb4b 	bl	800a9cc <__retarget_lock_release_recursive>
 800b336:	e7dd      	b.n	800b2f4 <_fflush_r+0xc>

0800b338 <fiprintf>:
 800b338:	b40e      	push	{r1, r2, r3}
 800b33a:	b503      	push	{r0, r1, lr}
 800b33c:	4601      	mov	r1, r0
 800b33e:	ab03      	add	r3, sp, #12
 800b340:	4805      	ldr	r0, [pc, #20]	; (800b358 <fiprintf+0x20>)
 800b342:	f853 2b04 	ldr.w	r2, [r3], #4
 800b346:	6800      	ldr	r0, [r0, #0]
 800b348:	9301      	str	r3, [sp, #4]
 800b34a:	f000 f89f 	bl	800b48c <_vfiprintf_r>
 800b34e:	b002      	add	sp, #8
 800b350:	f85d eb04 	ldr.w	lr, [sp], #4
 800b354:	b003      	add	sp, #12
 800b356:	4770      	bx	lr
 800b358:	2000012c 	.word	0x2000012c

0800b35c <memmove>:
 800b35c:	4288      	cmp	r0, r1
 800b35e:	b510      	push	{r4, lr}
 800b360:	eb01 0402 	add.w	r4, r1, r2
 800b364:	d902      	bls.n	800b36c <memmove+0x10>
 800b366:	4284      	cmp	r4, r0
 800b368:	4623      	mov	r3, r4
 800b36a:	d807      	bhi.n	800b37c <memmove+0x20>
 800b36c:	1e43      	subs	r3, r0, #1
 800b36e:	42a1      	cmp	r1, r4
 800b370:	d008      	beq.n	800b384 <memmove+0x28>
 800b372:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b376:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b37a:	e7f8      	b.n	800b36e <memmove+0x12>
 800b37c:	4402      	add	r2, r0
 800b37e:	4601      	mov	r1, r0
 800b380:	428a      	cmp	r2, r1
 800b382:	d100      	bne.n	800b386 <memmove+0x2a>
 800b384:	bd10      	pop	{r4, pc}
 800b386:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b38a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b38e:	e7f7      	b.n	800b380 <memmove+0x24>

0800b390 <_sbrk_r>:
 800b390:	b538      	push	{r3, r4, r5, lr}
 800b392:	4d06      	ldr	r5, [pc, #24]	; (800b3ac <_sbrk_r+0x1c>)
 800b394:	2300      	movs	r3, #0
 800b396:	4604      	mov	r4, r0
 800b398:	4608      	mov	r0, r1
 800b39a:	602b      	str	r3, [r5, #0]
 800b39c:	f7f6 fb18 	bl	80019d0 <_sbrk>
 800b3a0:	1c43      	adds	r3, r0, #1
 800b3a2:	d102      	bne.n	800b3aa <_sbrk_r+0x1a>
 800b3a4:	682b      	ldr	r3, [r5, #0]
 800b3a6:	b103      	cbz	r3, 800b3aa <_sbrk_r+0x1a>
 800b3a8:	6023      	str	r3, [r4, #0]
 800b3aa:	bd38      	pop	{r3, r4, r5, pc}
 800b3ac:	20000748 	.word	0x20000748

0800b3b0 <memcpy>:
 800b3b0:	440a      	add	r2, r1
 800b3b2:	4291      	cmp	r1, r2
 800b3b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3b8:	d100      	bne.n	800b3bc <memcpy+0xc>
 800b3ba:	4770      	bx	lr
 800b3bc:	b510      	push	{r4, lr}
 800b3be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3c6:	4291      	cmp	r1, r2
 800b3c8:	d1f9      	bne.n	800b3be <memcpy+0xe>
 800b3ca:	bd10      	pop	{r4, pc}

0800b3cc <abort>:
 800b3cc:	b508      	push	{r3, lr}
 800b3ce:	2006      	movs	r0, #6
 800b3d0:	f000 fa34 	bl	800b83c <raise>
 800b3d4:	2001      	movs	r0, #1
 800b3d6:	f7f6 fa83 	bl	80018e0 <_exit>

0800b3da <_realloc_r>:
 800b3da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3de:	4680      	mov	r8, r0
 800b3e0:	4614      	mov	r4, r2
 800b3e2:	460e      	mov	r6, r1
 800b3e4:	b921      	cbnz	r1, 800b3f0 <_realloc_r+0x16>
 800b3e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ea:	4611      	mov	r1, r2
 800b3ec:	f7ff bb82 	b.w	800aaf4 <_malloc_r>
 800b3f0:	b92a      	cbnz	r2, 800b3fe <_realloc_r+0x24>
 800b3f2:	f7ff fb0b 	bl	800aa0c <_free_r>
 800b3f6:	4625      	mov	r5, r4
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3fe:	f000 fa39 	bl	800b874 <_malloc_usable_size_r>
 800b402:	4284      	cmp	r4, r0
 800b404:	4607      	mov	r7, r0
 800b406:	d802      	bhi.n	800b40e <_realloc_r+0x34>
 800b408:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b40c:	d812      	bhi.n	800b434 <_realloc_r+0x5a>
 800b40e:	4621      	mov	r1, r4
 800b410:	4640      	mov	r0, r8
 800b412:	f7ff fb6f 	bl	800aaf4 <_malloc_r>
 800b416:	4605      	mov	r5, r0
 800b418:	2800      	cmp	r0, #0
 800b41a:	d0ed      	beq.n	800b3f8 <_realloc_r+0x1e>
 800b41c:	42bc      	cmp	r4, r7
 800b41e:	4622      	mov	r2, r4
 800b420:	4631      	mov	r1, r6
 800b422:	bf28      	it	cs
 800b424:	463a      	movcs	r2, r7
 800b426:	f7ff ffc3 	bl	800b3b0 <memcpy>
 800b42a:	4631      	mov	r1, r6
 800b42c:	4640      	mov	r0, r8
 800b42e:	f7ff faed 	bl	800aa0c <_free_r>
 800b432:	e7e1      	b.n	800b3f8 <_realloc_r+0x1e>
 800b434:	4635      	mov	r5, r6
 800b436:	e7df      	b.n	800b3f8 <_realloc_r+0x1e>

0800b438 <__sfputc_r>:
 800b438:	6893      	ldr	r3, [r2, #8]
 800b43a:	3b01      	subs	r3, #1
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	b410      	push	{r4}
 800b440:	6093      	str	r3, [r2, #8]
 800b442:	da08      	bge.n	800b456 <__sfputc_r+0x1e>
 800b444:	6994      	ldr	r4, [r2, #24]
 800b446:	42a3      	cmp	r3, r4
 800b448:	db01      	blt.n	800b44e <__sfputc_r+0x16>
 800b44a:	290a      	cmp	r1, #10
 800b44c:	d103      	bne.n	800b456 <__sfputc_r+0x1e>
 800b44e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b452:	f000 b935 	b.w	800b6c0 <__swbuf_r>
 800b456:	6813      	ldr	r3, [r2, #0]
 800b458:	1c58      	adds	r0, r3, #1
 800b45a:	6010      	str	r0, [r2, #0]
 800b45c:	7019      	strb	r1, [r3, #0]
 800b45e:	4608      	mov	r0, r1
 800b460:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b464:	4770      	bx	lr

0800b466 <__sfputs_r>:
 800b466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b468:	4606      	mov	r6, r0
 800b46a:	460f      	mov	r7, r1
 800b46c:	4614      	mov	r4, r2
 800b46e:	18d5      	adds	r5, r2, r3
 800b470:	42ac      	cmp	r4, r5
 800b472:	d101      	bne.n	800b478 <__sfputs_r+0x12>
 800b474:	2000      	movs	r0, #0
 800b476:	e007      	b.n	800b488 <__sfputs_r+0x22>
 800b478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b47c:	463a      	mov	r2, r7
 800b47e:	4630      	mov	r0, r6
 800b480:	f7ff ffda 	bl	800b438 <__sfputc_r>
 800b484:	1c43      	adds	r3, r0, #1
 800b486:	d1f3      	bne.n	800b470 <__sfputs_r+0xa>
 800b488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b48c <_vfiprintf_r>:
 800b48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b490:	460d      	mov	r5, r1
 800b492:	b09d      	sub	sp, #116	; 0x74
 800b494:	4614      	mov	r4, r2
 800b496:	4698      	mov	r8, r3
 800b498:	4606      	mov	r6, r0
 800b49a:	b118      	cbz	r0, 800b4a4 <_vfiprintf_r+0x18>
 800b49c:	6a03      	ldr	r3, [r0, #32]
 800b49e:	b90b      	cbnz	r3, 800b4a4 <_vfiprintf_r+0x18>
 800b4a0:	f7ff f910 	bl	800a6c4 <__sinit>
 800b4a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4a6:	07d9      	lsls	r1, r3, #31
 800b4a8:	d405      	bmi.n	800b4b6 <_vfiprintf_r+0x2a>
 800b4aa:	89ab      	ldrh	r3, [r5, #12]
 800b4ac:	059a      	lsls	r2, r3, #22
 800b4ae:	d402      	bmi.n	800b4b6 <_vfiprintf_r+0x2a>
 800b4b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4b2:	f7ff fa8a 	bl	800a9ca <__retarget_lock_acquire_recursive>
 800b4b6:	89ab      	ldrh	r3, [r5, #12]
 800b4b8:	071b      	lsls	r3, r3, #28
 800b4ba:	d501      	bpl.n	800b4c0 <_vfiprintf_r+0x34>
 800b4bc:	692b      	ldr	r3, [r5, #16]
 800b4be:	b99b      	cbnz	r3, 800b4e8 <_vfiprintf_r+0x5c>
 800b4c0:	4629      	mov	r1, r5
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	f000 f93a 	bl	800b73c <__swsetup_r>
 800b4c8:	b170      	cbz	r0, 800b4e8 <_vfiprintf_r+0x5c>
 800b4ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4cc:	07dc      	lsls	r4, r3, #31
 800b4ce:	d504      	bpl.n	800b4da <_vfiprintf_r+0x4e>
 800b4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d4:	b01d      	add	sp, #116	; 0x74
 800b4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4da:	89ab      	ldrh	r3, [r5, #12]
 800b4dc:	0598      	lsls	r0, r3, #22
 800b4de:	d4f7      	bmi.n	800b4d0 <_vfiprintf_r+0x44>
 800b4e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4e2:	f7ff fa73 	bl	800a9cc <__retarget_lock_release_recursive>
 800b4e6:	e7f3      	b.n	800b4d0 <_vfiprintf_r+0x44>
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ec:	2320      	movs	r3, #32
 800b4ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4f6:	2330      	movs	r3, #48	; 0x30
 800b4f8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b6ac <_vfiprintf_r+0x220>
 800b4fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b500:	f04f 0901 	mov.w	r9, #1
 800b504:	4623      	mov	r3, r4
 800b506:	469a      	mov	sl, r3
 800b508:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b50c:	b10a      	cbz	r2, 800b512 <_vfiprintf_r+0x86>
 800b50e:	2a25      	cmp	r2, #37	; 0x25
 800b510:	d1f9      	bne.n	800b506 <_vfiprintf_r+0x7a>
 800b512:	ebba 0b04 	subs.w	fp, sl, r4
 800b516:	d00b      	beq.n	800b530 <_vfiprintf_r+0xa4>
 800b518:	465b      	mov	r3, fp
 800b51a:	4622      	mov	r2, r4
 800b51c:	4629      	mov	r1, r5
 800b51e:	4630      	mov	r0, r6
 800b520:	f7ff ffa1 	bl	800b466 <__sfputs_r>
 800b524:	3001      	adds	r0, #1
 800b526:	f000 80a9 	beq.w	800b67c <_vfiprintf_r+0x1f0>
 800b52a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b52c:	445a      	add	r2, fp
 800b52e:	9209      	str	r2, [sp, #36]	; 0x24
 800b530:	f89a 3000 	ldrb.w	r3, [sl]
 800b534:	2b00      	cmp	r3, #0
 800b536:	f000 80a1 	beq.w	800b67c <_vfiprintf_r+0x1f0>
 800b53a:	2300      	movs	r3, #0
 800b53c:	f04f 32ff 	mov.w	r2, #4294967295
 800b540:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b544:	f10a 0a01 	add.w	sl, sl, #1
 800b548:	9304      	str	r3, [sp, #16]
 800b54a:	9307      	str	r3, [sp, #28]
 800b54c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b550:	931a      	str	r3, [sp, #104]	; 0x68
 800b552:	4654      	mov	r4, sl
 800b554:	2205      	movs	r2, #5
 800b556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b55a:	4854      	ldr	r0, [pc, #336]	; (800b6ac <_vfiprintf_r+0x220>)
 800b55c:	f7f4 fe78 	bl	8000250 <memchr>
 800b560:	9a04      	ldr	r2, [sp, #16]
 800b562:	b9d8      	cbnz	r0, 800b59c <_vfiprintf_r+0x110>
 800b564:	06d1      	lsls	r1, r2, #27
 800b566:	bf44      	itt	mi
 800b568:	2320      	movmi	r3, #32
 800b56a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b56e:	0713      	lsls	r3, r2, #28
 800b570:	bf44      	itt	mi
 800b572:	232b      	movmi	r3, #43	; 0x2b
 800b574:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b578:	f89a 3000 	ldrb.w	r3, [sl]
 800b57c:	2b2a      	cmp	r3, #42	; 0x2a
 800b57e:	d015      	beq.n	800b5ac <_vfiprintf_r+0x120>
 800b580:	9a07      	ldr	r2, [sp, #28]
 800b582:	4654      	mov	r4, sl
 800b584:	2000      	movs	r0, #0
 800b586:	f04f 0c0a 	mov.w	ip, #10
 800b58a:	4621      	mov	r1, r4
 800b58c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b590:	3b30      	subs	r3, #48	; 0x30
 800b592:	2b09      	cmp	r3, #9
 800b594:	d94d      	bls.n	800b632 <_vfiprintf_r+0x1a6>
 800b596:	b1b0      	cbz	r0, 800b5c6 <_vfiprintf_r+0x13a>
 800b598:	9207      	str	r2, [sp, #28]
 800b59a:	e014      	b.n	800b5c6 <_vfiprintf_r+0x13a>
 800b59c:	eba0 0308 	sub.w	r3, r0, r8
 800b5a0:	fa09 f303 	lsl.w	r3, r9, r3
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	9304      	str	r3, [sp, #16]
 800b5a8:	46a2      	mov	sl, r4
 800b5aa:	e7d2      	b.n	800b552 <_vfiprintf_r+0xc6>
 800b5ac:	9b03      	ldr	r3, [sp, #12]
 800b5ae:	1d19      	adds	r1, r3, #4
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	9103      	str	r1, [sp, #12]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	bfbb      	ittet	lt
 800b5b8:	425b      	neglt	r3, r3
 800b5ba:	f042 0202 	orrlt.w	r2, r2, #2
 800b5be:	9307      	strge	r3, [sp, #28]
 800b5c0:	9307      	strlt	r3, [sp, #28]
 800b5c2:	bfb8      	it	lt
 800b5c4:	9204      	strlt	r2, [sp, #16]
 800b5c6:	7823      	ldrb	r3, [r4, #0]
 800b5c8:	2b2e      	cmp	r3, #46	; 0x2e
 800b5ca:	d10c      	bne.n	800b5e6 <_vfiprintf_r+0x15a>
 800b5cc:	7863      	ldrb	r3, [r4, #1]
 800b5ce:	2b2a      	cmp	r3, #42	; 0x2a
 800b5d0:	d134      	bne.n	800b63c <_vfiprintf_r+0x1b0>
 800b5d2:	9b03      	ldr	r3, [sp, #12]
 800b5d4:	1d1a      	adds	r2, r3, #4
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	9203      	str	r2, [sp, #12]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	bfb8      	it	lt
 800b5de:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5e2:	3402      	adds	r4, #2
 800b5e4:	9305      	str	r3, [sp, #20]
 800b5e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b6bc <_vfiprintf_r+0x230>
 800b5ea:	7821      	ldrb	r1, [r4, #0]
 800b5ec:	2203      	movs	r2, #3
 800b5ee:	4650      	mov	r0, sl
 800b5f0:	f7f4 fe2e 	bl	8000250 <memchr>
 800b5f4:	b138      	cbz	r0, 800b606 <_vfiprintf_r+0x17a>
 800b5f6:	9b04      	ldr	r3, [sp, #16]
 800b5f8:	eba0 000a 	sub.w	r0, r0, sl
 800b5fc:	2240      	movs	r2, #64	; 0x40
 800b5fe:	4082      	lsls	r2, r0
 800b600:	4313      	orrs	r3, r2
 800b602:	3401      	adds	r4, #1
 800b604:	9304      	str	r3, [sp, #16]
 800b606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b60a:	4829      	ldr	r0, [pc, #164]	; (800b6b0 <_vfiprintf_r+0x224>)
 800b60c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b610:	2206      	movs	r2, #6
 800b612:	f7f4 fe1d 	bl	8000250 <memchr>
 800b616:	2800      	cmp	r0, #0
 800b618:	d03f      	beq.n	800b69a <_vfiprintf_r+0x20e>
 800b61a:	4b26      	ldr	r3, [pc, #152]	; (800b6b4 <_vfiprintf_r+0x228>)
 800b61c:	bb1b      	cbnz	r3, 800b666 <_vfiprintf_r+0x1da>
 800b61e:	9b03      	ldr	r3, [sp, #12]
 800b620:	3307      	adds	r3, #7
 800b622:	f023 0307 	bic.w	r3, r3, #7
 800b626:	3308      	adds	r3, #8
 800b628:	9303      	str	r3, [sp, #12]
 800b62a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b62c:	443b      	add	r3, r7
 800b62e:	9309      	str	r3, [sp, #36]	; 0x24
 800b630:	e768      	b.n	800b504 <_vfiprintf_r+0x78>
 800b632:	fb0c 3202 	mla	r2, ip, r2, r3
 800b636:	460c      	mov	r4, r1
 800b638:	2001      	movs	r0, #1
 800b63a:	e7a6      	b.n	800b58a <_vfiprintf_r+0xfe>
 800b63c:	2300      	movs	r3, #0
 800b63e:	3401      	adds	r4, #1
 800b640:	9305      	str	r3, [sp, #20]
 800b642:	4619      	mov	r1, r3
 800b644:	f04f 0c0a 	mov.w	ip, #10
 800b648:	4620      	mov	r0, r4
 800b64a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b64e:	3a30      	subs	r2, #48	; 0x30
 800b650:	2a09      	cmp	r2, #9
 800b652:	d903      	bls.n	800b65c <_vfiprintf_r+0x1d0>
 800b654:	2b00      	cmp	r3, #0
 800b656:	d0c6      	beq.n	800b5e6 <_vfiprintf_r+0x15a>
 800b658:	9105      	str	r1, [sp, #20]
 800b65a:	e7c4      	b.n	800b5e6 <_vfiprintf_r+0x15a>
 800b65c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b660:	4604      	mov	r4, r0
 800b662:	2301      	movs	r3, #1
 800b664:	e7f0      	b.n	800b648 <_vfiprintf_r+0x1bc>
 800b666:	ab03      	add	r3, sp, #12
 800b668:	9300      	str	r3, [sp, #0]
 800b66a:	462a      	mov	r2, r5
 800b66c:	4b12      	ldr	r3, [pc, #72]	; (800b6b8 <_vfiprintf_r+0x22c>)
 800b66e:	a904      	add	r1, sp, #16
 800b670:	4630      	mov	r0, r6
 800b672:	f3af 8000 	nop.w
 800b676:	4607      	mov	r7, r0
 800b678:	1c78      	adds	r0, r7, #1
 800b67a:	d1d6      	bne.n	800b62a <_vfiprintf_r+0x19e>
 800b67c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b67e:	07d9      	lsls	r1, r3, #31
 800b680:	d405      	bmi.n	800b68e <_vfiprintf_r+0x202>
 800b682:	89ab      	ldrh	r3, [r5, #12]
 800b684:	059a      	lsls	r2, r3, #22
 800b686:	d402      	bmi.n	800b68e <_vfiprintf_r+0x202>
 800b688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b68a:	f7ff f99f 	bl	800a9cc <__retarget_lock_release_recursive>
 800b68e:	89ab      	ldrh	r3, [r5, #12]
 800b690:	065b      	lsls	r3, r3, #25
 800b692:	f53f af1d 	bmi.w	800b4d0 <_vfiprintf_r+0x44>
 800b696:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b698:	e71c      	b.n	800b4d4 <_vfiprintf_r+0x48>
 800b69a:	ab03      	add	r3, sp, #12
 800b69c:	9300      	str	r3, [sp, #0]
 800b69e:	462a      	mov	r2, r5
 800b6a0:	4b05      	ldr	r3, [pc, #20]	; (800b6b8 <_vfiprintf_r+0x22c>)
 800b6a2:	a904      	add	r1, sp, #16
 800b6a4:	4630      	mov	r0, r6
 800b6a6:	f7ff fc77 	bl	800af98 <_printf_i>
 800b6aa:	e7e4      	b.n	800b676 <_vfiprintf_r+0x1ea>
 800b6ac:	0800bd76 	.word	0x0800bd76
 800b6b0:	0800bd80 	.word	0x0800bd80
 800b6b4:	00000000 	.word	0x00000000
 800b6b8:	0800b467 	.word	0x0800b467
 800b6bc:	0800bd7c 	.word	0x0800bd7c

0800b6c0 <__swbuf_r>:
 800b6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c2:	460e      	mov	r6, r1
 800b6c4:	4614      	mov	r4, r2
 800b6c6:	4605      	mov	r5, r0
 800b6c8:	b118      	cbz	r0, 800b6d2 <__swbuf_r+0x12>
 800b6ca:	6a03      	ldr	r3, [r0, #32]
 800b6cc:	b90b      	cbnz	r3, 800b6d2 <__swbuf_r+0x12>
 800b6ce:	f7fe fff9 	bl	800a6c4 <__sinit>
 800b6d2:	69a3      	ldr	r3, [r4, #24]
 800b6d4:	60a3      	str	r3, [r4, #8]
 800b6d6:	89a3      	ldrh	r3, [r4, #12]
 800b6d8:	071a      	lsls	r2, r3, #28
 800b6da:	d525      	bpl.n	800b728 <__swbuf_r+0x68>
 800b6dc:	6923      	ldr	r3, [r4, #16]
 800b6de:	b31b      	cbz	r3, 800b728 <__swbuf_r+0x68>
 800b6e0:	6823      	ldr	r3, [r4, #0]
 800b6e2:	6922      	ldr	r2, [r4, #16]
 800b6e4:	1a98      	subs	r0, r3, r2
 800b6e6:	6963      	ldr	r3, [r4, #20]
 800b6e8:	b2f6      	uxtb	r6, r6
 800b6ea:	4283      	cmp	r3, r0
 800b6ec:	4637      	mov	r7, r6
 800b6ee:	dc04      	bgt.n	800b6fa <__swbuf_r+0x3a>
 800b6f0:	4621      	mov	r1, r4
 800b6f2:	4628      	mov	r0, r5
 800b6f4:	f7ff fdf8 	bl	800b2e8 <_fflush_r>
 800b6f8:	b9e0      	cbnz	r0, 800b734 <__swbuf_r+0x74>
 800b6fa:	68a3      	ldr	r3, [r4, #8]
 800b6fc:	3b01      	subs	r3, #1
 800b6fe:	60a3      	str	r3, [r4, #8]
 800b700:	6823      	ldr	r3, [r4, #0]
 800b702:	1c5a      	adds	r2, r3, #1
 800b704:	6022      	str	r2, [r4, #0]
 800b706:	701e      	strb	r6, [r3, #0]
 800b708:	6962      	ldr	r2, [r4, #20]
 800b70a:	1c43      	adds	r3, r0, #1
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d004      	beq.n	800b71a <__swbuf_r+0x5a>
 800b710:	89a3      	ldrh	r3, [r4, #12]
 800b712:	07db      	lsls	r3, r3, #31
 800b714:	d506      	bpl.n	800b724 <__swbuf_r+0x64>
 800b716:	2e0a      	cmp	r6, #10
 800b718:	d104      	bne.n	800b724 <__swbuf_r+0x64>
 800b71a:	4621      	mov	r1, r4
 800b71c:	4628      	mov	r0, r5
 800b71e:	f7ff fde3 	bl	800b2e8 <_fflush_r>
 800b722:	b938      	cbnz	r0, 800b734 <__swbuf_r+0x74>
 800b724:	4638      	mov	r0, r7
 800b726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b728:	4621      	mov	r1, r4
 800b72a:	4628      	mov	r0, r5
 800b72c:	f000 f806 	bl	800b73c <__swsetup_r>
 800b730:	2800      	cmp	r0, #0
 800b732:	d0d5      	beq.n	800b6e0 <__swbuf_r+0x20>
 800b734:	f04f 37ff 	mov.w	r7, #4294967295
 800b738:	e7f4      	b.n	800b724 <__swbuf_r+0x64>
	...

0800b73c <__swsetup_r>:
 800b73c:	b538      	push	{r3, r4, r5, lr}
 800b73e:	4b2a      	ldr	r3, [pc, #168]	; (800b7e8 <__swsetup_r+0xac>)
 800b740:	4605      	mov	r5, r0
 800b742:	6818      	ldr	r0, [r3, #0]
 800b744:	460c      	mov	r4, r1
 800b746:	b118      	cbz	r0, 800b750 <__swsetup_r+0x14>
 800b748:	6a03      	ldr	r3, [r0, #32]
 800b74a:	b90b      	cbnz	r3, 800b750 <__swsetup_r+0x14>
 800b74c:	f7fe ffba 	bl	800a6c4 <__sinit>
 800b750:	89a3      	ldrh	r3, [r4, #12]
 800b752:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b756:	0718      	lsls	r0, r3, #28
 800b758:	d422      	bmi.n	800b7a0 <__swsetup_r+0x64>
 800b75a:	06d9      	lsls	r1, r3, #27
 800b75c:	d407      	bmi.n	800b76e <__swsetup_r+0x32>
 800b75e:	2309      	movs	r3, #9
 800b760:	602b      	str	r3, [r5, #0]
 800b762:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b766:	81a3      	strh	r3, [r4, #12]
 800b768:	f04f 30ff 	mov.w	r0, #4294967295
 800b76c:	e034      	b.n	800b7d8 <__swsetup_r+0x9c>
 800b76e:	0758      	lsls	r0, r3, #29
 800b770:	d512      	bpl.n	800b798 <__swsetup_r+0x5c>
 800b772:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b774:	b141      	cbz	r1, 800b788 <__swsetup_r+0x4c>
 800b776:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b77a:	4299      	cmp	r1, r3
 800b77c:	d002      	beq.n	800b784 <__swsetup_r+0x48>
 800b77e:	4628      	mov	r0, r5
 800b780:	f7ff f944 	bl	800aa0c <_free_r>
 800b784:	2300      	movs	r3, #0
 800b786:	6363      	str	r3, [r4, #52]	; 0x34
 800b788:	89a3      	ldrh	r3, [r4, #12]
 800b78a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b78e:	81a3      	strh	r3, [r4, #12]
 800b790:	2300      	movs	r3, #0
 800b792:	6063      	str	r3, [r4, #4]
 800b794:	6923      	ldr	r3, [r4, #16]
 800b796:	6023      	str	r3, [r4, #0]
 800b798:	89a3      	ldrh	r3, [r4, #12]
 800b79a:	f043 0308 	orr.w	r3, r3, #8
 800b79e:	81a3      	strh	r3, [r4, #12]
 800b7a0:	6923      	ldr	r3, [r4, #16]
 800b7a2:	b94b      	cbnz	r3, 800b7b8 <__swsetup_r+0x7c>
 800b7a4:	89a3      	ldrh	r3, [r4, #12]
 800b7a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b7aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7ae:	d003      	beq.n	800b7b8 <__swsetup_r+0x7c>
 800b7b0:	4621      	mov	r1, r4
 800b7b2:	4628      	mov	r0, r5
 800b7b4:	f000 f88c 	bl	800b8d0 <__smakebuf_r>
 800b7b8:	89a0      	ldrh	r0, [r4, #12]
 800b7ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7be:	f010 0301 	ands.w	r3, r0, #1
 800b7c2:	d00a      	beq.n	800b7da <__swsetup_r+0x9e>
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	60a3      	str	r3, [r4, #8]
 800b7c8:	6963      	ldr	r3, [r4, #20]
 800b7ca:	425b      	negs	r3, r3
 800b7cc:	61a3      	str	r3, [r4, #24]
 800b7ce:	6923      	ldr	r3, [r4, #16]
 800b7d0:	b943      	cbnz	r3, 800b7e4 <__swsetup_r+0xa8>
 800b7d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b7d6:	d1c4      	bne.n	800b762 <__swsetup_r+0x26>
 800b7d8:	bd38      	pop	{r3, r4, r5, pc}
 800b7da:	0781      	lsls	r1, r0, #30
 800b7dc:	bf58      	it	pl
 800b7de:	6963      	ldrpl	r3, [r4, #20]
 800b7e0:	60a3      	str	r3, [r4, #8]
 800b7e2:	e7f4      	b.n	800b7ce <__swsetup_r+0x92>
 800b7e4:	2000      	movs	r0, #0
 800b7e6:	e7f7      	b.n	800b7d8 <__swsetup_r+0x9c>
 800b7e8:	2000012c 	.word	0x2000012c

0800b7ec <_raise_r>:
 800b7ec:	291f      	cmp	r1, #31
 800b7ee:	b538      	push	{r3, r4, r5, lr}
 800b7f0:	4604      	mov	r4, r0
 800b7f2:	460d      	mov	r5, r1
 800b7f4:	d904      	bls.n	800b800 <_raise_r+0x14>
 800b7f6:	2316      	movs	r3, #22
 800b7f8:	6003      	str	r3, [r0, #0]
 800b7fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b7fe:	bd38      	pop	{r3, r4, r5, pc}
 800b800:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b802:	b112      	cbz	r2, 800b80a <_raise_r+0x1e>
 800b804:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b808:	b94b      	cbnz	r3, 800b81e <_raise_r+0x32>
 800b80a:	4620      	mov	r0, r4
 800b80c:	f000 f830 	bl	800b870 <_getpid_r>
 800b810:	462a      	mov	r2, r5
 800b812:	4601      	mov	r1, r0
 800b814:	4620      	mov	r0, r4
 800b816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b81a:	f000 b817 	b.w	800b84c <_kill_r>
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d00a      	beq.n	800b838 <_raise_r+0x4c>
 800b822:	1c59      	adds	r1, r3, #1
 800b824:	d103      	bne.n	800b82e <_raise_r+0x42>
 800b826:	2316      	movs	r3, #22
 800b828:	6003      	str	r3, [r0, #0]
 800b82a:	2001      	movs	r0, #1
 800b82c:	e7e7      	b.n	800b7fe <_raise_r+0x12>
 800b82e:	2400      	movs	r4, #0
 800b830:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b834:	4628      	mov	r0, r5
 800b836:	4798      	blx	r3
 800b838:	2000      	movs	r0, #0
 800b83a:	e7e0      	b.n	800b7fe <_raise_r+0x12>

0800b83c <raise>:
 800b83c:	4b02      	ldr	r3, [pc, #8]	; (800b848 <raise+0xc>)
 800b83e:	4601      	mov	r1, r0
 800b840:	6818      	ldr	r0, [r3, #0]
 800b842:	f7ff bfd3 	b.w	800b7ec <_raise_r>
 800b846:	bf00      	nop
 800b848:	2000012c 	.word	0x2000012c

0800b84c <_kill_r>:
 800b84c:	b538      	push	{r3, r4, r5, lr}
 800b84e:	4d07      	ldr	r5, [pc, #28]	; (800b86c <_kill_r+0x20>)
 800b850:	2300      	movs	r3, #0
 800b852:	4604      	mov	r4, r0
 800b854:	4608      	mov	r0, r1
 800b856:	4611      	mov	r1, r2
 800b858:	602b      	str	r3, [r5, #0]
 800b85a:	f7f6 f831 	bl	80018c0 <_kill>
 800b85e:	1c43      	adds	r3, r0, #1
 800b860:	d102      	bne.n	800b868 <_kill_r+0x1c>
 800b862:	682b      	ldr	r3, [r5, #0]
 800b864:	b103      	cbz	r3, 800b868 <_kill_r+0x1c>
 800b866:	6023      	str	r3, [r4, #0]
 800b868:	bd38      	pop	{r3, r4, r5, pc}
 800b86a:	bf00      	nop
 800b86c:	20000748 	.word	0x20000748

0800b870 <_getpid_r>:
 800b870:	f7f6 b81e 	b.w	80018b0 <_getpid>

0800b874 <_malloc_usable_size_r>:
 800b874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b878:	1f18      	subs	r0, r3, #4
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	bfbc      	itt	lt
 800b87e:	580b      	ldrlt	r3, [r1, r0]
 800b880:	18c0      	addlt	r0, r0, r3
 800b882:	4770      	bx	lr

0800b884 <__swhatbuf_r>:
 800b884:	b570      	push	{r4, r5, r6, lr}
 800b886:	460c      	mov	r4, r1
 800b888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b88c:	2900      	cmp	r1, #0
 800b88e:	b096      	sub	sp, #88	; 0x58
 800b890:	4615      	mov	r5, r2
 800b892:	461e      	mov	r6, r3
 800b894:	da0d      	bge.n	800b8b2 <__swhatbuf_r+0x2e>
 800b896:	89a3      	ldrh	r3, [r4, #12]
 800b898:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b89c:	f04f 0100 	mov.w	r1, #0
 800b8a0:	bf0c      	ite	eq
 800b8a2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b8a6:	2340      	movne	r3, #64	; 0x40
 800b8a8:	2000      	movs	r0, #0
 800b8aa:	6031      	str	r1, [r6, #0]
 800b8ac:	602b      	str	r3, [r5, #0]
 800b8ae:	b016      	add	sp, #88	; 0x58
 800b8b0:	bd70      	pop	{r4, r5, r6, pc}
 800b8b2:	466a      	mov	r2, sp
 800b8b4:	f000 f848 	bl	800b948 <_fstat_r>
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	dbec      	blt.n	800b896 <__swhatbuf_r+0x12>
 800b8bc:	9901      	ldr	r1, [sp, #4]
 800b8be:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b8c2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b8c6:	4259      	negs	r1, r3
 800b8c8:	4159      	adcs	r1, r3
 800b8ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8ce:	e7eb      	b.n	800b8a8 <__swhatbuf_r+0x24>

0800b8d0 <__smakebuf_r>:
 800b8d0:	898b      	ldrh	r3, [r1, #12]
 800b8d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8d4:	079d      	lsls	r5, r3, #30
 800b8d6:	4606      	mov	r6, r0
 800b8d8:	460c      	mov	r4, r1
 800b8da:	d507      	bpl.n	800b8ec <__smakebuf_r+0x1c>
 800b8dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8e0:	6023      	str	r3, [r4, #0]
 800b8e2:	6123      	str	r3, [r4, #16]
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	6163      	str	r3, [r4, #20]
 800b8e8:	b002      	add	sp, #8
 800b8ea:	bd70      	pop	{r4, r5, r6, pc}
 800b8ec:	ab01      	add	r3, sp, #4
 800b8ee:	466a      	mov	r2, sp
 800b8f0:	f7ff ffc8 	bl	800b884 <__swhatbuf_r>
 800b8f4:	9900      	ldr	r1, [sp, #0]
 800b8f6:	4605      	mov	r5, r0
 800b8f8:	4630      	mov	r0, r6
 800b8fa:	f7ff f8fb 	bl	800aaf4 <_malloc_r>
 800b8fe:	b948      	cbnz	r0, 800b914 <__smakebuf_r+0x44>
 800b900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b904:	059a      	lsls	r2, r3, #22
 800b906:	d4ef      	bmi.n	800b8e8 <__smakebuf_r+0x18>
 800b908:	f023 0303 	bic.w	r3, r3, #3
 800b90c:	f043 0302 	orr.w	r3, r3, #2
 800b910:	81a3      	strh	r3, [r4, #12]
 800b912:	e7e3      	b.n	800b8dc <__smakebuf_r+0xc>
 800b914:	89a3      	ldrh	r3, [r4, #12]
 800b916:	6020      	str	r0, [r4, #0]
 800b918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b91c:	81a3      	strh	r3, [r4, #12]
 800b91e:	9b00      	ldr	r3, [sp, #0]
 800b920:	6163      	str	r3, [r4, #20]
 800b922:	9b01      	ldr	r3, [sp, #4]
 800b924:	6120      	str	r0, [r4, #16]
 800b926:	b15b      	cbz	r3, 800b940 <__smakebuf_r+0x70>
 800b928:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b92c:	4630      	mov	r0, r6
 800b92e:	f000 f81d 	bl	800b96c <_isatty_r>
 800b932:	b128      	cbz	r0, 800b940 <__smakebuf_r+0x70>
 800b934:	89a3      	ldrh	r3, [r4, #12]
 800b936:	f023 0303 	bic.w	r3, r3, #3
 800b93a:	f043 0301 	orr.w	r3, r3, #1
 800b93e:	81a3      	strh	r3, [r4, #12]
 800b940:	89a3      	ldrh	r3, [r4, #12]
 800b942:	431d      	orrs	r5, r3
 800b944:	81a5      	strh	r5, [r4, #12]
 800b946:	e7cf      	b.n	800b8e8 <__smakebuf_r+0x18>

0800b948 <_fstat_r>:
 800b948:	b538      	push	{r3, r4, r5, lr}
 800b94a:	4d07      	ldr	r5, [pc, #28]	; (800b968 <_fstat_r+0x20>)
 800b94c:	2300      	movs	r3, #0
 800b94e:	4604      	mov	r4, r0
 800b950:	4608      	mov	r0, r1
 800b952:	4611      	mov	r1, r2
 800b954:	602b      	str	r3, [r5, #0]
 800b956:	f7f6 f812 	bl	800197e <_fstat>
 800b95a:	1c43      	adds	r3, r0, #1
 800b95c:	d102      	bne.n	800b964 <_fstat_r+0x1c>
 800b95e:	682b      	ldr	r3, [r5, #0]
 800b960:	b103      	cbz	r3, 800b964 <_fstat_r+0x1c>
 800b962:	6023      	str	r3, [r4, #0]
 800b964:	bd38      	pop	{r3, r4, r5, pc}
 800b966:	bf00      	nop
 800b968:	20000748 	.word	0x20000748

0800b96c <_isatty_r>:
 800b96c:	b538      	push	{r3, r4, r5, lr}
 800b96e:	4d06      	ldr	r5, [pc, #24]	; (800b988 <_isatty_r+0x1c>)
 800b970:	2300      	movs	r3, #0
 800b972:	4604      	mov	r4, r0
 800b974:	4608      	mov	r0, r1
 800b976:	602b      	str	r3, [r5, #0]
 800b978:	f7f6 f811 	bl	800199e <_isatty>
 800b97c:	1c43      	adds	r3, r0, #1
 800b97e:	d102      	bne.n	800b986 <_isatty_r+0x1a>
 800b980:	682b      	ldr	r3, [r5, #0]
 800b982:	b103      	cbz	r3, 800b986 <_isatty_r+0x1a>
 800b984:	6023      	str	r3, [r4, #0]
 800b986:	bd38      	pop	{r3, r4, r5, pc}
 800b988:	20000748 	.word	0x20000748

0800b98c <_init>:
 800b98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b98e:	bf00      	nop
 800b990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b992:	bc08      	pop	{r3}
 800b994:	469e      	mov	lr, r3
 800b996:	4770      	bx	lr

0800b998 <_fini>:
 800b998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b99a:	bf00      	nop
 800b99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b99e:	bc08      	pop	{r3}
 800b9a0:	469e      	mov	lr, r3
 800b9a2:	4770      	bx	lr
